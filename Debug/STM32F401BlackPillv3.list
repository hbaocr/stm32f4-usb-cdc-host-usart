
STM32F401BlackPillv3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08009564  08009564  00019564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096b4  080096b4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080096b4  080096b4  000196b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096bc  080096bc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096bc  080096bc  000196bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096c0  080096c0  000196c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080096c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a30  20000090  08009754  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ac0  08009754  00020ac0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c09  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003342  00000000  00000000  00033cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  00037010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d00  00000000  00000000  00037e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019334  00000000  00000000  00038b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000127ad  00000000  00000000  00051e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c004  00000000  00000000  00064629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f062d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004308  00000000  00000000  000f0680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800954c 	.word	0x0800954c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	0800954c 	.word	0x0800954c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <HAL_UARTEx_RxEventCallback>:
  * @brief  The application entry point.
  * @retval int
  */

// call back when uart irq
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	460b      	mov	r3, r1
 800058e:	807b      	strh	r3, [r7, #2]
	if(huart->Instance==USART1){
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0d      	ldr	r2, [pc, #52]	; (80005cc <HAL_UARTEx_RxEventCallback+0x48>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d113      	bne.n	80005c2 <HAL_UARTEx_RxEventCallback+0x3e>
//		rxUartSize=Size;

		//HAL_UART_Transmit_DMA(&huart1, rxUartBuff, rxUartSize);

		 /* Add array to ring */
		 ring_buffer_queue_arr(&uart_rx_ringbuff_hdl,dma_uart_rx_buff,Size);
 800059a:	887b      	ldrh	r3, [r7, #2]
 800059c:	461a      	mov	r2, r3
 800059e:	490c      	ldr	r1, [pc, #48]	; (80005d0 <HAL_UARTEx_RxEventCallback+0x4c>)
 80005a0:	480c      	ldr	r0, [pc, #48]	; (80005d4 <HAL_UARTEx_RxEventCallback+0x50>)
 80005a2:	f000 f9ca 	bl	800093a <ring_buffer_queue_arr>

		//enable again

		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, dma_uart_rx_buff, sizeof(dma_uart_rx_buff));// enable all irq related to
 80005a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005aa:	4909      	ldr	r1, [pc, #36]	; (80005d0 <HAL_UARTEx_RxEventCallback+0x4c>)
 80005ac:	480a      	ldr	r0, [pc, #40]	; (80005d8 <HAL_UARTEx_RxEventCallback+0x54>)
 80005ae:	f003 fc0a 	bl	8003dc6 <HAL_UARTEx_ReceiveToIdle_DMA>
		  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);// dsiable half buffer dma irq
 80005b2:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <HAL_UARTEx_RxEventCallback+0x58>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <HAL_UARTEx_RxEventCallback+0x58>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f022 0208 	bic.w	r2, r2, #8
 80005c0:	601a      	str	r2, [r3, #0]


	}

}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40011000 	.word	0x40011000
 80005d0:	200000c4 	.word	0x200000c4
 80005d4:	200000ac 	.word	0x200000ac
 80005d8:	200002c4 	.word	0x200002c4
 80005dc:	20000308 	.word	0x20000308

080005e0 <main>:

int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 fbf8 	bl	8000dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f828 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 f8e4 	bl	80007b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005f0:	f000 f8ba 	bl	8000768 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80005f4:	f000 f88e 	bl	8000714 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80005f8:	f007 fca0 	bl	8007f3c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  ring_buffer_init(&uart_rx_ringbuff_hdl, uart_rx_ringbuff_memory, sizeof(uart_rx_ringbuff_memory));
 80005fc:	2208      	movs	r2, #8
 80005fe:	490a      	ldr	r1, [pc, #40]	; (8000628 <main+0x48>)
 8000600:	480a      	ldr	r0, [pc, #40]	; (800062c <main+0x4c>)
 8000602:	f000 f949 	bl	8000898 <ring_buffer_init>

  //whenever the dma buffer is full or the tx line is idle for one frame time ( 1 byte time) --> the uart irq will be call
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, dma_uart_rx_buff, sizeof(dma_uart_rx_buff));// enable all irq related to
 8000606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800060a:	4909      	ldr	r1, [pc, #36]	; (8000630 <main+0x50>)
 800060c:	4809      	ldr	r0, [pc, #36]	; (8000634 <main+0x54>)
 800060e:	f003 fbda 	bl	8003dc6 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);// dsiable half buffer dma irq
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <main+0x58>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b07      	ldr	r3, [pc, #28]	; (8000638 <main+0x58>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f022 0208 	bic.w	r2, r2, #8
 8000620:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000622:	f007 fcb1 	bl	8007f88 <MX_USB_HOST_Process>
 8000626:	e7fc      	b.n	8000622 <main+0x42>
 8000628:	200000bc 	.word	0x200000bc
 800062c:	200000ac 	.word	0x200000ac
 8000630:	200000c4 	.word	0x200000c4
 8000634:	200002c4 	.word	0x200002c4
 8000638:	20000308 	.word	0x20000308

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2230      	movs	r2, #48	; 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f007 ffb4 	bl	80085b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4b29      	ldr	r3, [pc, #164]	; (800070c <SystemClock_Config+0xd0>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	4a28      	ldr	r2, [pc, #160]	; (800070c <SystemClock_Config+0xd0>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
 8000670:	4b26      	ldr	r3, [pc, #152]	; (800070c <SystemClock_Config+0xd0>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b23      	ldr	r3, [pc, #140]	; (8000710 <SystemClock_Config+0xd4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <SystemClock_Config+0xd4>)
 800068a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <SystemClock_Config+0xd4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069c:	2301      	movs	r3, #1
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006b0:	2319      	movs	r3, #25
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ba:	2304      	movs	r3, #4
 80006bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006be:	2307      	movs	r3, #7
 80006c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 fed8 	bl	800347c <HAL_RCC_OscConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006d2:	f000 f8c3 	bl	800085c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	230f      	movs	r3, #15
 80006d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006da:	2302      	movs	r3, #2
 80006dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2102      	movs	r1, #2
 80006f2:	4618      	mov	r0, r3
 80006f4:	f003 f93a 	bl	800396c <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006fe:	f000 f8ad 	bl	800085c <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	; 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_USART1_UART_Init+0x4c>)
 800071a:	4a12      	ldr	r2, [pc, #72]	; (8000764 <MX_USART1_UART_Init+0x50>)
 800071c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_USART1_UART_Init+0x4c>)
 8000720:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000724:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_USART1_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_USART1_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_USART1_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_USART1_UART_Init+0x4c>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_USART1_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_USART1_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_USART1_UART_Init+0x4c>)
 800074c:	f003 faee 	bl	8003d2c <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000756:	f000 f881 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200002c4 	.word	0x200002c4
 8000764:	40011000 	.word	0x40011000

08000768 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_DMA_Init+0x4c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a0f      	ldr	r2, [pc, #60]	; (80007b4 <MX_DMA_Init+0x4c>)
 8000778:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <MX_DMA_Init+0x4c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	203a      	movs	r0, #58	; 0x3a
 8000790:	f000 fc93 	bl	80010ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000794:	203a      	movs	r0, #58	; 0x3a
 8000796:	f000 fcac 	bl	80010f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	2046      	movs	r0, #70	; 0x46
 80007a0:	f000 fc8b 	bl	80010ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80007a4:	2046      	movs	r0, #70	; 0x46
 80007a6:	f000 fca4 	bl	80010f2 <HAL_NVIC_EnableIRQ>

}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	4b20      	ldr	r3, [pc, #128]	; (8000854 <MX_GPIO_Init+0x9c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a1f      	ldr	r2, [pc, #124]	; (8000854 <MX_GPIO_Init+0x9c>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <MX_GPIO_Init+0x9c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b19      	ldr	r3, [pc, #100]	; (8000854 <MX_GPIO_Init+0x9c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a18      	ldr	r2, [pc, #96]	; (8000854 <MX_GPIO_Init+0x9c>)
 80007f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <MX_GPIO_Init+0x9c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b12      	ldr	r3, [pc, #72]	; (8000854 <MX_GPIO_Init+0x9c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a11      	ldr	r2, [pc, #68]	; (8000854 <MX_GPIO_Init+0x9c>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_GPIO_Init+0x9c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000828:	480b      	ldr	r0, [pc, #44]	; (8000858 <MX_GPIO_Init+0xa0>)
 800082a:	f001 fa03 	bl	8001c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800082e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000832:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	2301      	movs	r3, #1
 8000836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	4619      	mov	r1, r3
 8000846:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_GPIO_Init+0xa0>)
 8000848:	f001 f870 	bl	800192c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800084c:	bf00      	nop
 800084e:	3720      	adds	r7, #32
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40023800 	.word	0x40023800
 8000858:	40020800 	.word	0x40020800

0800085c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000860:	b672      	cpsid	i
}
 8000862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000864:	e7fe      	b.n	8000864 <Error_Handler+0x8>

08000866 <ring_buffer_is_full>:
/**
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
 8000866:	b480      	push	{r7}
 8000868:	b083      	sub	sp, #12
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK(buffer)) == RING_BUFFER_MASK(buffer);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	68da      	ldr	r2, [r3, #12]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	401a      	ands	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	429a      	cmp	r2, r3
 8000884:	bf0c      	ite	eq
 8000886:	2301      	moveq	r3, #1
 8000888:	2300      	movne	r3, #0
 800088a:	b2db      	uxtb	r3, r3
}
 800088c:	4618      	mov	r0, r3
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <ring_buffer_init>:
/**
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer, char *buf, size_t buf_size) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
  RING_BUFFER_ASSERT(RING_BUFFER_IS_POWER_OF_TWO(buf_size) == 1);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	1e5a      	subs	r2, r3, #1
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4013      	ands	r3, r2
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d005      	beq.n	80008bc <ring_buffer_init+0x24>
 80008b0:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <ring_buffer_init+0x48>)
 80008b2:	4a0c      	ldr	r2, [pc, #48]	; (80008e4 <ring_buffer_init+0x4c>)
 80008b4:	2111      	movs	r1, #17
 80008b6:	480c      	ldr	r0, [pc, #48]	; (80008e8 <ring_buffer_init+0x50>)
 80008b8:	f007 fe14 	bl	80084e4 <__assert_func>
  buffer->buffer = buf;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	601a      	str	r2, [r3, #0]
  buffer->buffer_mask = buf_size - 1;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	1e5a      	subs	r2, r3, #1
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	605a      	str	r2, [r3, #4]
  buffer->tail_index = 0;
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  buffer->head_index = 0;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
}
 80008d6:	bf00      	nop
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	08009564 	.word	0x08009564
 80008e4:	080095ac 	.word	0x080095ac
 80008e8:	0800958c 	.word	0x0800958c

080008ec <ring_buffer_queue>:

void ring_buffer_queue(ring_buffer_t *buffer, char data) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	460b      	mov	r3, r1
 80008f6:	70fb      	strb	r3, [r7, #3]
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer)) {
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f7ff ffb4 	bl	8000866 <ring_buffer_is_full>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d007      	beq.n	8000914 <ring_buffer_queue+0x28>
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK(buffer));
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	1c5a      	adds	r2, r3, #1
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	401a      	ands	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	609a      	str	r2, [r3, #8]
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	4413      	add	r3, r2
 800091e:	78fa      	ldrb	r2, [r7, #3]
 8000920:	701a      	strb	r2, [r3, #0]
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK(buffer));
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	68db      	ldr	r3, [r3, #12]
 8000926:	1c5a      	adds	r2, r3, #1
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	401a      	ands	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	60da      	str	r2, [r3, #12]
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <ring_buffer_queue_arr>:

void ring_buffer_queue_arr(ring_buffer_t *buffer, const char *data, ring_buffer_size_t size) {
 800093a:	b580      	push	{r7, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af00      	add	r7, sp, #0
 8000940:	60f8      	str	r0, [r7, #12]
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
  /* Add bytes; one by one */
  ring_buffer_size_t i;
  for(i = 0; i < size; i++) {
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
 800094a:	e00a      	b.n	8000962 <ring_buffer_queue_arr+0x28>
    ring_buffer_queue(buffer, data[i]);
 800094c:	68ba      	ldr	r2, [r7, #8]
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	4413      	add	r3, r2
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	4619      	mov	r1, r3
 8000956:	68f8      	ldr	r0, [r7, #12]
 8000958:	f7ff ffc8 	bl	80008ec <ring_buffer_queue>
  for(i = 0; i < size; i++) {
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	3301      	adds	r3, #1
 8000960:	617b      	str	r3, [r7, #20]
 8000962:	697a      	ldr	r2, [r7, #20]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	429a      	cmp	r2, r3
 8000968:	d3f0      	bcc.n	800094c <ring_buffer_queue_arr+0x12>
  }
}
 800096a:	bf00      	nop
 800096c:	bf00      	nop
 800096e:	3718      	adds	r7, #24
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <HAL_MspInit+0x4c>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	4a0f      	ldr	r2, [pc, #60]	; (80009c0 <HAL_MspInit+0x4c>)
 8000984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000988:	6453      	str	r3, [r2, #68]	; 0x44
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <HAL_MspInit+0x4c>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <HAL_MspInit+0x4c>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <HAL_MspInit+0x4c>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a4:	6413      	str	r3, [r2, #64]	; 0x40
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800

080009c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	; 0x28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a4c      	ldr	r2, [pc, #304]	; (8000b14 <HAL_UART_MspInit+0x150>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	f040 8091 	bne.w	8000b0a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009e8:	2300      	movs	r3, #0
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	4b4a      	ldr	r3, [pc, #296]	; (8000b18 <HAL_UART_MspInit+0x154>)
 80009ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f0:	4a49      	ldr	r2, [pc, #292]	; (8000b18 <HAL_UART_MspInit+0x154>)
 80009f2:	f043 0310 	orr.w	r3, r3, #16
 80009f6:	6453      	str	r3, [r2, #68]	; 0x44
 80009f8:	4b47      	ldr	r3, [pc, #284]	; (8000b18 <HAL_UART_MspInit+0x154>)
 80009fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fc:	f003 0310 	and.w	r3, r3, #16
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	4b43      	ldr	r3, [pc, #268]	; (8000b18 <HAL_UART_MspInit+0x154>)
 8000a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0c:	4a42      	ldr	r2, [pc, #264]	; (8000b18 <HAL_UART_MspInit+0x154>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	6313      	str	r3, [r2, #48]	; 0x30
 8000a14:	4b40      	ldr	r3, [pc, #256]	; (8000b18 <HAL_UART_MspInit+0x154>)
 8000a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a20:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a32:	2307      	movs	r3, #7
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4837      	ldr	r0, [pc, #220]	; (8000b1c <HAL_UART_MspInit+0x158>)
 8000a3e:	f000 ff75 	bl	800192c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000a42:	4b37      	ldr	r3, [pc, #220]	; (8000b20 <HAL_UART_MspInit+0x15c>)
 8000a44:	4a37      	ldr	r2, [pc, #220]	; (8000b24 <HAL_UART_MspInit+0x160>)
 8000a46:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000a48:	4b35      	ldr	r3, [pc, #212]	; (8000b20 <HAL_UART_MspInit+0x15c>)
 8000a4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a4e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a50:	4b33      	ldr	r3, [pc, #204]	; (8000b20 <HAL_UART_MspInit+0x15c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a56:	4b32      	ldr	r3, [pc, #200]	; (8000b20 <HAL_UART_MspInit+0x15c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a5c:	4b30      	ldr	r3, [pc, #192]	; (8000b20 <HAL_UART_MspInit+0x15c>)
 8000a5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a62:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a64:	4b2e      	ldr	r3, [pc, #184]	; (8000b20 <HAL_UART_MspInit+0x15c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a6a:	4b2d      	ldr	r3, [pc, #180]	; (8000b20 <HAL_UART_MspInit+0x15c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000a70:	4b2b      	ldr	r3, [pc, #172]	; (8000b20 <HAL_UART_MspInit+0x15c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a76:	4b2a      	ldr	r3, [pc, #168]	; (8000b20 <HAL_UART_MspInit+0x15c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a7c:	4b28      	ldr	r3, [pc, #160]	; (8000b20 <HAL_UART_MspInit+0x15c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a82:	4827      	ldr	r0, [pc, #156]	; (8000b20 <HAL_UART_MspInit+0x15c>)
 8000a84:	f000 fb50 	bl	8001128 <HAL_DMA_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000a8e:	f7ff fee5 	bl	800085c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a22      	ldr	r2, [pc, #136]	; (8000b20 <HAL_UART_MspInit+0x15c>)
 8000a96:	639a      	str	r2, [r3, #56]	; 0x38
 8000a98:	4a21      	ldr	r2, [pc, #132]	; (8000b20 <HAL_UART_MspInit+0x15c>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000a9e:	4b22      	ldr	r3, [pc, #136]	; (8000b28 <HAL_UART_MspInit+0x164>)
 8000aa0:	4a22      	ldr	r2, [pc, #136]	; (8000b2c <HAL_UART_MspInit+0x168>)
 8000aa2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000aa4:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <HAL_UART_MspInit+0x164>)
 8000aa6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aaa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000aac:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <HAL_UART_MspInit+0x164>)
 8000aae:	2240      	movs	r2, #64	; 0x40
 8000ab0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ab2:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <HAL_UART_MspInit+0x164>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <HAL_UART_MspInit+0x164>)
 8000aba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000abe:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ac0:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <HAL_UART_MspInit+0x164>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ac6:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <HAL_UART_MspInit+0x164>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000acc:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <HAL_UART_MspInit+0x164>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <HAL_UART_MspInit+0x164>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ad8:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <HAL_UART_MspInit+0x164>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000ade:	4812      	ldr	r0, [pc, #72]	; (8000b28 <HAL_UART_MspInit+0x164>)
 8000ae0:	f000 fb22 	bl	8001128 <HAL_DMA_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000aea:	f7ff feb7 	bl	800085c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <HAL_UART_MspInit+0x164>)
 8000af2:	635a      	str	r2, [r3, #52]	; 0x34
 8000af4:	4a0c      	ldr	r2, [pc, #48]	; (8000b28 <HAL_UART_MspInit+0x164>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	2025      	movs	r0, #37	; 0x25
 8000b00:	f000 fadb 	bl	80010ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b04:	2025      	movs	r0, #37	; 0x25
 8000b06:	f000 faf4 	bl	80010f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b0a:	bf00      	nop
 8000b0c:	3728      	adds	r7, #40	; 0x28
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40011000 	.word	0x40011000
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020000 	.word	0x40020000
 8000b20:	20000308 	.word	0x20000308
 8000b24:	40026440 	.word	0x40026440
 8000b28:	20000368 	.word	0x20000368
 8000b2c:	400264b8 	.word	0x400264b8

08000b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <NMI_Handler+0x4>

08000b36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <HardFault_Handler+0x4>

08000b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <MemManage_Handler+0x4>

08000b42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <BusFault_Handler+0x4>

08000b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <UsageFault_Handler+0x4>

08000b4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b7c:	f000 f97e 	bl	8000e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b88:	4802      	ldr	r0, [pc, #8]	; (8000b94 <USART1_IRQHandler+0x10>)
 8000b8a:	f003 f981 	bl	8003e90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200002c4 	.word	0x200002c4

08000b98 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <DMA2_Stream2_IRQHandler+0x10>)
 8000b9e:	f000 fc5b 	bl	8001458 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000308 	.word	0x20000308

08000bac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000bb0:	4802      	ldr	r0, [pc, #8]	; (8000bbc <OTG_FS_IRQHandler+0x10>)
 8000bb2:	f001 fac3 	bl	800213c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200007ac 	.word	0x200007ac

08000bc0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <DMA2_Stream7_IRQHandler+0x10>)
 8000bc6:	f000 fc47 	bl	8001458 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000368 	.word	0x20000368

08000bd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return 1;
 8000bd8:	2301      	movs	r3, #1
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <_kill>:

int _kill(int pid, int sig)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000bee:	f007 fc97 	bl	8008520 <__errno>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2216      	movs	r2, #22
 8000bf6:	601a      	str	r2, [r3, #0]
  return -1;
 8000bf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <_exit>:

void _exit (int status)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff ffe7 	bl	8000be4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c16:	e7fe      	b.n	8000c16 <_exit+0x12>

08000c18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	e00a      	b.n	8000c40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c2a:	f3af 8000 	nop.w
 8000c2e:	4601      	mov	r1, r0
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	1c5a      	adds	r2, r3, #1
 8000c34:	60ba      	str	r2, [r7, #8]
 8000c36:	b2ca      	uxtb	r2, r1
 8000c38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	dbf0      	blt.n	8000c2a <_read+0x12>
  }

  return len;
 8000c48:	687b      	ldr	r3, [r7, #4]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	60f8      	str	r0, [r7, #12]
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	e009      	b.n	8000c78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	60ba      	str	r2, [r7, #8]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	3301      	adds	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	dbf1      	blt.n	8000c64 <_write+0x12>
  }
  return len;
 8000c80:	687b      	ldr	r3, [r7, #4]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <_close>:

int _close(int file)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cb2:	605a      	str	r2, [r3, #4]
  return 0;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <_isatty>:

int _isatty(int file)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cca:	2301      	movs	r3, #1
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cfc:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <_sbrk+0x5c>)
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <_sbrk+0x60>)
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d08:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <_sbrk+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d102      	bne.n	8000d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <_sbrk+0x64>)
 8000d12:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <_sbrk+0x68>)
 8000d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d207      	bcs.n	8000d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d24:	f007 fbfc 	bl	8008520 <__errno>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d32:	e009      	b.n	8000d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <_sbrk+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3a:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <_sbrk+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <_sbrk+0x64>)
 8000d44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d46:	68fb      	ldr	r3, [r7, #12]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3718      	adds	r7, #24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20010000 	.word	0x20010000
 8000d54:	00000400 	.word	0x00000400
 8000d58:	200003c8 	.word	0x200003c8
 8000d5c:	20000ac0 	.word	0x20000ac0

08000d60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <SystemInit+0x20>)
 8000d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6a:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <SystemInit+0x20>)
 8000d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d88:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d8a:	490e      	ldr	r1, [pc, #56]	; (8000dc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d8c:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d90:	e002      	b.n	8000d98 <LoopCopyDataInit>

08000d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d96:	3304      	adds	r3, #4

08000d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d9c:	d3f9      	bcc.n	8000d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9e:	4a0b      	ldr	r2, [pc, #44]	; (8000dcc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000da0:	4c0b      	ldr	r4, [pc, #44]	; (8000dd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da4:	e001      	b.n	8000daa <LoopFillZerobss>

08000da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da8:	3204      	adds	r2, #4

08000daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dac:	d3fb      	bcc.n	8000da6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dae:	f7ff ffd7 	bl	8000d60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000db2:	f007 fbcd 	bl	8008550 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db6:	f7ff fc13 	bl	80005e0 <main>
  bx  lr    
 8000dba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dbc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000dc8:	080096c4 	.word	0x080096c4
  ldr r2, =_sbss
 8000dcc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000dd0:	20000ac0 	.word	0x20000ac0

08000dd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd4:	e7fe      	b.n	8000dd4 <ADC_IRQHandler>
	...

08000dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0d      	ldr	r2, [pc, #52]	; (8000e18 <HAL_Init+0x40>)
 8000de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de8:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <HAL_Init+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <HAL_Init+0x40>)
 8000dee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000df2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <HAL_Init+0x40>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a07      	ldr	r2, [pc, #28]	; (8000e18 <HAL_Init+0x40>)
 8000dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e00:	2003      	movs	r0, #3
 8000e02:	f000 f94f 	bl	80010a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e06:	200f      	movs	r0, #15
 8000e08:	f000 f808 	bl	8000e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e0c:	f7ff fdb2 	bl	8000974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40023c00 	.word	0x40023c00

08000e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <HAL_InitTick+0x54>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <HAL_InitTick+0x58>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 f967 	bl	800110e <HAL_SYSTICK_Config>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e00e      	b.n	8000e68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b0f      	cmp	r3, #15
 8000e4e:	d80a      	bhi.n	8000e66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e50:	2200      	movs	r2, #0
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e58:	f000 f92f 	bl	80010ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e5c:	4a06      	ldr	r2, [pc, #24]	; (8000e78 <HAL_InitTick+0x5c>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e62:	2300      	movs	r3, #0
 8000e64:	e000      	b.n	8000e68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000000 	.word	0x20000000
 8000e74:	20000008 	.word	0x20000008
 8000e78:	20000004 	.word	0x20000004

08000e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_IncTick+0x20>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x24>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <HAL_IncTick+0x24>)
 8000e8e:	6013      	str	r3, [r2, #0]
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	200003cc 	.word	0x200003cc

08000ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <HAL_GetTick+0x14>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	200003cc 	.word	0x200003cc

08000ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec4:	f7ff ffee 	bl	8000ea4 <HAL_GetTick>
 8000ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ed4:	d005      	beq.n	8000ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <HAL_Delay+0x44>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4413      	add	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ee2:	bf00      	nop
 8000ee4:	f7ff ffde 	bl	8000ea4 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d8f7      	bhi.n	8000ee4 <HAL_Delay+0x28>
  {
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000008 	.word	0x20000008

08000f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f20:	4013      	ands	r3, r2
 8000f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f36:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	60d3      	str	r3, [r2, #12]
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f50:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <__NVIC_GetPriorityGrouping+0x18>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	0a1b      	lsrs	r3, r3, #8
 8000f56:	f003 0307 	and.w	r3, r3, #7
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	db0b      	blt.n	8000f92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	f003 021f 	and.w	r2, r3, #31
 8000f80:	4907      	ldr	r1, [pc, #28]	; (8000fa0 <__NVIC_EnableIRQ+0x38>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	095b      	lsrs	r3, r3, #5
 8000f88:	2001      	movs	r0, #1
 8000f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000e100 	.word	0xe000e100

08000fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db0a      	blt.n	8000fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	490c      	ldr	r1, [pc, #48]	; (8000ff0 <__NVIC_SetPriority+0x4c>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	0112      	lsls	r2, r2, #4
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fcc:	e00a      	b.n	8000fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4908      	ldr	r1, [pc, #32]	; (8000ff4 <__NVIC_SetPriority+0x50>)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	3b04      	subs	r3, #4
 8000fdc:	0112      	lsls	r2, r2, #4
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	761a      	strb	r2, [r3, #24]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000e100 	.word	0xe000e100
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f1c3 0307 	rsb	r3, r3, #7
 8001012:	2b04      	cmp	r3, #4
 8001014:	bf28      	it	cs
 8001016:	2304      	movcs	r3, #4
 8001018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3304      	adds	r3, #4
 800101e:	2b06      	cmp	r3, #6
 8001020:	d902      	bls.n	8001028 <NVIC_EncodePriority+0x30>
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3b03      	subs	r3, #3
 8001026:	e000      	b.n	800102a <NVIC_EncodePriority+0x32>
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43da      	mvns	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001040:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43d9      	mvns	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	4313      	orrs	r3, r2
         );
}
 8001052:	4618      	mov	r0, r3
 8001054:	3724      	adds	r7, #36	; 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001070:	d301      	bcc.n	8001076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001072:	2301      	movs	r3, #1
 8001074:	e00f      	b.n	8001096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <SysTick_Config+0x40>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107e:	210f      	movs	r1, #15
 8001080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001084:	f7ff ff8e 	bl	8000fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <SysTick_Config+0x40>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108e:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <SysTick_Config+0x40>)
 8001090:	2207      	movs	r2, #7
 8001092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	e000e010 	.word	0xe000e010

080010a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff29 	bl	8000f04 <__NVIC_SetPriorityGrouping>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010cc:	f7ff ff3e 	bl	8000f4c <__NVIC_GetPriorityGrouping>
 80010d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	68b9      	ldr	r1, [r7, #8]
 80010d6:	6978      	ldr	r0, [r7, #20]
 80010d8:	f7ff ff8e 	bl	8000ff8 <NVIC_EncodePriority>
 80010dc:	4602      	mov	r2, r0
 80010de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff5d 	bl	8000fa4 <__NVIC_SetPriority>
}
 80010ea:	bf00      	nop
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff31 	bl	8000f68 <__NVIC_EnableIRQ>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff ffa2 	bl	8001060 <SysTick_Config>
 800111c:	4603      	mov	r3, r0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001134:	f7ff feb6 	bl	8000ea4 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d101      	bne.n	8001144 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e099      	b.n	8001278 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2202      	movs	r2, #2
 8001148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 0201 	bic.w	r2, r2, #1
 8001162:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001164:	e00f      	b.n	8001186 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001166:	f7ff fe9d 	bl	8000ea4 <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b05      	cmp	r3, #5
 8001172:	d908      	bls.n	8001186 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2220      	movs	r2, #32
 8001178:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2203      	movs	r2, #3
 800117e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e078      	b.n	8001278 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1e8      	bne.n	8001166 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	4b38      	ldr	r3, [pc, #224]	; (8001280 <HAL_DMA_Init+0x158>)
 80011a0:	4013      	ands	r3, r2
 80011a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011dc:	2b04      	cmp	r3, #4
 80011de:	d107      	bne.n	80011f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	4313      	orrs	r3, r2
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	f023 0307 	bic.w	r3, r3, #7
 8001206:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	4313      	orrs	r3, r2
 8001210:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001216:	2b04      	cmp	r3, #4
 8001218:	d117      	bne.n	800124a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	4313      	orrs	r3, r2
 8001222:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00e      	beq.n	800124a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 fb01 	bl	8001834 <DMA_CheckFifoParam>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d008      	beq.n	800124a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2240      	movs	r2, #64	; 0x40
 800123c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2201      	movs	r2, #1
 8001242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001246:	2301      	movs	r3, #1
 8001248:	e016      	b.n	8001278 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 fab8 	bl	80017c8 <DMA_CalcBaseAndBitshift>
 8001258:	4603      	mov	r3, r0
 800125a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001260:	223f      	movs	r2, #63	; 0x3f
 8001262:	409a      	lsls	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2201      	movs	r2, #1
 8001272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	f010803f 	.word	0xf010803f

08001284 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
 8001290:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001292:	2300      	movs	r3, #0
 8001294:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d101      	bne.n	80012aa <HAL_DMA_Start_IT+0x26>
 80012a6:	2302      	movs	r3, #2
 80012a8:	e040      	b.n	800132c <HAL_DMA_Start_IT+0xa8>
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2201      	movs	r2, #1
 80012ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d12f      	bne.n	800131e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2202      	movs	r2, #2
 80012c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2200      	movs	r2, #0
 80012ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	68b9      	ldr	r1, [r7, #8]
 80012d2:	68f8      	ldr	r0, [r7, #12]
 80012d4:	f000 fa4a 	bl	800176c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012dc:	223f      	movs	r2, #63	; 0x3f
 80012de:	409a      	lsls	r2, r3
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f042 0216 	orr.w	r2, r2, #22
 80012f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d007      	beq.n	800130c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f042 0208 	orr.w	r2, r2, #8
 800130a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 0201 	orr.w	r2, r2, #1
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	e005      	b.n	800132a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001326:	2302      	movs	r3, #2
 8001328:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800132a:	7dfb      	ldrb	r3, [r7, #23]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001342:	f7ff fdaf 	bl	8000ea4 <HAL_GetTick>
 8001346:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d008      	beq.n	8001366 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2280      	movs	r2, #128	; 0x80
 8001358:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e052      	b.n	800140c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f022 0216 	bic.w	r2, r2, #22
 8001374:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	695a      	ldr	r2, [r3, #20]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001384:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	2b00      	cmp	r3, #0
 800138c:	d103      	bne.n	8001396 <HAL_DMA_Abort+0x62>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001392:	2b00      	cmp	r3, #0
 8001394:	d007      	beq.n	80013a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 0208 	bic.w	r2, r2, #8
 80013a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f022 0201 	bic.w	r2, r2, #1
 80013b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013b6:	e013      	b.n	80013e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013b8:	f7ff fd74 	bl	8000ea4 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b05      	cmp	r3, #5
 80013c4:	d90c      	bls.n	80013e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2220      	movs	r2, #32
 80013ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2203      	movs	r2, #3
 80013d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e015      	b.n	800140c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1e4      	bne.n	80013b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f2:	223f      	movs	r2, #63	; 0x3f
 80013f4:	409a      	lsls	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2201      	movs	r2, #1
 80013fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d004      	beq.n	8001432 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e00c      	b.n	800144c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2205      	movs	r2, #5
 8001436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 0201 	bic.w	r2, r2, #1
 8001448:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001460:	2300      	movs	r3, #0
 8001462:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001464:	4b8e      	ldr	r3, [pc, #568]	; (80016a0 <HAL_DMA_IRQHandler+0x248>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a8e      	ldr	r2, [pc, #568]	; (80016a4 <HAL_DMA_IRQHandler+0x24c>)
 800146a:	fba2 2303 	umull	r2, r3, r2, r3
 800146e:	0a9b      	lsrs	r3, r3, #10
 8001470:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001476:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001482:	2208      	movs	r2, #8
 8001484:	409a      	lsls	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4013      	ands	r3, r2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d01a      	beq.n	80014c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b00      	cmp	r3, #0
 800149a:	d013      	beq.n	80014c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f022 0204 	bic.w	r2, r2, #4
 80014aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b0:	2208      	movs	r2, #8
 80014b2:	409a      	lsls	r2, r3
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014bc:	f043 0201 	orr.w	r2, r3, #1
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c8:	2201      	movs	r2, #1
 80014ca:	409a      	lsls	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4013      	ands	r3, r2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d012      	beq.n	80014fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00b      	beq.n	80014fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e6:	2201      	movs	r2, #1
 80014e8:	409a      	lsls	r2, r3
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f2:	f043 0202 	orr.w	r2, r3, #2
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fe:	2204      	movs	r2, #4
 8001500:	409a      	lsls	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4013      	ands	r3, r2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d012      	beq.n	8001530 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d00b      	beq.n	8001530 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151c:	2204      	movs	r2, #4
 800151e:	409a      	lsls	r2, r3
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001528:	f043 0204 	orr.w	r2, r3, #4
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001534:	2210      	movs	r2, #16
 8001536:	409a      	lsls	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4013      	ands	r3, r2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d043      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0308 	and.w	r3, r3, #8
 800154a:	2b00      	cmp	r3, #0
 800154c:	d03c      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001552:	2210      	movs	r2, #16
 8001554:	409a      	lsls	r2, r3
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d018      	beq.n	800159a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d108      	bne.n	8001588 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	2b00      	cmp	r3, #0
 800157c:	d024      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	4798      	blx	r3
 8001586:	e01f      	b.n	80015c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800158c:	2b00      	cmp	r3, #0
 800158e:	d01b      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	4798      	blx	r3
 8001598:	e016      	b.n	80015c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d107      	bne.n	80015b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0208 	bic.w	r2, r2, #8
 80015b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015cc:	2220      	movs	r2, #32
 80015ce:	409a      	lsls	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 808f 	beq.w	80016f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0310 	and.w	r3, r3, #16
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 8087 	beq.w	80016f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ee:	2220      	movs	r2, #32
 80015f0:	409a      	lsls	r2, r3
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b05      	cmp	r3, #5
 8001600:	d136      	bne.n	8001670 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 0216 	bic.w	r2, r2, #22
 8001610:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	695a      	ldr	r2, [r3, #20]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001620:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	2b00      	cmp	r3, #0
 8001628:	d103      	bne.n	8001632 <HAL_DMA_IRQHandler+0x1da>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800162e:	2b00      	cmp	r3, #0
 8001630:	d007      	beq.n	8001642 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 0208 	bic.w	r2, r2, #8
 8001640:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001646:	223f      	movs	r2, #63	; 0x3f
 8001648:	409a      	lsls	r2, r3
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2201      	movs	r2, #1
 8001652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001662:	2b00      	cmp	r3, #0
 8001664:	d07e      	beq.n	8001764 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	4798      	blx	r3
        }
        return;
 800166e:	e079      	b.n	8001764 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d01d      	beq.n	80016ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10d      	bne.n	80016a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001690:	2b00      	cmp	r3, #0
 8001692:	d031      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	4798      	blx	r3
 800169c:	e02c      	b.n	80016f8 <HAL_DMA_IRQHandler+0x2a0>
 800169e:	bf00      	nop
 80016a0:	20000000 	.word	0x20000000
 80016a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d023      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	4798      	blx	r3
 80016b8:	e01e      	b.n	80016f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d10f      	bne.n	80016e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0210 	bic.w	r2, r2, #16
 80016d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d003      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d032      	beq.n	8001766 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	2b00      	cmp	r3, #0
 800170a:	d022      	beq.n	8001752 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2205      	movs	r2, #5
 8001710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0201 	bic.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	3301      	adds	r3, #1
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	429a      	cmp	r2, r3
 800172e:	d307      	bcc.n	8001740 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f2      	bne.n	8001724 <HAL_DMA_IRQHandler+0x2cc>
 800173e:	e000      	b.n	8001742 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001740:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001756:	2b00      	cmp	r3, #0
 8001758:	d005      	beq.n	8001766 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	4798      	blx	r3
 8001762:	e000      	b.n	8001766 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001764:	bf00      	nop
    }
  }
}
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
 8001778:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001788:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	2b40      	cmp	r3, #64	; 0x40
 8001798:	d108      	bne.n	80017ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80017aa:	e007      	b.n	80017bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68ba      	ldr	r2, [r7, #8]
 80017b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	60da      	str	r2, [r3, #12]
}
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	3b10      	subs	r3, #16
 80017d8:	4a14      	ldr	r2, [pc, #80]	; (800182c <DMA_CalcBaseAndBitshift+0x64>)
 80017da:	fba2 2303 	umull	r2, r3, r2, r3
 80017de:	091b      	lsrs	r3, r3, #4
 80017e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017e2:	4a13      	ldr	r2, [pc, #76]	; (8001830 <DMA_CalcBaseAndBitshift+0x68>)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4413      	add	r3, r2
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d909      	bls.n	800180a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017fe:	f023 0303 	bic.w	r3, r3, #3
 8001802:	1d1a      	adds	r2, r3, #4
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	659a      	str	r2, [r3, #88]	; 0x58
 8001808:	e007      	b.n	800181a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001812:	f023 0303 	bic.w	r3, r3, #3
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800181e:	4618      	mov	r0, r3
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	aaaaaaab 	.word	0xaaaaaaab
 8001830:	080095d8 	.word	0x080095d8

08001834 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001844:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d11f      	bne.n	800188e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	2b03      	cmp	r3, #3
 8001852:	d856      	bhi.n	8001902 <DMA_CheckFifoParam+0xce>
 8001854:	a201      	add	r2, pc, #4	; (adr r2, 800185c <DMA_CheckFifoParam+0x28>)
 8001856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185a:	bf00      	nop
 800185c:	0800186d 	.word	0x0800186d
 8001860:	0800187f 	.word	0x0800187f
 8001864:	0800186d 	.word	0x0800186d
 8001868:	08001903 	.word	0x08001903
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001870:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d046      	beq.n	8001906 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800187c:	e043      	b.n	8001906 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001882:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001886:	d140      	bne.n	800190a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800188c:	e03d      	b.n	800190a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001896:	d121      	bne.n	80018dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	2b03      	cmp	r3, #3
 800189c:	d837      	bhi.n	800190e <DMA_CheckFifoParam+0xda>
 800189e:	a201      	add	r2, pc, #4	; (adr r2, 80018a4 <DMA_CheckFifoParam+0x70>)
 80018a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a4:	080018b5 	.word	0x080018b5
 80018a8:	080018bb 	.word	0x080018bb
 80018ac:	080018b5 	.word	0x080018b5
 80018b0:	080018cd 	.word	0x080018cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	73fb      	strb	r3, [r7, #15]
      break;
 80018b8:	e030      	b.n	800191c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d025      	beq.n	8001912 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018ca:	e022      	b.n	8001912 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018d4:	d11f      	bne.n	8001916 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018da:	e01c      	b.n	8001916 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d903      	bls.n	80018ea <DMA_CheckFifoParam+0xb6>
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	d003      	beq.n	80018f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018e8:	e018      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	73fb      	strb	r3, [r7, #15]
      break;
 80018ee:	e015      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00e      	beq.n	800191a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
      break;
 8001900:	e00b      	b.n	800191a <DMA_CheckFifoParam+0xe6>
      break;
 8001902:	bf00      	nop
 8001904:	e00a      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      break;
 8001906:	bf00      	nop
 8001908:	e008      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      break;
 800190a:	bf00      	nop
 800190c:	e006      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      break;
 800190e:	bf00      	nop
 8001910:	e004      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      break;
 8001912:	bf00      	nop
 8001914:	e002      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      break;   
 8001916:	bf00      	nop
 8001918:	e000      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      break;
 800191a:	bf00      	nop
    }
  } 
  
  return status; 
 800191c:	7bfb      	ldrb	r3, [r7, #15]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop

0800192c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	; 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800193e:	2300      	movs	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
 8001946:	e159      	b.n	8001bfc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001948:	2201      	movs	r2, #1
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	429a      	cmp	r2, r3
 8001962:	f040 8148 	bne.w	8001bf6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	2b01      	cmp	r3, #1
 8001970:	d005      	beq.n	800197e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800197a:	2b02      	cmp	r3, #2
 800197c:	d130      	bne.n	80019e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	2203      	movs	r2, #3
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4013      	ands	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	68da      	ldr	r2, [r3, #12]
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019b4:	2201      	movs	r2, #1
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	091b      	lsrs	r3, r3, #4
 80019ca:	f003 0201 	and.w	r2, r3, #1
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	d017      	beq.n	8001a1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	2203      	movs	r2, #3
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d123      	bne.n	8001a70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	08da      	lsrs	r2, r3, #3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3208      	adds	r2, #8
 8001a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	220f      	movs	r2, #15
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	691a      	ldr	r2, [r3, #16]
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	08da      	lsrs	r2, r3, #3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3208      	adds	r2, #8
 8001a6a:	69b9      	ldr	r1, [r7, #24]
 8001a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 0203 	and.w	r2, r3, #3
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 80a2 	beq.w	8001bf6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	4b57      	ldr	r3, [pc, #348]	; (8001c14 <HAL_GPIO_Init+0x2e8>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	4a56      	ldr	r2, [pc, #344]	; (8001c14 <HAL_GPIO_Init+0x2e8>)
 8001abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac2:	4b54      	ldr	r3, [pc, #336]	; (8001c14 <HAL_GPIO_Init+0x2e8>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ace:	4a52      	ldr	r2, [pc, #328]	; (8001c18 <HAL_GPIO_Init+0x2ec>)
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	089b      	lsrs	r3, r3, #2
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	220f      	movs	r2, #15
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4013      	ands	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a49      	ldr	r2, [pc, #292]	; (8001c1c <HAL_GPIO_Init+0x2f0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d019      	beq.n	8001b2e <HAL_GPIO_Init+0x202>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a48      	ldr	r2, [pc, #288]	; (8001c20 <HAL_GPIO_Init+0x2f4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d013      	beq.n	8001b2a <HAL_GPIO_Init+0x1fe>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a47      	ldr	r2, [pc, #284]	; (8001c24 <HAL_GPIO_Init+0x2f8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d00d      	beq.n	8001b26 <HAL_GPIO_Init+0x1fa>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a46      	ldr	r2, [pc, #280]	; (8001c28 <HAL_GPIO_Init+0x2fc>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d007      	beq.n	8001b22 <HAL_GPIO_Init+0x1f6>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a45      	ldr	r2, [pc, #276]	; (8001c2c <HAL_GPIO_Init+0x300>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d101      	bne.n	8001b1e <HAL_GPIO_Init+0x1f2>
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	e008      	b.n	8001b30 <HAL_GPIO_Init+0x204>
 8001b1e:	2307      	movs	r3, #7
 8001b20:	e006      	b.n	8001b30 <HAL_GPIO_Init+0x204>
 8001b22:	2303      	movs	r3, #3
 8001b24:	e004      	b.n	8001b30 <HAL_GPIO_Init+0x204>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e002      	b.n	8001b30 <HAL_GPIO_Init+0x204>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <HAL_GPIO_Init+0x204>
 8001b2e:	2300      	movs	r3, #0
 8001b30:	69fa      	ldr	r2, [r7, #28]
 8001b32:	f002 0203 	and.w	r2, r2, #3
 8001b36:	0092      	lsls	r2, r2, #2
 8001b38:	4093      	lsls	r3, r2
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b40:	4935      	ldr	r1, [pc, #212]	; (8001c18 <HAL_GPIO_Init+0x2ec>)
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	089b      	lsrs	r3, r3, #2
 8001b46:	3302      	adds	r3, #2
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b4e:	4b38      	ldr	r3, [pc, #224]	; (8001c30 <HAL_GPIO_Init+0x304>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	43db      	mvns	r3, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b72:	4a2f      	ldr	r2, [pc, #188]	; (8001c30 <HAL_GPIO_Init+0x304>)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b78:	4b2d      	ldr	r3, [pc, #180]	; (8001c30 <HAL_GPIO_Init+0x304>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b9c:	4a24      	ldr	r2, [pc, #144]	; (8001c30 <HAL_GPIO_Init+0x304>)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ba2:	4b23      	ldr	r3, [pc, #140]	; (8001c30 <HAL_GPIO_Init+0x304>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	43db      	mvns	r3, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bc6:	4a1a      	ldr	r2, [pc, #104]	; (8001c30 <HAL_GPIO_Init+0x304>)
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bcc:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <HAL_GPIO_Init+0x304>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bf0:	4a0f      	ldr	r2, [pc, #60]	; (8001c30 <HAL_GPIO_Init+0x304>)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	61fb      	str	r3, [r7, #28]
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	2b0f      	cmp	r3, #15
 8001c00:	f67f aea2 	bls.w	8001948 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
 8001c08:	3724      	adds	r7, #36	; 0x24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40013800 	.word	0x40013800
 8001c1c:	40020000 	.word	0x40020000
 8001c20:	40020400 	.word	0x40020400
 8001c24:	40020800 	.word	0x40020800
 8001c28:	40020c00 	.word	0x40020c00
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40013c00 	.word	0x40013c00

08001c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	807b      	strh	r3, [r7, #2]
 8001c40:	4613      	mov	r3, r2
 8001c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c44:	787b      	ldrb	r3, [r7, #1]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c4a:	887a      	ldrh	r2, [r7, #2]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c50:	e003      	b.n	8001c5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c52:	887b      	ldrh	r3, [r7, #2]
 8001c54:	041a      	lsls	r2, r3, #16
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	619a      	str	r2, [r3, #24]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001c66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c68:	b08f      	sub	sp, #60	; 0x3c
 8001c6a:	af0a      	add	r7, sp, #40	; 0x28
 8001c6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e054      	b.n	8001d22 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d106      	bne.n	8001c98 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f006 f9b0 	bl	8007ff8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d102      	bne.n	8001cb2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f003 f9de 	bl	8005078 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	603b      	str	r3, [r7, #0]
 8001cc2:	687e      	ldr	r6, [r7, #4]
 8001cc4:	466d      	mov	r5, sp
 8001cc6:	f106 0410 	add.w	r4, r6, #16
 8001cca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ccc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cd6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cda:	1d33      	adds	r3, r6, #4
 8001cdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cde:	6838      	ldr	r0, [r7, #0]
 8001ce0:	f003 f958 	bl	8004f94 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2101      	movs	r1, #1
 8001cea:	4618      	mov	r0, r3
 8001cec:	f003 f9d5 	bl	800509a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	603b      	str	r3, [r7, #0]
 8001cf6:	687e      	ldr	r6, [r7, #4]
 8001cf8:	466d      	mov	r5, sp
 8001cfa:	f106 0410 	add.w	r4, r6, #16
 8001cfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d0a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d0e:	1d33      	adds	r3, r6, #4
 8001d10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d12:	6838      	ldr	r0, [r7, #0]
 8001d14:	f003 fb5e 	bl	80053d4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d2a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001d2a:	b590      	push	{r4, r7, lr}
 8001d2c:	b089      	sub	sp, #36	; 0x24
 8001d2e:	af04      	add	r7, sp, #16
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	4608      	mov	r0, r1
 8001d34:	4611      	mov	r1, r2
 8001d36:	461a      	mov	r2, r3
 8001d38:	4603      	mov	r3, r0
 8001d3a:	70fb      	strb	r3, [r7, #3]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	70bb      	strb	r3, [r7, #2]
 8001d40:	4613      	mov	r3, r2
 8001d42:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d101      	bne.n	8001d52 <HAL_HCD_HC_Init+0x28>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e076      	b.n	8001e40 <HAL_HCD_HC_Init+0x116>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001d5a:	78fb      	ldrb	r3, [r7, #3]
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	212c      	movs	r1, #44	; 0x2c
 8001d60:	fb01 f303 	mul.w	r3, r1, r3
 8001d64:	4413      	add	r3, r2
 8001d66:	333d      	adds	r3, #61	; 0x3d
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	212c      	movs	r1, #44	; 0x2c
 8001d72:	fb01 f303 	mul.w	r3, r1, r3
 8001d76:	4413      	add	r3, r2
 8001d78:	3338      	adds	r3, #56	; 0x38
 8001d7a:	787a      	ldrb	r2, [r7, #1]
 8001d7c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001d7e:	78fb      	ldrb	r3, [r7, #3]
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	212c      	movs	r1, #44	; 0x2c
 8001d84:	fb01 f303 	mul.w	r3, r1, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	3340      	adds	r3, #64	; 0x40
 8001d8c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001d8e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d90:	78fb      	ldrb	r3, [r7, #3]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	212c      	movs	r1, #44	; 0x2c
 8001d96:	fb01 f303 	mul.w	r3, r1, r3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3339      	adds	r3, #57	; 0x39
 8001d9e:	78fa      	ldrb	r2, [r7, #3]
 8001da0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001da2:	78fb      	ldrb	r3, [r7, #3]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	212c      	movs	r1, #44	; 0x2c
 8001da8:	fb01 f303 	mul.w	r3, r1, r3
 8001dac:	4413      	add	r3, r2
 8001dae:	333f      	adds	r3, #63	; 0x3f
 8001db0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001db4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	78ba      	ldrb	r2, [r7, #2]
 8001dba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001dbe:	b2d0      	uxtb	r0, r2
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	212c      	movs	r1, #44	; 0x2c
 8001dc4:	fb01 f303 	mul.w	r3, r1, r3
 8001dc8:	4413      	add	r3, r2
 8001dca:	333a      	adds	r3, #58	; 0x3a
 8001dcc:	4602      	mov	r2, r0
 8001dce:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001dd0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	da09      	bge.n	8001dec <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	212c      	movs	r1, #44	; 0x2c
 8001dde:	fb01 f303 	mul.w	r3, r1, r3
 8001de2:	4413      	add	r3, r2
 8001de4:	333b      	adds	r3, #59	; 0x3b
 8001de6:	2201      	movs	r2, #1
 8001de8:	701a      	strb	r2, [r3, #0]
 8001dea:	e008      	b.n	8001dfe <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	212c      	movs	r1, #44	; 0x2c
 8001df2:	fb01 f303 	mul.w	r3, r1, r3
 8001df6:	4413      	add	r3, r2
 8001df8:	333b      	adds	r3, #59	; 0x3b
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001dfe:	78fb      	ldrb	r3, [r7, #3]
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	212c      	movs	r1, #44	; 0x2c
 8001e04:	fb01 f303 	mul.w	r3, r1, r3
 8001e08:	4413      	add	r3, r2
 8001e0a:	333c      	adds	r3, #60	; 0x3c
 8001e0c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e10:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6818      	ldr	r0, [r3, #0]
 8001e16:	787c      	ldrb	r4, [r7, #1]
 8001e18:	78ba      	ldrb	r2, [r7, #2]
 8001e1a:	78f9      	ldrb	r1, [r7, #3]
 8001e1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e1e:	9302      	str	r3, [sp, #8]
 8001e20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e24:	9301      	str	r3, [sp, #4]
 8001e26:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	4623      	mov	r3, r4
 8001e2e:	f003 fc57 	bl	80056e0 <USB_HC_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd90      	pop	{r4, r7, pc}

08001e48 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d101      	bne.n	8001e66 <HAL_HCD_HC_Halt+0x1e>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e00f      	b.n	8001e86 <HAL_HCD_HC_Halt+0x3e>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	78fa      	ldrb	r2, [r7, #3]
 8001e74:	4611      	mov	r1, r2
 8001e76:	4618      	mov	r0, r3
 8001e78:	f003 fea7 	bl	8005bca <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	4608      	mov	r0, r1
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	70fb      	strb	r3, [r7, #3]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	70bb      	strb	r3, [r7, #2]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001eaa:	78fb      	ldrb	r3, [r7, #3]
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	212c      	movs	r1, #44	; 0x2c
 8001eb0:	fb01 f303 	mul.w	r3, r1, r3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	333b      	adds	r3, #59	; 0x3b
 8001eb8:	78ba      	ldrb	r2, [r7, #2]
 8001eba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	212c      	movs	r1, #44	; 0x2c
 8001ec2:	fb01 f303 	mul.w	r3, r1, r3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	333f      	adds	r3, #63	; 0x3f
 8001eca:	787a      	ldrb	r2, [r7, #1]
 8001ecc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001ece:	7c3b      	ldrb	r3, [r7, #16]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d112      	bne.n	8001efa <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	212c      	movs	r1, #44	; 0x2c
 8001eda:	fb01 f303 	mul.w	r3, r1, r3
 8001ede:	4413      	add	r3, r2
 8001ee0:	3342      	adds	r3, #66	; 0x42
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	212c      	movs	r1, #44	; 0x2c
 8001eec:	fb01 f303 	mul.w	r3, r1, r3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	333d      	adds	r3, #61	; 0x3d
 8001ef4:	7f3a      	ldrb	r2, [r7, #28]
 8001ef6:	701a      	strb	r2, [r3, #0]
 8001ef8:	e008      	b.n	8001f0c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001efa:	78fb      	ldrb	r3, [r7, #3]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	212c      	movs	r1, #44	; 0x2c
 8001f00:	fb01 f303 	mul.w	r3, r1, r3
 8001f04:	4413      	add	r3, r2
 8001f06:	3342      	adds	r3, #66	; 0x42
 8001f08:	2202      	movs	r2, #2
 8001f0a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001f0c:	787b      	ldrb	r3, [r7, #1]
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	f200 80c6 	bhi.w	80020a0 <HAL_HCD_HC_SubmitRequest+0x210>
 8001f14:	a201      	add	r2, pc, #4	; (adr r2, 8001f1c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1a:	bf00      	nop
 8001f1c:	08001f2d 	.word	0x08001f2d
 8001f20:	0800208d 	.word	0x0800208d
 8001f24:	08001f91 	.word	0x08001f91
 8001f28:	0800200f 	.word	0x0800200f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001f2c:	7c3b      	ldrb	r3, [r7, #16]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	f040 80b8 	bne.w	80020a4 <HAL_HCD_HC_SubmitRequest+0x214>
 8001f34:	78bb      	ldrb	r3, [r7, #2]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f040 80b4 	bne.w	80020a4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001f3c:	8b3b      	ldrh	r3, [r7, #24]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d108      	bne.n	8001f54 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001f42:	78fb      	ldrb	r3, [r7, #3]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	212c      	movs	r1, #44	; 0x2c
 8001f48:	fb01 f303 	mul.w	r3, r1, r3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3355      	adds	r3, #85	; 0x55
 8001f50:	2201      	movs	r2, #1
 8001f52:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	212c      	movs	r1, #44	; 0x2c
 8001f5a:	fb01 f303 	mul.w	r3, r1, r3
 8001f5e:	4413      	add	r3, r2
 8001f60:	3355      	adds	r3, #85	; 0x55
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d109      	bne.n	8001f7c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	212c      	movs	r1, #44	; 0x2c
 8001f6e:	fb01 f303 	mul.w	r3, r1, r3
 8001f72:	4413      	add	r3, r2
 8001f74:	3342      	adds	r3, #66	; 0x42
 8001f76:	2200      	movs	r2, #0
 8001f78:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001f7a:	e093      	b.n	80020a4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	212c      	movs	r1, #44	; 0x2c
 8001f82:	fb01 f303 	mul.w	r3, r1, r3
 8001f86:	4413      	add	r3, r2
 8001f88:	3342      	adds	r3, #66	; 0x42
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	701a      	strb	r2, [r3, #0]
      break;
 8001f8e:	e089      	b.n	80020a4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001f90:	78bb      	ldrb	r3, [r7, #2]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d11d      	bne.n	8001fd2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	212c      	movs	r1, #44	; 0x2c
 8001f9c:	fb01 f303 	mul.w	r3, r1, r3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3355      	adds	r3, #85	; 0x55
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d109      	bne.n	8001fbe <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001faa:	78fb      	ldrb	r3, [r7, #3]
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	212c      	movs	r1, #44	; 0x2c
 8001fb0:	fb01 f303 	mul.w	r3, r1, r3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3342      	adds	r3, #66	; 0x42
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001fbc:	e073      	b.n	80020a6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fbe:	78fb      	ldrb	r3, [r7, #3]
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	212c      	movs	r1, #44	; 0x2c
 8001fc4:	fb01 f303 	mul.w	r3, r1, r3
 8001fc8:	4413      	add	r3, r2
 8001fca:	3342      	adds	r3, #66	; 0x42
 8001fcc:	2202      	movs	r2, #2
 8001fce:	701a      	strb	r2, [r3, #0]
      break;
 8001fd0:	e069      	b.n	80020a6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001fd2:	78fb      	ldrb	r3, [r7, #3]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	212c      	movs	r1, #44	; 0x2c
 8001fd8:	fb01 f303 	mul.w	r3, r1, r3
 8001fdc:	4413      	add	r3, r2
 8001fde:	3354      	adds	r3, #84	; 0x54
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d109      	bne.n	8001ffa <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fe6:	78fb      	ldrb	r3, [r7, #3]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	212c      	movs	r1, #44	; 0x2c
 8001fec:	fb01 f303 	mul.w	r3, r1, r3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3342      	adds	r3, #66	; 0x42
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]
      break;
 8001ff8:	e055      	b.n	80020a6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ffa:	78fb      	ldrb	r3, [r7, #3]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	212c      	movs	r1, #44	; 0x2c
 8002000:	fb01 f303 	mul.w	r3, r1, r3
 8002004:	4413      	add	r3, r2
 8002006:	3342      	adds	r3, #66	; 0x42
 8002008:	2202      	movs	r2, #2
 800200a:	701a      	strb	r2, [r3, #0]
      break;
 800200c:	e04b      	b.n	80020a6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800200e:	78bb      	ldrb	r3, [r7, #2]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d11d      	bne.n	8002050 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	212c      	movs	r1, #44	; 0x2c
 800201a:	fb01 f303 	mul.w	r3, r1, r3
 800201e:	4413      	add	r3, r2
 8002020:	3355      	adds	r3, #85	; 0x55
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d109      	bne.n	800203c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	212c      	movs	r1, #44	; 0x2c
 800202e:	fb01 f303 	mul.w	r3, r1, r3
 8002032:	4413      	add	r3, r2
 8002034:	3342      	adds	r3, #66	; 0x42
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800203a:	e034      	b.n	80020a6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	212c      	movs	r1, #44	; 0x2c
 8002042:	fb01 f303 	mul.w	r3, r1, r3
 8002046:	4413      	add	r3, r2
 8002048:	3342      	adds	r3, #66	; 0x42
 800204a:	2202      	movs	r2, #2
 800204c:	701a      	strb	r2, [r3, #0]
      break;
 800204e:	e02a      	b.n	80020a6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002050:	78fb      	ldrb	r3, [r7, #3]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	212c      	movs	r1, #44	; 0x2c
 8002056:	fb01 f303 	mul.w	r3, r1, r3
 800205a:	4413      	add	r3, r2
 800205c:	3354      	adds	r3, #84	; 0x54
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d109      	bne.n	8002078 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	212c      	movs	r1, #44	; 0x2c
 800206a:	fb01 f303 	mul.w	r3, r1, r3
 800206e:	4413      	add	r3, r2
 8002070:	3342      	adds	r3, #66	; 0x42
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
      break;
 8002076:	e016      	b.n	80020a6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	212c      	movs	r1, #44	; 0x2c
 800207e:	fb01 f303 	mul.w	r3, r1, r3
 8002082:	4413      	add	r3, r2
 8002084:	3342      	adds	r3, #66	; 0x42
 8002086:	2202      	movs	r2, #2
 8002088:	701a      	strb	r2, [r3, #0]
      break;
 800208a:	e00c      	b.n	80020a6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	212c      	movs	r1, #44	; 0x2c
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	4413      	add	r3, r2
 8002098:	3342      	adds	r3, #66	; 0x42
 800209a:	2200      	movs	r2, #0
 800209c:	701a      	strb	r2, [r3, #0]
      break;
 800209e:	e002      	b.n	80020a6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80020a0:	bf00      	nop
 80020a2:	e000      	b.n	80020a6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80020a4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80020a6:	78fb      	ldrb	r3, [r7, #3]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	212c      	movs	r1, #44	; 0x2c
 80020ac:	fb01 f303 	mul.w	r3, r1, r3
 80020b0:	4413      	add	r3, r2
 80020b2:	3344      	adds	r3, #68	; 0x44
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80020b8:	78fb      	ldrb	r3, [r7, #3]
 80020ba:	8b3a      	ldrh	r2, [r7, #24]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	202c      	movs	r0, #44	; 0x2c
 80020c0:	fb00 f303 	mul.w	r3, r0, r3
 80020c4:	440b      	add	r3, r1
 80020c6:	334c      	adds	r3, #76	; 0x4c
 80020c8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80020ca:	78fb      	ldrb	r3, [r7, #3]
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	212c      	movs	r1, #44	; 0x2c
 80020d0:	fb01 f303 	mul.w	r3, r1, r3
 80020d4:	4413      	add	r3, r2
 80020d6:	3360      	adds	r3, #96	; 0x60
 80020d8:	2200      	movs	r2, #0
 80020da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80020dc:	78fb      	ldrb	r3, [r7, #3]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	212c      	movs	r1, #44	; 0x2c
 80020e2:	fb01 f303 	mul.w	r3, r1, r3
 80020e6:	4413      	add	r3, r2
 80020e8:	3350      	adds	r3, #80	; 0x50
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80020ee:	78fb      	ldrb	r3, [r7, #3]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	212c      	movs	r1, #44	; 0x2c
 80020f4:	fb01 f303 	mul.w	r3, r1, r3
 80020f8:	4413      	add	r3, r2
 80020fa:	3339      	adds	r3, #57	; 0x39
 80020fc:	78fa      	ldrb	r2, [r7, #3]
 80020fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002100:	78fb      	ldrb	r3, [r7, #3]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	212c      	movs	r1, #44	; 0x2c
 8002106:	fb01 f303 	mul.w	r3, r1, r3
 800210a:	4413      	add	r3, r2
 800210c:	3361      	adds	r3, #97	; 0x61
 800210e:	2200      	movs	r2, #0
 8002110:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	78fb      	ldrb	r3, [r7, #3]
 8002118:	222c      	movs	r2, #44	; 0x2c
 800211a:	fb02 f303 	mul.w	r3, r2, r3
 800211e:	3338      	adds	r3, #56	; 0x38
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	18d1      	adds	r1, r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	b2db      	uxtb	r3, r3
 800212a:	461a      	mov	r2, r3
 800212c:	f003 fbfa 	bl	8005924 <USB_HC_StartXfer>
 8002130:	4603      	mov	r3, r0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop

0800213c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f003 f8fb 	bl	800534e <USB_GetMode>
 8002158:	4603      	mov	r3, r0
 800215a:	2b01      	cmp	r3, #1
 800215c:	f040 80f6 	bne.w	800234c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f003 f8df 	bl	8005328 <USB_ReadInterrupts>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80ec 	beq.w	800234a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f003 f8d6 	bl	8005328 <USB_ReadInterrupts>
 800217c:	4603      	mov	r3, r0
 800217e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002182:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002186:	d104      	bne.n	8002192 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002190:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f003 f8c6 	bl	8005328 <USB_ReadInterrupts>
 800219c:	4603      	mov	r3, r0
 800219e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021a6:	d104      	bne.n	80021b2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80021b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f003 f8b6 	bl	8005328 <USB_ReadInterrupts>
 80021bc:	4603      	mov	r3, r0
 80021be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021c6:	d104      	bne.n	80021d2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80021d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f003 f8a6 	bl	8005328 <USB_ReadInterrupts>
 80021dc:	4603      	mov	r3, r0
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d103      	bne.n	80021ee <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2202      	movs	r2, #2
 80021ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f003 f898 	bl	8005328 <USB_ReadInterrupts>
 80021f8:	4603      	mov	r3, r0
 80021fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002202:	d11c      	bne.n	800223e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800220c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10f      	bne.n	800223e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800221e:	2110      	movs	r1, #16
 8002220:	6938      	ldr	r0, [r7, #16]
 8002222:	f002 ff87 	bl	8005134 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002226:	6938      	ldr	r0, [r7, #16]
 8002228:	f002 ffb8 	bl	800519c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2101      	movs	r1, #1
 8002232:	4618      	mov	r0, r3
 8002234:	f003 f98e 	bl	8005554 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f005 ff4d 	bl	80080d8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f003 f870 	bl	8005328 <USB_ReadInterrupts>
 8002248:	4603      	mov	r3, r0
 800224a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800224e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002252:	d102      	bne.n	800225a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f001 f89e 	bl	8003396 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f003 f862 	bl	8005328 <USB_ReadInterrupts>
 8002264:	4603      	mov	r3, r0
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	2b08      	cmp	r3, #8
 800226c:	d106      	bne.n	800227c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f005 ff16 	bl	80080a0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2208      	movs	r2, #8
 800227a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f003 f851 	bl	8005328 <USB_ReadInterrupts>
 8002286:	4603      	mov	r3, r0
 8002288:	f003 0310 	and.w	r3, r3, #16
 800228c:	2b10      	cmp	r3, #16
 800228e:	d101      	bne.n	8002294 <HAL_HCD_IRQHandler+0x158>
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <HAL_HCD_IRQHandler+0x15a>
 8002294:	2300      	movs	r3, #0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d012      	beq.n	80022c0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	699a      	ldr	r2, [r3, #24]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0210 	bic.w	r2, r2, #16
 80022a8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 ffa1 	bl	80031f2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	699a      	ldr	r2, [r3, #24]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0210 	orr.w	r2, r2, #16
 80022be:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f003 f82f 	bl	8005328 <USB_ReadInterrupts>
 80022ca:	4603      	mov	r3, r0
 80022cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022d4:	d13a      	bne.n	800234c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f003 fc64 	bl	8005ba8 <USB_HC_ReadInterrupt>
 80022e0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	e025      	b.n	8002334 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	fa22 f303 	lsr.w	r3, r2, r3
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d018      	beq.n	800232e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	015a      	lsls	r2, r3, #5
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4413      	add	r3, r2
 8002304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800230e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002312:	d106      	bne.n	8002322 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	4619      	mov	r1, r3
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f8ab 	bl	8002476 <HCD_HC_IN_IRQHandler>
 8002320:	e005      	b.n	800232e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	b2db      	uxtb	r3, r3
 8002326:	4619      	mov	r1, r3
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 fbf9 	bl	8002b20 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	3301      	adds	r3, #1
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	429a      	cmp	r2, r3
 800233c:	d3d4      	bcc.n	80022e8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002346:	615a      	str	r2, [r3, #20]
 8002348:	e000      	b.n	800234c <HAL_HCD_IRQHandler+0x210>
      return;
 800234a:	bf00      	nop
    }
  }
}
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_HCD_Start+0x16>
 8002364:	2302      	movs	r3, #2
 8002366:	e013      	b.n	8002390 <HAL_HCD_Start+0x3e>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2101      	movs	r1, #1
 8002376:	4618      	mov	r0, r3
 8002378:	f003 f950 	bl	800561c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f002 fe68 	bl	8005056 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_HCD_Stop+0x16>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e00d      	b.n	80023ca <HAL_HCD_Stop+0x32>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f003 fd3e 	bl	8005e3c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f003 f8f2 	bl	80055c8 <USB_ResetPort>
 80023e4:	4603      	mov	r3, r0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	460b      	mov	r3, r1
 80023f8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80023fa:	78fb      	ldrb	r3, [r7, #3]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	212c      	movs	r1, #44	; 0x2c
 8002400:	fb01 f303 	mul.w	r3, r1, r3
 8002404:	4413      	add	r3, r2
 8002406:	3360      	adds	r3, #96	; 0x60
 8002408:	781b      	ldrb	r3, [r3, #0]
}
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	460b      	mov	r3, r1
 8002420:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002422:	78fb      	ldrb	r3, [r7, #3]
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	212c      	movs	r1, #44	; 0x2c
 8002428:	fb01 f303 	mul.w	r3, r1, r3
 800242c:	4413      	add	r3, r2
 800242e:	3350      	adds	r3, #80	; 0x50
 8002430:	681b      	ldr	r3, [r3, #0]
}
 8002432:	4618      	mov	r0, r3
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f003 f936 	bl	80056bc <USB_GetCurrentFrame>
 8002450:	4603      	mov	r3, r0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f003 f911 	bl	800568e <USB_GetHostSpeed>
 800246c:	4603      	mov	r3, r0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b086      	sub	sp, #24
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	460b      	mov	r3, r1
 8002480:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	015a      	lsls	r2, r3, #5
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4413      	add	r3, r2
 8002498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d11a      	bne.n	80024dc <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b2:	461a      	mov	r2, r3
 80024b4:	2304      	movs	r3, #4
 80024b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	212c      	movs	r1, #44	; 0x2c
 80024be:	fb01 f303 	mul.w	r3, r1, r3
 80024c2:	4413      	add	r3, r2
 80024c4:	3361      	adds	r3, #97	; 0x61
 80024c6:	2206      	movs	r2, #6
 80024c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	4611      	mov	r1, r2
 80024d4:	4618      	mov	r0, r3
 80024d6:	f003 fb78 	bl	8005bca <USB_HC_Halt>
 80024da:	e0af      	b.n	800263c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	015a      	lsls	r2, r3, #5
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024f2:	d11b      	bne.n	800252c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	015a      	lsls	r2, r3, #5
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002500:	461a      	mov	r2, r3
 8002502:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002506:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	212c      	movs	r1, #44	; 0x2c
 800250e:	fb01 f303 	mul.w	r3, r1, r3
 8002512:	4413      	add	r3, r2
 8002514:	3361      	adds	r3, #97	; 0x61
 8002516:	2207      	movs	r2, #7
 8002518:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f003 fb50 	bl	8005bca <USB_HC_Halt>
 800252a:	e087      	b.n	800263c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	015a      	lsls	r2, r3, #5
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4413      	add	r3, r2
 8002534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 0320 	and.w	r3, r3, #32
 800253e:	2b20      	cmp	r3, #32
 8002540:	d109      	bne.n	8002556 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	015a      	lsls	r2, r3, #5
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4413      	add	r3, r2
 800254a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254e:	461a      	mov	r2, r3
 8002550:	2320      	movs	r3, #32
 8002552:	6093      	str	r3, [r2, #8]
 8002554:	e072      	b.n	800263c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	015a      	lsls	r2, r3, #5
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4413      	add	r3, r2
 800255e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 0308 	and.w	r3, r3, #8
 8002568:	2b08      	cmp	r3, #8
 800256a:	d11a      	bne.n	80025a2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	015a      	lsls	r2, r3, #5
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4413      	add	r3, r2
 8002574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002578:	461a      	mov	r2, r3
 800257a:	2308      	movs	r3, #8
 800257c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	212c      	movs	r1, #44	; 0x2c
 8002584:	fb01 f303 	mul.w	r3, r1, r3
 8002588:	4413      	add	r3, r2
 800258a:	3361      	adds	r3, #97	; 0x61
 800258c:	2205      	movs	r2, #5
 800258e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	4611      	mov	r1, r2
 800259a:	4618      	mov	r0, r3
 800259c:	f003 fb15 	bl	8005bca <USB_HC_Halt>
 80025a0:	e04c      	b.n	800263c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	015a      	lsls	r2, r3, #5
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4413      	add	r3, r2
 80025aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025b8:	d11b      	bne.n	80025f2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	015a      	lsls	r2, r3, #5
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	4413      	add	r3, r2
 80025c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c6:	461a      	mov	r2, r3
 80025c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	212c      	movs	r1, #44	; 0x2c
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	4413      	add	r3, r2
 80025da:	3361      	adds	r3, #97	; 0x61
 80025dc:	2208      	movs	r2, #8
 80025de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	4611      	mov	r1, r2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f003 faed 	bl	8005bca <USB_HC_Halt>
 80025f0:	e024      	b.n	800263c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	015a      	lsls	r2, r3, #5
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4413      	add	r3, r2
 80025fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002604:	2b80      	cmp	r3, #128	; 0x80
 8002606:	d119      	bne.n	800263c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4413      	add	r3, r2
 8002610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002614:	461a      	mov	r2, r3
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	212c      	movs	r1, #44	; 0x2c
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	4413      	add	r3, r2
 8002626:	3361      	adds	r3, #97	; 0x61
 8002628:	2206      	movs	r2, #6
 800262a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	4611      	mov	r1, r2
 8002636:	4618      	mov	r0, r3
 8002638:	f003 fac7 	bl	8005bca <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	015a      	lsls	r2, r3, #5
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4413      	add	r3, r2
 8002644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800264e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002652:	d112      	bne.n	800267a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	4611      	mov	r1, r2
 800265e:	4618      	mov	r0, r3
 8002660:	f003 fab3 	bl	8005bca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4413      	add	r3, r2
 800266c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002670:	461a      	mov	r2, r3
 8002672:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002676:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002678:	e24e      	b.n	8002b18 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	015a      	lsls	r2, r3, #5
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4413      	add	r3, r2
 8002682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b01      	cmp	r3, #1
 800268e:	f040 80df 	bne.w	8002850 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d019      	beq.n	80026ce <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	212c      	movs	r1, #44	; 0x2c
 80026a0:	fb01 f303 	mul.w	r3, r1, r3
 80026a4:	4413      	add	r3, r2
 80026a6:	3348      	adds	r3, #72	; 0x48
 80026a8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	0159      	lsls	r1, r3, #5
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	440b      	add	r3, r1
 80026b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80026bc:	1ad2      	subs	r2, r2, r3
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	202c      	movs	r0, #44	; 0x2c
 80026c4:	fb00 f303 	mul.w	r3, r0, r3
 80026c8:	440b      	add	r3, r1
 80026ca:	3350      	adds	r3, #80	; 0x50
 80026cc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	212c      	movs	r1, #44	; 0x2c
 80026d4:	fb01 f303 	mul.w	r3, r1, r3
 80026d8:	4413      	add	r3, r2
 80026da:	3361      	adds	r3, #97	; 0x61
 80026dc:	2201      	movs	r2, #1
 80026de:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	212c      	movs	r1, #44	; 0x2c
 80026e6:	fb01 f303 	mul.w	r3, r1, r3
 80026ea:	4413      	add	r3, r2
 80026ec:	335c      	adds	r3, #92	; 0x5c
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	015a      	lsls	r2, r3, #5
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4413      	add	r3, r2
 80026fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fe:	461a      	mov	r2, r3
 8002700:	2301      	movs	r3, #1
 8002702:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	212c      	movs	r1, #44	; 0x2c
 800270a:	fb01 f303 	mul.w	r3, r1, r3
 800270e:	4413      	add	r3, r2
 8002710:	333f      	adds	r3, #63	; 0x3f
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d009      	beq.n	800272c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	212c      	movs	r1, #44	; 0x2c
 800271e:	fb01 f303 	mul.w	r3, r1, r3
 8002722:	4413      	add	r3, r2
 8002724:	333f      	adds	r3, #63	; 0x3f
 8002726:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002728:	2b02      	cmp	r3, #2
 800272a:	d111      	bne.n	8002750 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	4611      	mov	r1, r2
 8002736:	4618      	mov	r0, r3
 8002738:	f003 fa47 	bl	8005bca <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	015a      	lsls	r2, r3, #5
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4413      	add	r3, r2
 8002744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002748:	461a      	mov	r2, r3
 800274a:	2310      	movs	r3, #16
 800274c:	6093      	str	r3, [r2, #8]
 800274e:	e03a      	b.n	80027c6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	212c      	movs	r1, #44	; 0x2c
 8002756:	fb01 f303 	mul.w	r3, r1, r3
 800275a:	4413      	add	r3, r2
 800275c:	333f      	adds	r3, #63	; 0x3f
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b03      	cmp	r3, #3
 8002762:	d009      	beq.n	8002778 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	212c      	movs	r1, #44	; 0x2c
 800276a:	fb01 f303 	mul.w	r3, r1, r3
 800276e:	4413      	add	r3, r2
 8002770:	333f      	adds	r3, #63	; 0x3f
 8002772:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002774:	2b01      	cmp	r3, #1
 8002776:	d126      	bne.n	80027c6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	4413      	add	r3, r2
 8002780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	0151      	lsls	r1, r2, #5
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	440a      	add	r2, r1
 800278e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002792:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002796:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	212c      	movs	r1, #44	; 0x2c
 800279e:	fb01 f303 	mul.w	r3, r1, r3
 80027a2:	4413      	add	r3, r2
 80027a4:	3360      	adds	r3, #96	; 0x60
 80027a6:	2201      	movs	r2, #1
 80027a8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	b2d9      	uxtb	r1, r3
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	202c      	movs	r0, #44	; 0x2c
 80027b4:	fb00 f303 	mul.w	r3, r0, r3
 80027b8:	4413      	add	r3, r2
 80027ba:	3360      	adds	r3, #96	; 0x60
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	461a      	mov	r2, r3
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f005 fc97 	bl	80080f4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d12b      	bne.n	8002826 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	212c      	movs	r1, #44	; 0x2c
 80027d4:	fb01 f303 	mul.w	r3, r1, r3
 80027d8:	4413      	add	r3, r2
 80027da:	3348      	adds	r3, #72	; 0x48
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	202c      	movs	r0, #44	; 0x2c
 80027e4:	fb00 f202 	mul.w	r2, r0, r2
 80027e8:	440a      	add	r2, r1
 80027ea:	3240      	adds	r2, #64	; 0x40
 80027ec:	8812      	ldrh	r2, [r2, #0]
 80027ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 818e 	beq.w	8002b18 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	212c      	movs	r1, #44	; 0x2c
 8002802:	fb01 f303 	mul.w	r3, r1, r3
 8002806:	4413      	add	r3, r2
 8002808:	3354      	adds	r3, #84	; 0x54
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	f083 0301 	eor.w	r3, r3, #1
 8002810:	b2d8      	uxtb	r0, r3
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	212c      	movs	r1, #44	; 0x2c
 8002818:	fb01 f303 	mul.w	r3, r1, r3
 800281c:	4413      	add	r3, r2
 800281e:	3354      	adds	r3, #84	; 0x54
 8002820:	4602      	mov	r2, r0
 8002822:	701a      	strb	r2, [r3, #0]
}
 8002824:	e178      	b.n	8002b18 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	212c      	movs	r1, #44	; 0x2c
 800282c:	fb01 f303 	mul.w	r3, r1, r3
 8002830:	4413      	add	r3, r2
 8002832:	3354      	adds	r3, #84	; 0x54
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	f083 0301 	eor.w	r3, r3, #1
 800283a:	b2d8      	uxtb	r0, r3
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	212c      	movs	r1, #44	; 0x2c
 8002842:	fb01 f303 	mul.w	r3, r1, r3
 8002846:	4413      	add	r3, r2
 8002848:	3354      	adds	r3, #84	; 0x54
 800284a:	4602      	mov	r2, r0
 800284c:	701a      	strb	r2, [r3, #0]
}
 800284e:	e163      	b.n	8002b18 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	015a      	lsls	r2, r3, #5
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4413      	add	r3, r2
 8002858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b02      	cmp	r3, #2
 8002864:	f040 80f6 	bne.w	8002a54 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	212c      	movs	r1, #44	; 0x2c
 800286e:	fb01 f303 	mul.w	r3, r1, r3
 8002872:	4413      	add	r3, r2
 8002874:	3361      	adds	r3, #97	; 0x61
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d109      	bne.n	8002890 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	212c      	movs	r1, #44	; 0x2c
 8002882:	fb01 f303 	mul.w	r3, r1, r3
 8002886:	4413      	add	r3, r2
 8002888:	3360      	adds	r3, #96	; 0x60
 800288a:	2201      	movs	r2, #1
 800288c:	701a      	strb	r2, [r3, #0]
 800288e:	e0c9      	b.n	8002a24 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	212c      	movs	r1, #44	; 0x2c
 8002896:	fb01 f303 	mul.w	r3, r1, r3
 800289a:	4413      	add	r3, r2
 800289c:	3361      	adds	r3, #97	; 0x61
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b05      	cmp	r3, #5
 80028a2:	d109      	bne.n	80028b8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	212c      	movs	r1, #44	; 0x2c
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
 80028ae:	4413      	add	r3, r2
 80028b0:	3360      	adds	r3, #96	; 0x60
 80028b2:	2205      	movs	r2, #5
 80028b4:	701a      	strb	r2, [r3, #0]
 80028b6:	e0b5      	b.n	8002a24 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	212c      	movs	r1, #44	; 0x2c
 80028be:	fb01 f303 	mul.w	r3, r1, r3
 80028c2:	4413      	add	r3, r2
 80028c4:	3361      	adds	r3, #97	; 0x61
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b06      	cmp	r3, #6
 80028ca:	d009      	beq.n	80028e0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	212c      	movs	r1, #44	; 0x2c
 80028d2:	fb01 f303 	mul.w	r3, r1, r3
 80028d6:	4413      	add	r3, r2
 80028d8:	3361      	adds	r3, #97	; 0x61
 80028da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d150      	bne.n	8002982 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	212c      	movs	r1, #44	; 0x2c
 80028e6:	fb01 f303 	mul.w	r3, r1, r3
 80028ea:	4413      	add	r3, r2
 80028ec:	335c      	adds	r3, #92	; 0x5c
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	202c      	movs	r0, #44	; 0x2c
 80028f8:	fb00 f303 	mul.w	r3, r0, r3
 80028fc:	440b      	add	r3, r1
 80028fe:	335c      	adds	r3, #92	; 0x5c
 8002900:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	212c      	movs	r1, #44	; 0x2c
 8002908:	fb01 f303 	mul.w	r3, r1, r3
 800290c:	4413      	add	r3, r2
 800290e:	335c      	adds	r3, #92	; 0x5c
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d912      	bls.n	800293c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	212c      	movs	r1, #44	; 0x2c
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	335c      	adds	r3, #92	; 0x5c
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	212c      	movs	r1, #44	; 0x2c
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	4413      	add	r3, r2
 8002934:	3360      	adds	r3, #96	; 0x60
 8002936:	2204      	movs	r2, #4
 8002938:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800293a:	e073      	b.n	8002a24 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	212c      	movs	r1, #44	; 0x2c
 8002942:	fb01 f303 	mul.w	r3, r1, r3
 8002946:	4413      	add	r3, r2
 8002948:	3360      	adds	r3, #96	; 0x60
 800294a:	2202      	movs	r2, #2
 800294c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	015a      	lsls	r2, r3, #5
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	4413      	add	r3, r2
 8002956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002964:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800296c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4413      	add	r3, r2
 8002976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297a:	461a      	mov	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002980:	e050      	b.n	8002a24 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	212c      	movs	r1, #44	; 0x2c
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	4413      	add	r3, r2
 800298e:	3361      	adds	r3, #97	; 0x61
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b03      	cmp	r3, #3
 8002994:	d122      	bne.n	80029dc <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	212c      	movs	r1, #44	; 0x2c
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	3360      	adds	r3, #96	; 0x60
 80029a4:	2202      	movs	r2, #2
 80029a6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	015a      	lsls	r2, r3, #5
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029be:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029c6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d4:	461a      	mov	r2, r3
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	e023      	b.n	8002a24 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	212c      	movs	r1, #44	; 0x2c
 80029e2:	fb01 f303 	mul.w	r3, r1, r3
 80029e6:	4413      	add	r3, r2
 80029e8:	3361      	adds	r3, #97	; 0x61
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b07      	cmp	r3, #7
 80029ee:	d119      	bne.n	8002a24 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	212c      	movs	r1, #44	; 0x2c
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	335c      	adds	r3, #92	; 0x5c
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	202c      	movs	r0, #44	; 0x2c
 8002a08:	fb00 f303 	mul.w	r3, r0, r3
 8002a0c:	440b      	add	r3, r1
 8002a0e:	335c      	adds	r3, #92	; 0x5c
 8002a10:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	212c      	movs	r1, #44	; 0x2c
 8002a18:	fb01 f303 	mul.w	r3, r1, r3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3360      	adds	r3, #96	; 0x60
 8002a20:	2204      	movs	r2, #4
 8002a22:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	015a      	lsls	r2, r3, #5
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a30:	461a      	mov	r2, r3
 8002a32:	2302      	movs	r3, #2
 8002a34:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	b2d9      	uxtb	r1, r3
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	202c      	movs	r0, #44	; 0x2c
 8002a40:	fb00 f303 	mul.w	r3, r0, r3
 8002a44:	4413      	add	r3, r2
 8002a46:	3360      	adds	r3, #96	; 0x60
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f005 fb51 	bl	80080f4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a52:	e061      	b.n	8002b18 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 0310 	and.w	r3, r3, #16
 8002a66:	2b10      	cmp	r3, #16
 8002a68:	d156      	bne.n	8002b18 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	212c      	movs	r1, #44	; 0x2c
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	333f      	adds	r3, #63	; 0x3f
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b03      	cmp	r3, #3
 8002a7c:	d111      	bne.n	8002aa2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	212c      	movs	r1, #44	; 0x2c
 8002a84:	fb01 f303 	mul.w	r3, r1, r3
 8002a88:	4413      	add	r3, r2
 8002a8a:	335c      	adds	r3, #92	; 0x5c
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	4611      	mov	r1, r2
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f003 f895 	bl	8005bca <USB_HC_Halt>
 8002aa0:	e031      	b.n	8002b06 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	212c      	movs	r1, #44	; 0x2c
 8002aa8:	fb01 f303 	mul.w	r3, r1, r3
 8002aac:	4413      	add	r3, r2
 8002aae:	333f      	adds	r3, #63	; 0x3f
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d009      	beq.n	8002aca <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	212c      	movs	r1, #44	; 0x2c
 8002abc:	fb01 f303 	mul.w	r3, r1, r3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	333f      	adds	r3, #63	; 0x3f
 8002ac4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d11d      	bne.n	8002b06 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	212c      	movs	r1, #44	; 0x2c
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	335c      	adds	r3, #92	; 0x5c
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d110      	bne.n	8002b06 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	212c      	movs	r1, #44	; 0x2c
 8002aea:	fb01 f303 	mul.w	r3, r1, r3
 8002aee:	4413      	add	r3, r2
 8002af0:	3361      	adds	r3, #97	; 0x61
 8002af2:	2203      	movs	r2, #3
 8002af4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	4611      	mov	r1, r2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f003 f862 	bl	8005bca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	015a      	lsls	r2, r3, #5
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b12:	461a      	mov	r2, r3
 8002b14:	2310      	movs	r3, #16
 8002b16:	6093      	str	r3, [r2, #8]
}
 8002b18:	bf00      	nop
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b088      	sub	sp, #32
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002b36:	78fb      	ldrb	r3, [r7, #3]
 8002b38:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d11a      	bne.n	8002b86 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	2304      	movs	r3, #4
 8002b60:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	212c      	movs	r1, #44	; 0x2c
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3361      	adds	r3, #97	; 0x61
 8002b70:	2206      	movs	r2, #6
 8002b72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f003 f823 	bl	8005bca <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002b84:	e331      	b.n	80031ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	015a      	lsls	r2, r3, #5
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	d12e      	bne.n	8002bfa <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	015a      	lsls	r2, r3, #5
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba8:	461a      	mov	r2, r3
 8002baa:	2320      	movs	r3, #32
 8002bac:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	212c      	movs	r1, #44	; 0x2c
 8002bb4:	fb01 f303 	mul.w	r3, r1, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	333d      	adds	r3, #61	; 0x3d
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	f040 8313 	bne.w	80031ea <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	212c      	movs	r1, #44	; 0x2c
 8002bca:	fb01 f303 	mul.w	r3, r1, r3
 8002bce:	4413      	add	r3, r2
 8002bd0:	333d      	adds	r3, #61	; 0x3d
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	212c      	movs	r1, #44	; 0x2c
 8002bdc:	fb01 f303 	mul.w	r3, r1, r3
 8002be0:	4413      	add	r3, r2
 8002be2:	3360      	adds	r3, #96	; 0x60
 8002be4:	2202      	movs	r2, #2
 8002be6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f002 ffe9 	bl	8005bca <USB_HC_Halt>
}
 8002bf8:	e2f7      	b.n	80031ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	015a      	lsls	r2, r3, #5
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	4413      	add	r3, r2
 8002c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c10:	d112      	bne.n	8002c38 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	015a      	lsls	r2, r3, #5
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1e:	461a      	mov	r2, r3
 8002c20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c24:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	b2d2      	uxtb	r2, r2
 8002c2e:	4611      	mov	r1, r2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f002 ffca 	bl	8005bca <USB_HC_Halt>
}
 8002c36:	e2d8      	b.n	80031ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	015a      	lsls	r2, r3, #5
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d140      	bne.n	8002cd0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	212c      	movs	r1, #44	; 0x2c
 8002c54:	fb01 f303 	mul.w	r3, r1, r3
 8002c58:	4413      	add	r3, r2
 8002c5a:	335c      	adds	r3, #92	; 0x5c
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	015a      	lsls	r2, r3, #5
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c72:	2b40      	cmp	r3, #64	; 0x40
 8002c74:	d111      	bne.n	8002c9a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	212c      	movs	r1, #44	; 0x2c
 8002c7c:	fb01 f303 	mul.w	r3, r1, r3
 8002c80:	4413      	add	r3, r2
 8002c82:	333d      	adds	r3, #61	; 0x3d
 8002c84:	2201      	movs	r2, #1
 8002c86:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c94:	461a      	mov	r2, r3
 8002c96:	2340      	movs	r3, #64	; 0x40
 8002c98:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	015a      	lsls	r2, r3, #5
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	2301      	movs	r3, #1
 8002caa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	212c      	movs	r1, #44	; 0x2c
 8002cb2:	fb01 f303 	mul.w	r3, r1, r3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3361      	adds	r3, #97	; 0x61
 8002cba:	2201      	movs	r2, #1
 8002cbc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f002 ff7e 	bl	8005bca <USB_HC_Halt>
}
 8002cce:	e28c      	b.n	80031ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce2:	2b40      	cmp	r3, #64	; 0x40
 8002ce4:	d12c      	bne.n	8002d40 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	212c      	movs	r1, #44	; 0x2c
 8002cec:	fb01 f303 	mul.w	r3, r1, r3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3361      	adds	r3, #97	; 0x61
 8002cf4:	2204      	movs	r2, #4
 8002cf6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	212c      	movs	r1, #44	; 0x2c
 8002cfe:	fb01 f303 	mul.w	r3, r1, r3
 8002d02:	4413      	add	r3, r2
 8002d04:	333d      	adds	r3, #61	; 0x3d
 8002d06:	2201      	movs	r2, #1
 8002d08:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	212c      	movs	r1, #44	; 0x2c
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	4413      	add	r3, r2
 8002d16:	335c      	adds	r3, #92	; 0x5c
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	4611      	mov	r1, r2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f002 ff4f 	bl	8005bca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	015a      	lsls	r2, r3, #5
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d38:	461a      	mov	r2, r3
 8002d3a:	2340      	movs	r3, #64	; 0x40
 8002d3c:	6093      	str	r3, [r2, #8]
}
 8002d3e:	e254      	b.n	80031ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	015a      	lsls	r2, r3, #5
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	4413      	add	r3, r2
 8002d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d11a      	bne.n	8002d8c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	015a      	lsls	r2, r3, #5
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d62:	461a      	mov	r2, r3
 8002d64:	2308      	movs	r3, #8
 8002d66:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	212c      	movs	r1, #44	; 0x2c
 8002d6e:	fb01 f303 	mul.w	r3, r1, r3
 8002d72:	4413      	add	r3, r2
 8002d74:	3361      	adds	r3, #97	; 0x61
 8002d76:	2205      	movs	r2, #5
 8002d78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	4611      	mov	r1, r2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f002 ff20 	bl	8005bca <USB_HC_Halt>
}
 8002d8a:	e22e      	b.n	80031ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	2b10      	cmp	r3, #16
 8002da0:	d140      	bne.n	8002e24 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	212c      	movs	r1, #44	; 0x2c
 8002da8:	fb01 f303 	mul.w	r3, r1, r3
 8002dac:	4413      	add	r3, r2
 8002dae:	335c      	adds	r3, #92	; 0x5c
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	212c      	movs	r1, #44	; 0x2c
 8002dba:	fb01 f303 	mul.w	r3, r1, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3361      	adds	r3, #97	; 0x61
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	212c      	movs	r1, #44	; 0x2c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	333d      	adds	r3, #61	; 0x3d
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d112      	bne.n	8002e00 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	212c      	movs	r1, #44	; 0x2c
 8002de0:	fb01 f303 	mul.w	r3, r1, r3
 8002de4:	4413      	add	r3, r2
 8002de6:	333c      	adds	r3, #60	; 0x3c
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d108      	bne.n	8002e00 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	212c      	movs	r1, #44	; 0x2c
 8002df4:	fb01 f303 	mul.w	r3, r1, r3
 8002df8:	4413      	add	r3, r2
 8002dfa:	333d      	adds	r3, #61	; 0x3d
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	4611      	mov	r1, r2
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f002 fedd 	bl	8005bca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	015a      	lsls	r2, r3, #5
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	4413      	add	r3, r2
 8002e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	2310      	movs	r3, #16
 8002e20:	6093      	str	r3, [r2, #8]
}
 8002e22:	e1e2      	b.n	80031ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e36:	2b80      	cmp	r3, #128	; 0x80
 8002e38:	d164      	bne.n	8002f04 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d111      	bne.n	8002e66 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	212c      	movs	r1, #44	; 0x2c
 8002e48:	fb01 f303 	mul.w	r3, r1, r3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3361      	adds	r3, #97	; 0x61
 8002e50:	2206      	movs	r2, #6
 8002e52:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f002 feb3 	bl	8005bca <USB_HC_Halt>
 8002e64:	e044      	b.n	8002ef0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	212c      	movs	r1, #44	; 0x2c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	335c      	adds	r3, #92	; 0x5c
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	1c5a      	adds	r2, r3, #1
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	202c      	movs	r0, #44	; 0x2c
 8002e7e:	fb00 f303 	mul.w	r3, r0, r3
 8002e82:	440b      	add	r3, r1
 8002e84:	335c      	adds	r3, #92	; 0x5c
 8002e86:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	212c      	movs	r1, #44	; 0x2c
 8002e8e:	fb01 f303 	mul.w	r3, r1, r3
 8002e92:	4413      	add	r3, r2
 8002e94:	335c      	adds	r3, #92	; 0x5c
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d920      	bls.n	8002ede <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	212c      	movs	r1, #44	; 0x2c
 8002ea2:	fb01 f303 	mul.w	r3, r1, r3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	335c      	adds	r3, #92	; 0x5c
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	212c      	movs	r1, #44	; 0x2c
 8002eb4:	fb01 f303 	mul.w	r3, r1, r3
 8002eb8:	4413      	add	r3, r2
 8002eba:	3360      	adds	r3, #96	; 0x60
 8002ebc:	2204      	movs	r2, #4
 8002ebe:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	b2d9      	uxtb	r1, r3
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	202c      	movs	r0, #44	; 0x2c
 8002eca:	fb00 f303 	mul.w	r3, r0, r3
 8002ece:	4413      	add	r3, r2
 8002ed0:	3360      	adds	r3, #96	; 0x60
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f005 f90c 	bl	80080f4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002edc:	e008      	b.n	8002ef0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	212c      	movs	r1, #44	; 0x2c
 8002ee4:	fb01 f303 	mul.w	r3, r1, r3
 8002ee8:	4413      	add	r3, r2
 8002eea:	3360      	adds	r3, #96	; 0x60
 8002eec:	2202      	movs	r2, #2
 8002eee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	015a      	lsls	r2, r3, #5
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efc:	461a      	mov	r2, r3
 8002efe:	2380      	movs	r3, #128	; 0x80
 8002f00:	6093      	str	r3, [r2, #8]
}
 8002f02:	e172      	b.n	80031ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f1a:	d11b      	bne.n	8002f54 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	212c      	movs	r1, #44	; 0x2c
 8002f22:	fb01 f303 	mul.w	r3, r1, r3
 8002f26:	4413      	add	r3, r2
 8002f28:	3361      	adds	r3, #97	; 0x61
 8002f2a:	2208      	movs	r2, #8
 8002f2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	4611      	mov	r1, r2
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f002 fe46 	bl	8005bca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	015a      	lsls	r2, r3, #5
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	4413      	add	r3, r2
 8002f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f50:	6093      	str	r3, [r2, #8]
}
 8002f52:	e14a      	b.n	80031ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	f040 813f 	bne.w	80031ea <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	212c      	movs	r1, #44	; 0x2c
 8002f72:	fb01 f303 	mul.w	r3, r1, r3
 8002f76:	4413      	add	r3, r2
 8002f78:	3361      	adds	r3, #97	; 0x61
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d17d      	bne.n	800307c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	212c      	movs	r1, #44	; 0x2c
 8002f86:	fb01 f303 	mul.w	r3, r1, r3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3360      	adds	r3, #96	; 0x60
 8002f8e:	2201      	movs	r2, #1
 8002f90:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	212c      	movs	r1, #44	; 0x2c
 8002f98:	fb01 f303 	mul.w	r3, r1, r3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	333f      	adds	r3, #63	; 0x3f
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d00a      	beq.n	8002fbc <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	212c      	movs	r1, #44	; 0x2c
 8002fac:	fb01 f303 	mul.w	r3, r1, r3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	333f      	adds	r3, #63	; 0x3f
 8002fb4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	f040 8100 	bne.w	80031bc <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d113      	bne.n	8002fec <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	212c      	movs	r1, #44	; 0x2c
 8002fca:	fb01 f303 	mul.w	r3, r1, r3
 8002fce:	4413      	add	r3, r2
 8002fd0:	3355      	adds	r3, #85	; 0x55
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	f083 0301 	eor.w	r3, r3, #1
 8002fd8:	b2d8      	uxtb	r0, r3
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	212c      	movs	r1, #44	; 0x2c
 8002fe0:	fb01 f303 	mul.w	r3, r1, r3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3355      	adds	r3, #85	; 0x55
 8002fe8:	4602      	mov	r2, r0
 8002fea:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	f040 80e3 	bne.w	80031bc <HCD_HC_OUT_IRQHandler+0x69c>
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	212c      	movs	r1, #44	; 0x2c
 8002ffc:	fb01 f303 	mul.w	r3, r1, r3
 8003000:	4413      	add	r3, r2
 8003002:	334c      	adds	r3, #76	; 0x4c
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 80d8 	beq.w	80031bc <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	212c      	movs	r1, #44	; 0x2c
 8003012:	fb01 f303 	mul.w	r3, r1, r3
 8003016:	4413      	add	r3, r2
 8003018:	334c      	adds	r3, #76	; 0x4c
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	202c      	movs	r0, #44	; 0x2c
 8003022:	fb00 f202 	mul.w	r2, r0, r2
 8003026:	440a      	add	r2, r1
 8003028:	3240      	adds	r2, #64	; 0x40
 800302a:	8812      	ldrh	r2, [r2, #0]
 800302c:	4413      	add	r3, r2
 800302e:	3b01      	subs	r3, #1
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	202c      	movs	r0, #44	; 0x2c
 8003036:	fb00 f202 	mul.w	r2, r0, r2
 800303a:	440a      	add	r2, r1
 800303c:	3240      	adds	r2, #64	; 0x40
 800303e:	8812      	ldrh	r2, [r2, #0]
 8003040:	fbb3 f3f2 	udiv	r3, r3, r2
 8003044:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 80b5 	beq.w	80031bc <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	212c      	movs	r1, #44	; 0x2c
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	4413      	add	r3, r2
 800305e:	3355      	adds	r3, #85	; 0x55
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	f083 0301 	eor.w	r3, r3, #1
 8003066:	b2d8      	uxtb	r0, r3
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	212c      	movs	r1, #44	; 0x2c
 800306e:	fb01 f303 	mul.w	r3, r1, r3
 8003072:	4413      	add	r3, r2
 8003074:	3355      	adds	r3, #85	; 0x55
 8003076:	4602      	mov	r2, r0
 8003078:	701a      	strb	r2, [r3, #0]
 800307a:	e09f      	b.n	80031bc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	212c      	movs	r1, #44	; 0x2c
 8003082:	fb01 f303 	mul.w	r3, r1, r3
 8003086:	4413      	add	r3, r2
 8003088:	3361      	adds	r3, #97	; 0x61
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b03      	cmp	r3, #3
 800308e:	d109      	bne.n	80030a4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	212c      	movs	r1, #44	; 0x2c
 8003096:	fb01 f303 	mul.w	r3, r1, r3
 800309a:	4413      	add	r3, r2
 800309c:	3360      	adds	r3, #96	; 0x60
 800309e:	2202      	movs	r2, #2
 80030a0:	701a      	strb	r2, [r3, #0]
 80030a2:	e08b      	b.n	80031bc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	212c      	movs	r1, #44	; 0x2c
 80030aa:	fb01 f303 	mul.w	r3, r1, r3
 80030ae:	4413      	add	r3, r2
 80030b0:	3361      	adds	r3, #97	; 0x61
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	d109      	bne.n	80030cc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	212c      	movs	r1, #44	; 0x2c
 80030be:	fb01 f303 	mul.w	r3, r1, r3
 80030c2:	4413      	add	r3, r2
 80030c4:	3360      	adds	r3, #96	; 0x60
 80030c6:	2202      	movs	r2, #2
 80030c8:	701a      	strb	r2, [r3, #0]
 80030ca:	e077      	b.n	80031bc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	212c      	movs	r1, #44	; 0x2c
 80030d2:	fb01 f303 	mul.w	r3, r1, r3
 80030d6:	4413      	add	r3, r2
 80030d8:	3361      	adds	r3, #97	; 0x61
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b05      	cmp	r3, #5
 80030de:	d109      	bne.n	80030f4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	212c      	movs	r1, #44	; 0x2c
 80030e6:	fb01 f303 	mul.w	r3, r1, r3
 80030ea:	4413      	add	r3, r2
 80030ec:	3360      	adds	r3, #96	; 0x60
 80030ee:	2205      	movs	r2, #5
 80030f0:	701a      	strb	r2, [r3, #0]
 80030f2:	e063      	b.n	80031bc <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	212c      	movs	r1, #44	; 0x2c
 80030fa:	fb01 f303 	mul.w	r3, r1, r3
 80030fe:	4413      	add	r3, r2
 8003100:	3361      	adds	r3, #97	; 0x61
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b06      	cmp	r3, #6
 8003106:	d009      	beq.n	800311c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	212c      	movs	r1, #44	; 0x2c
 800310e:	fb01 f303 	mul.w	r3, r1, r3
 8003112:	4413      	add	r3, r2
 8003114:	3361      	adds	r3, #97	; 0x61
 8003116:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003118:	2b08      	cmp	r3, #8
 800311a:	d14f      	bne.n	80031bc <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	212c      	movs	r1, #44	; 0x2c
 8003122:	fb01 f303 	mul.w	r3, r1, r3
 8003126:	4413      	add	r3, r2
 8003128:	335c      	adds	r3, #92	; 0x5c
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	202c      	movs	r0, #44	; 0x2c
 8003134:	fb00 f303 	mul.w	r3, r0, r3
 8003138:	440b      	add	r3, r1
 800313a:	335c      	adds	r3, #92	; 0x5c
 800313c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	212c      	movs	r1, #44	; 0x2c
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	4413      	add	r3, r2
 800314a:	335c      	adds	r3, #92	; 0x5c
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d912      	bls.n	8003178 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	212c      	movs	r1, #44	; 0x2c
 8003158:	fb01 f303 	mul.w	r3, r1, r3
 800315c:	4413      	add	r3, r2
 800315e:	335c      	adds	r3, #92	; 0x5c
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	212c      	movs	r1, #44	; 0x2c
 800316a:	fb01 f303 	mul.w	r3, r1, r3
 800316e:	4413      	add	r3, r2
 8003170:	3360      	adds	r3, #96	; 0x60
 8003172:	2204      	movs	r2, #4
 8003174:	701a      	strb	r2, [r3, #0]
 8003176:	e021      	b.n	80031bc <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	212c      	movs	r1, #44	; 0x2c
 800317e:	fb01 f303 	mul.w	r3, r1, r3
 8003182:	4413      	add	r3, r2
 8003184:	3360      	adds	r3, #96	; 0x60
 8003186:	2202      	movs	r2, #2
 8003188:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	4413      	add	r3, r2
 8003192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031a0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031a8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	015a      	lsls	r2, r3, #5
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	4413      	add	r3, r2
 80031b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b6:	461a      	mov	r2, r3
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c8:	461a      	mov	r2, r3
 80031ca:	2302      	movs	r3, #2
 80031cc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	b2d9      	uxtb	r1, r3
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	202c      	movs	r0, #44	; 0x2c
 80031d8:	fb00 f303 	mul.w	r3, r0, r3
 80031dc:	4413      	add	r3, r2
 80031de:	3360      	adds	r3, #96	; 0x60
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	461a      	mov	r2, r3
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f004 ff85 	bl	80080f4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80031ea:	bf00      	nop
 80031ec:	3720      	adds	r7, #32
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b08a      	sub	sp, #40	; 0x28
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	0c5b      	lsrs	r3, r3, #17
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	091b      	lsrs	r3, r3, #4
 8003222:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003226:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d004      	beq.n	8003238 <HCD_RXQLVL_IRQHandler+0x46>
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2b05      	cmp	r3, #5
 8003232:	f000 80a9 	beq.w	8003388 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003236:	e0aa      	b.n	800338e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 80a6 	beq.w	800338c <HCD_RXQLVL_IRQHandler+0x19a>
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	212c      	movs	r1, #44	; 0x2c
 8003246:	fb01 f303 	mul.w	r3, r1, r3
 800324a:	4413      	add	r3, r2
 800324c:	3344      	adds	r3, #68	; 0x44
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 809b 	beq.w	800338c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	212c      	movs	r1, #44	; 0x2c
 800325c:	fb01 f303 	mul.w	r3, r1, r3
 8003260:	4413      	add	r3, r2
 8003262:	3350      	adds	r3, #80	; 0x50
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	441a      	add	r2, r3
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	202c      	movs	r0, #44	; 0x2c
 8003270:	fb00 f303 	mul.w	r3, r0, r3
 8003274:	440b      	add	r3, r1
 8003276:	334c      	adds	r3, #76	; 0x4c
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d87a      	bhi.n	8003374 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6818      	ldr	r0, [r3, #0]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	212c      	movs	r1, #44	; 0x2c
 8003288:	fb01 f303 	mul.w	r3, r1, r3
 800328c:	4413      	add	r3, r2
 800328e:	3344      	adds	r3, #68	; 0x44
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	b292      	uxth	r2, r2
 8003296:	4619      	mov	r1, r3
 8003298:	f001 ffee 	bl	8005278 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	212c      	movs	r1, #44	; 0x2c
 80032a2:	fb01 f303 	mul.w	r3, r1, r3
 80032a6:	4413      	add	r3, r2
 80032a8:	3344      	adds	r3, #68	; 0x44
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	441a      	add	r2, r3
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	202c      	movs	r0, #44	; 0x2c
 80032b6:	fb00 f303 	mul.w	r3, r0, r3
 80032ba:	440b      	add	r3, r1
 80032bc:	3344      	adds	r3, #68	; 0x44
 80032be:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	212c      	movs	r1, #44	; 0x2c
 80032c6:	fb01 f303 	mul.w	r3, r1, r3
 80032ca:	4413      	add	r3, r2
 80032cc:	3350      	adds	r3, #80	; 0x50
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	441a      	add	r2, r3
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	202c      	movs	r0, #44	; 0x2c
 80032da:	fb00 f303 	mul.w	r3, r0, r3
 80032de:	440b      	add	r3, r1
 80032e0:	3350      	adds	r3, #80	; 0x50
 80032e2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	015a      	lsls	r2, r3, #5
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	0cdb      	lsrs	r3, r3, #19
 80032f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032f8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	212c      	movs	r1, #44	; 0x2c
 8003300:	fb01 f303 	mul.w	r3, r1, r3
 8003304:	4413      	add	r3, r2
 8003306:	3340      	adds	r3, #64	; 0x40
 8003308:	881b      	ldrh	r3, [r3, #0]
 800330a:	461a      	mov	r2, r3
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	4293      	cmp	r3, r2
 8003310:	d13c      	bne.n	800338c <HCD_RXQLVL_IRQHandler+0x19a>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d039      	beq.n	800338c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	4413      	add	r3, r2
 8003320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800332e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003336:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	4413      	add	r3, r2
 8003340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003344:	461a      	mov	r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	212c      	movs	r1, #44	; 0x2c
 8003350:	fb01 f303 	mul.w	r3, r1, r3
 8003354:	4413      	add	r3, r2
 8003356:	3354      	adds	r3, #84	; 0x54
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	f083 0301 	eor.w	r3, r3, #1
 800335e:	b2d8      	uxtb	r0, r3
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	212c      	movs	r1, #44	; 0x2c
 8003366:	fb01 f303 	mul.w	r3, r1, r3
 800336a:	4413      	add	r3, r2
 800336c:	3354      	adds	r3, #84	; 0x54
 800336e:	4602      	mov	r2, r0
 8003370:	701a      	strb	r2, [r3, #0]
      break;
 8003372:	e00b      	b.n	800338c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	212c      	movs	r1, #44	; 0x2c
 800337a:	fb01 f303 	mul.w	r3, r1, r3
 800337e:	4413      	add	r3, r2
 8003380:	3360      	adds	r3, #96	; 0x60
 8003382:	2204      	movs	r2, #4
 8003384:	701a      	strb	r2, [r3, #0]
      break;
 8003386:	e001      	b.n	800338c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003388:	bf00      	nop
 800338a:	e000      	b.n	800338e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800338c:	bf00      	nop
  }
}
 800338e:	bf00      	nop
 8003390:	3728      	adds	r7, #40	; 0x28
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b086      	sub	sp, #24
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80033c2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d10b      	bne.n	80033e6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d102      	bne.n	80033de <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f004 fe6f 	bl	80080bc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f043 0302 	orr.w	r3, r3, #2
 80033e4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d132      	bne.n	8003456 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f043 0308 	orr.w	r3, r3, #8
 80033f6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d126      	bne.n	8003450 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	2b02      	cmp	r3, #2
 8003408:	d113      	bne.n	8003432 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003410:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003414:	d106      	bne.n	8003424 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2102      	movs	r1, #2
 800341c:	4618      	mov	r0, r3
 800341e:	f002 f899 	bl	8005554 <USB_InitFSLSPClkSel>
 8003422:	e011      	b.n	8003448 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2101      	movs	r1, #1
 800342a:	4618      	mov	r0, r3
 800342c:	f002 f892 	bl	8005554 <USB_InitFSLSPClkSel>
 8003430:	e00a      	b.n	8003448 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d106      	bne.n	8003448 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003440:	461a      	mov	r2, r3
 8003442:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003446:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f004 fe61 	bl	8008110 <HAL_HCD_PortEnabled_Callback>
 800344e:	e002      	b.n	8003456 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f004 fe6b 	bl	800812c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	2b20      	cmp	r3, #32
 800345e:	d103      	bne.n	8003468 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f043 0320 	orr.w	r3, r3, #32
 8003466:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800346e:	461a      	mov	r2, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	6013      	str	r3, [r2, #0]
}
 8003474:	bf00      	nop
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e267      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d075      	beq.n	8003586 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800349a:	4b88      	ldr	r3, [pc, #544]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 030c 	and.w	r3, r3, #12
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d00c      	beq.n	80034c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034a6:	4b85      	ldr	r3, [pc, #532]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034ae:	2b08      	cmp	r3, #8
 80034b0:	d112      	bne.n	80034d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034b2:	4b82      	ldr	r3, [pc, #520]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034be:	d10b      	bne.n	80034d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c0:	4b7e      	ldr	r3, [pc, #504]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d05b      	beq.n	8003584 <HAL_RCC_OscConfig+0x108>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d157      	bne.n	8003584 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e242      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e0:	d106      	bne.n	80034f0 <HAL_RCC_OscConfig+0x74>
 80034e2:	4b76      	ldr	r3, [pc, #472]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a75      	ldr	r2, [pc, #468]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 80034e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	e01d      	b.n	800352c <HAL_RCC_OscConfig+0xb0>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034f8:	d10c      	bne.n	8003514 <HAL_RCC_OscConfig+0x98>
 80034fa:	4b70      	ldr	r3, [pc, #448]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a6f      	ldr	r2, [pc, #444]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 8003500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	4b6d      	ldr	r3, [pc, #436]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a6c      	ldr	r2, [pc, #432]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 800350c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	e00b      	b.n	800352c <HAL_RCC_OscConfig+0xb0>
 8003514:	4b69      	ldr	r3, [pc, #420]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a68      	ldr	r2, [pc, #416]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 800351a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	4b66      	ldr	r3, [pc, #408]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a65      	ldr	r2, [pc, #404]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 8003526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800352a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d013      	beq.n	800355c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003534:	f7fd fcb6 	bl	8000ea4 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800353c:	f7fd fcb2 	bl	8000ea4 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b64      	cmp	r3, #100	; 0x64
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e207      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354e:	4b5b      	ldr	r3, [pc, #364]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0f0      	beq.n	800353c <HAL_RCC_OscConfig+0xc0>
 800355a:	e014      	b.n	8003586 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355c:	f7fd fca2 	bl	8000ea4 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003564:	f7fd fc9e 	bl	8000ea4 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b64      	cmp	r3, #100	; 0x64
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e1f3      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003576:	4b51      	ldr	r3, [pc, #324]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f0      	bne.n	8003564 <HAL_RCC_OscConfig+0xe8>
 8003582:	e000      	b.n	8003586 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d063      	beq.n	800365a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003592:	4b4a      	ldr	r3, [pc, #296]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 030c 	and.w	r3, r3, #12
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00b      	beq.n	80035b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800359e:	4b47      	ldr	r3, [pc, #284]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d11c      	bne.n	80035e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035aa:	4b44      	ldr	r3, [pc, #272]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d116      	bne.n	80035e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035b6:	4b41      	ldr	r3, [pc, #260]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d005      	beq.n	80035ce <HAL_RCC_OscConfig+0x152>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d001      	beq.n	80035ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e1c7      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ce:	4b3b      	ldr	r3, [pc, #236]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4937      	ldr	r1, [pc, #220]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035e2:	e03a      	b.n	800365a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d020      	beq.n	800362e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035ec:	4b34      	ldr	r3, [pc, #208]	; (80036c0 <HAL_RCC_OscConfig+0x244>)
 80035ee:	2201      	movs	r2, #1
 80035f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f2:	f7fd fc57 	bl	8000ea4 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035fa:	f7fd fc53 	bl	8000ea4 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e1a8      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360c:	4b2b      	ldr	r3, [pc, #172]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0f0      	beq.n	80035fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003618:	4b28      	ldr	r3, [pc, #160]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	4925      	ldr	r1, [pc, #148]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 8003628:	4313      	orrs	r3, r2
 800362a:	600b      	str	r3, [r1, #0]
 800362c:	e015      	b.n	800365a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800362e:	4b24      	ldr	r3, [pc, #144]	; (80036c0 <HAL_RCC_OscConfig+0x244>)
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003634:	f7fd fc36 	bl	8000ea4 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800363c:	f7fd fc32 	bl	8000ea4 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e187      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800364e:	4b1b      	ldr	r3, [pc, #108]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f0      	bne.n	800363c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d036      	beq.n	80036d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d016      	beq.n	800369c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800366e:	4b15      	ldr	r3, [pc, #84]	; (80036c4 <HAL_RCC_OscConfig+0x248>)
 8003670:	2201      	movs	r2, #1
 8003672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003674:	f7fd fc16 	bl	8000ea4 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800367c:	f7fd fc12 	bl	8000ea4 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e167      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800368e:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <HAL_RCC_OscConfig+0x240>)
 8003690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0f0      	beq.n	800367c <HAL_RCC_OscConfig+0x200>
 800369a:	e01b      	b.n	80036d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800369c:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <HAL_RCC_OscConfig+0x248>)
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a2:	f7fd fbff 	bl	8000ea4 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a8:	e00e      	b.n	80036c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036aa:	f7fd fbfb 	bl	8000ea4 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d907      	bls.n	80036c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e150      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
 80036bc:	40023800 	.word	0x40023800
 80036c0:	42470000 	.word	0x42470000
 80036c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c8:	4b88      	ldr	r3, [pc, #544]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 80036ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1ea      	bne.n	80036aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 8097 	beq.w	8003810 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036e2:	2300      	movs	r3, #0
 80036e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036e6:	4b81      	ldr	r3, [pc, #516]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10f      	bne.n	8003712 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f2:	2300      	movs	r3, #0
 80036f4:	60bb      	str	r3, [r7, #8]
 80036f6:	4b7d      	ldr	r3, [pc, #500]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	4a7c      	ldr	r2, [pc, #496]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 80036fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003700:	6413      	str	r3, [r2, #64]	; 0x40
 8003702:	4b7a      	ldr	r3, [pc, #488]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370a:	60bb      	str	r3, [r7, #8]
 800370c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800370e:	2301      	movs	r3, #1
 8003710:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003712:	4b77      	ldr	r3, [pc, #476]	; (80038f0 <HAL_RCC_OscConfig+0x474>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371a:	2b00      	cmp	r3, #0
 800371c:	d118      	bne.n	8003750 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800371e:	4b74      	ldr	r3, [pc, #464]	; (80038f0 <HAL_RCC_OscConfig+0x474>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a73      	ldr	r2, [pc, #460]	; (80038f0 <HAL_RCC_OscConfig+0x474>)
 8003724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800372a:	f7fd fbbb 	bl	8000ea4 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003732:	f7fd fbb7 	bl	8000ea4 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e10c      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003744:	4b6a      	ldr	r3, [pc, #424]	; (80038f0 <HAL_RCC_OscConfig+0x474>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0f0      	beq.n	8003732 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d106      	bne.n	8003766 <HAL_RCC_OscConfig+0x2ea>
 8003758:	4b64      	ldr	r3, [pc, #400]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 800375a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375c:	4a63      	ldr	r2, [pc, #396]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 800375e:	f043 0301 	orr.w	r3, r3, #1
 8003762:	6713      	str	r3, [r2, #112]	; 0x70
 8003764:	e01c      	b.n	80037a0 <HAL_RCC_OscConfig+0x324>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	2b05      	cmp	r3, #5
 800376c:	d10c      	bne.n	8003788 <HAL_RCC_OscConfig+0x30c>
 800376e:	4b5f      	ldr	r3, [pc, #380]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 8003770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003772:	4a5e      	ldr	r2, [pc, #376]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 8003774:	f043 0304 	orr.w	r3, r3, #4
 8003778:	6713      	str	r3, [r2, #112]	; 0x70
 800377a:	4b5c      	ldr	r3, [pc, #368]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 800377c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377e:	4a5b      	ldr	r2, [pc, #364]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	6713      	str	r3, [r2, #112]	; 0x70
 8003786:	e00b      	b.n	80037a0 <HAL_RCC_OscConfig+0x324>
 8003788:	4b58      	ldr	r3, [pc, #352]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 800378a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378c:	4a57      	ldr	r2, [pc, #348]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 800378e:	f023 0301 	bic.w	r3, r3, #1
 8003792:	6713      	str	r3, [r2, #112]	; 0x70
 8003794:	4b55      	ldr	r3, [pc, #340]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 8003796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003798:	4a54      	ldr	r2, [pc, #336]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 800379a:	f023 0304 	bic.w	r3, r3, #4
 800379e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d015      	beq.n	80037d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a8:	f7fd fb7c 	bl	8000ea4 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ae:	e00a      	b.n	80037c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037b0:	f7fd fb78 	bl	8000ea4 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80037be:	4293      	cmp	r3, r2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e0cb      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c6:	4b49      	ldr	r3, [pc, #292]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 80037c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0ee      	beq.n	80037b0 <HAL_RCC_OscConfig+0x334>
 80037d2:	e014      	b.n	80037fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d4:	f7fd fb66 	bl	8000ea4 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037da:	e00a      	b.n	80037f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037dc:	f7fd fb62 	bl	8000ea4 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e0b5      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f2:	4b3e      	ldr	r3, [pc, #248]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 80037f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1ee      	bne.n	80037dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037fe:	7dfb      	ldrb	r3, [r7, #23]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d105      	bne.n	8003810 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003804:	4b39      	ldr	r3, [pc, #228]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	4a38      	ldr	r2, [pc, #224]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 800380a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800380e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 80a1 	beq.w	800395c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800381a:	4b34      	ldr	r3, [pc, #208]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 030c 	and.w	r3, r3, #12
 8003822:	2b08      	cmp	r3, #8
 8003824:	d05c      	beq.n	80038e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d141      	bne.n	80038b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800382e:	4b31      	ldr	r3, [pc, #196]	; (80038f4 <HAL_RCC_OscConfig+0x478>)
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003834:	f7fd fb36 	bl	8000ea4 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800383c:	f7fd fb32 	bl	8000ea4 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e087      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800384e:	4b27      	ldr	r3, [pc, #156]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1f0      	bne.n	800383c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69da      	ldr	r2, [r3, #28]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	019b      	lsls	r3, r3, #6
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	085b      	lsrs	r3, r3, #1
 8003872:	3b01      	subs	r3, #1
 8003874:	041b      	lsls	r3, r3, #16
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	061b      	lsls	r3, r3, #24
 800387e:	491b      	ldr	r1, [pc, #108]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 8003880:	4313      	orrs	r3, r2
 8003882:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003884:	4b1b      	ldr	r3, [pc, #108]	; (80038f4 <HAL_RCC_OscConfig+0x478>)
 8003886:	2201      	movs	r2, #1
 8003888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388a:	f7fd fb0b 	bl	8000ea4 <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003890:	e008      	b.n	80038a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003892:	f7fd fb07 	bl	8000ea4 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e05c      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a4:	4b11      	ldr	r3, [pc, #68]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0f0      	beq.n	8003892 <HAL_RCC_OscConfig+0x416>
 80038b0:	e054      	b.n	800395c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b2:	4b10      	ldr	r3, [pc, #64]	; (80038f4 <HAL_RCC_OscConfig+0x478>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b8:	f7fd faf4 	bl	8000ea4 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038c0:	f7fd faf0 	bl	8000ea4 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e045      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d2:	4b06      	ldr	r3, [pc, #24]	; (80038ec <HAL_RCC_OscConfig+0x470>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0x444>
 80038de:	e03d      	b.n	800395c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d107      	bne.n	80038f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e038      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
 80038ec:	40023800 	.word	0x40023800
 80038f0:	40007000 	.word	0x40007000
 80038f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038f8:	4b1b      	ldr	r3, [pc, #108]	; (8003968 <HAL_RCC_OscConfig+0x4ec>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d028      	beq.n	8003958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003910:	429a      	cmp	r2, r3
 8003912:	d121      	bne.n	8003958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800391e:	429a      	cmp	r2, r3
 8003920:	d11a      	bne.n	8003958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003928:	4013      	ands	r3, r2
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800392e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003930:	4293      	cmp	r3, r2
 8003932:	d111      	bne.n	8003958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393e:	085b      	lsrs	r3, r3, #1
 8003940:	3b01      	subs	r3, #1
 8003942:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003944:	429a      	cmp	r2, r3
 8003946:	d107      	bne.n	8003958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003952:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003954:	429a      	cmp	r2, r3
 8003956:	d001      	beq.n	800395c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e000      	b.n	800395e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40023800 	.word	0x40023800

0800396c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e0cc      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003980:	4b68      	ldr	r3, [pc, #416]	; (8003b24 <HAL_RCC_ClockConfig+0x1b8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d90c      	bls.n	80039a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398e:	4b65      	ldr	r3, [pc, #404]	; (8003b24 <HAL_RCC_ClockConfig+0x1b8>)
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003996:	4b63      	ldr	r3, [pc, #396]	; (8003b24 <HAL_RCC_ClockConfig+0x1b8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d001      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0b8      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d020      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d005      	beq.n	80039cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039c0:	4b59      	ldr	r3, [pc, #356]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	4a58      	ldr	r2, [pc, #352]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039d8:	4b53      	ldr	r3, [pc, #332]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	4a52      	ldr	r2, [pc, #328]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e4:	4b50      	ldr	r3, [pc, #320]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	494d      	ldr	r1, [pc, #308]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d044      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d107      	bne.n	8003a1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0a:	4b47      	ldr	r3, [pc, #284]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d119      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e07f      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d003      	beq.n	8003a2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d107      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a2a:	4b3f      	ldr	r3, [pc, #252]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d109      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e06f      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a3a:	4b3b      	ldr	r3, [pc, #236]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e067      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a4a:	4b37      	ldr	r3, [pc, #220]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f023 0203 	bic.w	r2, r3, #3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	4934      	ldr	r1, [pc, #208]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a5c:	f7fd fa22 	bl	8000ea4 <HAL_GetTick>
 8003a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a62:	e00a      	b.n	8003a7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a64:	f7fd fa1e 	bl	8000ea4 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e04f      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7a:	4b2b      	ldr	r3, [pc, #172]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 020c 	and.w	r2, r3, #12
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d1eb      	bne.n	8003a64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a8c:	4b25      	ldr	r3, [pc, #148]	; (8003b24 <HAL_RCC_ClockConfig+0x1b8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d20c      	bcs.n	8003ab4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9a:	4b22      	ldr	r3, [pc, #136]	; (8003b24 <HAL_RCC_ClockConfig+0x1b8>)
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa2:	4b20      	ldr	r3, [pc, #128]	; (8003b24 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d001      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e032      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ac0:	4b19      	ldr	r3, [pc, #100]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	4916      	ldr	r1, [pc, #88]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d009      	beq.n	8003af2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ade:	4b12      	ldr	r3, [pc, #72]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	490e      	ldr	r1, [pc, #56]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003af2:	f000 f821 	bl	8003b38 <HAL_RCC_GetSysClockFreq>
 8003af6:	4602      	mov	r2, r0
 8003af8:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	091b      	lsrs	r3, r3, #4
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	490a      	ldr	r1, [pc, #40]	; (8003b2c <HAL_RCC_ClockConfig+0x1c0>)
 8003b04:	5ccb      	ldrb	r3, [r1, r3]
 8003b06:	fa22 f303 	lsr.w	r3, r2, r3
 8003b0a:	4a09      	ldr	r2, [pc, #36]	; (8003b30 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b0e:	4b09      	ldr	r3, [pc, #36]	; (8003b34 <HAL_RCC_ClockConfig+0x1c8>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fd f982 	bl	8000e1c <HAL_InitTick>

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40023c00 	.word	0x40023c00
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	080095c0 	.word	0x080095c0
 8003b30:	20000000 	.word	0x20000000
 8003b34:	20000004 	.word	0x20000004

08003b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b3c:	b090      	sub	sp, #64	; 0x40
 8003b3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	637b      	str	r3, [r7, #52]	; 0x34
 8003b44:	2300      	movs	r3, #0
 8003b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b48:	2300      	movs	r3, #0
 8003b4a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b50:	4b59      	ldr	r3, [pc, #356]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 030c 	and.w	r3, r3, #12
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d00d      	beq.n	8003b78 <HAL_RCC_GetSysClockFreq+0x40>
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	f200 80a1 	bhi.w	8003ca4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <HAL_RCC_GetSysClockFreq+0x34>
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d003      	beq.n	8003b72 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b6a:	e09b      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b6c:	4b53      	ldr	r3, [pc, #332]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x184>)
 8003b6e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003b70:	e09b      	b.n	8003caa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b72:	4b53      	ldr	r3, [pc, #332]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b74:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b76:	e098      	b.n	8003caa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b78:	4b4f      	ldr	r3, [pc, #316]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b80:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b82:	4b4d      	ldr	r3, [pc, #308]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d028      	beq.n	8003be0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b8e:	4b4a      	ldr	r3, [pc, #296]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	099b      	lsrs	r3, r3, #6
 8003b94:	2200      	movs	r2, #0
 8003b96:	623b      	str	r3, [r7, #32]
 8003b98:	627a      	str	r2, [r7, #36]	; 0x24
 8003b9a:	6a3b      	ldr	r3, [r7, #32]
 8003b9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	4b47      	ldr	r3, [pc, #284]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ba4:	fb03 f201 	mul.w	r2, r3, r1
 8003ba8:	2300      	movs	r3, #0
 8003baa:	fb00 f303 	mul.w	r3, r0, r3
 8003bae:	4413      	add	r3, r2
 8003bb0:	4a43      	ldr	r2, [pc, #268]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bb2:	fba0 1202 	umull	r1, r2, r0, r2
 8003bb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bb8:	460a      	mov	r2, r1
 8003bba:	62ba      	str	r2, [r7, #40]	; 0x28
 8003bbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bbe:	4413      	add	r3, r2
 8003bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	61bb      	str	r3, [r7, #24]
 8003bc8:	61fa      	str	r2, [r7, #28]
 8003bca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003bd2:	f7fc fb55 	bl	8000280 <__aeabi_uldivmod>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4613      	mov	r3, r2
 8003bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bde:	e053      	b.n	8003c88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003be0:	4b35      	ldr	r3, [pc, #212]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	099b      	lsrs	r3, r3, #6
 8003be6:	2200      	movs	r2, #0
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	617a      	str	r2, [r7, #20]
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003bf2:	f04f 0b00 	mov.w	fp, #0
 8003bf6:	4652      	mov	r2, sl
 8003bf8:	465b      	mov	r3, fp
 8003bfa:	f04f 0000 	mov.w	r0, #0
 8003bfe:	f04f 0100 	mov.w	r1, #0
 8003c02:	0159      	lsls	r1, r3, #5
 8003c04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c08:	0150      	lsls	r0, r2, #5
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	ebb2 080a 	subs.w	r8, r2, sl
 8003c12:	eb63 090b 	sbc.w	r9, r3, fp
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	f04f 0300 	mov.w	r3, #0
 8003c1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c2a:	ebb2 0408 	subs.w	r4, r2, r8
 8003c2e:	eb63 0509 	sbc.w	r5, r3, r9
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	f04f 0300 	mov.w	r3, #0
 8003c3a:	00eb      	lsls	r3, r5, #3
 8003c3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c40:	00e2      	lsls	r2, r4, #3
 8003c42:	4614      	mov	r4, r2
 8003c44:	461d      	mov	r5, r3
 8003c46:	eb14 030a 	adds.w	r3, r4, sl
 8003c4a:	603b      	str	r3, [r7, #0]
 8003c4c:	eb45 030b 	adc.w	r3, r5, fp
 8003c50:	607b      	str	r3, [r7, #4]
 8003c52:	f04f 0200 	mov.w	r2, #0
 8003c56:	f04f 0300 	mov.w	r3, #0
 8003c5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c5e:	4629      	mov	r1, r5
 8003c60:	028b      	lsls	r3, r1, #10
 8003c62:	4621      	mov	r1, r4
 8003c64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c68:	4621      	mov	r1, r4
 8003c6a:	028a      	lsls	r2, r1, #10
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	4619      	mov	r1, r3
 8003c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c72:	2200      	movs	r2, #0
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	60fa      	str	r2, [r7, #12]
 8003c78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c7c:	f7fc fb00 	bl	8000280 <__aeabi_uldivmod>
 8003c80:	4602      	mov	r2, r0
 8003c82:	460b      	mov	r3, r1
 8003c84:	4613      	mov	r3, r2
 8003c86:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c88:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	0c1b      	lsrs	r3, r3, #16
 8003c8e:	f003 0303 	and.w	r3, r3, #3
 8003c92:	3301      	adds	r3, #1
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003c98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ca2:	e002      	b.n	8003caa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ca4:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x184>)
 8003ca6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ca8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3740      	adds	r7, #64	; 0x40
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	00f42400 	.word	0x00f42400
 8003cc0:	017d7840 	.word	0x017d7840

08003cc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cc8:	4b03      	ldr	r3, [pc, #12]	; (8003cd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cca:	681b      	ldr	r3, [r3, #0]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	20000000 	.word	0x20000000

08003cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ce0:	f7ff fff0 	bl	8003cc4 <HAL_RCC_GetHCLKFreq>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	0a9b      	lsrs	r3, r3, #10
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	4903      	ldr	r1, [pc, #12]	; (8003d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cf2:	5ccb      	ldrb	r3, [r1, r3]
 8003cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	080095d0 	.word	0x080095d0

08003d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d08:	f7ff ffdc 	bl	8003cc4 <HAL_RCC_GetHCLKFreq>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	0b5b      	lsrs	r3, r3, #13
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	4903      	ldr	r1, [pc, #12]	; (8003d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d1a:	5ccb      	ldrb	r3, [r1, r3]
 8003d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40023800 	.word	0x40023800
 8003d28:	080095d0 	.word	0x080095d0

08003d2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e03f      	b.n	8003dbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d106      	bne.n	8003d58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7fc fe36 	bl	80009c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2224      	movs	r2, #36	; 0x24
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 fe9b 	bl	8004aac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	691a      	ldr	r2, [r3, #16]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695a      	ldr	r2, [r3, #20]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003da4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b08c      	sub	sp, #48	; 0x30
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b20      	cmp	r3, #32
 8003dde:	d152      	bne.n	8003e86 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e04b      	b.n	8003e88 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d101      	bne.n	8003dfe <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e044      	b.n	8003e88 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003e0c:	88fb      	ldrh	r3, [r7, #6]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	68b9      	ldr	r1, [r7, #8]
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 fbea 	bl	80045ec <UART_Start_Receive_DMA>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003e1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d12c      	bne.n	8003e80 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d125      	bne.n	8003e7a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e2e:	2300      	movs	r3, #0
 8003e30:	613b      	str	r3, [r7, #16]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	613b      	str	r3, [r7, #16]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	613b      	str	r3, [r7, #16]
 8003e42:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	330c      	adds	r3, #12
 8003e4a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	e853 3f00 	ldrex	r3, [r3]
 8003e52:	617b      	str	r3, [r7, #20]
   return(result);
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f043 0310 	orr.w	r3, r3, #16
 8003e5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	330c      	adds	r3, #12
 8003e62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e64:	627a      	str	r2, [r7, #36]	; 0x24
 8003e66:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e68:	6a39      	ldr	r1, [r7, #32]
 8003e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6c:	e841 2300 	strex	r3, r2, [r1]
 8003e70:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1e5      	bne.n	8003e44 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8003e78:	e002      	b.n	8003e80 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003e80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003e84:	e000      	b.n	8003e88 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8003e86:	2302      	movs	r3, #2
  }
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3730      	adds	r7, #48	; 0x30
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b0ba      	sub	sp, #232	; 0xe8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003ece:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10f      	bne.n	8003ef6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d009      	beq.n	8003ef6 <HAL_UART_IRQHandler+0x66>
 8003ee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ee6:	f003 0320 	and.w	r3, r3, #32
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fd21 	bl	8004936 <UART_Receive_IT>
      return;
 8003ef4:	e256      	b.n	80043a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ef6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 80de 	beq.w	80040bc <HAL_UART_IRQHandler+0x22c>
 8003f00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d106      	bne.n	8003f1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f10:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 80d1 	beq.w	80040bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00b      	beq.n	8003f3e <HAL_UART_IRQHandler+0xae>
 8003f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d005      	beq.n	8003f3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	f043 0201 	orr.w	r2, r3, #1
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00b      	beq.n	8003f62 <HAL_UART_IRQHandler+0xd2>
 8003f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d005      	beq.n	8003f62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	f043 0202 	orr.w	r2, r3, #2
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00b      	beq.n	8003f86 <HAL_UART_IRQHandler+0xf6>
 8003f6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	f043 0204 	orr.w	r2, r3, #4
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d011      	beq.n	8003fb6 <HAL_UART_IRQHandler+0x126>
 8003f92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f96:	f003 0320 	and.w	r3, r3, #32
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d105      	bne.n	8003faa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d005      	beq.n	8003fb6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	f043 0208 	orr.w	r2, r3, #8
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 81ed 	beq.w	800439a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc4:	f003 0320 	and.w	r3, r3, #32
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d008      	beq.n	8003fde <HAL_UART_IRQHandler+0x14e>
 8003fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fd0:	f003 0320 	and.w	r3, r3, #32
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 fcac 	bl	8004936 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe8:	2b40      	cmp	r3, #64	; 0x40
 8003fea:	bf0c      	ite	eq
 8003fec:	2301      	moveq	r3, #1
 8003fee:	2300      	movne	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d103      	bne.n	800400a <HAL_UART_IRQHandler+0x17a>
 8004002:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004006:	2b00      	cmp	r3, #0
 8004008:	d04f      	beq.n	80040aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 fbb4 	bl	8004778 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401a:	2b40      	cmp	r3, #64	; 0x40
 800401c:	d141      	bne.n	80040a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3314      	adds	r3, #20
 8004024:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004028:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800402c:	e853 3f00 	ldrex	r3, [r3]
 8004030:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004034:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800403c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3314      	adds	r3, #20
 8004046:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800404a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800404e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004052:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004056:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800405a:	e841 2300 	strex	r3, r2, [r1]
 800405e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004062:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1d9      	bne.n	800401e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406e:	2b00      	cmp	r3, #0
 8004070:	d013      	beq.n	800409a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004076:	4a7d      	ldr	r2, [pc, #500]	; (800426c <HAL_UART_IRQHandler+0x3dc>)
 8004078:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	4618      	mov	r0, r3
 8004080:	f7fd f9c8 	bl	8001414 <HAL_DMA_Abort_IT>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d016      	beq.n	80040b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004094:	4610      	mov	r0, r2
 8004096:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004098:	e00e      	b.n	80040b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f9a4 	bl	80043e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a0:	e00a      	b.n	80040b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f9a0 	bl	80043e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a8:	e006      	b.n	80040b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f99c 	bl	80043e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80040b6:	e170      	b.n	800439a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b8:	bf00      	nop
    return;
 80040ba:	e16e      	b.n	800439a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	f040 814a 	bne.w	800435a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80040c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ca:	f003 0310 	and.w	r3, r3, #16
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 8143 	beq.w	800435a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80040d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040d8:	f003 0310 	and.w	r3, r3, #16
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 813c 	beq.w	800435a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040e2:	2300      	movs	r3, #0
 80040e4:	60bb      	str	r3, [r7, #8]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	60bb      	str	r3, [r7, #8]
 80040f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004102:	2b40      	cmp	r3, #64	; 0x40
 8004104:	f040 80b4 	bne.w	8004270 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004114:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 8140 	beq.w	800439e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004122:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004126:	429a      	cmp	r2, r3
 8004128:	f080 8139 	bcs.w	800439e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004132:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800413e:	f000 8088 	beq.w	8004252 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	330c      	adds	r3, #12
 8004148:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004150:	e853 3f00 	ldrex	r3, [r3]
 8004154:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004158:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800415c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004160:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	330c      	adds	r3, #12
 800416a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800416e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004172:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004176:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800417a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800417e:	e841 2300 	strex	r3, r2, [r1]
 8004182:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004186:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1d9      	bne.n	8004142 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	3314      	adds	r3, #20
 8004194:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004196:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004198:	e853 3f00 	ldrex	r3, [r3]
 800419c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800419e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041a0:	f023 0301 	bic.w	r3, r3, #1
 80041a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3314      	adds	r3, #20
 80041ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80041b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80041ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80041be:	e841 2300 	strex	r3, r2, [r1]
 80041c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80041c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1e1      	bne.n	800418e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3314      	adds	r3, #20
 80041d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041d4:	e853 3f00 	ldrex	r3, [r3]
 80041d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80041da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	3314      	adds	r3, #20
 80041ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80041f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041f6:	e841 2300 	strex	r3, r2, [r1]
 80041fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80041fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1e3      	bne.n	80041ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2220      	movs	r2, #32
 8004206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	330c      	adds	r3, #12
 8004216:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800421a:	e853 3f00 	ldrex	r3, [r3]
 800421e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004222:	f023 0310 	bic.w	r3, r3, #16
 8004226:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	330c      	adds	r3, #12
 8004230:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004234:	65ba      	str	r2, [r7, #88]	; 0x58
 8004236:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004238:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800423a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800423c:	e841 2300 	strex	r3, r2, [r1]
 8004240:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1e3      	bne.n	8004210 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424c:	4618      	mov	r0, r3
 800424e:	f7fd f871 	bl	8001334 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800425a:	b29b      	uxth	r3, r3
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	b29b      	uxth	r3, r3
 8004260:	4619      	mov	r1, r3
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fc f98e 	bl	8000584 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004268:	e099      	b.n	800439e <HAL_UART_IRQHandler+0x50e>
 800426a:	bf00      	nop
 800426c:	0800483f 	.word	0x0800483f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004278:	b29b      	uxth	r3, r3
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 808b 	beq.w	80043a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800428c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 8086 	beq.w	80043a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	330c      	adds	r3, #12
 800429c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a0:	e853 3f00 	ldrex	r3, [r3]
 80042a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	330c      	adds	r3, #12
 80042b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80042ba:	647a      	str	r2, [r7, #68]	; 0x44
 80042bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042c2:	e841 2300 	strex	r3, r2, [r1]
 80042c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1e3      	bne.n	8004296 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3314      	adds	r3, #20
 80042d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	e853 3f00 	ldrex	r3, [r3]
 80042dc:	623b      	str	r3, [r7, #32]
   return(result);
 80042de:	6a3b      	ldr	r3, [r7, #32]
 80042e0:	f023 0301 	bic.w	r3, r3, #1
 80042e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3314      	adds	r3, #20
 80042ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80042f2:	633a      	str	r2, [r7, #48]	; 0x30
 80042f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042fa:	e841 2300 	strex	r3, r2, [r1]
 80042fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1e3      	bne.n	80042ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2220      	movs	r2, #32
 800430a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	330c      	adds	r3, #12
 800431a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	e853 3f00 	ldrex	r3, [r3]
 8004322:	60fb      	str	r3, [r7, #12]
   return(result);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 0310 	bic.w	r3, r3, #16
 800432a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	330c      	adds	r3, #12
 8004334:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004338:	61fa      	str	r2, [r7, #28]
 800433a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433c:	69b9      	ldr	r1, [r7, #24]
 800433e:	69fa      	ldr	r2, [r7, #28]
 8004340:	e841 2300 	strex	r3, r2, [r1]
 8004344:	617b      	str	r3, [r7, #20]
   return(result);
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1e3      	bne.n	8004314 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800434c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004350:	4619      	mov	r1, r3
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7fc f916 	bl	8000584 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004358:	e023      	b.n	80043a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800435a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800435e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004362:	2b00      	cmp	r3, #0
 8004364:	d009      	beq.n	800437a <HAL_UART_IRQHandler+0x4ea>
 8004366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800436a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 fa77 	bl	8004866 <UART_Transmit_IT>
    return;
 8004378:	e014      	b.n	80043a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800437a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800437e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00e      	beq.n	80043a4 <HAL_UART_IRQHandler+0x514>
 8004386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800438a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438e:	2b00      	cmp	r3, #0
 8004390:	d008      	beq.n	80043a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 fab7 	bl	8004906 <UART_EndTransmit_IT>
    return;
 8004398:	e004      	b.n	80043a4 <HAL_UART_IRQHandler+0x514>
    return;
 800439a:	bf00      	nop
 800439c:	e002      	b.n	80043a4 <HAL_UART_IRQHandler+0x514>
      return;
 800439e:	bf00      	nop
 80043a0:	e000      	b.n	80043a4 <HAL_UART_IRQHandler+0x514>
      return;
 80043a2:	bf00      	nop
  }
}
 80043a4:	37e8      	adds	r7, #232	; 0xe8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop

080043ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b09c      	sub	sp, #112	; 0x70
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004408:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004414:	2b00      	cmp	r3, #0
 8004416:	d172      	bne.n	80044fe <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800441a:	2200      	movs	r2, #0
 800441c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800441e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	330c      	adds	r3, #12
 8004424:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004428:	e853 3f00 	ldrex	r3, [r3]
 800442c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800442e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004434:	66bb      	str	r3, [r7, #104]	; 0x68
 8004436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	330c      	adds	r3, #12
 800443c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800443e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004440:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004442:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004444:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004446:	e841 2300 	strex	r3, r2, [r1]
 800444a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800444c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1e5      	bne.n	800441e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3314      	adds	r3, #20
 8004458:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445c:	e853 3f00 	ldrex	r3, [r3]
 8004460:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004464:	f023 0301 	bic.w	r3, r3, #1
 8004468:	667b      	str	r3, [r7, #100]	; 0x64
 800446a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	3314      	adds	r3, #20
 8004470:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004472:	647a      	str	r2, [r7, #68]	; 0x44
 8004474:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004476:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004478:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800447a:	e841 2300 	strex	r3, r2, [r1]
 800447e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1e5      	bne.n	8004452 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3314      	adds	r3, #20
 800448c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	e853 3f00 	ldrex	r3, [r3]
 8004494:	623b      	str	r3, [r7, #32]
   return(result);
 8004496:	6a3b      	ldr	r3, [r7, #32]
 8004498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800449c:	663b      	str	r3, [r7, #96]	; 0x60
 800449e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	3314      	adds	r3, #20
 80044a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044a6:	633a      	str	r2, [r7, #48]	; 0x30
 80044a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ae:	e841 2300 	strex	r3, r2, [r1]
 80044b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1e5      	bne.n	8004486 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044bc:	2220      	movs	r2, #32
 80044be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d119      	bne.n	80044fe <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	330c      	adds	r3, #12
 80044d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	e853 3f00 	ldrex	r3, [r3]
 80044d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f023 0310 	bic.w	r3, r3, #16
 80044e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	330c      	adds	r3, #12
 80044e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80044ea:	61fa      	str	r2, [r7, #28]
 80044ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ee:	69b9      	ldr	r1, [r7, #24]
 80044f0:	69fa      	ldr	r2, [r7, #28]
 80044f2:	e841 2300 	strex	r3, r2, [r1]
 80044f6:	617b      	str	r3, [r7, #20]
   return(result);
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1e5      	bne.n	80044ca <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	2b01      	cmp	r3, #1
 8004504:	d106      	bne.n	8004514 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004508:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800450a:	4619      	mov	r1, r3
 800450c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800450e:	f7fc f839 	bl	8000584 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004512:	e002      	b.n	800451a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004514:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004516:	f7ff ff53 	bl	80043c0 <HAL_UART_RxCpltCallback>
}
 800451a:	bf00      	nop
 800451c:	3770      	adds	r7, #112	; 0x70
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004534:	2b01      	cmp	r3, #1
 8004536:	d108      	bne.n	800454a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800453c:	085b      	lsrs	r3, r3, #1
 800453e:	b29b      	uxth	r3, r3
 8004540:	4619      	mov	r1, r3
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f7fc f81e 	bl	8000584 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004548:	e002      	b.n	8004550 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f7ff ff42 	bl	80043d4 <HAL_UART_RxHalfCpltCallback>
}
 8004550:	bf00      	nop
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004568:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004574:	2b80      	cmp	r3, #128	; 0x80
 8004576:	bf0c      	ite	eq
 8004578:	2301      	moveq	r3, #1
 800457a:	2300      	movne	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b21      	cmp	r3, #33	; 0x21
 800458a:	d108      	bne.n	800459e <UART_DMAError+0x46>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d005      	beq.n	800459e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2200      	movs	r2, #0
 8004596:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004598:	68b8      	ldr	r0, [r7, #8]
 800459a:	f000 f8c5 	bl	8004728 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a8:	2b40      	cmp	r3, #64	; 0x40
 80045aa:	bf0c      	ite	eq
 80045ac:	2301      	moveq	r3, #1
 80045ae:	2300      	movne	r3, #0
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b22      	cmp	r3, #34	; 0x22
 80045be:	d108      	bne.n	80045d2 <UART_DMAError+0x7a>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d005      	beq.n	80045d2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2200      	movs	r2, #0
 80045ca:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80045cc:	68b8      	ldr	r0, [r7, #8]
 80045ce:	f000 f8d3 	bl	8004778 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	f043 0210 	orr.w	r2, r3, #16
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045de:	68b8      	ldr	r0, [r7, #8]
 80045e0:	f7ff ff02 	bl	80043e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045e4:	bf00      	nop
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b098      	sub	sp, #96	; 0x60
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	4613      	mov	r3, r2
 80045f8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	88fa      	ldrh	r2, [r7, #6]
 8004604:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2222      	movs	r2, #34	; 0x22
 8004610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004618:	4a40      	ldr	r2, [pc, #256]	; (800471c <UART_Start_Receive_DMA+0x130>)
 800461a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004620:	4a3f      	ldr	r2, [pc, #252]	; (8004720 <UART_Start_Receive_DMA+0x134>)
 8004622:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	4a3e      	ldr	r2, [pc, #248]	; (8004724 <UART_Start_Receive_DMA+0x138>)
 800462a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004630:	2200      	movs	r2, #0
 8004632:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004634:	f107 0308 	add.w	r3, r7, #8
 8004638:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3304      	adds	r3, #4
 8004644:	4619      	mov	r1, r3
 8004646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	88fb      	ldrh	r3, [r7, #6]
 800464c:	f7fc fe1a 	bl	8001284 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004650:	2300      	movs	r3, #0
 8004652:	613b      	str	r3, [r7, #16]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	613b      	str	r3, [r7, #16]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	613b      	str	r3, [r7, #16]
 8004664:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d019      	beq.n	80046aa <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	330c      	adds	r3, #12
 800467c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004680:	e853 3f00 	ldrex	r3, [r3]
 8004684:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800468c:	65bb      	str	r3, [r7, #88]	; 0x58
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	330c      	adds	r3, #12
 8004694:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004696:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004698:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800469c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800469e:	e841 2300 	strex	r3, r2, [r1]
 80046a2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80046a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1e5      	bne.n	8004676 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3314      	adds	r3, #20
 80046b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b4:	e853 3f00 	ldrex	r3, [r3]
 80046b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	657b      	str	r3, [r7, #84]	; 0x54
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	3314      	adds	r3, #20
 80046c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80046ca:	63ba      	str	r2, [r7, #56]	; 0x38
 80046cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80046d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046d2:	e841 2300 	strex	r3, r2, [r1]
 80046d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1e5      	bne.n	80046aa <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3314      	adds	r3, #20
 80046e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	e853 3f00 	ldrex	r3, [r3]
 80046ec:	617b      	str	r3, [r7, #20]
   return(result);
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046f4:	653b      	str	r3, [r7, #80]	; 0x50
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3314      	adds	r3, #20
 80046fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80046fe:	627a      	str	r2, [r7, #36]	; 0x24
 8004700:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004702:	6a39      	ldr	r1, [r7, #32]
 8004704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004706:	e841 2300 	strex	r3, r2, [r1]
 800470a:	61fb      	str	r3, [r7, #28]
   return(result);
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1e5      	bne.n	80046de <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3760      	adds	r7, #96	; 0x60
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	080043fd 	.word	0x080043fd
 8004720:	08004523 	.word	0x08004523
 8004724:	08004559 	.word	0x08004559

08004728 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004728:	b480      	push	{r7}
 800472a:	b089      	sub	sp, #36	; 0x24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	330c      	adds	r3, #12
 8004736:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	e853 3f00 	ldrex	r3, [r3]
 800473e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004746:	61fb      	str	r3, [r7, #28]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	330c      	adds	r3, #12
 800474e:	69fa      	ldr	r2, [r7, #28]
 8004750:	61ba      	str	r2, [r7, #24]
 8004752:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004754:	6979      	ldr	r1, [r7, #20]
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	e841 2300 	strex	r3, r2, [r1]
 800475c:	613b      	str	r3, [r7, #16]
   return(result);
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1e5      	bne.n	8004730 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2220      	movs	r2, #32
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800476c:	bf00      	nop
 800476e:	3724      	adds	r7, #36	; 0x24
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004778:	b480      	push	{r7}
 800477a:	b095      	sub	sp, #84	; 0x54
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	330c      	adds	r3, #12
 8004786:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800478a:	e853 3f00 	ldrex	r3, [r3]
 800478e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004792:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004796:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	330c      	adds	r3, #12
 800479e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047a0:	643a      	str	r2, [r7, #64]	; 0x40
 80047a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047a8:	e841 2300 	strex	r3, r2, [r1]
 80047ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1e5      	bne.n	8004780 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3314      	adds	r3, #20
 80047ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	e853 3f00 	ldrex	r3, [r3]
 80047c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	f023 0301 	bic.w	r3, r3, #1
 80047ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3314      	adds	r3, #20
 80047d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047dc:	e841 2300 	strex	r3, r2, [r1]
 80047e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1e5      	bne.n	80047b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d119      	bne.n	8004824 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	330c      	adds	r3, #12
 80047f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	e853 3f00 	ldrex	r3, [r3]
 80047fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f023 0310 	bic.w	r3, r3, #16
 8004806:	647b      	str	r3, [r7, #68]	; 0x44
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	330c      	adds	r3, #12
 800480e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004810:	61ba      	str	r2, [r7, #24]
 8004812:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004814:	6979      	ldr	r1, [r7, #20]
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	e841 2300 	strex	r3, r2, [r1]
 800481c:	613b      	str	r3, [r7, #16]
   return(result);
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1e5      	bne.n	80047f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2220      	movs	r2, #32
 8004828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004832:	bf00      	nop
 8004834:	3754      	adds	r7, #84	; 0x54
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b084      	sub	sp, #16
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f7ff fdc5 	bl	80043e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800485e:	bf00      	nop
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004866:	b480      	push	{r7}
 8004868:	b085      	sub	sp, #20
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b21      	cmp	r3, #33	; 0x21
 8004878:	d13e      	bne.n	80048f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004882:	d114      	bne.n	80048ae <UART_Transmit_IT+0x48>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d110      	bne.n	80048ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	461a      	mov	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	1c9a      	adds	r2, r3, #2
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	621a      	str	r2, [r3, #32]
 80048ac:	e008      	b.n	80048c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	1c59      	adds	r1, r3, #1
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6211      	str	r1, [r2, #32]
 80048b8:	781a      	ldrb	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	3b01      	subs	r3, #1
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	4619      	mov	r1, r3
 80048ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10f      	bne.n	80048f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68da      	ldr	r2, [r3, #12]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80048f4:	2300      	movs	r3, #0
 80048f6:	e000      	b.n	80048fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80048f8:	2302      	movs	r3, #2
  }
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b082      	sub	sp, #8
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68da      	ldr	r2, [r3, #12]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800491c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2220      	movs	r2, #32
 8004922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7ff fd40 	bl	80043ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b08c      	sub	sp, #48	; 0x30
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b22      	cmp	r3, #34	; 0x22
 8004948:	f040 80ab 	bne.w	8004aa2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004954:	d117      	bne.n	8004986 <UART_Receive_IT+0x50>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d113      	bne.n	8004986 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800495e:	2300      	movs	r3, #0
 8004960:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004966:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	b29b      	uxth	r3, r3
 8004970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004974:	b29a      	uxth	r2, r3
 8004976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004978:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497e:	1c9a      	adds	r2, r3, #2
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	629a      	str	r2, [r3, #40]	; 0x28
 8004984:	e026      	b.n	80049d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800498c:	2300      	movs	r3, #0
 800498e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004998:	d007      	beq.n	80049aa <UART_Receive_IT+0x74>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10a      	bne.n	80049b8 <UART_Receive_IT+0x82>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d106      	bne.n	80049b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b4:	701a      	strb	r2, [r3, #0]
 80049b6:	e008      	b.n	80049ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049d8:	b29b      	uxth	r3, r3
 80049da:	3b01      	subs	r3, #1
 80049dc:	b29b      	uxth	r3, r3
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	4619      	mov	r1, r3
 80049e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d15a      	bne.n	8004a9e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 0220 	bic.w	r2, r2, #32
 80049f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	695a      	ldr	r2, [r3, #20]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0201 	bic.w	r2, r2, #1
 8004a16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d135      	bne.n	8004a94 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	330c      	adds	r3, #12
 8004a34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	e853 3f00 	ldrex	r3, [r3]
 8004a3c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	f023 0310 	bic.w	r3, r3, #16
 8004a44:	627b      	str	r3, [r7, #36]	; 0x24
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	330c      	adds	r3, #12
 8004a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a4e:	623a      	str	r2, [r7, #32]
 8004a50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a52:	69f9      	ldr	r1, [r7, #28]
 8004a54:	6a3a      	ldr	r2, [r7, #32]
 8004a56:	e841 2300 	strex	r3, r2, [r1]
 8004a5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1e5      	bne.n	8004a2e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0310 	and.w	r3, r3, #16
 8004a6c:	2b10      	cmp	r3, #16
 8004a6e:	d10a      	bne.n	8004a86 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a70:	2300      	movs	r3, #0
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	60fb      	str	r3, [r7, #12]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7fb fd79 	bl	8000584 <HAL_UARTEx_RxEventCallback>
 8004a92:	e002      	b.n	8004a9a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff fc93 	bl	80043c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	e002      	b.n	8004aa4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	e000      	b.n	8004aa4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004aa2:	2302      	movs	r3, #2
  }
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3730      	adds	r7, #48	; 0x30
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ab0:	b0c0      	sub	sp, #256	; 0x100
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac8:	68d9      	ldr	r1, [r3, #12]
 8004aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	ea40 0301 	orr.w	r3, r0, r1
 8004ad4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	431a      	orrs	r2, r3
 8004aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b04:	f021 010c 	bic.w	r1, r1, #12
 8004b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b12:	430b      	orrs	r3, r1
 8004b14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b26:	6999      	ldr	r1, [r3, #24]
 8004b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	ea40 0301 	orr.w	r3, r0, r1
 8004b32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	4b8f      	ldr	r3, [pc, #572]	; (8004d78 <UART_SetConfig+0x2cc>)
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d005      	beq.n	8004b4c <UART_SetConfig+0xa0>
 8004b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	4b8d      	ldr	r3, [pc, #564]	; (8004d7c <UART_SetConfig+0x2d0>)
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d104      	bne.n	8004b56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b4c:	f7ff f8da 	bl	8003d04 <HAL_RCC_GetPCLK2Freq>
 8004b50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b54:	e003      	b.n	8004b5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b56:	f7ff f8c1 	bl	8003cdc <HAL_RCC_GetPCLK1Freq>
 8004b5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b68:	f040 810c 	bne.w	8004d84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b70:	2200      	movs	r2, #0
 8004b72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b7e:	4622      	mov	r2, r4
 8004b80:	462b      	mov	r3, r5
 8004b82:	1891      	adds	r1, r2, r2
 8004b84:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b86:	415b      	adcs	r3, r3
 8004b88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b8e:	4621      	mov	r1, r4
 8004b90:	eb12 0801 	adds.w	r8, r2, r1
 8004b94:	4629      	mov	r1, r5
 8004b96:	eb43 0901 	adc.w	r9, r3, r1
 8004b9a:	f04f 0200 	mov.w	r2, #0
 8004b9e:	f04f 0300 	mov.w	r3, #0
 8004ba2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ba6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004baa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bae:	4690      	mov	r8, r2
 8004bb0:	4699      	mov	r9, r3
 8004bb2:	4623      	mov	r3, r4
 8004bb4:	eb18 0303 	adds.w	r3, r8, r3
 8004bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004bbc:	462b      	mov	r3, r5
 8004bbe:	eb49 0303 	adc.w	r3, r9, r3
 8004bc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004bd2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004bd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004bda:	460b      	mov	r3, r1
 8004bdc:	18db      	adds	r3, r3, r3
 8004bde:	653b      	str	r3, [r7, #80]	; 0x50
 8004be0:	4613      	mov	r3, r2
 8004be2:	eb42 0303 	adc.w	r3, r2, r3
 8004be6:	657b      	str	r3, [r7, #84]	; 0x54
 8004be8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004bec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004bf0:	f7fb fb46 	bl	8000280 <__aeabi_uldivmod>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	4b61      	ldr	r3, [pc, #388]	; (8004d80 <UART_SetConfig+0x2d4>)
 8004bfa:	fba3 2302 	umull	r2, r3, r3, r2
 8004bfe:	095b      	lsrs	r3, r3, #5
 8004c00:	011c      	lsls	r4, r3, #4
 8004c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c06:	2200      	movs	r2, #0
 8004c08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c14:	4642      	mov	r2, r8
 8004c16:	464b      	mov	r3, r9
 8004c18:	1891      	adds	r1, r2, r2
 8004c1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c1c:	415b      	adcs	r3, r3
 8004c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c24:	4641      	mov	r1, r8
 8004c26:	eb12 0a01 	adds.w	sl, r2, r1
 8004c2a:	4649      	mov	r1, r9
 8004c2c:	eb43 0b01 	adc.w	fp, r3, r1
 8004c30:	f04f 0200 	mov.w	r2, #0
 8004c34:	f04f 0300 	mov.w	r3, #0
 8004c38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c44:	4692      	mov	sl, r2
 8004c46:	469b      	mov	fp, r3
 8004c48:	4643      	mov	r3, r8
 8004c4a:	eb1a 0303 	adds.w	r3, sl, r3
 8004c4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c52:	464b      	mov	r3, r9
 8004c54:	eb4b 0303 	adc.w	r3, fp, r3
 8004c58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c70:	460b      	mov	r3, r1
 8004c72:	18db      	adds	r3, r3, r3
 8004c74:	643b      	str	r3, [r7, #64]	; 0x40
 8004c76:	4613      	mov	r3, r2
 8004c78:	eb42 0303 	adc.w	r3, r2, r3
 8004c7c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c86:	f7fb fafb 	bl	8000280 <__aeabi_uldivmod>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	4611      	mov	r1, r2
 8004c90:	4b3b      	ldr	r3, [pc, #236]	; (8004d80 <UART_SetConfig+0x2d4>)
 8004c92:	fba3 2301 	umull	r2, r3, r3, r1
 8004c96:	095b      	lsrs	r3, r3, #5
 8004c98:	2264      	movs	r2, #100	; 0x64
 8004c9a:	fb02 f303 	mul.w	r3, r2, r3
 8004c9e:	1acb      	subs	r3, r1, r3
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ca6:	4b36      	ldr	r3, [pc, #216]	; (8004d80 <UART_SetConfig+0x2d4>)
 8004ca8:	fba3 2302 	umull	r2, r3, r3, r2
 8004cac:	095b      	lsrs	r3, r3, #5
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004cb4:	441c      	add	r4, r3
 8004cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cc0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004cc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004cc8:	4642      	mov	r2, r8
 8004cca:	464b      	mov	r3, r9
 8004ccc:	1891      	adds	r1, r2, r2
 8004cce:	63b9      	str	r1, [r7, #56]	; 0x38
 8004cd0:	415b      	adcs	r3, r3
 8004cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004cd8:	4641      	mov	r1, r8
 8004cda:	1851      	adds	r1, r2, r1
 8004cdc:	6339      	str	r1, [r7, #48]	; 0x30
 8004cde:	4649      	mov	r1, r9
 8004ce0:	414b      	adcs	r3, r1
 8004ce2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004cf0:	4659      	mov	r1, fp
 8004cf2:	00cb      	lsls	r3, r1, #3
 8004cf4:	4651      	mov	r1, sl
 8004cf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cfa:	4651      	mov	r1, sl
 8004cfc:	00ca      	lsls	r2, r1, #3
 8004cfe:	4610      	mov	r0, r2
 8004d00:	4619      	mov	r1, r3
 8004d02:	4603      	mov	r3, r0
 8004d04:	4642      	mov	r2, r8
 8004d06:	189b      	adds	r3, r3, r2
 8004d08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d0c:	464b      	mov	r3, r9
 8004d0e:	460a      	mov	r2, r1
 8004d10:	eb42 0303 	adc.w	r3, r2, r3
 8004d14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	18db      	adds	r3, r3, r3
 8004d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d32:	4613      	mov	r3, r2
 8004d34:	eb42 0303 	adc.w	r3, r2, r3
 8004d38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d42:	f7fb fa9d 	bl	8000280 <__aeabi_uldivmod>
 8004d46:	4602      	mov	r2, r0
 8004d48:	460b      	mov	r3, r1
 8004d4a:	4b0d      	ldr	r3, [pc, #52]	; (8004d80 <UART_SetConfig+0x2d4>)
 8004d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d50:	095b      	lsrs	r3, r3, #5
 8004d52:	2164      	movs	r1, #100	; 0x64
 8004d54:	fb01 f303 	mul.w	r3, r1, r3
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	3332      	adds	r3, #50	; 0x32
 8004d5e:	4a08      	ldr	r2, [pc, #32]	; (8004d80 <UART_SetConfig+0x2d4>)
 8004d60:	fba2 2303 	umull	r2, r3, r2, r3
 8004d64:	095b      	lsrs	r3, r3, #5
 8004d66:	f003 0207 	and.w	r2, r3, #7
 8004d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4422      	add	r2, r4
 8004d72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d74:	e105      	b.n	8004f82 <UART_SetConfig+0x4d6>
 8004d76:	bf00      	nop
 8004d78:	40011000 	.word	0x40011000
 8004d7c:	40011400 	.word	0x40011400
 8004d80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d96:	4642      	mov	r2, r8
 8004d98:	464b      	mov	r3, r9
 8004d9a:	1891      	adds	r1, r2, r2
 8004d9c:	6239      	str	r1, [r7, #32]
 8004d9e:	415b      	adcs	r3, r3
 8004da0:	627b      	str	r3, [r7, #36]	; 0x24
 8004da2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004da6:	4641      	mov	r1, r8
 8004da8:	1854      	adds	r4, r2, r1
 8004daa:	4649      	mov	r1, r9
 8004dac:	eb43 0501 	adc.w	r5, r3, r1
 8004db0:	f04f 0200 	mov.w	r2, #0
 8004db4:	f04f 0300 	mov.w	r3, #0
 8004db8:	00eb      	lsls	r3, r5, #3
 8004dba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dbe:	00e2      	lsls	r2, r4, #3
 8004dc0:	4614      	mov	r4, r2
 8004dc2:	461d      	mov	r5, r3
 8004dc4:	4643      	mov	r3, r8
 8004dc6:	18e3      	adds	r3, r4, r3
 8004dc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004dcc:	464b      	mov	r3, r9
 8004dce:	eb45 0303 	adc.w	r3, r5, r3
 8004dd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004de2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004de6:	f04f 0200 	mov.w	r2, #0
 8004dea:	f04f 0300 	mov.w	r3, #0
 8004dee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004df2:	4629      	mov	r1, r5
 8004df4:	008b      	lsls	r3, r1, #2
 8004df6:	4621      	mov	r1, r4
 8004df8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dfc:	4621      	mov	r1, r4
 8004dfe:	008a      	lsls	r2, r1, #2
 8004e00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e04:	f7fb fa3c 	bl	8000280 <__aeabi_uldivmod>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4b60      	ldr	r3, [pc, #384]	; (8004f90 <UART_SetConfig+0x4e4>)
 8004e0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e12:	095b      	lsrs	r3, r3, #5
 8004e14:	011c      	lsls	r4, r3, #4
 8004e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e28:	4642      	mov	r2, r8
 8004e2a:	464b      	mov	r3, r9
 8004e2c:	1891      	adds	r1, r2, r2
 8004e2e:	61b9      	str	r1, [r7, #24]
 8004e30:	415b      	adcs	r3, r3
 8004e32:	61fb      	str	r3, [r7, #28]
 8004e34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e38:	4641      	mov	r1, r8
 8004e3a:	1851      	adds	r1, r2, r1
 8004e3c:	6139      	str	r1, [r7, #16]
 8004e3e:	4649      	mov	r1, r9
 8004e40:	414b      	adcs	r3, r1
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	f04f 0200 	mov.w	r2, #0
 8004e48:	f04f 0300 	mov.w	r3, #0
 8004e4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e50:	4659      	mov	r1, fp
 8004e52:	00cb      	lsls	r3, r1, #3
 8004e54:	4651      	mov	r1, sl
 8004e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e5a:	4651      	mov	r1, sl
 8004e5c:	00ca      	lsls	r2, r1, #3
 8004e5e:	4610      	mov	r0, r2
 8004e60:	4619      	mov	r1, r3
 8004e62:	4603      	mov	r3, r0
 8004e64:	4642      	mov	r2, r8
 8004e66:	189b      	adds	r3, r3, r2
 8004e68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e6c:	464b      	mov	r3, r9
 8004e6e:	460a      	mov	r2, r1
 8004e70:	eb42 0303 	adc.w	r3, r2, r3
 8004e74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	f04f 0300 	mov.w	r3, #0
 8004e8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e90:	4649      	mov	r1, r9
 8004e92:	008b      	lsls	r3, r1, #2
 8004e94:	4641      	mov	r1, r8
 8004e96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e9a:	4641      	mov	r1, r8
 8004e9c:	008a      	lsls	r2, r1, #2
 8004e9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ea2:	f7fb f9ed 	bl	8000280 <__aeabi_uldivmod>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	4b39      	ldr	r3, [pc, #228]	; (8004f90 <UART_SetConfig+0x4e4>)
 8004eac:	fba3 1302 	umull	r1, r3, r3, r2
 8004eb0:	095b      	lsrs	r3, r3, #5
 8004eb2:	2164      	movs	r1, #100	; 0x64
 8004eb4:	fb01 f303 	mul.w	r3, r1, r3
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	3332      	adds	r3, #50	; 0x32
 8004ebe:	4a34      	ldr	r2, [pc, #208]	; (8004f90 <UART_SetConfig+0x4e4>)
 8004ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec4:	095b      	lsrs	r3, r3, #5
 8004ec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eca:	441c      	add	r4, r3
 8004ecc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	673b      	str	r3, [r7, #112]	; 0x70
 8004ed4:	677a      	str	r2, [r7, #116]	; 0x74
 8004ed6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004eda:	4642      	mov	r2, r8
 8004edc:	464b      	mov	r3, r9
 8004ede:	1891      	adds	r1, r2, r2
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	415b      	adcs	r3, r3
 8004ee4:	60fb      	str	r3, [r7, #12]
 8004ee6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004eea:	4641      	mov	r1, r8
 8004eec:	1851      	adds	r1, r2, r1
 8004eee:	6039      	str	r1, [r7, #0]
 8004ef0:	4649      	mov	r1, r9
 8004ef2:	414b      	adcs	r3, r1
 8004ef4:	607b      	str	r3, [r7, #4]
 8004ef6:	f04f 0200 	mov.w	r2, #0
 8004efa:	f04f 0300 	mov.w	r3, #0
 8004efe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f02:	4659      	mov	r1, fp
 8004f04:	00cb      	lsls	r3, r1, #3
 8004f06:	4651      	mov	r1, sl
 8004f08:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f0c:	4651      	mov	r1, sl
 8004f0e:	00ca      	lsls	r2, r1, #3
 8004f10:	4610      	mov	r0, r2
 8004f12:	4619      	mov	r1, r3
 8004f14:	4603      	mov	r3, r0
 8004f16:	4642      	mov	r2, r8
 8004f18:	189b      	adds	r3, r3, r2
 8004f1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f1c:	464b      	mov	r3, r9
 8004f1e:	460a      	mov	r2, r1
 8004f20:	eb42 0303 	adc.w	r3, r2, r3
 8004f24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	663b      	str	r3, [r7, #96]	; 0x60
 8004f30:	667a      	str	r2, [r7, #100]	; 0x64
 8004f32:	f04f 0200 	mov.w	r2, #0
 8004f36:	f04f 0300 	mov.w	r3, #0
 8004f3a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f3e:	4649      	mov	r1, r9
 8004f40:	008b      	lsls	r3, r1, #2
 8004f42:	4641      	mov	r1, r8
 8004f44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f48:	4641      	mov	r1, r8
 8004f4a:	008a      	lsls	r2, r1, #2
 8004f4c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f50:	f7fb f996 	bl	8000280 <__aeabi_uldivmod>
 8004f54:	4602      	mov	r2, r0
 8004f56:	460b      	mov	r3, r1
 8004f58:	4b0d      	ldr	r3, [pc, #52]	; (8004f90 <UART_SetConfig+0x4e4>)
 8004f5a:	fba3 1302 	umull	r1, r3, r3, r2
 8004f5e:	095b      	lsrs	r3, r3, #5
 8004f60:	2164      	movs	r1, #100	; 0x64
 8004f62:	fb01 f303 	mul.w	r3, r1, r3
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	011b      	lsls	r3, r3, #4
 8004f6a:	3332      	adds	r3, #50	; 0x32
 8004f6c:	4a08      	ldr	r2, [pc, #32]	; (8004f90 <UART_SetConfig+0x4e4>)
 8004f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	f003 020f 	and.w	r2, r3, #15
 8004f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4422      	add	r2, r4
 8004f80:	609a      	str	r2, [r3, #8]
}
 8004f82:	bf00      	nop
 8004f84:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f8e:	bf00      	nop
 8004f90:	51eb851f 	.word	0x51eb851f

08004f94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f94:	b084      	sub	sp, #16
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b084      	sub	sp, #16
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
 8004f9e:	f107 001c 	add.w	r0, r7, #28
 8004fa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d122      	bne.n	8004ff2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004fc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d105      	bne.n	8004fe6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f9c0 	bl	800536c <USB_CoreReset>
 8004fec:	4603      	mov	r3, r0
 8004fee:	73fb      	strb	r3, [r7, #15]
 8004ff0:	e01a      	b.n	8005028 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f9b4 	bl	800536c <USB_CoreReset>
 8005004:	4603      	mov	r3, r0
 8005006:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800500a:	2b00      	cmp	r3, #0
 800500c:	d106      	bne.n	800501c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005012:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	639a      	str	r2, [r3, #56]	; 0x38
 800501a:	e005      	b.n	8005028 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005020:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	2b01      	cmp	r3, #1
 800502c:	d10b      	bne.n	8005046 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f043 0206 	orr.w	r2, r3, #6
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f043 0220 	orr.w	r2, r3, #32
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005046:	7bfb      	ldrb	r3, [r7, #15]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005052:	b004      	add	sp, #16
 8005054:	4770      	bx	lr

08005056 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f043 0201 	orr.w	r2, r3, #1
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f023 0201 	bic.w	r2, r3, #1
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b084      	sub	sp, #16
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	460b      	mov	r3, r1
 80050a4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050b6:	78fb      	ldrb	r3, [r7, #3]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d115      	bne.n	80050e8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050c8:	2001      	movs	r0, #1
 80050ca:	f7fb fef7 	bl	8000ebc <HAL_Delay>
      ms++;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3301      	adds	r3, #1
 80050d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 f93a 	bl	800534e <USB_GetMode>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d01e      	beq.n	800511e <USB_SetCurrentMode+0x84>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2b31      	cmp	r3, #49	; 0x31
 80050e4:	d9f0      	bls.n	80050c8 <USB_SetCurrentMode+0x2e>
 80050e6:	e01a      	b.n	800511e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050e8:	78fb      	ldrb	r3, [r7, #3]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d115      	bne.n	800511a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050fa:	2001      	movs	r0, #1
 80050fc:	f7fb fede 	bl	8000ebc <HAL_Delay>
      ms++;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	3301      	adds	r3, #1
 8005104:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f921 	bl	800534e <USB_GetMode>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d005      	beq.n	800511e <USB_SetCurrentMode+0x84>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2b31      	cmp	r3, #49	; 0x31
 8005116:	d9f0      	bls.n	80050fa <USB_SetCurrentMode+0x60>
 8005118:	e001      	b.n	800511e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e005      	b.n	800512a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b32      	cmp	r3, #50	; 0x32
 8005122:	d101      	bne.n	8005128 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e000      	b.n	800512a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
	...

08005134 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	3301      	adds	r3, #1
 8005146:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4a13      	ldr	r2, [pc, #76]	; (8005198 <USB_FlushTxFifo+0x64>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d901      	bls.n	8005154 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e01b      	b.n	800518c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	daf2      	bge.n	8005142 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	019b      	lsls	r3, r3, #6
 8005164:	f043 0220 	orr.w	r2, r3, #32
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	3301      	adds	r3, #1
 8005170:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	4a08      	ldr	r2, [pc, #32]	; (8005198 <USB_FlushTxFifo+0x64>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d901      	bls.n	800517e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e006      	b.n	800518c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	f003 0320 	and.w	r3, r3, #32
 8005186:	2b20      	cmp	r3, #32
 8005188:	d0f0      	beq.n	800516c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3714      	adds	r7, #20
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr
 8005198:	00030d40 	.word	0x00030d40

0800519c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	3301      	adds	r3, #1
 80051ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4a11      	ldr	r2, [pc, #68]	; (80051f8 <USB_FlushRxFifo+0x5c>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d901      	bls.n	80051ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e018      	b.n	80051ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	daf2      	bge.n	80051a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2210      	movs	r2, #16
 80051ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	3301      	adds	r3, #1
 80051d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4a08      	ldr	r2, [pc, #32]	; (80051f8 <USB_FlushRxFifo+0x5c>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d901      	bls.n	80051de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e006      	b.n	80051ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	f003 0310 	and.w	r3, r3, #16
 80051e6:	2b10      	cmp	r3, #16
 80051e8:	d0f0      	beq.n	80051cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	00030d40 	.word	0x00030d40

080051fc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b089      	sub	sp, #36	; 0x24
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	4611      	mov	r1, r2
 8005208:	461a      	mov	r2, r3
 800520a:	460b      	mov	r3, r1
 800520c:	71fb      	strb	r3, [r7, #7]
 800520e:	4613      	mov	r3, r2
 8005210:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800521a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800521e:	2b00      	cmp	r3, #0
 8005220:	d123      	bne.n	800526a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005222:	88bb      	ldrh	r3, [r7, #4]
 8005224:	3303      	adds	r3, #3
 8005226:	089b      	lsrs	r3, r3, #2
 8005228:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800522a:	2300      	movs	r3, #0
 800522c:	61bb      	str	r3, [r7, #24]
 800522e:	e018      	b.n	8005262 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005230:	79fb      	ldrb	r3, [r7, #7]
 8005232:	031a      	lsls	r2, r3, #12
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	4413      	add	r3, r2
 8005238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800523c:	461a      	mov	r2, r3
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	3301      	adds	r3, #1
 8005248:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	3301      	adds	r3, #1
 800524e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	3301      	adds	r3, #1
 8005254:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	3301      	adds	r3, #1
 800525a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	3301      	adds	r3, #1
 8005260:	61bb      	str	r3, [r7, #24]
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	429a      	cmp	r2, r3
 8005268:	d3e2      	bcc.n	8005230 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3724      	adds	r7, #36	; 0x24
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005278:	b480      	push	{r7}
 800527a:	b08b      	sub	sp, #44	; 0x2c
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	4613      	mov	r3, r2
 8005284:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800528e:	88fb      	ldrh	r3, [r7, #6]
 8005290:	089b      	lsrs	r3, r3, #2
 8005292:	b29b      	uxth	r3, r3
 8005294:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005296:	88fb      	ldrh	r3, [r7, #6]
 8005298:	f003 0303 	and.w	r3, r3, #3
 800529c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800529e:	2300      	movs	r3, #0
 80052a0:	623b      	str	r3, [r7, #32]
 80052a2:	e014      	b.n	80052ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	3301      	adds	r3, #1
 80052b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	3301      	adds	r3, #1
 80052ba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	3301      	adds	r3, #1
 80052c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	3301      	adds	r3, #1
 80052c6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	3301      	adds	r3, #1
 80052cc:	623b      	str	r3, [r7, #32]
 80052ce:	6a3a      	ldr	r2, [r7, #32]
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d3e6      	bcc.n	80052a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80052d6:	8bfb      	ldrh	r3, [r7, #30]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d01e      	beq.n	800531a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052e6:	461a      	mov	r2, r3
 80052e8:	f107 0310 	add.w	r3, r7, #16
 80052ec:	6812      	ldr	r2, [r2, #0]
 80052ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	fa22 f303 	lsr.w	r3, r2, r3
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	701a      	strb	r2, [r3, #0]
      i++;
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	3301      	adds	r3, #1
 8005306:	623b      	str	r3, [r7, #32]
      pDest++;
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	3301      	adds	r3, #1
 800530c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800530e:	8bfb      	ldrh	r3, [r7, #30]
 8005310:	3b01      	subs	r3, #1
 8005312:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005314:	8bfb      	ldrh	r3, [r7, #30]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1ea      	bne.n	80052f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800531c:	4618      	mov	r0, r3
 800531e:	372c      	adds	r7, #44	; 0x2c
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4013      	ands	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005340:	68fb      	ldr	r3, [r7, #12]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	f003 0301 	and.w	r3, r3, #1
}
 800535e:	4618      	mov	r0, r3
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
	...

0800536c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005374:	2300      	movs	r3, #0
 8005376:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	3301      	adds	r3, #1
 800537c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	4a13      	ldr	r2, [pc, #76]	; (80053d0 <USB_CoreReset+0x64>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d901      	bls.n	800538a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e01b      	b.n	80053c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	2b00      	cmp	r3, #0
 8005390:	daf2      	bge.n	8005378 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005392:	2300      	movs	r3, #0
 8005394:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	f043 0201 	orr.w	r2, r3, #1
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	3301      	adds	r3, #1
 80053a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4a09      	ldr	r2, [pc, #36]	; (80053d0 <USB_CoreReset+0x64>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d901      	bls.n	80053b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e006      	b.n	80053c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d0f0      	beq.n	80053a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	00030d40 	.word	0x00030d40

080053d4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053d4:	b084      	sub	sp, #16
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b086      	sub	sp, #24
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
 80053de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80053e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053f4:	461a      	mov	r2, r3
 80053f6:	2300      	movs	r3, #0
 80053f8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005416:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005426:	2b00      	cmp	r3, #0
 8005428:	d018      	beq.n	800545c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800542a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542c:	2b01      	cmp	r3, #1
 800542e:	d10a      	bne.n	8005446 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800543e:	f043 0304 	orr.w	r3, r3, #4
 8005442:	6013      	str	r3, [r2, #0]
 8005444:	e014      	b.n	8005470 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005454:	f023 0304 	bic.w	r3, r3, #4
 8005458:	6013      	str	r3, [r2, #0]
 800545a:	e009      	b.n	8005470 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800546a:	f023 0304 	bic.w	r3, r3, #4
 800546e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005470:	2110      	movs	r1, #16
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7ff fe5e 	bl	8005134 <USB_FlushTxFifo>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7ff fe8a 	bl	800519c <USB_FlushRxFifo>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005492:	2300      	movs	r3, #0
 8005494:	613b      	str	r3, [r7, #16]
 8005496:	e015      	b.n	80054c4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a4:	461a      	mov	r2, r3
 80054a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054aa:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b8:	461a      	mov	r2, r3
 80054ba:	2300      	movs	r3, #0
 80054bc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	3301      	adds	r3, #1
 80054c2:	613b      	str	r3, [r7, #16]
 80054c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d3e5      	bcc.n	8005498 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054d8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00b      	beq.n	80054fe <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ec:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a13      	ldr	r2, [pc, #76]	; (8005540 <USB_HostInit+0x16c>)
 80054f2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a13      	ldr	r2, [pc, #76]	; (8005544 <USB_HostInit+0x170>)
 80054f8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80054fc:	e009      	b.n	8005512 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2280      	movs	r2, #128	; 0x80
 8005502:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a10      	ldr	r2, [pc, #64]	; (8005548 <USB_HostInit+0x174>)
 8005508:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a0f      	ldr	r2, [pc, #60]	; (800554c <USB_HostInit+0x178>)
 800550e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005514:	2b00      	cmp	r3, #0
 8005516:	d105      	bne.n	8005524 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	f043 0210 	orr.w	r2, r3, #16
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	699a      	ldr	r2, [r3, #24]
 8005528:	4b09      	ldr	r3, [pc, #36]	; (8005550 <USB_HostInit+0x17c>)
 800552a:	4313      	orrs	r3, r2
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005530:	7dfb      	ldrb	r3, [r7, #23]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3718      	adds	r7, #24
 8005536:	46bd      	mov	sp, r7
 8005538:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800553c:	b004      	add	sp, #16
 800553e:	4770      	bx	lr
 8005540:	01000200 	.word	0x01000200
 8005544:	00e00300 	.word	0x00e00300
 8005548:	00600080 	.word	0x00600080
 800554c:	004000e0 	.word	0x004000e0
 8005550:	a3200008 	.word	0xa3200008

08005554 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	460b      	mov	r3, r1
 800555e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005572:	f023 0303 	bic.w	r3, r3, #3
 8005576:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	78fb      	ldrb	r3, [r7, #3]
 8005582:	f003 0303 	and.w	r3, r3, #3
 8005586:	68f9      	ldr	r1, [r7, #12]
 8005588:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800558c:	4313      	orrs	r3, r2
 800558e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005590:	78fb      	ldrb	r3, [r7, #3]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d107      	bne.n	80055a6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800559c:	461a      	mov	r2, r3
 800559e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80055a2:	6053      	str	r3, [r2, #4]
 80055a4:	e009      	b.n	80055ba <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80055a6:	78fb      	ldrb	r3, [r7, #3]
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d106      	bne.n	80055ba <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055b2:	461a      	mov	r2, r3
 80055b4:	f241 7370 	movw	r3, #6000	; 0x1770
 80055b8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80055d4:	2300      	movs	r3, #0
 80055d6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80055e8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80055f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055f6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80055f8:	2064      	movs	r0, #100	; 0x64
 80055fa:	f7fb fc5f 	bl	8000ebc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005606:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800560a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800560c:	200a      	movs	r0, #10
 800560e:	f7fb fc55 	bl	8000ebc <HAL_Delay>

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	460b      	mov	r3, r1
 8005626:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005640:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d109      	bne.n	8005660 <USB_DriveVbus+0x44>
 800564c:	78fb      	ldrb	r3, [r7, #3]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d106      	bne.n	8005660 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800565a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800565e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800566a:	d109      	bne.n	8005680 <USB_DriveVbus+0x64>
 800566c:	78fb      	ldrb	r3, [r7, #3]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d106      	bne.n	8005680 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800567a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800567e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr

0800568e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800568e:	b480      	push	{r7}
 8005690:	b085      	sub	sp, #20
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800569a:	2300      	movs	r3, #0
 800569c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	0c5b      	lsrs	r3, r3, #17
 80056ac:	f003 0303 	and.w	r3, r3, #3
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	b29b      	uxth	r3, r3
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
	...

080056e0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b088      	sub	sp, #32
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	4608      	mov	r0, r1
 80056ea:	4611      	mov	r1, r2
 80056ec:	461a      	mov	r2, r3
 80056ee:	4603      	mov	r3, r0
 80056f0:	70fb      	strb	r3, [r7, #3]
 80056f2:	460b      	mov	r3, r1
 80056f4:	70bb      	strb	r3, [r7, #2]
 80056f6:	4613      	mov	r3, r2
 80056f8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005702:	78fb      	ldrb	r3, [r7, #3]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	4413      	add	r3, r2
 800570a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800570e:	461a      	mov	r2, r3
 8005710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005714:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005716:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800571a:	2b03      	cmp	r3, #3
 800571c:	d87e      	bhi.n	800581c <USB_HC_Init+0x13c>
 800571e:	a201      	add	r2, pc, #4	; (adr r2, 8005724 <USB_HC_Init+0x44>)
 8005720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005724:	08005735 	.word	0x08005735
 8005728:	080057df 	.word	0x080057df
 800572c:	08005735 	.word	0x08005735
 8005730:	080057a1 	.word	0x080057a1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005734:	78fb      	ldrb	r3, [r7, #3]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	4413      	add	r3, r2
 800573c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005740:	461a      	mov	r2, r3
 8005742:	f240 439d 	movw	r3, #1181	; 0x49d
 8005746:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005748:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800574c:	2b00      	cmp	r3, #0
 800574e:	da10      	bge.n	8005772 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005750:	78fb      	ldrb	r3, [r7, #3]
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	4413      	add	r3, r2
 8005758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	78fa      	ldrb	r2, [r7, #3]
 8005760:	0151      	lsls	r1, r2, #5
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	440a      	add	r2, r1
 8005766:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800576a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800576e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005770:	e057      	b.n	8005822 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577a:	2b00      	cmp	r3, #0
 800577c:	d051      	beq.n	8005822 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800577e:	78fb      	ldrb	r3, [r7, #3]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	4413      	add	r3, r2
 8005786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	78fa      	ldrb	r2, [r7, #3]
 800578e:	0151      	lsls	r1, r2, #5
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	440a      	add	r2, r1
 8005794:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005798:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800579c:	60d3      	str	r3, [r2, #12]
      break;
 800579e:	e040      	b.n	8005822 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ac:	461a      	mov	r2, r3
 80057ae:	f240 639d 	movw	r3, #1693	; 0x69d
 80057b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80057b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	da34      	bge.n	8005826 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80057bc:	78fb      	ldrb	r3, [r7, #3]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	78fa      	ldrb	r2, [r7, #3]
 80057cc:	0151      	lsls	r1, r2, #5
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	440a      	add	r2, r1
 80057d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057da:	60d3      	str	r3, [r2, #12]
      }

      break;
 80057dc:	e023      	b.n	8005826 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057de:	78fb      	ldrb	r3, [r7, #3]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ea:	461a      	mov	r2, r3
 80057ec:	f240 2325 	movw	r3, #549	; 0x225
 80057f0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80057f2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	da17      	bge.n	800582a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80057fa:	78fb      	ldrb	r3, [r7, #3]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	4413      	add	r3, r2
 8005802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	78fa      	ldrb	r2, [r7, #3]
 800580a:	0151      	lsls	r1, r2, #5
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	440a      	add	r2, r1
 8005810:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005814:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005818:	60d3      	str	r3, [r2, #12]
      }
      break;
 800581a:	e006      	b.n	800582a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	77fb      	strb	r3, [r7, #31]
      break;
 8005820:	e004      	b.n	800582c <USB_HC_Init+0x14c>
      break;
 8005822:	bf00      	nop
 8005824:	e002      	b.n	800582c <USB_HC_Init+0x14c>
      break;
 8005826:	bf00      	nop
 8005828:	e000      	b.n	800582c <USB_HC_Init+0x14c>
      break;
 800582a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800582c:	78fb      	ldrb	r3, [r7, #3]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	4413      	add	r3, r2
 8005834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	78fa      	ldrb	r2, [r7, #3]
 800583c:	0151      	lsls	r1, r2, #5
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	440a      	add	r2, r1
 8005842:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005846:	f043 0302 	orr.w	r3, r3, #2
 800584a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005852:	699a      	ldr	r2, [r3, #24]
 8005854:	78fb      	ldrb	r3, [r7, #3]
 8005856:	f003 030f 	and.w	r3, r3, #15
 800585a:	2101      	movs	r1, #1
 800585c:	fa01 f303 	lsl.w	r3, r1, r3
 8005860:	6939      	ldr	r1, [r7, #16]
 8005862:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005866:	4313      	orrs	r3, r2
 8005868:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005876:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800587a:	2b00      	cmp	r3, #0
 800587c:	da03      	bge.n	8005886 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800587e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005882:	61bb      	str	r3, [r7, #24]
 8005884:	e001      	b.n	800588a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005886:	2300      	movs	r3, #0
 8005888:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7ff feff 	bl	800568e <USB_GetHostSpeed>
 8005890:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005892:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005896:	2b02      	cmp	r3, #2
 8005898:	d106      	bne.n	80058a8 <USB_HC_Init+0x1c8>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2b02      	cmp	r3, #2
 800589e:	d003      	beq.n	80058a8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80058a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058a4:	617b      	str	r3, [r7, #20]
 80058a6:	e001      	b.n	80058ac <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058ac:	787b      	ldrb	r3, [r7, #1]
 80058ae:	059b      	lsls	r3, r3, #22
 80058b0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058b4:	78bb      	ldrb	r3, [r7, #2]
 80058b6:	02db      	lsls	r3, r3, #11
 80058b8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058bc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80058be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80058c2:	049b      	lsls	r3, r3, #18
 80058c4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058c8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80058ca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80058cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80058d0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058d6:	78fb      	ldrb	r3, [r7, #3]
 80058d8:	0159      	lsls	r1, r3, #5
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	440b      	add	r3, r1
 80058de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058e2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058e8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80058ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80058ee:	2b03      	cmp	r3, #3
 80058f0:	d003      	beq.n	80058fa <USB_HC_Init+0x21a>
 80058f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d10f      	bne.n	800591a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80058fa:	78fb      	ldrb	r3, [r7, #3]
 80058fc:	015a      	lsls	r2, r3, #5
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	4413      	add	r3, r2
 8005902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	78fa      	ldrb	r2, [r7, #3]
 800590a:	0151      	lsls	r1, r2, #5
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	440a      	add	r2, r1
 8005910:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005914:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005918:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800591a:	7ffb      	ldrb	r3, [r7, #31]
}
 800591c:	4618      	mov	r0, r3
 800591e:	3720      	adds	r7, #32
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b08c      	sub	sp, #48	; 0x30
 8005928:	af02      	add	r7, sp, #8
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	4613      	mov	r3, r2
 8005930:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	785b      	ldrb	r3, [r3, #1]
 800593a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800593c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005940:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800594a:	2b00      	cmp	r3, #0
 800594c:	d02d      	beq.n	80059aa <USB_HC_StartXfer+0x86>
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	791b      	ldrb	r3, [r3, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d129      	bne.n	80059aa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005956:	79fb      	ldrb	r3, [r7, #7]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d117      	bne.n	800598c <USB_HC_StartXfer+0x68>
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	79db      	ldrb	r3, [r3, #7]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <USB_HC_StartXfer+0x48>
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	79db      	ldrb	r3, [r3, #7]
 8005968:	2b02      	cmp	r3, #2
 800596a:	d10f      	bne.n	800598c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	4413      	add	r3, r2
 8005974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	69fa      	ldr	r2, [r7, #28]
 800597c:	0151      	lsls	r1, r2, #5
 800597e:	6a3a      	ldr	r2, [r7, #32]
 8005980:	440a      	add	r2, r1
 8005982:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800598c:	79fb      	ldrb	r3, [r7, #7]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10b      	bne.n	80059aa <USB_HC_StartXfer+0x86>
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	795b      	ldrb	r3, [r3, #5]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d107      	bne.n	80059aa <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	785b      	ldrb	r3, [r3, #1]
 800599e:	4619      	mov	r1, r3
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f000 fa0f 	bl	8005dc4 <USB_DoPing>
      return HAL_OK;
 80059a6:	2300      	movs	r3, #0
 80059a8:	e0f8      	b.n	8005b9c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d018      	beq.n	80059e4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	8912      	ldrh	r2, [r2, #8]
 80059ba:	4413      	add	r3, r2
 80059bc:	3b01      	subs	r3, #1
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	8912      	ldrh	r2, [r2, #8]
 80059c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80059c6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80059c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80059ca:	8b7b      	ldrh	r3, [r7, #26]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d90b      	bls.n	80059e8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80059d0:	8b7b      	ldrh	r3, [r7, #26]
 80059d2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80059d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	8912      	ldrh	r2, [r2, #8]
 80059da:	fb03 f202 	mul.w	r2, r3, r2
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	611a      	str	r2, [r3, #16]
 80059e2:	e001      	b.n	80059e8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80059e4:	2301      	movs	r3, #1
 80059e6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	78db      	ldrb	r3, [r3, #3]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d007      	beq.n	8005a00 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80059f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	8912      	ldrh	r2, [r2, #8]
 80059f6:	fb03 f202 	mul.w	r2, r3, r2
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	611a      	str	r2, [r3, #16]
 80059fe:	e003      	b.n	8005a08 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	695a      	ldr	r2, [r3, #20]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a12:	04d9      	lsls	r1, r3, #19
 8005a14:	4b63      	ldr	r3, [pc, #396]	; (8005ba4 <USB_HC_StartXfer+0x280>)
 8005a16:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a18:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	7a9b      	ldrb	r3, [r3, #10]
 8005a1e:	075b      	lsls	r3, r3, #29
 8005a20:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a24:	69f9      	ldr	r1, [r7, #28]
 8005a26:	0148      	lsls	r0, r1, #5
 8005a28:	6a39      	ldr	r1, [r7, #32]
 8005a2a:	4401      	add	r1, r0
 8005a2c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a30:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a32:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005a34:	79fb      	ldrb	r3, [r7, #7]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d009      	beq.n	8005a4e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	68d9      	ldr	r1, [r3, #12]
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a4a:	460a      	mov	r2, r1
 8005a4c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	bf0c      	ite	eq
 8005a5e:	2301      	moveq	r3, #1
 8005a60:	2300      	movne	r3, #0
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	69fa      	ldr	r2, [r7, #28]
 8005a76:	0151      	lsls	r1, r2, #5
 8005a78:	6a3a      	ldr	r2, [r7, #32]
 8005a7a:	440a      	add	r2, r1
 8005a7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a80:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005a84:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	6a3b      	ldr	r3, [r7, #32]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	7e7b      	ldrb	r3, [r7, #25]
 8005a96:	075b      	lsls	r3, r3, #29
 8005a98:	69f9      	ldr	r1, [r7, #28]
 8005a9a:	0148      	lsls	r0, r1, #5
 8005a9c:	6a39      	ldr	r1, [r7, #32]
 8005a9e:	4401      	add	r1, r0
 8005aa0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	6a3b      	ldr	r3, [r7, #32]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005abe:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	78db      	ldrb	r3, [r3, #3]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d004      	beq.n	8005ad2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ace:	613b      	str	r3, [r7, #16]
 8005ad0:	e003      	b.n	8005ada <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ad8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ae0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aee:	461a      	mov	r2, r3
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005af4:	79fb      	ldrb	r3, [r7, #7]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	e04e      	b.n	8005b9c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	78db      	ldrb	r3, [r3, #3]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d149      	bne.n	8005b9a <USB_HC_StartXfer+0x276>
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d045      	beq.n	8005b9a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	79db      	ldrb	r3, [r3, #7]
 8005b12:	2b03      	cmp	r3, #3
 8005b14:	d830      	bhi.n	8005b78 <USB_HC_StartXfer+0x254>
 8005b16:	a201      	add	r2, pc, #4	; (adr r2, 8005b1c <USB_HC_StartXfer+0x1f8>)
 8005b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1c:	08005b2d 	.word	0x08005b2d
 8005b20:	08005b51 	.word	0x08005b51
 8005b24:	08005b2d 	.word	0x08005b2d
 8005b28:	08005b51 	.word	0x08005b51
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	3303      	adds	r3, #3
 8005b32:	089b      	lsrs	r3, r3, #2
 8005b34:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005b36:	8afa      	ldrh	r2, [r7, #22]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d91c      	bls.n	8005b7c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	f043 0220 	orr.w	r2, r3, #32
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005b4e:	e015      	b.n	8005b7c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	3303      	adds	r3, #3
 8005b56:	089b      	lsrs	r3, r3, #2
 8005b58:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005b5a:	8afa      	ldrh	r2, [r7, #22]
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d90a      	bls.n	8005b80 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	619a      	str	r2, [r3, #24]
        }
        break;
 8005b76:	e003      	b.n	8005b80 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005b78:	bf00      	nop
 8005b7a:	e002      	b.n	8005b82 <USB_HC_StartXfer+0x25e>
        break;
 8005b7c:	bf00      	nop
 8005b7e:	e000      	b.n	8005b82 <USB_HC_StartXfer+0x25e>
        break;
 8005b80:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	68d9      	ldr	r1, [r3, #12]
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	785a      	ldrb	r2, [r3, #1]
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	2000      	movs	r0, #0
 8005b92:	9000      	str	r0, [sp, #0]
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f7ff fb31 	bl	80051fc <USB_WritePacket>
  }

  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3728      	adds	r7, #40	; 0x28
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	1ff80000 	.word	0x1ff80000

08005ba8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	b29b      	uxth	r3, r3
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b089      	sub	sp, #36	; 0x24
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005bda:	78fb      	ldrb	r3, [r7, #3]
 8005bdc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005bde:	2300      	movs	r3, #0
 8005be0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	0c9b      	lsrs	r3, r3, #18
 8005bf2:	f003 0303 	and.w	r3, r3, #3
 8005bf6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	0fdb      	lsrs	r3, r3, #31
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f003 0320 	and.w	r3, r3, #32
 8005c16:	2b20      	cmp	r3, #32
 8005c18:	d104      	bne.n	8005c24 <USB_HC_Halt+0x5a>
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005c20:	2300      	movs	r3, #0
 8005c22:	e0c8      	b.n	8005db6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <USB_HC_Halt+0x66>
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d163      	bne.n	8005cf8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	0151      	lsls	r1, r2, #5
 8005c42:	69fa      	ldr	r2, [r7, #28]
 8005c44:	440a      	add	r2, r1
 8005c46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c4e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f003 0320 	and.w	r3, r3, #32
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f040 80ab 	bne.w	8005db4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c62:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d133      	bne.n	8005cd2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	0151      	lsls	r1, r2, #5
 8005c7c:	69fa      	ldr	r2, [r7, #28]
 8005c7e:	440a      	add	r2, r1
 8005c80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c88:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	0151      	lsls	r1, r2, #5
 8005c9c:	69fa      	ldr	r2, [r7, #28]
 8005c9e:	440a      	add	r2, r1
 8005ca0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ca4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ca8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	3301      	adds	r3, #1
 8005cae:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cb6:	d81d      	bhi.n	8005cf4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cce:	d0ec      	beq.n	8005caa <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005cd0:	e070      	b.n	8005db4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	0151      	lsls	r1, r2, #5
 8005ce4:	69fa      	ldr	r2, [r7, #28]
 8005ce6:	440a      	add	r2, r1
 8005ce8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cf0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005cf2:	e05f      	b.n	8005db4 <USB_HC_Halt+0x1ea>
            break;
 8005cf4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005cf6:	e05d      	b.n	8005db4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	0151      	lsls	r1, r2, #5
 8005d0a:	69fa      	ldr	r2, [r7, #28]
 8005d0c:	440a      	add	r2, r1
 8005d0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d16:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d133      	bne.n	8005d90 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	015a      	lsls	r2, r3, #5
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	0151      	lsls	r1, r2, #5
 8005d3a:	69fa      	ldr	r2, [r7, #28]
 8005d3c:	440a      	add	r2, r1
 8005d3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d46:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	69ba      	ldr	r2, [r7, #24]
 8005d58:	0151      	lsls	r1, r2, #5
 8005d5a:	69fa      	ldr	r2, [r7, #28]
 8005d5c:	440a      	add	r2, r1
 8005d5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d66:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d74:	d81d      	bhi.n	8005db2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d8c:	d0ec      	beq.n	8005d68 <USB_HC_Halt+0x19e>
 8005d8e:	e011      	b.n	8005db4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	0151      	lsls	r1, r2, #5
 8005da2:	69fa      	ldr	r2, [r7, #28]
 8005da4:	440a      	add	r2, r1
 8005da6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005daa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dae:	6013      	str	r3, [r2, #0]
 8005db0:	e000      	b.n	8005db4 <USB_HC_Halt+0x1ea>
          break;
 8005db2:	bf00      	nop
    }
  }

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3724      	adds	r7, #36	; 0x24
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
	...

08005dc4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	460b      	mov	r3, r1
 8005dce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005dd4:	78fb      	ldrb	r3, [r7, #3]
 8005dd6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	04da      	lsls	r2, r3, #19
 8005de0:	4b15      	ldr	r3, [pc, #84]	; (8005e38 <USB_DoPing+0x74>)
 8005de2:	4013      	ands	r3, r2
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	0151      	lsls	r1, r2, #5
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	440a      	add	r2, r1
 8005dec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005df0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005df4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e0c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e14:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e22:	461a      	mov	r2, r3
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	371c      	adds	r7, #28
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	1ff80000 	.word	0x1ff80000

08005e3c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b088      	sub	sp, #32
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e44:	2300      	movs	r3, #0
 8005e46:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f7ff f911 	bl	8005078 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e56:	2110      	movs	r1, #16
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f7ff f96b 	bl	8005134 <USB_FlushTxFifo>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f7ff f997 	bl	800519c <USB_FlushRxFifo>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005e78:	2300      	movs	r3, #0
 8005e7a:	61bb      	str	r3, [r7, #24]
 8005e7c:	e01f      	b.n	8005ebe <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e94:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e9c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ea4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	61bb      	str	r3, [r7, #24]
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	2b0f      	cmp	r3, #15
 8005ec2:	d9dc      	bls.n	8005e7e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	61bb      	str	r3, [r7, #24]
 8005ec8:	e034      	b.n	8005f34 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ee0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ee8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ef0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005efe:	461a      	mov	r2, r3
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	3301      	adds	r3, #1
 8005f08:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f10:	d80c      	bhi.n	8005f2c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f28:	d0ec      	beq.n	8005f04 <USB_StopHost+0xc8>
 8005f2a:	e000      	b.n	8005f2e <USB_StopHost+0xf2>
        break;
 8005f2c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	3301      	adds	r3, #1
 8005f32:	61bb      	str	r3, [r7, #24]
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	2b0f      	cmp	r3, #15
 8005f38:	d9c7      	bls.n	8005eca <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f40:	461a      	mov	r2, r3
 8005f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f46:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f4e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7ff f880 	bl	8005056 <USB_EnableGlobalInt>

  return ret;
 8005f56:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3720      	adds	r7, #32
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005f60:	b590      	push	{r4, r7, lr}
 8005f62:	b089      	sub	sp, #36	; 0x24
 8005f64:	af04      	add	r7, sp, #16
 8005f66:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005f68:	2301      	movs	r3, #1
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	2102      	movs	r1, #2
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fc66 	bl	8006840 <USBH_FindInterface>
 8005f74:	4603      	mov	r3, r0
 8005f76:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
 8005f7a:	2bff      	cmp	r3, #255	; 0xff
 8005f7c:	d002      	beq.n	8005f84 <USBH_CDC_InterfaceInit+0x24>
 8005f7e:	7bfb      	ldrb	r3, [r7, #15]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d901      	bls.n	8005f88 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005f84:	2302      	movs	r3, #2
 8005f86:	e13d      	b.n	8006204 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 fc3b 	bl	8006808 <USBH_SelectInterface>
 8005f92:	4603      	mov	r3, r0
 8005f94:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005f96:	7bbb      	ldrb	r3, [r7, #14]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d001      	beq.n	8005fa0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	e131      	b.n	8006204 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005fa6:	2050      	movs	r0, #80	; 0x50
 8005fa8:	f002 faf6 	bl	8008598 <malloc>
 8005fac:	4603      	mov	r3, r0
 8005fae:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fb6:	69db      	ldr	r3, [r3, #28]
 8005fb8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d101      	bne.n	8005fc4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	e11f      	b.n	8006204 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005fc4:	2250      	movs	r2, #80	; 0x50
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	68b8      	ldr	r0, [r7, #8]
 8005fca:	f002 faf5 	bl	80085b8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005fce:	7bfb      	ldrb	r3, [r7, #15]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	211a      	movs	r1, #26
 8005fd4:	fb01 f303 	mul.w	r3, r1, r3
 8005fd8:	4413      	add	r3, r2
 8005fda:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	b25b      	sxtb	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	da15      	bge.n	8006012 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	211a      	movs	r1, #26
 8005fec:	fb01 f303 	mul.w	r3, r1, r3
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ff6:	781a      	ldrb	r2, [r3, #0]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	211a      	movs	r1, #26
 8006002:	fb01 f303 	mul.w	r3, r1, r3
 8006006:	4413      	add	r3, r2
 8006008:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800600c:	881a      	ldrh	r2, [r3, #0]
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	785b      	ldrb	r3, [r3, #1]
 8006016:	4619      	mov	r1, r3
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f001 ff2c 	bl	8007e76 <USBH_AllocPipe>
 800601e:	4603      	mov	r3, r0
 8006020:	461a      	mov	r2, r3
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	7819      	ldrb	r1, [r3, #0]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	7858      	ldrb	r0, [r3, #1]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	8952      	ldrh	r2, [r2, #10]
 800603e:	9202      	str	r2, [sp, #8]
 8006040:	2203      	movs	r2, #3
 8006042:	9201      	str	r2, [sp, #4]
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	4623      	mov	r3, r4
 8006048:	4602      	mov	r2, r0
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f001 fee4 	bl	8007e18 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	2200      	movs	r2, #0
 8006056:	4619      	mov	r1, r3
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f002 f9dc 	bl	8008416 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800605e:	2300      	movs	r3, #0
 8006060:	2200      	movs	r2, #0
 8006062:	210a      	movs	r1, #10
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 fbeb 	bl	8006840 <USBH_FindInterface>
 800606a:	4603      	mov	r3, r0
 800606c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800606e:	7bfb      	ldrb	r3, [r7, #15]
 8006070:	2bff      	cmp	r3, #255	; 0xff
 8006072:	d002      	beq.n	800607a <USBH_CDC_InterfaceInit+0x11a>
 8006074:	7bfb      	ldrb	r3, [r7, #15]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d901      	bls.n	800607e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800607a:	2302      	movs	r3, #2
 800607c:	e0c2      	b.n	8006204 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800607e:	7bfb      	ldrb	r3, [r7, #15]
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	211a      	movs	r1, #26
 8006084:	fb01 f303 	mul.w	r3, r1, r3
 8006088:	4413      	add	r3, r2
 800608a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	b25b      	sxtb	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	da16      	bge.n	80060c4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006096:	7bfb      	ldrb	r3, [r7, #15]
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	211a      	movs	r1, #26
 800609c:	fb01 f303 	mul.w	r3, r1, r3
 80060a0:	4413      	add	r3, r2
 80060a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80060a6:	781a      	ldrb	r2, [r3, #0]
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	211a      	movs	r1, #26
 80060b2:	fb01 f303 	mul.w	r3, r1, r3
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80060bc:	881a      	ldrh	r2, [r3, #0]
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	835a      	strh	r2, [r3, #26]
 80060c2:	e015      	b.n	80060f0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	211a      	movs	r1, #26
 80060ca:	fb01 f303 	mul.w	r3, r1, r3
 80060ce:	4413      	add	r3, r2
 80060d0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80060d4:	781a      	ldrb	r2, [r3, #0]
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80060da:	7bfb      	ldrb	r3, [r7, #15]
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	211a      	movs	r1, #26
 80060e0:	fb01 f303 	mul.w	r3, r1, r3
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80060ea:	881a      	ldrh	r2, [r3, #0]
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	211a      	movs	r1, #26
 80060f6:	fb01 f303 	mul.w	r3, r1, r3
 80060fa:	4413      	add	r3, r2
 80060fc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	b25b      	sxtb	r3, r3
 8006104:	2b00      	cmp	r3, #0
 8006106:	da16      	bge.n	8006136 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006108:	7bfb      	ldrb	r3, [r7, #15]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	211a      	movs	r1, #26
 800610e:	fb01 f303 	mul.w	r3, r1, r3
 8006112:	4413      	add	r3, r2
 8006114:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006118:	781a      	ldrb	r2, [r3, #0]
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800611e:	7bfb      	ldrb	r3, [r7, #15]
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	211a      	movs	r1, #26
 8006124:	fb01 f303 	mul.w	r3, r1, r3
 8006128:	4413      	add	r3, r2
 800612a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800612e:	881a      	ldrh	r2, [r3, #0]
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	835a      	strh	r2, [r3, #26]
 8006134:	e015      	b.n	8006162 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006136:	7bfb      	ldrb	r3, [r7, #15]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	211a      	movs	r1, #26
 800613c:	fb01 f303 	mul.w	r3, r1, r3
 8006140:	4413      	add	r3, r2
 8006142:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006146:	781a      	ldrb	r2, [r3, #0]
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800614c:	7bfb      	ldrb	r3, [r7, #15]
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	211a      	movs	r1, #26
 8006152:	fb01 f303 	mul.w	r3, r1, r3
 8006156:	4413      	add	r3, r2
 8006158:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800615c:	881a      	ldrh	r2, [r3, #0]
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	7b9b      	ldrb	r3, [r3, #14]
 8006166:	4619      	mov	r1, r3
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f001 fe84 	bl	8007e76 <USBH_AllocPipe>
 800616e:	4603      	mov	r3, r0
 8006170:	461a      	mov	r2, r3
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	7bdb      	ldrb	r3, [r3, #15]
 800617a:	4619      	mov	r1, r3
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f001 fe7a 	bl	8007e76 <USBH_AllocPipe>
 8006182:	4603      	mov	r3, r0
 8006184:	461a      	mov	r2, r3
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	7b59      	ldrb	r1, [r3, #13]
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	7b98      	ldrb	r0, [r3, #14]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	8b12      	ldrh	r2, [r2, #24]
 80061a2:	9202      	str	r2, [sp, #8]
 80061a4:	2202      	movs	r2, #2
 80061a6:	9201      	str	r2, [sp, #4]
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	4623      	mov	r3, r4
 80061ac:	4602      	mov	r2, r0
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f001 fe32 	bl	8007e18 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	7b19      	ldrb	r1, [r3, #12]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	7bd8      	ldrb	r0, [r3, #15]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	8b52      	ldrh	r2, [r2, #26]
 80061cc:	9202      	str	r2, [sp, #8]
 80061ce:	2202      	movs	r2, #2
 80061d0:	9201      	str	r2, [sp, #4]
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	4623      	mov	r3, r4
 80061d6:	4602      	mov	r2, r0
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f001 fe1d 	bl	8007e18 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	7b5b      	ldrb	r3, [r3, #13]
 80061ea:	2200      	movs	r2, #0
 80061ec:	4619      	mov	r1, r3
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f002 f911 	bl	8008416 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	7b1b      	ldrb	r3, [r3, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	4619      	mov	r1, r3
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f002 f90a 	bl	8008416 <USBH_LL_SetToggle>

  return USBH_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	bd90      	pop	{r4, r7, pc}

0800620c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800621a:	69db      	ldr	r3, [r3, #28]
 800621c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00e      	beq.n	8006244 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	4619      	mov	r1, r3
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f001 fe12 	bl	8007e56 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	4619      	mov	r1, r3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f001 fe3d 	bl	8007eb8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	7b1b      	ldrb	r3, [r3, #12]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00e      	beq.n	800626a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	7b1b      	ldrb	r3, [r3, #12]
 8006250:	4619      	mov	r1, r3
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f001 fdff 	bl	8007e56 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	7b1b      	ldrb	r3, [r3, #12]
 800625c:	4619      	mov	r1, r3
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f001 fe2a 	bl	8007eb8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	7b5b      	ldrb	r3, [r3, #13]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00e      	beq.n	8006290 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	7b5b      	ldrb	r3, [r3, #13]
 8006276:	4619      	mov	r1, r3
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f001 fdec 	bl	8007e56 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	7b5b      	ldrb	r3, [r3, #13]
 8006282:	4619      	mov	r1, r3
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f001 fe17 	bl	8007eb8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006296:	69db      	ldr	r3, [r3, #28]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00b      	beq.n	80062b4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062a2:	69db      	ldr	r3, [r3, #28]
 80062a4:	4618      	mov	r0, r3
 80062a6:	f002 f97f 	bl	80085a8 <free>
    phost->pActiveClass->pData = 0U;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062b0:	2200      	movs	r2, #0
 80062b2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b084      	sub	sp, #16
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	3340      	adds	r3, #64	; 0x40
 80062d4:	4619      	mov	r1, r3
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f8b1 	bl	800643e <GetLineCoding>
 80062dc:	4603      	mov	r3, r0
 80062de:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80062e0:	7afb      	ldrb	r3, [r7, #11]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d105      	bne.n	80062f2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062ec:	2102      	movs	r1, #2
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80062f2:	7afb      	ldrb	r3, [r7, #11]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006304:	2301      	movs	r3, #1
 8006306:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006308:	2300      	movs	r3, #0
 800630a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006312:	69db      	ldr	r3, [r3, #28]
 8006314:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800631c:	2b04      	cmp	r3, #4
 800631e:	d877      	bhi.n	8006410 <USBH_CDC_Process+0x114>
 8006320:	a201      	add	r2, pc, #4	; (adr r2, 8006328 <USBH_CDC_Process+0x2c>)
 8006322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006326:	bf00      	nop
 8006328:	0800633d 	.word	0x0800633d
 800632c:	08006343 	.word	0x08006343
 8006330:	08006373 	.word	0x08006373
 8006334:	080063e7 	.word	0x080063e7
 8006338:	080063f5 	.word	0x080063f5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800633c:	2300      	movs	r3, #0
 800633e:	73fb      	strb	r3, [r7, #15]
      break;
 8006340:	e06d      	b.n	800641e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006346:	4619      	mov	r1, r3
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 f897 	bl	800647c <SetLineCoding>
 800634e:	4603      	mov	r3, r0
 8006350:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006352:	7bbb      	ldrb	r3, [r7, #14]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d104      	bne.n	8006362 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2202      	movs	r2, #2
 800635c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006360:	e058      	b.n	8006414 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006362:	7bbb      	ldrb	r3, [r7, #14]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d055      	beq.n	8006414 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2204      	movs	r2, #4
 800636c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006370:	e050      	b.n	8006414 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	3340      	adds	r3, #64	; 0x40
 8006376:	4619      	mov	r1, r3
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f860 	bl	800643e <GetLineCoding>
 800637e:	4603      	mov	r3, r0
 8006380:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006382:	7bbb      	ldrb	r3, [r7, #14]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d126      	bne.n	80063d6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800639a:	791b      	ldrb	r3, [r3, #4]
 800639c:	429a      	cmp	r2, r3
 800639e:	d13b      	bne.n	8006418 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063aa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d133      	bne.n	8006418 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ba:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80063bc:	429a      	cmp	r2, r3
 80063be:	d12b      	bne.n	8006418 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063c8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d124      	bne.n	8006418 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f958 	bl	8006684 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80063d4:	e020      	b.n	8006418 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80063d6:	7bbb      	ldrb	r3, [r7, #14]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d01d      	beq.n	8006418 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2204      	movs	r2, #4
 80063e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80063e4:	e018      	b.n	8006418 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f867 	bl	80064ba <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 f8da 	bl	80065a6 <CDC_ProcessReception>
      break;
 80063f2:	e014      	b.n	800641e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80063f4:	2100      	movs	r1, #0
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 ffef 	bl	80073da <USBH_ClrFeature>
 80063fc:	4603      	mov	r3, r0
 80063fe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006400:	7bbb      	ldrb	r3, [r7, #14]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10a      	bne.n	800641c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800640e:	e005      	b.n	800641c <USBH_CDC_Process+0x120>

    default:
      break;
 8006410:	bf00      	nop
 8006412:	e004      	b.n	800641e <USBH_CDC_Process+0x122>
      break;
 8006414:	bf00      	nop
 8006416:	e002      	b.n	800641e <USBH_CDC_Process+0x122>
      break;
 8006418:	bf00      	nop
 800641a:	e000      	b.n	800641e <USBH_CDC_Process+0x122>
      break;
 800641c:	bf00      	nop

  }

  return status;
 800641e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b082      	sub	sp, #8
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
 8006446:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	22a1      	movs	r2, #161	; 0xa1
 800644c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2221      	movs	r2, #33	; 0x21
 8006452:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2207      	movs	r2, #7
 8006464:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2207      	movs	r2, #7
 800646a:	4619      	mov	r1, r3
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f001 fa81 	bl	8007974 <USBH_CtlReq>
 8006472:	4603      	mov	r3, r0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3708      	adds	r7, #8
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2221      	movs	r2, #33	; 0x21
 800648a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2220      	movs	r2, #32
 8006490:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2207      	movs	r2, #7
 80064a2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	2207      	movs	r2, #7
 80064a8:	4619      	mov	r1, r3
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f001 fa62 	bl	8007974 <USBH_CtlReq>
 80064b0:	4603      	mov	r3, r0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b086      	sub	sp, #24
 80064be:	af02      	add	r7, sp, #8
 80064c0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80064cc:	2300      	movs	r3, #0
 80064ce:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d002      	beq.n	80064e0 <CDC_ProcessTransmission+0x26>
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d023      	beq.n	8006526 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80064de:	e05e      	b.n	800659e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	8b12      	ldrh	r2, [r2, #24]
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d90b      	bls.n	8006504 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	69d9      	ldr	r1, [r3, #28]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	8b1a      	ldrh	r2, [r3, #24]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	7b5b      	ldrb	r3, [r3, #13]
 80064f8:	2001      	movs	r0, #1
 80064fa:	9000      	str	r0, [sp, #0]
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f001 fc48 	bl	8007d92 <USBH_BulkSendData>
 8006502:	e00b      	b.n	800651c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800650c:	b29a      	uxth	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	7b5b      	ldrb	r3, [r3, #13]
 8006512:	2001      	movs	r0, #1
 8006514:	9000      	str	r0, [sp, #0]
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f001 fc3b 	bl	8007d92 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2202      	movs	r2, #2
 8006520:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006524:	e03b      	b.n	800659e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	7b5b      	ldrb	r3, [r3, #13]
 800652a:	4619      	mov	r1, r3
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f001 ff51 	bl	80083d4 <USBH_LL_GetURBState>
 8006532:	4603      	mov	r3, r0
 8006534:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006536:	7afb      	ldrb	r3, [r7, #11]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d128      	bne.n	800658e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	8b12      	ldrh	r2, [r2, #24]
 8006544:	4293      	cmp	r3, r2
 8006546:	d90e      	bls.n	8006566 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	8b12      	ldrh	r2, [r2, #24]
 8006550:	1a9a      	subs	r2, r3, r2
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	8b12      	ldrh	r2, [r2, #24]
 800655e:	441a      	add	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	61da      	str	r2, [r3, #28]
 8006564:	e002      	b.n	800656c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006570:	2b00      	cmp	r3, #0
 8006572:	d004      	beq.n	800657e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800657c:	e00e      	b.n	800659c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f868 	bl	800665c <USBH_CDC_TransmitCallback>
      break;
 800658c:	e006      	b.n	800659c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800658e:	7afb      	ldrb	r3, [r7, #11]
 8006590:	2b02      	cmp	r3, #2
 8006592:	d103      	bne.n	800659c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800659c:	bf00      	nop
  }
}
 800659e:	bf00      	nop
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b086      	sub	sp, #24
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80065b8:	2300      	movs	r3, #0
 80065ba:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80065c2:	2b03      	cmp	r3, #3
 80065c4:	d002      	beq.n	80065cc <CDC_ProcessReception+0x26>
 80065c6:	2b04      	cmp	r3, #4
 80065c8:	d00e      	beq.n	80065e8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80065ca:	e043      	b.n	8006654 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	6a19      	ldr	r1, [r3, #32]
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	8b5a      	ldrh	r2, [r3, #26]
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	7b1b      	ldrb	r3, [r3, #12]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f001 fbff 	bl	8007ddc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	2204      	movs	r2, #4
 80065e2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80065e6:	e035      	b.n	8006654 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	7b1b      	ldrb	r3, [r3, #12]
 80065ec:	4619      	mov	r1, r3
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f001 fef0 	bl	80083d4 <USBH_LL_GetURBState>
 80065f4:	4603      	mov	r3, r0
 80065f6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80065f8:	7cfb      	ldrb	r3, [r7, #19]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d129      	bne.n	8006652 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	7b1b      	ldrb	r3, [r3, #12]
 8006602:	4619      	mov	r1, r3
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f001 fe53 	bl	80082b0 <USBH_LL_GetLastXferSize>
 800660a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	429a      	cmp	r2, r3
 8006614:	d016      	beq.n	8006644 <CDC_ProcessReception+0x9e>
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	8b5b      	ldrh	r3, [r3, #26]
 800661a:	461a      	mov	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4293      	cmp	r3, r2
 8006620:	d910      	bls.n	8006644 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	1ad2      	subs	r2, r2, r3
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	6a1a      	ldr	r2, [r3, #32]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	441a      	add	r2, r3
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	2203      	movs	r2, #3
 800663e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006642:	e006      	b.n	8006652 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f80f 	bl	8006670 <USBH_CDC_ReceiveCallback>
      break;
 8006652:	bf00      	nop
  }
}
 8006654:	bf00      	nop
 8006656:	3718      	adds	r7, #24
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	4613      	mov	r3, r2
 80066a4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d101      	bne.n	80066b0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80066ac:	2302      	movs	r3, #2
 80066ae:	e029      	b.n	8006704 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	79fa      	ldrb	r2, [r7, #7]
 80066b4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 f81f 	bl	800670c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d003      	beq.n	80066fc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f001 fd23 	bl	8008148 <USBH_LL_Init>

  return USBH_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006718:	2300      	movs	r3, #0
 800671a:	60fb      	str	r3, [r7, #12]
 800671c:	e009      	b.n	8006732 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	33e0      	adds	r3, #224	; 0xe0
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	2200      	movs	r2, #0
 800672a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	3301      	adds	r3, #1
 8006730:	60fb      	str	r3, [r7, #12]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2b0f      	cmp	r3, #15
 8006736:	d9f2      	bls.n	800671e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006738:	2300      	movs	r3, #0
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	e009      	b.n	8006752 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4413      	add	r3, r2
 8006744:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006748:	2200      	movs	r2, #0
 800674a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	3301      	adds	r3, #1
 8006750:	60fb      	str	r3, [r7, #12]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006758:	d3f1      	bcc.n	800673e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2240      	movs	r2, #64	; 0x40
 800677e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80067be:	2300      	movs	r3, #0
 80067c0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d016      	beq.n	80067f6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10e      	bne.n	80067f0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80067d8:	1c59      	adds	r1, r3, #1
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	33de      	adds	r3, #222	; 0xde
 80067e4:	6839      	ldr	r1, [r7, #0]
 80067e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	73fb      	strb	r3, [r7, #15]
 80067ee:	e004      	b.n	80067fa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80067f0:	2302      	movs	r3, #2
 80067f2:	73fb      	strb	r3, [r7, #15]
 80067f4:	e001      	b.n	80067fa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80067f6:	2302      	movs	r3, #2
 80067f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80067fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	460b      	mov	r3, r1
 8006812:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006814:	2300      	movs	r3, #0
 8006816:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800681e:	78fa      	ldrb	r2, [r7, #3]
 8006820:	429a      	cmp	r2, r3
 8006822:	d204      	bcs.n	800682e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	78fa      	ldrb	r2, [r7, #3]
 8006828:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800682c:	e001      	b.n	8006832 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800682e:	2302      	movs	r3, #2
 8006830:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006832:	7bfb      	ldrb	r3, [r7, #15]
}
 8006834:	4618      	mov	r0, r3
 8006836:	3714      	adds	r7, #20
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006840:	b480      	push	{r7}
 8006842:	b087      	sub	sp, #28
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	4608      	mov	r0, r1
 800684a:	4611      	mov	r1, r2
 800684c:	461a      	mov	r2, r3
 800684e:	4603      	mov	r3, r0
 8006850:	70fb      	strb	r3, [r7, #3]
 8006852:	460b      	mov	r3, r1
 8006854:	70bb      	strb	r3, [r7, #2]
 8006856:	4613      	mov	r3, r2
 8006858:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800685a:	2300      	movs	r3, #0
 800685c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800685e:	2300      	movs	r3, #0
 8006860:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006868:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800686a:	e025      	b.n	80068b8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800686c:	7dfb      	ldrb	r3, [r7, #23]
 800686e:	221a      	movs	r2, #26
 8006870:	fb02 f303 	mul.w	r3, r2, r3
 8006874:	3308      	adds	r3, #8
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	4413      	add	r3, r2
 800687a:	3302      	adds	r3, #2
 800687c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	795b      	ldrb	r3, [r3, #5]
 8006882:	78fa      	ldrb	r2, [r7, #3]
 8006884:	429a      	cmp	r2, r3
 8006886:	d002      	beq.n	800688e <USBH_FindInterface+0x4e>
 8006888:	78fb      	ldrb	r3, [r7, #3]
 800688a:	2bff      	cmp	r3, #255	; 0xff
 800688c:	d111      	bne.n	80068b2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006892:	78ba      	ldrb	r2, [r7, #2]
 8006894:	429a      	cmp	r2, r3
 8006896:	d002      	beq.n	800689e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006898:	78bb      	ldrb	r3, [r7, #2]
 800689a:	2bff      	cmp	r3, #255	; 0xff
 800689c:	d109      	bne.n	80068b2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80068a2:	787a      	ldrb	r2, [r7, #1]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d002      	beq.n	80068ae <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80068a8:	787b      	ldrb	r3, [r7, #1]
 80068aa:	2bff      	cmp	r3, #255	; 0xff
 80068ac:	d101      	bne.n	80068b2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80068ae:	7dfb      	ldrb	r3, [r7, #23]
 80068b0:	e006      	b.n	80068c0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80068b2:	7dfb      	ldrb	r3, [r7, #23]
 80068b4:	3301      	adds	r3, #1
 80068b6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80068b8:	7dfb      	ldrb	r3, [r7, #23]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d9d6      	bls.n	800686c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80068be:	23ff      	movs	r3, #255	; 0xff
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	371c      	adds	r7, #28
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f001 fc73 	bl	80081c0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80068da:	2101      	movs	r1, #1
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f001 fd8c 	bl	80083fa <USBH_LL_DriverVBUS>

  return USBH_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b088      	sub	sp, #32
 80068f0:	af04      	add	r7, sp, #16
 80068f2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80068f4:	2302      	movs	r3, #2
 80068f6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80068f8:	2300      	movs	r3, #0
 80068fa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b01      	cmp	r3, #1
 8006906:	d102      	bne.n	800690e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2203      	movs	r2, #3
 800690c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b0b      	cmp	r3, #11
 8006916:	f200 81be 	bhi.w	8006c96 <USBH_Process+0x3aa>
 800691a:	a201      	add	r2, pc, #4	; (adr r2, 8006920 <USBH_Process+0x34>)
 800691c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006920:	08006951 	.word	0x08006951
 8006924:	08006983 	.word	0x08006983
 8006928:	080069eb 	.word	0x080069eb
 800692c:	08006c31 	.word	0x08006c31
 8006930:	08006c97 	.word	0x08006c97
 8006934:	08006a8f 	.word	0x08006a8f
 8006938:	08006bd7 	.word	0x08006bd7
 800693c:	08006ac5 	.word	0x08006ac5
 8006940:	08006ae5 	.word	0x08006ae5
 8006944:	08006b05 	.word	0x08006b05
 8006948:	08006b49 	.word	0x08006b49
 800694c:	08006c19 	.word	0x08006c19
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 819e 	beq.w	8006c9a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006964:	20c8      	movs	r0, #200	; 0xc8
 8006966:	f001 fd86 	bl	8008476 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f001 fc85 	bl	800827a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006980:	e18b      	b.n	8006c9a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006988:	2b01      	cmp	r3, #1
 800698a:	d107      	bne.n	800699c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2202      	movs	r2, #2
 8006998:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800699a:	e18d      	b.n	8006cb8 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80069a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069a6:	d914      	bls.n	80069d2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80069ae:	3301      	adds	r3, #1
 80069b0:	b2da      	uxtb	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80069be:	2b03      	cmp	r3, #3
 80069c0:	d903      	bls.n	80069ca <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	220d      	movs	r2, #13
 80069c6:	701a      	strb	r2, [r3, #0]
      break;
 80069c8:	e176      	b.n	8006cb8 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	701a      	strb	r2, [r3, #0]
      break;
 80069d0:	e172      	b.n	8006cb8 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80069d8:	f103 020a 	add.w	r2, r3, #10
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80069e2:	200a      	movs	r0, #10
 80069e4:	f001 fd47 	bl	8008476 <USBH_Delay>
      break;
 80069e8:	e166      	b.n	8006cb8 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d005      	beq.n	8006a00 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069fa:	2104      	movs	r1, #4
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006a00:	2064      	movs	r0, #100	; 0x64
 8006a02:	f001 fd38 	bl	8008476 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f001 fc10 	bl	800822c <USBH_LL_GetSpeed>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	461a      	mov	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2205      	movs	r2, #5
 8006a1a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f001 fa29 	bl	8007e76 <USBH_AllocPipe>
 8006a24:	4603      	mov	r3, r0
 8006a26:	461a      	mov	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006a2c:	2180      	movs	r1, #128	; 0x80
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f001 fa21 	bl	8007e76 <USBH_AllocPipe>
 8006a34:	4603      	mov	r3, r0
 8006a36:	461a      	mov	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	7919      	ldrb	r1, [r3, #4]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006a50:	b292      	uxth	r2, r2
 8006a52:	9202      	str	r2, [sp, #8]
 8006a54:	2200      	movs	r2, #0
 8006a56:	9201      	str	r2, [sp, #4]
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2280      	movs	r2, #128	; 0x80
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f001 f9da 	bl	8007e18 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	7959      	ldrb	r1, [r3, #5]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006a78:	b292      	uxth	r2, r2
 8006a7a:	9202      	str	r2, [sp, #8]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	9201      	str	r2, [sp, #4]
 8006a80:	9300      	str	r3, [sp, #0]
 8006a82:	4603      	mov	r3, r0
 8006a84:	2200      	movs	r2, #0
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f001 f9c6 	bl	8007e18 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a8c:	e114      	b.n	8006cb8 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f918 	bl	8006cc4 <USBH_HandleEnum>
 8006a94:	4603      	mov	r3, r0
 8006a96:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006a98:	7bbb      	ldrb	r3, [r7, #14]
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f040 80fe 	bne.w	8006c9e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d103      	bne.n	8006abc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2208      	movs	r2, #8
 8006ab8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006aba:	e0f0      	b.n	8006c9e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2207      	movs	r2, #7
 8006ac0:	701a      	strb	r2, [r3, #0]
      break;
 8006ac2:	e0ec      	b.n	8006c9e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f000 80e9 	beq.w	8006ca2 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ad6:	2101      	movs	r1, #1
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2208      	movs	r2, #8
 8006ae0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006ae2:	e0de      	b.n	8006ca2 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	4619      	mov	r1, r3
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fc2c 	bl	800734c <USBH_SetCfg>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f040 80d5 	bne.w	8006ca6 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2209      	movs	r2, #9
 8006b00:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006b02:	e0d0      	b.n	8006ca6 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006b0a:	f003 0320 	and.w	r3, r3, #32
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d016      	beq.n	8006b40 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006b12:	2101      	movs	r1, #1
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 fc3c 	bl	8007392 <USBH_SetFeature>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006b1e:	7bbb      	ldrb	r3, [r7, #14]
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d103      	bne.n	8006b2e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	220a      	movs	r2, #10
 8006b2a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006b2c:	e0bd      	b.n	8006caa <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006b2e:	7bbb      	ldrb	r3, [r7, #14]
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	f040 80b9 	bne.w	8006caa <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	220a      	movs	r2, #10
 8006b3c:	701a      	strb	r2, [r3, #0]
      break;
 8006b3e:	e0b4      	b.n	8006caa <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	220a      	movs	r2, #10
 8006b44:	701a      	strb	r2, [r3, #0]
      break;
 8006b46:	e0b0      	b.n	8006caa <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 80ad 	beq.w	8006cae <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	73fb      	strb	r3, [r7, #15]
 8006b60:	e016      	b.n	8006b90 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006b62:	7bfa      	ldrb	r2, [r7, #15]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	32de      	adds	r2, #222	; 0xde
 8006b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b6c:	791a      	ldrb	r2, [r3, #4]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d108      	bne.n	8006b8a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006b78:	7bfa      	ldrb	r2, [r7, #15]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	32de      	adds	r2, #222	; 0xde
 8006b7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006b88:	e005      	b.n	8006b96 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	73fb      	strb	r3, [r7, #15]
 8006b90:	7bfb      	ldrb	r3, [r7, #15]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d0e5      	beq.n	8006b62 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d016      	beq.n	8006bce <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	4798      	blx	r3
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d109      	bne.n	8006bc6 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2206      	movs	r2, #6
 8006bb6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bbe:	2103      	movs	r1, #3
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006bc4:	e073      	b.n	8006cae <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	220d      	movs	r2, #13
 8006bca:	701a      	strb	r2, [r3, #0]
      break;
 8006bcc:	e06f      	b.n	8006cae <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	220d      	movs	r2, #13
 8006bd2:	701a      	strb	r2, [r3, #0]
      break;
 8006bd4:	e06b      	b.n	8006cae <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d017      	beq.n	8006c10 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	4798      	blx	r3
 8006bec:	4603      	mov	r3, r0
 8006bee:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006bf0:	7bbb      	ldrb	r3, [r7, #14]
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d103      	bne.n	8006c00 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	220b      	movs	r2, #11
 8006bfc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006bfe:	e058      	b.n	8006cb2 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006c00:	7bbb      	ldrb	r3, [r7, #14]
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d154      	bne.n	8006cb2 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	220d      	movs	r2, #13
 8006c0c:	701a      	strb	r2, [r3, #0]
      break;
 8006c0e:	e050      	b.n	8006cb2 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	220d      	movs	r2, #13
 8006c14:	701a      	strb	r2, [r3, #0]
      break;
 8006c16:	e04c      	b.n	8006cb2 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d049      	beq.n	8006cb6 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	4798      	blx	r3
      }
      break;
 8006c2e:	e042      	b.n	8006cb6 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f7ff fd67 	bl	800670c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d009      	beq.n	8006c5c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d005      	beq.n	8006c72 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c6c:	2105      	movs	r1, #5
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d107      	bne.n	8006c8e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f7ff fe20 	bl	80068cc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006c8c:	e014      	b.n	8006cb8 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f001 fa96 	bl	80081c0 <USBH_LL_Start>
      break;
 8006c94:	e010      	b.n	8006cb8 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006c96:	bf00      	nop
 8006c98:	e00e      	b.n	8006cb8 <USBH_Process+0x3cc>
      break;
 8006c9a:	bf00      	nop
 8006c9c:	e00c      	b.n	8006cb8 <USBH_Process+0x3cc>
      break;
 8006c9e:	bf00      	nop
 8006ca0:	e00a      	b.n	8006cb8 <USBH_Process+0x3cc>
    break;
 8006ca2:	bf00      	nop
 8006ca4:	e008      	b.n	8006cb8 <USBH_Process+0x3cc>
      break;
 8006ca6:	bf00      	nop
 8006ca8:	e006      	b.n	8006cb8 <USBH_Process+0x3cc>
      break;
 8006caa:	bf00      	nop
 8006cac:	e004      	b.n	8006cb8 <USBH_Process+0x3cc>
      break;
 8006cae:	bf00      	nop
 8006cb0:	e002      	b.n	8006cb8 <USBH_Process+0x3cc>
      break;
 8006cb2:	bf00      	nop
 8006cb4:	e000      	b.n	8006cb8 <USBH_Process+0x3cc>
      break;
 8006cb6:	bf00      	nop
  }
  return USBH_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop

08006cc4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b088      	sub	sp, #32
 8006cc8:	af04      	add	r7, sp, #16
 8006cca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	785b      	ldrb	r3, [r3, #1]
 8006cd8:	2b07      	cmp	r3, #7
 8006cda:	f200 81c1 	bhi.w	8007060 <USBH_HandleEnum+0x39c>
 8006cde:	a201      	add	r2, pc, #4	; (adr r2, 8006ce4 <USBH_HandleEnum+0x20>)
 8006ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce4:	08006d05 	.word	0x08006d05
 8006ce8:	08006dc3 	.word	0x08006dc3
 8006cec:	08006e2d 	.word	0x08006e2d
 8006cf0:	08006ebb 	.word	0x08006ebb
 8006cf4:	08006f25 	.word	0x08006f25
 8006cf8:	08006f95 	.word	0x08006f95
 8006cfc:	08006fdb 	.word	0x08006fdb
 8006d00:	08007021 	.word	0x08007021
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006d04:	2108      	movs	r1, #8
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fa50 	bl	80071ac <USBH_Get_DevDesc>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d10:	7bbb      	ldrb	r3, [r7, #14]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d130      	bne.n	8006d78 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	7919      	ldrb	r1, [r3, #4]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006d3a:	b292      	uxth	r2, r2
 8006d3c:	9202      	str	r2, [sp, #8]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	9201      	str	r2, [sp, #4]
 8006d42:	9300      	str	r3, [sp, #0]
 8006d44:	4603      	mov	r3, r0
 8006d46:	2280      	movs	r2, #128	; 0x80
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f001 f865 	bl	8007e18 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	7959      	ldrb	r1, [r3, #5]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d62:	b292      	uxth	r2, r2
 8006d64:	9202      	str	r2, [sp, #8]
 8006d66:	2200      	movs	r2, #0
 8006d68:	9201      	str	r2, [sp, #4]
 8006d6a:	9300      	str	r3, [sp, #0]
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2200      	movs	r2, #0
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f001 f851 	bl	8007e18 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006d76:	e175      	b.n	8007064 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d78:	7bbb      	ldrb	r3, [r7, #14]
 8006d7a:	2b03      	cmp	r3, #3
 8006d7c:	f040 8172 	bne.w	8007064 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d86:	3301      	adds	r3, #1
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	d903      	bls.n	8006da2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	220d      	movs	r2, #13
 8006d9e:	701a      	strb	r2, [r3, #0]
      break;
 8006da0:	e160      	b.n	8007064 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	795b      	ldrb	r3, [r3, #5]
 8006da6:	4619      	mov	r1, r3
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f001 f885 	bl	8007eb8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	791b      	ldrb	r3, [r3, #4]
 8006db2:	4619      	mov	r1, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f001 f87f 	bl	8007eb8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	701a      	strb	r2, [r3, #0]
      break;
 8006dc0:	e150      	b.n	8007064 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006dc2:	2112      	movs	r1, #18
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f9f1 	bl	80071ac <USBH_Get_DevDesc>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006dce:	7bbb      	ldrb	r3, [r7, #14]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d103      	bne.n	8006ddc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006dda:	e145      	b.n	8007068 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ddc:	7bbb      	ldrb	r3, [r7, #14]
 8006dde:	2b03      	cmp	r3, #3
 8006de0:	f040 8142 	bne.w	8007068 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006dea:	3301      	adds	r3, #1
 8006dec:	b2da      	uxtb	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006dfa:	2b03      	cmp	r3, #3
 8006dfc:	d903      	bls.n	8006e06 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	220d      	movs	r2, #13
 8006e02:	701a      	strb	r2, [r3, #0]
      break;
 8006e04:	e130      	b.n	8007068 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	795b      	ldrb	r3, [r3, #5]
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f001 f853 	bl	8007eb8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	791b      	ldrb	r3, [r3, #4]
 8006e16:	4619      	mov	r1, r3
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f001 f84d 	bl	8007eb8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	701a      	strb	r2, [r3, #0]
      break;
 8006e2a:	e11d      	b.n	8007068 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fa68 	bl	8007304 <USBH_SetAddress>
 8006e34:	4603      	mov	r3, r0
 8006e36:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e38:	7bbb      	ldrb	r3, [r7, #14]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d132      	bne.n	8006ea4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006e3e:	2002      	movs	r0, #2
 8006e40:	f001 fb19 	bl	8008476 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2203      	movs	r2, #3
 8006e50:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	7919      	ldrb	r1, [r3, #4]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006e66:	b292      	uxth	r2, r2
 8006e68:	9202      	str	r2, [sp, #8]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	9201      	str	r2, [sp, #4]
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	4603      	mov	r3, r0
 8006e72:	2280      	movs	r2, #128	; 0x80
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 ffcf 	bl	8007e18 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	7959      	ldrb	r1, [r3, #5]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e8e:	b292      	uxth	r2, r2
 8006e90:	9202      	str	r2, [sp, #8]
 8006e92:	2200      	movs	r2, #0
 8006e94:	9201      	str	r2, [sp, #4]
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 ffbb 	bl	8007e18 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006ea2:	e0e3      	b.n	800706c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ea4:	7bbb      	ldrb	r3, [r7, #14]
 8006ea6:	2b03      	cmp	r3, #3
 8006ea8:	f040 80e0 	bne.w	800706c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	220d      	movs	r2, #13
 8006eb0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	705a      	strb	r2, [r3, #1]
      break;
 8006eb8:	e0d8      	b.n	800706c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006eba:	2109      	movs	r1, #9
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 f99d 	bl	80071fc <USBH_Get_CfgDesc>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ec6:	7bbb      	ldrb	r3, [r7, #14]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d103      	bne.n	8006ed4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2204      	movs	r2, #4
 8006ed0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006ed2:	e0cd      	b.n	8007070 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ed4:	7bbb      	ldrb	r3, [r7, #14]
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	f040 80ca 	bne.w	8007070 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ef2:	2b03      	cmp	r3, #3
 8006ef4:	d903      	bls.n	8006efe <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	220d      	movs	r2, #13
 8006efa:	701a      	strb	r2, [r3, #0]
      break;
 8006efc:	e0b8      	b.n	8007070 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	795b      	ldrb	r3, [r3, #5]
 8006f02:	4619      	mov	r1, r3
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 ffd7 	bl	8007eb8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	791b      	ldrb	r3, [r3, #4]
 8006f0e:	4619      	mov	r1, r3
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 ffd1 	bl	8007eb8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	701a      	strb	r2, [r3, #0]
      break;
 8006f22:	e0a5      	b.n	8007070 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f965 	bl	80071fc <USBH_Get_CfgDesc>
 8006f32:	4603      	mov	r3, r0
 8006f34:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f36:	7bbb      	ldrb	r3, [r7, #14]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d103      	bne.n	8006f44 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2205      	movs	r2, #5
 8006f40:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006f42:	e097      	b.n	8007074 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f44:	7bbb      	ldrb	r3, [r7, #14]
 8006f46:	2b03      	cmp	r3, #3
 8006f48:	f040 8094 	bne.w	8007074 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f52:	3301      	adds	r3, #1
 8006f54:	b2da      	uxtb	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f62:	2b03      	cmp	r3, #3
 8006f64:	d903      	bls.n	8006f6e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	220d      	movs	r2, #13
 8006f6a:	701a      	strb	r2, [r3, #0]
      break;
 8006f6c:	e082      	b.n	8007074 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	795b      	ldrb	r3, [r3, #5]
 8006f72:	4619      	mov	r1, r3
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 ff9f 	bl	8007eb8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	791b      	ldrb	r3, [r3, #4]
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 ff99 	bl	8007eb8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	701a      	strb	r2, [r3, #0]
      break;
 8006f92:	e06f      	b.n	8007074 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d019      	beq.n	8006fd2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006faa:	23ff      	movs	r3, #255	; 0xff
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 f949 	bl	8007244 <USBH_Get_StringDesc>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006fb6:	7bbb      	ldrb	r3, [r7, #14]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d103      	bne.n	8006fc4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2206      	movs	r2, #6
 8006fc0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006fc2:	e059      	b.n	8007078 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fc4:	7bbb      	ldrb	r3, [r7, #14]
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	d156      	bne.n	8007078 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2206      	movs	r2, #6
 8006fce:	705a      	strb	r2, [r3, #1]
      break;
 8006fd0:	e052      	b.n	8007078 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2206      	movs	r2, #6
 8006fd6:	705a      	strb	r2, [r3, #1]
      break;
 8006fd8:	e04e      	b.n	8007078 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d019      	beq.n	8007018 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006ff0:	23ff      	movs	r3, #255	; 0xff
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f926 	bl	8007244 <USBH_Get_StringDesc>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006ffc:	7bbb      	ldrb	r3, [r7, #14]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d103      	bne.n	800700a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2207      	movs	r2, #7
 8007006:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007008:	e038      	b.n	800707c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800700a:	7bbb      	ldrb	r3, [r7, #14]
 800700c:	2b03      	cmp	r3, #3
 800700e:	d135      	bne.n	800707c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2207      	movs	r2, #7
 8007014:	705a      	strb	r2, [r3, #1]
      break;
 8007016:	e031      	b.n	800707c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2207      	movs	r2, #7
 800701c:	705a      	strb	r2, [r3, #1]
      break;
 800701e:	e02d      	b.n	800707c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007026:	2b00      	cmp	r3, #0
 8007028:	d017      	beq.n	800705a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007036:	23ff      	movs	r3, #255	; 0xff
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f903 	bl	8007244 <USBH_Get_StringDesc>
 800703e:	4603      	mov	r3, r0
 8007040:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007042:	7bbb      	ldrb	r3, [r7, #14]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d102      	bne.n	800704e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800704c:	e018      	b.n	8007080 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800704e:	7bbb      	ldrb	r3, [r7, #14]
 8007050:	2b03      	cmp	r3, #3
 8007052:	d115      	bne.n	8007080 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007054:	2300      	movs	r3, #0
 8007056:	73fb      	strb	r3, [r7, #15]
      break;
 8007058:	e012      	b.n	8007080 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800705a:	2300      	movs	r3, #0
 800705c:	73fb      	strb	r3, [r7, #15]
      break;
 800705e:	e00f      	b.n	8007080 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007060:	bf00      	nop
 8007062:	e00e      	b.n	8007082 <USBH_HandleEnum+0x3be>
      break;
 8007064:	bf00      	nop
 8007066:	e00c      	b.n	8007082 <USBH_HandleEnum+0x3be>
      break;
 8007068:	bf00      	nop
 800706a:	e00a      	b.n	8007082 <USBH_HandleEnum+0x3be>
      break;
 800706c:	bf00      	nop
 800706e:	e008      	b.n	8007082 <USBH_HandleEnum+0x3be>
      break;
 8007070:	bf00      	nop
 8007072:	e006      	b.n	8007082 <USBH_HandleEnum+0x3be>
      break;
 8007074:	bf00      	nop
 8007076:	e004      	b.n	8007082 <USBH_HandleEnum+0x3be>
      break;
 8007078:	bf00      	nop
 800707a:	e002      	b.n	8007082 <USBH_HandleEnum+0x3be>
      break;
 800707c:	bf00      	nop
 800707e:	e000      	b.n	8007082 <USBH_HandleEnum+0x3be>
      break;
 8007080:	bf00      	nop
  }
  return Status;
 8007082:	7bfb      	ldrb	r3, [r7, #15]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	683a      	ldr	r2, [r7, #0]
 800709a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800709e:	bf00      	nop
 80070a0:	370c      	adds	r7, #12
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b082      	sub	sp, #8
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80070b8:	1c5a      	adds	r2, r3, #1
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f804 	bl	80070ce <USBH_HandleSof>
}
 80070c6:	bf00      	nop
 80070c8:	3708      	adds	r7, #8
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b082      	sub	sp, #8
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	2b0b      	cmp	r3, #11
 80070de:	d10a      	bne.n	80070f6 <USBH_HandleSof+0x28>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d005      	beq.n	80070f6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	4798      	blx	r3
  }
}
 80070f6:	bf00      	nop
 80070f8:	3708      	adds	r7, #8
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80070fe:	b480      	push	{r7}
 8007100:	b083      	sub	sp, #12
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2201      	movs	r2, #1
 800710a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800710e:	bf00      	nop
}
 8007110:	370c      	adds	r7, #12
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr

0800711a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800711a:	b480      	push	{r7}
 800711c:	b083      	sub	sp, #12
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800712a:	bf00      	nop
}
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007136:	b480      	push	{r7}
 8007138:	b083      	sub	sp, #12
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f001 f836 	bl	80081f6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	791b      	ldrb	r3, [r3, #4]
 800718e:	4619      	mov	r1, r3
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fe91 	bl	8007eb8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	795b      	ldrb	r3, [r3, #5]
 800719a:	4619      	mov	r1, r3
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 fe8b 	bl	8007eb8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af02      	add	r7, sp, #8
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	460b      	mov	r3, r1
 80071b6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80071be:	78fb      	ldrb	r3, [r7, #3]
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	4613      	mov	r3, r2
 80071c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071ca:	2100      	movs	r1, #0
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 f864 	bl	800729a <USBH_GetDescriptor>
 80071d2:	4603      	mov	r3, r0
 80071d4:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80071d6:	7bfb      	ldrb	r3, [r7, #15]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10a      	bne.n	80071f2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f203 3026 	addw	r0, r3, #806	; 0x326
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80071e8:	78fa      	ldrb	r2, [r7, #3]
 80071ea:	b292      	uxth	r2, r2
 80071ec:	4619      	mov	r1, r3
 80071ee:	f000 f918 	bl	8007422 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80071f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3710      	adds	r7, #16
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af02      	add	r7, sp, #8
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	460b      	mov	r3, r1
 8007206:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	331c      	adds	r3, #28
 800720c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800720e:	887b      	ldrh	r3, [r7, #2]
 8007210:	9300      	str	r3, [sp, #0]
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007218:	2100      	movs	r1, #0
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f83d 	bl	800729a <USBH_GetDescriptor>
 8007220:	4603      	mov	r3, r0
 8007222:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007224:	7bfb      	ldrb	r3, [r7, #15]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d107      	bne.n	800723a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800722a:	887b      	ldrh	r3, [r7, #2]
 800722c:	461a      	mov	r2, r3
 800722e:	68b9      	ldr	r1, [r7, #8]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f987 	bl	8007544 <USBH_ParseCfgDesc>
 8007236:	4603      	mov	r3, r0
 8007238:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800723a:	7bfb      	ldrb	r3, [r7, #15]
}
 800723c:	4618      	mov	r0, r3
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b088      	sub	sp, #32
 8007248:	af02      	add	r7, sp, #8
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	607a      	str	r2, [r7, #4]
 800724e:	461a      	mov	r2, r3
 8007250:	460b      	mov	r3, r1
 8007252:	72fb      	strb	r3, [r7, #11]
 8007254:	4613      	mov	r3, r2
 8007256:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007258:	7afb      	ldrb	r3, [r7, #11]
 800725a:	b29b      	uxth	r3, r3
 800725c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007260:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007268:	893b      	ldrh	r3, [r7, #8]
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	460b      	mov	r3, r1
 800726e:	2100      	movs	r1, #0
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f000 f812 	bl	800729a <USBH_GetDescriptor>
 8007276:	4603      	mov	r3, r0
 8007278:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800727a:	7dfb      	ldrb	r3, [r7, #23]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d107      	bne.n	8007290 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007286:	893a      	ldrh	r2, [r7, #8]
 8007288:	6879      	ldr	r1, [r7, #4]
 800728a:	4618      	mov	r0, r3
 800728c:	f000 fb24 	bl	80078d8 <USBH_ParseStringDesc>
  }

  return status;
 8007290:	7dfb      	ldrb	r3, [r7, #23]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3718      	adds	r7, #24
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b084      	sub	sp, #16
 800729e:	af00      	add	r7, sp, #0
 80072a0:	60f8      	str	r0, [r7, #12]
 80072a2:	607b      	str	r3, [r7, #4]
 80072a4:	460b      	mov	r3, r1
 80072a6:	72fb      	strb	r3, [r7, #11]
 80072a8:	4613      	mov	r3, r2
 80072aa:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	789b      	ldrb	r3, [r3, #2]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d11c      	bne.n	80072ee <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80072b4:	7afb      	ldrb	r3, [r7, #11]
 80072b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80072ba:	b2da      	uxtb	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2206      	movs	r2, #6
 80072c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	893a      	ldrh	r2, [r7, #8]
 80072ca:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80072cc:	893b      	ldrh	r3, [r7, #8]
 80072ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80072d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072d6:	d104      	bne.n	80072e2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f240 4209 	movw	r2, #1033	; 0x409
 80072de:	829a      	strh	r2, [r3, #20]
 80072e0:	e002      	b.n	80072e8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	8b3a      	ldrh	r2, [r7, #24]
 80072ec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80072ee:	8b3b      	ldrh	r3, [r7, #24]
 80072f0:	461a      	mov	r2, r3
 80072f2:	6879      	ldr	r1, [r7, #4]
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 fb3d 	bl	8007974 <USBH_CtlReq>
 80072fa:	4603      	mov	r3, r0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	789b      	ldrb	r3, [r3, #2]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d10f      	bne.n	8007338 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2205      	movs	r2, #5
 8007322:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007324:	78fb      	ldrb	r3, [r7, #3]
 8007326:	b29a      	uxth	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007338:	2200      	movs	r2, #0
 800733a:	2100      	movs	r1, #0
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 fb19 	bl	8007974 <USBH_CtlReq>
 8007342:	4603      	mov	r3, r0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	460b      	mov	r3, r1
 8007356:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	789b      	ldrb	r3, [r3, #2]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d10e      	bne.n	800737e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2209      	movs	r2, #9
 800736a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	887a      	ldrh	r2, [r7, #2]
 8007370:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800737e:	2200      	movs	r2, #0
 8007380:	2100      	movs	r1, #0
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 faf6 	bl	8007974 <USBH_CtlReq>
 8007388:	4603      	mov	r3, r0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b082      	sub	sp, #8
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	460b      	mov	r3, r1
 800739c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	789b      	ldrb	r3, [r3, #2]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d10f      	bne.n	80073c6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2203      	movs	r2, #3
 80073b0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80073b2:	78fb      	ldrb	r3, [r7, #3]
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80073c6:	2200      	movs	r2, #0
 80073c8:	2100      	movs	r1, #0
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 fad2 	bl	8007974 <USBH_CtlReq>
 80073d0:	4603      	mov	r3, r0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b082      	sub	sp, #8
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
 80073e2:	460b      	mov	r3, r1
 80073e4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	789b      	ldrb	r3, [r3, #2]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d10f      	bne.n	800740e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2202      	movs	r2, #2
 80073f2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007400:	78fb      	ldrb	r3, [r7, #3]
 8007402:	b29a      	uxth	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800740e:	2200      	movs	r2, #0
 8007410:	2100      	movs	r1, #0
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 faae 	bl	8007974 <USBH_CtlReq>
 8007418:	4603      	mov	r3, r0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3708      	adds	r7, #8
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007422:	b480      	push	{r7}
 8007424:	b085      	sub	sp, #20
 8007426:	af00      	add	r7, sp, #0
 8007428:	60f8      	str	r0, [r7, #12]
 800742a:	60b9      	str	r1, [r7, #8]
 800742c:	4613      	mov	r3, r2
 800742e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	781a      	ldrb	r2, [r3, #0]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	785a      	ldrb	r2, [r3, #1]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	3302      	adds	r3, #2
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	b29a      	uxth	r2, r3
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	3303      	adds	r3, #3
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	b29b      	uxth	r3, r3
 8007450:	021b      	lsls	r3, r3, #8
 8007452:	b29b      	uxth	r3, r3
 8007454:	4313      	orrs	r3, r2
 8007456:	b29a      	uxth	r2, r3
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	791a      	ldrb	r2, [r3, #4]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	795a      	ldrb	r2, [r3, #5]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	799a      	ldrb	r2, [r3, #6]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	79da      	ldrb	r2, [r3, #7]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	79db      	ldrb	r3, [r3, #7]
 8007480:	2b20      	cmp	r3, #32
 8007482:	dc11      	bgt.n	80074a8 <USBH_ParseDevDesc+0x86>
 8007484:	2b08      	cmp	r3, #8
 8007486:	db16      	blt.n	80074b6 <USBH_ParseDevDesc+0x94>
 8007488:	3b08      	subs	r3, #8
 800748a:	2201      	movs	r2, #1
 800748c:	fa02 f303 	lsl.w	r3, r2, r3
 8007490:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007498:	2b00      	cmp	r3, #0
 800749a:	bf14      	ite	ne
 800749c:	2301      	movne	r3, #1
 800749e:	2300      	moveq	r3, #0
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d102      	bne.n	80074ac <USBH_ParseDevDesc+0x8a>
 80074a6:	e006      	b.n	80074b6 <USBH_ParseDevDesc+0x94>
 80074a8:	2b40      	cmp	r3, #64	; 0x40
 80074aa:	d104      	bne.n	80074b6 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	79da      	ldrb	r2, [r3, #7]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	71da      	strb	r2, [r3, #7]
      break;
 80074b4:	e003      	b.n	80074be <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2240      	movs	r2, #64	; 0x40
 80074ba:	71da      	strb	r2, [r3, #7]
      break;
 80074bc:	bf00      	nop
  }

  if (length > 8U)
 80074be:	88fb      	ldrh	r3, [r7, #6]
 80074c0:	2b08      	cmp	r3, #8
 80074c2:	d939      	bls.n	8007538 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	3308      	adds	r3, #8
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	3309      	adds	r3, #9
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	021b      	lsls	r3, r3, #8
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	4313      	orrs	r3, r2
 80074da:	b29a      	uxth	r2, r3
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	330a      	adds	r3, #10
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	330b      	adds	r3, #11
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	021b      	lsls	r3, r3, #8
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	4313      	orrs	r3, r2
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	330c      	adds	r3, #12
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	b29a      	uxth	r2, r3
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	330d      	adds	r3, #13
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	b29b      	uxth	r3, r3
 800750c:	021b      	lsls	r3, r3, #8
 800750e:	b29b      	uxth	r3, r3
 8007510:	4313      	orrs	r3, r2
 8007512:	b29a      	uxth	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	7b9a      	ldrb	r2, [r3, #14]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	7bda      	ldrb	r2, [r3, #15]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	7c1a      	ldrb	r2, [r3, #16]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	7c5a      	ldrb	r2, [r3, #17]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	745a      	strb	r2, [r3, #17]
  }
}
 8007538:	bf00      	nop
 800753a:	3714      	adds	r7, #20
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b08c      	sub	sp, #48	; 0x30
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	4613      	mov	r3, r2
 8007550:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007558:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800755a:	2300      	movs	r3, #0
 800755c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007564:	2300      	movs	r3, #0
 8007566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800756a:	2300      	movs	r3, #0
 800756c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	781a      	ldrb	r2, [r3, #0]
 8007578:	6a3b      	ldr	r3, [r7, #32]
 800757a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	785a      	ldrb	r2, [r3, #1]
 8007580:	6a3b      	ldr	r3, [r7, #32]
 8007582:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	3302      	adds	r3, #2
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	b29a      	uxth	r2, r3
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	3303      	adds	r3, #3
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	b29b      	uxth	r3, r3
 8007594:	021b      	lsls	r3, r3, #8
 8007596:	b29b      	uxth	r3, r3
 8007598:	4313      	orrs	r3, r2
 800759a:	b29b      	uxth	r3, r3
 800759c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075a0:	bf28      	it	cs
 80075a2:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	6a3b      	ldr	r3, [r7, #32]
 80075aa:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	791a      	ldrb	r2, [r3, #4]
 80075b0:	6a3b      	ldr	r3, [r7, #32]
 80075b2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	795a      	ldrb	r2, [r3, #5]
 80075b8:	6a3b      	ldr	r3, [r7, #32]
 80075ba:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	799a      	ldrb	r2, [r3, #6]
 80075c0:	6a3b      	ldr	r3, [r7, #32]
 80075c2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	79da      	ldrb	r2, [r3, #7]
 80075c8:	6a3b      	ldr	r3, [r7, #32]
 80075ca:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	7a1a      	ldrb	r2, [r3, #8]
 80075d0:	6a3b      	ldr	r3, [r7, #32]
 80075d2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80075d4:	6a3b      	ldr	r3, [r7, #32]
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	2b09      	cmp	r3, #9
 80075da:	d002      	beq.n	80075e2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80075dc:	6a3b      	ldr	r3, [r7, #32]
 80075de:	2209      	movs	r2, #9
 80075e0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80075e2:	88fb      	ldrh	r3, [r7, #6]
 80075e4:	2b09      	cmp	r3, #9
 80075e6:	f240 809d 	bls.w	8007724 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80075ea:	2309      	movs	r3, #9
 80075ec:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80075ee:	2300      	movs	r3, #0
 80075f0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80075f2:	e081      	b.n	80076f8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80075f4:	f107 0316 	add.w	r3, r7, #22
 80075f8:	4619      	mov	r1, r3
 80075fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075fc:	f000 f99f 	bl	800793e <USBH_GetNextDesc>
 8007600:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007604:	785b      	ldrb	r3, [r3, #1]
 8007606:	2b04      	cmp	r3, #4
 8007608:	d176      	bne.n	80076f8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800760a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	2b09      	cmp	r3, #9
 8007610:	d002      	beq.n	8007618 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007614:	2209      	movs	r2, #9
 8007616:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800761c:	221a      	movs	r2, #26
 800761e:	fb02 f303 	mul.w	r3, r2, r3
 8007622:	3308      	adds	r3, #8
 8007624:	6a3a      	ldr	r2, [r7, #32]
 8007626:	4413      	add	r3, r2
 8007628:	3302      	adds	r3, #2
 800762a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800762c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800762e:	69f8      	ldr	r0, [r7, #28]
 8007630:	f000 f87e 	bl	8007730 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007634:	2300      	movs	r3, #0
 8007636:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800763a:	2300      	movs	r3, #0
 800763c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800763e:	e043      	b.n	80076c8 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007640:	f107 0316 	add.w	r3, r7, #22
 8007644:	4619      	mov	r1, r3
 8007646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007648:	f000 f979 	bl	800793e <USBH_GetNextDesc>
 800764c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800764e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007650:	785b      	ldrb	r3, [r3, #1]
 8007652:	2b05      	cmp	r3, #5
 8007654:	d138      	bne.n	80076c8 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	795b      	ldrb	r3, [r3, #5]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d10f      	bne.n	800767e <USBH_ParseCfgDesc+0x13a>
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	799b      	ldrb	r3, [r3, #6]
 8007662:	2b02      	cmp	r3, #2
 8007664:	d10b      	bne.n	800767e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	79db      	ldrb	r3, [r3, #7]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10f      	bne.n	800768e <USBH_ParseCfgDesc+0x14a>
 800766e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	2b09      	cmp	r3, #9
 8007674:	d00b      	beq.n	800768e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007678:	2209      	movs	r2, #9
 800767a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800767c:	e007      	b.n	800768e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800767e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	2b07      	cmp	r3, #7
 8007684:	d004      	beq.n	8007690 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007688:	2207      	movs	r2, #7
 800768a:	701a      	strb	r2, [r3, #0]
 800768c:	e000      	b.n	8007690 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800768e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007694:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007698:	3201      	adds	r2, #1
 800769a:	00d2      	lsls	r2, r2, #3
 800769c:	211a      	movs	r1, #26
 800769e:	fb01 f303 	mul.w	r3, r1, r3
 80076a2:	4413      	add	r3, r2
 80076a4:	3308      	adds	r3, #8
 80076a6:	6a3a      	ldr	r2, [r7, #32]
 80076a8:	4413      	add	r3, r2
 80076aa:	3304      	adds	r3, #4
 80076ac:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80076ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076b0:	69b9      	ldr	r1, [r7, #24]
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f000 f86b 	bl	800778e <USBH_ParseEPDesc>
 80076b8:	4603      	mov	r3, r0
 80076ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80076be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80076c2:	3301      	adds	r3, #1
 80076c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	791b      	ldrb	r3, [r3, #4]
 80076cc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d204      	bcs.n	80076de <USBH_ParseCfgDesc+0x19a>
 80076d4:	6a3b      	ldr	r3, [r7, #32]
 80076d6:	885a      	ldrh	r2, [r3, #2]
 80076d8:	8afb      	ldrh	r3, [r7, #22]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d8b0      	bhi.n	8007640 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	791b      	ldrb	r3, [r3, #4]
 80076e2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d201      	bcs.n	80076ee <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e01c      	b.n	8007728 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80076ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076f2:	3301      	adds	r3, #1
 80076f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80076f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d805      	bhi.n	800770c <USBH_ParseCfgDesc+0x1c8>
 8007700:	6a3b      	ldr	r3, [r7, #32]
 8007702:	885a      	ldrh	r2, [r3, #2]
 8007704:	8afb      	ldrh	r3, [r7, #22]
 8007706:	429a      	cmp	r2, r3
 8007708:	f63f af74 	bhi.w	80075f4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800770c:	6a3b      	ldr	r3, [r7, #32]
 800770e:	791b      	ldrb	r3, [r3, #4]
 8007710:	2b02      	cmp	r3, #2
 8007712:	bf28      	it	cs
 8007714:	2302      	movcs	r3, #2
 8007716:	b2db      	uxtb	r3, r3
 8007718:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800771c:	429a      	cmp	r2, r3
 800771e:	d201      	bcs.n	8007724 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007720:	2303      	movs	r3, #3
 8007722:	e001      	b.n	8007728 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007724:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007728:	4618      	mov	r0, r3
 800772a:	3730      	adds	r7, #48	; 0x30
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	781a      	ldrb	r2, [r3, #0]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	785a      	ldrb	r2, [r3, #1]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	789a      	ldrb	r2, [r3, #2]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	78da      	ldrb	r2, [r3, #3]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	791a      	ldrb	r2, [r3, #4]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	795a      	ldrb	r2, [r3, #5]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	799a      	ldrb	r2, [r3, #6]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	79da      	ldrb	r2, [r3, #7]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	7a1a      	ldrb	r2, [r3, #8]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	721a      	strb	r2, [r3, #8]
}
 8007782:	bf00      	nop
 8007784:	370c      	adds	r7, #12
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800778e:	b480      	push	{r7}
 8007790:	b087      	sub	sp, #28
 8007792:	af00      	add	r7, sp, #0
 8007794:	60f8      	str	r0, [r7, #12]
 8007796:	60b9      	str	r1, [r7, #8]
 8007798:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800779a:	2300      	movs	r3, #0
 800779c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	781a      	ldrb	r2, [r3, #0]
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	785a      	ldrb	r2, [r3, #1]
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	789a      	ldrb	r2, [r3, #2]
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	78da      	ldrb	r2, [r3, #3]
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	3304      	adds	r3, #4
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	3305      	adds	r3, #5
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	021b      	lsls	r3, r3, #8
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	4313      	orrs	r3, r2
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	799a      	ldrb	r2, [r3, #6]
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	889b      	ldrh	r3, [r3, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d102      	bne.n	80077f0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80077ea:	2303      	movs	r3, #3
 80077ec:	75fb      	strb	r3, [r7, #23]
 80077ee:	e033      	b.n	8007858 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	889b      	ldrh	r3, [r3, #4]
 80077f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80077f8:	f023 0307 	bic.w	r3, r3, #7
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	889b      	ldrh	r3, [r3, #4]
 8007806:	b21a      	sxth	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	3304      	adds	r3, #4
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	b299      	uxth	r1, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	3305      	adds	r3, #5
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	b29b      	uxth	r3, r3
 8007818:	021b      	lsls	r3, r3, #8
 800781a:	b29b      	uxth	r3, r3
 800781c:	430b      	orrs	r3, r1
 800781e:	b29b      	uxth	r3, r3
 8007820:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007824:	2b00      	cmp	r3, #0
 8007826:	d110      	bne.n	800784a <USBH_ParseEPDesc+0xbc>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	3304      	adds	r3, #4
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	b299      	uxth	r1, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	3305      	adds	r3, #5
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	b29b      	uxth	r3, r3
 8007838:	021b      	lsls	r3, r3, #8
 800783a:	b29b      	uxth	r3, r3
 800783c:	430b      	orrs	r3, r1
 800783e:	b29b      	uxth	r3, r3
 8007840:	b21b      	sxth	r3, r3
 8007842:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007846:	b21b      	sxth	r3, r3
 8007848:	e001      	b.n	800784e <USBH_ParseEPDesc+0xc0>
 800784a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800784e:	4313      	orrs	r3, r2
 8007850:	b21b      	sxth	r3, r3
 8007852:	b29a      	uxth	r2, r3
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800785e:	2b00      	cmp	r3, #0
 8007860:	d116      	bne.n	8007890 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	78db      	ldrb	r3, [r3, #3]
 8007866:	f003 0303 	and.w	r3, r3, #3
 800786a:	2b01      	cmp	r3, #1
 800786c:	d005      	beq.n	800787a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	78db      	ldrb	r3, [r3, #3]
 8007872:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007876:	2b03      	cmp	r3, #3
 8007878:	d127      	bne.n	80078ca <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	799b      	ldrb	r3, [r3, #6]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d003      	beq.n	800788a <USBH_ParseEPDesc+0xfc>
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	799b      	ldrb	r3, [r3, #6]
 8007886:	2b10      	cmp	r3, #16
 8007888:	d91f      	bls.n	80078ca <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800788a:	2303      	movs	r3, #3
 800788c:	75fb      	strb	r3, [r7, #23]
 800788e:	e01c      	b.n	80078ca <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	78db      	ldrb	r3, [r3, #3]
 8007894:	f003 0303 	and.w	r3, r3, #3
 8007898:	2b01      	cmp	r3, #1
 800789a:	d10a      	bne.n	80078b2 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	799b      	ldrb	r3, [r3, #6]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d003      	beq.n	80078ac <USBH_ParseEPDesc+0x11e>
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	799b      	ldrb	r3, [r3, #6]
 80078a8:	2b10      	cmp	r3, #16
 80078aa:	d90e      	bls.n	80078ca <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80078ac:	2303      	movs	r3, #3
 80078ae:	75fb      	strb	r3, [r7, #23]
 80078b0:	e00b      	b.n	80078ca <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	78db      	ldrb	r3, [r3, #3]
 80078b6:	f003 0303 	and.w	r3, r3, #3
 80078ba:	2b03      	cmp	r3, #3
 80078bc:	d105      	bne.n	80078ca <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	799b      	ldrb	r3, [r3, #6]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d101      	bne.n	80078ca <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80078c6:	2303      	movs	r3, #3
 80078c8:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80078ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	371c      	adds	r7, #28
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80078d8:	b480      	push	{r7}
 80078da:	b087      	sub	sp, #28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	4613      	mov	r3, r2
 80078e4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	3301      	adds	r3, #1
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	2b03      	cmp	r3, #3
 80078ee:	d120      	bne.n	8007932 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	1e9a      	subs	r2, r3, #2
 80078f6:	88fb      	ldrh	r3, [r7, #6]
 80078f8:	4293      	cmp	r3, r2
 80078fa:	bf28      	it	cs
 80078fc:	4613      	movcs	r3, r2
 80078fe:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	3302      	adds	r3, #2
 8007904:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007906:	2300      	movs	r3, #0
 8007908:	82fb      	strh	r3, [r7, #22]
 800790a:	e00b      	b.n	8007924 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800790c:	8afb      	ldrh	r3, [r7, #22]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	4413      	add	r3, r2
 8007912:	781a      	ldrb	r2, [r3, #0]
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	3301      	adds	r3, #1
 800791c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800791e:	8afb      	ldrh	r3, [r7, #22]
 8007920:	3302      	adds	r3, #2
 8007922:	82fb      	strh	r3, [r7, #22]
 8007924:	8afa      	ldrh	r2, [r7, #22]
 8007926:	8abb      	ldrh	r3, [r7, #20]
 8007928:	429a      	cmp	r2, r3
 800792a:	d3ef      	bcc.n	800790c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	2200      	movs	r2, #0
 8007930:	701a      	strb	r2, [r3, #0]
  }
}
 8007932:	bf00      	nop
 8007934:	371c      	adds	r7, #28
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800793e:	b480      	push	{r7}
 8007940:	b085      	sub	sp, #20
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	881a      	ldrh	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	b29b      	uxth	r3, r3
 8007952:	4413      	add	r3, r2
 8007954:	b29a      	uxth	r2, r3
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4413      	add	r3, r2
 8007964:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007966:	68fb      	ldr	r3, [r7, #12]
}
 8007968:	4618      	mov	r0, r3
 800796a:	3714      	adds	r7, #20
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	4613      	mov	r3, r2
 8007980:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007982:	2301      	movs	r3, #1
 8007984:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	789b      	ldrb	r3, [r3, #2]
 800798a:	2b01      	cmp	r3, #1
 800798c:	d002      	beq.n	8007994 <USBH_CtlReq+0x20>
 800798e:	2b02      	cmp	r3, #2
 8007990:	d00f      	beq.n	80079b2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007992:	e027      	b.n	80079e4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	88fa      	ldrh	r2, [r7, #6]
 800799e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2201      	movs	r2, #1
 80079a4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2202      	movs	r2, #2
 80079aa:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80079ac:	2301      	movs	r3, #1
 80079ae:	75fb      	strb	r3, [r7, #23]
      break;
 80079b0:	e018      	b.n	80079e4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f000 f81c 	bl	80079f0 <USBH_HandleControl>
 80079b8:	4603      	mov	r3, r0
 80079ba:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80079bc:	7dfb      	ldrb	r3, [r7, #23]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d002      	beq.n	80079c8 <USBH_CtlReq+0x54>
 80079c2:	7dfb      	ldrb	r3, [r7, #23]
 80079c4:	2b03      	cmp	r3, #3
 80079c6:	d106      	bne.n	80079d6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2201      	movs	r2, #1
 80079cc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	761a      	strb	r2, [r3, #24]
      break;
 80079d4:	e005      	b.n	80079e2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80079d6:	7dfb      	ldrb	r3, [r7, #23]
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d102      	bne.n	80079e2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2201      	movs	r2, #1
 80079e0:	709a      	strb	r2, [r3, #2]
      break;
 80079e2:	bf00      	nop
  }
  return status;
 80079e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3718      	adds	r7, #24
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
	...

080079f0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af02      	add	r7, sp, #8
 80079f6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80079f8:	2301      	movs	r3, #1
 80079fa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80079fc:	2300      	movs	r3, #0
 80079fe:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	7e1b      	ldrb	r3, [r3, #24]
 8007a04:	3b01      	subs	r3, #1
 8007a06:	2b0a      	cmp	r3, #10
 8007a08:	f200 8156 	bhi.w	8007cb8 <USBH_HandleControl+0x2c8>
 8007a0c:	a201      	add	r2, pc, #4	; (adr r2, 8007a14 <USBH_HandleControl+0x24>)
 8007a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a12:	bf00      	nop
 8007a14:	08007a41 	.word	0x08007a41
 8007a18:	08007a5b 	.word	0x08007a5b
 8007a1c:	08007ac5 	.word	0x08007ac5
 8007a20:	08007aeb 	.word	0x08007aeb
 8007a24:	08007b23 	.word	0x08007b23
 8007a28:	08007b4d 	.word	0x08007b4d
 8007a2c:	08007b9f 	.word	0x08007b9f
 8007a30:	08007bc1 	.word	0x08007bc1
 8007a34:	08007bfd 	.word	0x08007bfd
 8007a38:	08007c23 	.word	0x08007c23
 8007a3c:	08007c61 	.word	0x08007c61
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f103 0110 	add.w	r1, r3, #16
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	795b      	ldrb	r3, [r3, #5]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f943 	bl	8007cd8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2202      	movs	r2, #2
 8007a56:	761a      	strb	r2, [r3, #24]
      break;
 8007a58:	e139      	b.n	8007cce <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	795b      	ldrb	r3, [r3, #5]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 fcb7 	bl	80083d4 <USBH_LL_GetURBState>
 8007a66:	4603      	mov	r3, r0
 8007a68:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007a6a:	7bbb      	ldrb	r3, [r7, #14]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d11e      	bne.n	8007aae <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	7c1b      	ldrb	r3, [r3, #16]
 8007a74:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a78:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	8adb      	ldrh	r3, [r3, #22]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00a      	beq.n	8007a98 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007a82:	7b7b      	ldrb	r3, [r7, #13]
 8007a84:	2b80      	cmp	r3, #128	; 0x80
 8007a86:	d103      	bne.n	8007a90 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2203      	movs	r2, #3
 8007a8c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a8e:	e115      	b.n	8007cbc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2205      	movs	r2, #5
 8007a94:	761a      	strb	r2, [r3, #24]
      break;
 8007a96:	e111      	b.n	8007cbc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007a98:	7b7b      	ldrb	r3, [r7, #13]
 8007a9a:	2b80      	cmp	r3, #128	; 0x80
 8007a9c:	d103      	bne.n	8007aa6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2209      	movs	r2, #9
 8007aa2:	761a      	strb	r2, [r3, #24]
      break;
 8007aa4:	e10a      	b.n	8007cbc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2207      	movs	r2, #7
 8007aaa:	761a      	strb	r2, [r3, #24]
      break;
 8007aac:	e106      	b.n	8007cbc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007aae:	7bbb      	ldrb	r3, [r7, #14]
 8007ab0:	2b04      	cmp	r3, #4
 8007ab2:	d003      	beq.n	8007abc <USBH_HandleControl+0xcc>
 8007ab4:	7bbb      	ldrb	r3, [r7, #14]
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	f040 8100 	bne.w	8007cbc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	220b      	movs	r2, #11
 8007ac0:	761a      	strb	r2, [r3, #24]
      break;
 8007ac2:	e0fb      	b.n	8007cbc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007aca:	b29a      	uxth	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6899      	ldr	r1, [r3, #8]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	899a      	ldrh	r2, [r3, #12]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	791b      	ldrb	r3, [r3, #4]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f93a 	bl	8007d56 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2204      	movs	r2, #4
 8007ae6:	761a      	strb	r2, [r3, #24]
      break;
 8007ae8:	e0f1      	b.n	8007cce <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	791b      	ldrb	r3, [r3, #4]
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 fc6f 	bl	80083d4 <USBH_LL_GetURBState>
 8007af6:	4603      	mov	r3, r0
 8007af8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007afa:	7bbb      	ldrb	r3, [r7, #14]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d102      	bne.n	8007b06 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2209      	movs	r2, #9
 8007b04:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007b06:	7bbb      	ldrb	r3, [r7, #14]
 8007b08:	2b05      	cmp	r3, #5
 8007b0a:	d102      	bne.n	8007b12 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007b10:	e0d6      	b.n	8007cc0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007b12:	7bbb      	ldrb	r3, [r7, #14]
 8007b14:	2b04      	cmp	r3, #4
 8007b16:	f040 80d3 	bne.w	8007cc0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	220b      	movs	r2, #11
 8007b1e:	761a      	strb	r2, [r3, #24]
      break;
 8007b20:	e0ce      	b.n	8007cc0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6899      	ldr	r1, [r3, #8]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	899a      	ldrh	r2, [r3, #12]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	795b      	ldrb	r3, [r3, #5]
 8007b2e:	2001      	movs	r0, #1
 8007b30:	9000      	str	r0, [sp, #0]
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f8ea 	bl	8007d0c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2206      	movs	r2, #6
 8007b48:	761a      	strb	r2, [r3, #24]
      break;
 8007b4a:	e0c0      	b.n	8007cce <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	795b      	ldrb	r3, [r3, #5]
 8007b50:	4619      	mov	r1, r3
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fc3e 	bl	80083d4 <USBH_LL_GetURBState>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007b5c:	7bbb      	ldrb	r3, [r7, #14]
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d103      	bne.n	8007b6a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2207      	movs	r2, #7
 8007b66:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007b68:	e0ac      	b.n	8007cc4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007b6a:	7bbb      	ldrb	r3, [r7, #14]
 8007b6c:	2b05      	cmp	r3, #5
 8007b6e:	d105      	bne.n	8007b7c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	220c      	movs	r2, #12
 8007b74:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007b76:	2303      	movs	r3, #3
 8007b78:	73fb      	strb	r3, [r7, #15]
      break;
 8007b7a:	e0a3      	b.n	8007cc4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007b7c:	7bbb      	ldrb	r3, [r7, #14]
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d103      	bne.n	8007b8a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2205      	movs	r2, #5
 8007b86:	761a      	strb	r2, [r3, #24]
      break;
 8007b88:	e09c      	b.n	8007cc4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007b8a:	7bbb      	ldrb	r3, [r7, #14]
 8007b8c:	2b04      	cmp	r3, #4
 8007b8e:	f040 8099 	bne.w	8007cc4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	220b      	movs	r2, #11
 8007b96:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007b98:	2302      	movs	r3, #2
 8007b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b9c:	e092      	b.n	8007cc4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	791b      	ldrb	r3, [r3, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f8d5 	bl	8007d56 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2208      	movs	r2, #8
 8007bbc:	761a      	strb	r2, [r3, #24]

      break;
 8007bbe:	e086      	b.n	8007cce <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	791b      	ldrb	r3, [r3, #4]
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fc04 	bl	80083d4 <USBH_LL_GetURBState>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007bd0:	7bbb      	ldrb	r3, [r7, #14]
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d105      	bne.n	8007be2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	220d      	movs	r2, #13
 8007bda:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007be0:	e072      	b.n	8007cc8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007be2:	7bbb      	ldrb	r3, [r7, #14]
 8007be4:	2b04      	cmp	r3, #4
 8007be6:	d103      	bne.n	8007bf0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	220b      	movs	r2, #11
 8007bec:	761a      	strb	r2, [r3, #24]
      break;
 8007bee:	e06b      	b.n	8007cc8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007bf0:	7bbb      	ldrb	r3, [r7, #14]
 8007bf2:	2b05      	cmp	r3, #5
 8007bf4:	d168      	bne.n	8007cc8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	73fb      	strb	r3, [r7, #15]
      break;
 8007bfa:	e065      	b.n	8007cc8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	795b      	ldrb	r3, [r3, #5]
 8007c00:	2201      	movs	r2, #1
 8007c02:	9200      	str	r2, [sp, #0]
 8007c04:	2200      	movs	r2, #0
 8007c06:	2100      	movs	r1, #0
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f87f 	bl	8007d0c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c14:	b29a      	uxth	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	220a      	movs	r2, #10
 8007c1e:	761a      	strb	r2, [r3, #24]
      break;
 8007c20:	e055      	b.n	8007cce <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	795b      	ldrb	r3, [r3, #5]
 8007c26:	4619      	mov	r1, r3
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fbd3 	bl	80083d4 <USBH_LL_GetURBState>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007c32:	7bbb      	ldrb	r3, [r7, #14]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d105      	bne.n	8007c44 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	220d      	movs	r2, #13
 8007c40:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007c42:	e043      	b.n	8007ccc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007c44:	7bbb      	ldrb	r3, [r7, #14]
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d103      	bne.n	8007c52 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2209      	movs	r2, #9
 8007c4e:	761a      	strb	r2, [r3, #24]
      break;
 8007c50:	e03c      	b.n	8007ccc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007c52:	7bbb      	ldrb	r3, [r7, #14]
 8007c54:	2b04      	cmp	r3, #4
 8007c56:	d139      	bne.n	8007ccc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	220b      	movs	r2, #11
 8007c5c:	761a      	strb	r2, [r3, #24]
      break;
 8007c5e:	e035      	b.n	8007ccc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	7e5b      	ldrb	r3, [r3, #25]
 8007c64:	3301      	adds	r3, #1
 8007c66:	b2da      	uxtb	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	765a      	strb	r2, [r3, #25]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	7e5b      	ldrb	r3, [r3, #25]
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	d806      	bhi.n	8007c82 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007c80:	e025      	b.n	8007cce <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c88:	2106      	movs	r1, #6
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	795b      	ldrb	r3, [r3, #5]
 8007c98:	4619      	mov	r1, r3
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f90c 	bl	8007eb8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	791b      	ldrb	r3, [r3, #4]
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f906 	bl	8007eb8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007cb2:	2302      	movs	r3, #2
 8007cb4:	73fb      	strb	r3, [r7, #15]
      break;
 8007cb6:	e00a      	b.n	8007cce <USBH_HandleControl+0x2de>

    default:
      break;
 8007cb8:	bf00      	nop
 8007cba:	e008      	b.n	8007cce <USBH_HandleControl+0x2de>
      break;
 8007cbc:	bf00      	nop
 8007cbe:	e006      	b.n	8007cce <USBH_HandleControl+0x2de>
      break;
 8007cc0:	bf00      	nop
 8007cc2:	e004      	b.n	8007cce <USBH_HandleControl+0x2de>
      break;
 8007cc4:	bf00      	nop
 8007cc6:	e002      	b.n	8007cce <USBH_HandleControl+0x2de>
      break;
 8007cc8:	bf00      	nop
 8007cca:	e000      	b.n	8007cce <USBH_HandleControl+0x2de>
      break;
 8007ccc:	bf00      	nop
  }

  return status;
 8007cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b088      	sub	sp, #32
 8007cdc:	af04      	add	r7, sp, #16
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007ce6:	79f9      	ldrb	r1, [r7, #7]
 8007ce8:	2300      	movs	r3, #0
 8007cea:	9303      	str	r3, [sp, #12]
 8007cec:	2308      	movs	r3, #8
 8007cee:	9302      	str	r3, [sp, #8]
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	9301      	str	r3, [sp, #4]
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f000 fb38 	bl	8008372 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b088      	sub	sp, #32
 8007d10:	af04      	add	r7, sp, #16
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	4611      	mov	r1, r2
 8007d18:	461a      	mov	r2, r3
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	80fb      	strh	r3, [r7, #6]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d001      	beq.n	8007d30 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007d30:	7979      	ldrb	r1, [r7, #5]
 8007d32:	7e3b      	ldrb	r3, [r7, #24]
 8007d34:	9303      	str	r3, [sp, #12]
 8007d36:	88fb      	ldrh	r3, [r7, #6]
 8007d38:	9302      	str	r3, [sp, #8]
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	9301      	str	r3, [sp, #4]
 8007d3e:	2301      	movs	r3, #1
 8007d40:	9300      	str	r3, [sp, #0]
 8007d42:	2300      	movs	r3, #0
 8007d44:	2200      	movs	r2, #0
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f000 fb13 	bl	8008372 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b088      	sub	sp, #32
 8007d5a:	af04      	add	r7, sp, #16
 8007d5c:	60f8      	str	r0, [r7, #12]
 8007d5e:	60b9      	str	r1, [r7, #8]
 8007d60:	4611      	mov	r1, r2
 8007d62:	461a      	mov	r2, r3
 8007d64:	460b      	mov	r3, r1
 8007d66:	80fb      	strh	r3, [r7, #6]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007d6c:	7979      	ldrb	r1, [r7, #5]
 8007d6e:	2300      	movs	r3, #0
 8007d70:	9303      	str	r3, [sp, #12]
 8007d72:	88fb      	ldrh	r3, [r7, #6]
 8007d74:	9302      	str	r3, [sp, #8]
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	9301      	str	r3, [sp, #4]
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	2300      	movs	r3, #0
 8007d80:	2201      	movs	r2, #1
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f000 faf5 	bl	8008372 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007d88:	2300      	movs	r3, #0

}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b088      	sub	sp, #32
 8007d96:	af04      	add	r7, sp, #16
 8007d98:	60f8      	str	r0, [r7, #12]
 8007d9a:	60b9      	str	r1, [r7, #8]
 8007d9c:	4611      	mov	r1, r2
 8007d9e:	461a      	mov	r2, r3
 8007da0:	460b      	mov	r3, r1
 8007da2:	80fb      	strh	r3, [r7, #6]
 8007da4:	4613      	mov	r3, r2
 8007da6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d001      	beq.n	8007db6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007db2:	2300      	movs	r3, #0
 8007db4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007db6:	7979      	ldrb	r1, [r7, #5]
 8007db8:	7e3b      	ldrb	r3, [r7, #24]
 8007dba:	9303      	str	r3, [sp, #12]
 8007dbc:	88fb      	ldrh	r3, [r7, #6]
 8007dbe:	9302      	str	r3, [sp, #8]
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	9301      	str	r3, [sp, #4]
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	2302      	movs	r3, #2
 8007dca:	2200      	movs	r2, #0
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f000 fad0 	bl	8008372 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b088      	sub	sp, #32
 8007de0:	af04      	add	r7, sp, #16
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	4611      	mov	r1, r2
 8007de8:	461a      	mov	r2, r3
 8007dea:	460b      	mov	r3, r1
 8007dec:	80fb      	strh	r3, [r7, #6]
 8007dee:	4613      	mov	r3, r2
 8007df0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007df2:	7979      	ldrb	r1, [r7, #5]
 8007df4:	2300      	movs	r3, #0
 8007df6:	9303      	str	r3, [sp, #12]
 8007df8:	88fb      	ldrh	r3, [r7, #6]
 8007dfa:	9302      	str	r3, [sp, #8]
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	9301      	str	r3, [sp, #4]
 8007e00:	2301      	movs	r3, #1
 8007e02:	9300      	str	r3, [sp, #0]
 8007e04:	2302      	movs	r3, #2
 8007e06:	2201      	movs	r2, #1
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f000 fab2 	bl	8008372 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3710      	adds	r7, #16
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b086      	sub	sp, #24
 8007e1c:	af04      	add	r7, sp, #16
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	4608      	mov	r0, r1
 8007e22:	4611      	mov	r1, r2
 8007e24:	461a      	mov	r2, r3
 8007e26:	4603      	mov	r3, r0
 8007e28:	70fb      	strb	r3, [r7, #3]
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	70bb      	strb	r3, [r7, #2]
 8007e2e:	4613      	mov	r3, r2
 8007e30:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007e32:	7878      	ldrb	r0, [r7, #1]
 8007e34:	78ba      	ldrb	r2, [r7, #2]
 8007e36:	78f9      	ldrb	r1, [r7, #3]
 8007e38:	8b3b      	ldrh	r3, [r7, #24]
 8007e3a:	9302      	str	r3, [sp, #8]
 8007e3c:	7d3b      	ldrb	r3, [r7, #20]
 8007e3e:	9301      	str	r3, [sp, #4]
 8007e40:	7c3b      	ldrb	r3, [r7, #16]
 8007e42:	9300      	str	r3, [sp, #0]
 8007e44:	4603      	mov	r3, r0
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fa45 	bl	80082d6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3708      	adds	r7, #8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b082      	sub	sp, #8
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
 8007e5e:	460b      	mov	r3, r1
 8007e60:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007e62:	78fb      	ldrb	r3, [r7, #3]
 8007e64:	4619      	mov	r1, r3
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fa64 	bl	8008334 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b084      	sub	sp, #16
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	460b      	mov	r3, r1
 8007e80:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f836 	bl	8007ef4 <USBH_GetFreePipe>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007e8c:	89fb      	ldrh	r3, [r7, #14]
 8007e8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d00a      	beq.n	8007eac <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007e96:	78fa      	ldrb	r2, [r7, #3]
 8007e98:	89fb      	ldrh	r3, [r7, #14]
 8007e9a:	f003 030f 	and.w	r3, r3, #15
 8007e9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ea2:	6879      	ldr	r1, [r7, #4]
 8007ea4:	33e0      	adds	r3, #224	; 0xe0
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	440b      	add	r3, r1
 8007eaa:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007eac:	89fb      	ldrh	r3, [r7, #14]
 8007eae:	b2db      	uxtb	r3, r3
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007ec4:	78fb      	ldrb	r3, [r7, #3]
 8007ec6:	2b0f      	cmp	r3, #15
 8007ec8:	d80d      	bhi.n	8007ee6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007eca:	78fb      	ldrb	r3, [r7, #3]
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	33e0      	adds	r3, #224	; 0xe0
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	4413      	add	r3, r2
 8007ed4:	685a      	ldr	r2, [r3, #4]
 8007ed6:	78fb      	ldrb	r3, [r7, #3]
 8007ed8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007edc:	6879      	ldr	r1, [r7, #4]
 8007ede:	33e0      	adds	r3, #224	; 0xe0
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	440b      	add	r3, r1
 8007ee4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007efc:	2300      	movs	r3, #0
 8007efe:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007f00:	2300      	movs	r3, #0
 8007f02:	73fb      	strb	r3, [r7, #15]
 8007f04:	e00f      	b.n	8007f26 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007f06:	7bfb      	ldrb	r3, [r7, #15]
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	33e0      	adds	r3, #224	; 0xe0
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	4413      	add	r3, r2
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d102      	bne.n	8007f20 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007f1a:	7bfb      	ldrb	r3, [r7, #15]
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	e007      	b.n	8007f30 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007f20:	7bfb      	ldrb	r3, [r7, #15]
 8007f22:	3301      	adds	r3, #1
 8007f24:	73fb      	strb	r3, [r7, #15]
 8007f26:	7bfb      	ldrb	r3, [r7, #15]
 8007f28:	2b0f      	cmp	r3, #15
 8007f2a:	d9ec      	bls.n	8007f06 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007f2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3714      	adds	r7, #20
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007f40:	2201      	movs	r2, #1
 8007f42:	490e      	ldr	r1, [pc, #56]	; (8007f7c <MX_USB_HOST_Init+0x40>)
 8007f44:	480e      	ldr	r0, [pc, #56]	; (8007f80 <MX_USB_HOST_Init+0x44>)
 8007f46:	f7fe fba7 	bl	8006698 <USBH_Init>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d001      	beq.n	8007f54 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007f50:	f7f8 fc84 	bl	800085c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007f54:	490b      	ldr	r1, [pc, #44]	; (8007f84 <MX_USB_HOST_Init+0x48>)
 8007f56:	480a      	ldr	r0, [pc, #40]	; (8007f80 <MX_USB_HOST_Init+0x44>)
 8007f58:	f7fe fc2c 	bl	80067b4 <USBH_RegisterClass>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007f62:	f7f8 fc7b 	bl	800085c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007f66:	4806      	ldr	r0, [pc, #24]	; (8007f80 <MX_USB_HOST_Init+0x44>)
 8007f68:	f7fe fcb0 	bl	80068cc <USBH_Start>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d001      	beq.n	8007f76 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007f72:	f7f8 fc73 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007f76:	bf00      	nop
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	08007f9d 	.word	0x08007f9d
 8007f80:	200003d0 	.word	0x200003d0
 8007f84:	2000000c 	.word	0x2000000c

08007f88 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007f8c:	4802      	ldr	r0, [pc, #8]	; (8007f98 <MX_USB_HOST_Process+0x10>)
 8007f8e:	f7fe fcad 	bl	80068ec <USBH_Process>
}
 8007f92:	bf00      	nop
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	200003d0 	.word	0x200003d0

08007f9c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007fa8:	78fb      	ldrb	r3, [r7, #3]
 8007faa:	3b01      	subs	r3, #1
 8007fac:	2b04      	cmp	r3, #4
 8007fae:	d819      	bhi.n	8007fe4 <USBH_UserProcess+0x48>
 8007fb0:	a201      	add	r2, pc, #4	; (adr r2, 8007fb8 <USBH_UserProcess+0x1c>)
 8007fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb6:	bf00      	nop
 8007fb8:	08007fe5 	.word	0x08007fe5
 8007fbc:	08007fd5 	.word	0x08007fd5
 8007fc0:	08007fe5 	.word	0x08007fe5
 8007fc4:	08007fdd 	.word	0x08007fdd
 8007fc8:	08007fcd 	.word	0x08007fcd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007fcc:	4b09      	ldr	r3, [pc, #36]	; (8007ff4 <USBH_UserProcess+0x58>)
 8007fce:	2203      	movs	r2, #3
 8007fd0:	701a      	strb	r2, [r3, #0]
  break;
 8007fd2:	e008      	b.n	8007fe6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007fd4:	4b07      	ldr	r3, [pc, #28]	; (8007ff4 <USBH_UserProcess+0x58>)
 8007fd6:	2202      	movs	r2, #2
 8007fd8:	701a      	strb	r2, [r3, #0]
  break;
 8007fda:	e004      	b.n	8007fe6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007fdc:	4b05      	ldr	r3, [pc, #20]	; (8007ff4 <USBH_UserProcess+0x58>)
 8007fde:	2201      	movs	r2, #1
 8007fe0:	701a      	strb	r2, [r3, #0]
  break;
 8007fe2:	e000      	b.n	8007fe6 <USBH_UserProcess+0x4a>

  default:
  break;
 8007fe4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007fe6:	bf00      	nop
 8007fe8:	370c      	adds	r7, #12
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	200007a8 	.word	0x200007a8

08007ff8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b08a      	sub	sp, #40	; 0x28
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008000:	f107 0314 	add.w	r3, r7, #20
 8008004:	2200      	movs	r2, #0
 8008006:	601a      	str	r2, [r3, #0]
 8008008:	605a      	str	r2, [r3, #4]
 800800a:	609a      	str	r2, [r3, #8]
 800800c:	60da      	str	r2, [r3, #12]
 800800e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008018:	d13a      	bne.n	8008090 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800801a:	2300      	movs	r3, #0
 800801c:	613b      	str	r3, [r7, #16]
 800801e:	4b1e      	ldr	r3, [pc, #120]	; (8008098 <HAL_HCD_MspInit+0xa0>)
 8008020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008022:	4a1d      	ldr	r2, [pc, #116]	; (8008098 <HAL_HCD_MspInit+0xa0>)
 8008024:	f043 0301 	orr.w	r3, r3, #1
 8008028:	6313      	str	r3, [r2, #48]	; 0x30
 800802a:	4b1b      	ldr	r3, [pc, #108]	; (8008098 <HAL_HCD_MspInit+0xa0>)
 800802c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802e:	f003 0301 	and.w	r3, r3, #1
 8008032:	613b      	str	r3, [r7, #16]
 8008034:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008036:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800803a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800803c:	2302      	movs	r3, #2
 800803e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008040:	2300      	movs	r3, #0
 8008042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008044:	2303      	movs	r3, #3
 8008046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008048:	230a      	movs	r3, #10
 800804a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800804c:	f107 0314 	add.w	r3, r7, #20
 8008050:	4619      	mov	r1, r3
 8008052:	4812      	ldr	r0, [pc, #72]	; (800809c <HAL_HCD_MspInit+0xa4>)
 8008054:	f7f9 fc6a 	bl	800192c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008058:	4b0f      	ldr	r3, [pc, #60]	; (8008098 <HAL_HCD_MspInit+0xa0>)
 800805a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800805c:	4a0e      	ldr	r2, [pc, #56]	; (8008098 <HAL_HCD_MspInit+0xa0>)
 800805e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008062:	6353      	str	r3, [r2, #52]	; 0x34
 8008064:	2300      	movs	r3, #0
 8008066:	60fb      	str	r3, [r7, #12]
 8008068:	4b0b      	ldr	r3, [pc, #44]	; (8008098 <HAL_HCD_MspInit+0xa0>)
 800806a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800806c:	4a0a      	ldr	r2, [pc, #40]	; (8008098 <HAL_HCD_MspInit+0xa0>)
 800806e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008072:	6453      	str	r3, [r2, #68]	; 0x44
 8008074:	4b08      	ldr	r3, [pc, #32]	; (8008098 <HAL_HCD_MspInit+0xa0>)
 8008076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800807c:	60fb      	str	r3, [r7, #12]
 800807e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008080:	2200      	movs	r2, #0
 8008082:	2100      	movs	r1, #0
 8008084:	2043      	movs	r0, #67	; 0x43
 8008086:	f7f9 f818 	bl	80010ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800808a:	2043      	movs	r0, #67	; 0x43
 800808c:	f7f9 f831 	bl	80010f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008090:	bf00      	nop
 8008092:	3728      	adds	r7, #40	; 0x28
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	40023800 	.word	0x40023800
 800809c:	40020000 	.word	0x40020000

080080a0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fe fffb 	bl	80070aa <USBH_LL_IncTimer>
}
 80080b4:	bf00      	nop
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7ff f833 	bl	8007136 <USBH_LL_Connect>
}
 80080d0:	bf00      	nop
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7ff f83c 	bl	8007164 <USBH_LL_Disconnect>
}
 80080ec:	bf00      	nop
 80080ee:	3708      	adds	r7, #8
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	460b      	mov	r3, r1
 80080fe:	70fb      	strb	r3, [r7, #3]
 8008100:	4613      	mov	r3, r2
 8008102:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008104:	bf00      	nop
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800811e:	4618      	mov	r0, r3
 8008120:	f7fe ffed 	bl	80070fe <USBH_LL_PortEnabled>
}
 8008124:	bf00      	nop
 8008126:	3708      	adds	r7, #8
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800813a:	4618      	mov	r0, r3
 800813c:	f7fe ffed 	bl	800711a <USBH_LL_PortDisabled>
}
 8008140:	bf00      	nop
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008156:	2b01      	cmp	r3, #1
 8008158:	d12a      	bne.n	80081b0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800815a:	4a18      	ldr	r2, [pc, #96]	; (80081bc <USBH_LL_Init+0x74>)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a15      	ldr	r2, [pc, #84]	; (80081bc <USBH_LL_Init+0x74>)
 8008166:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800816a:	4b14      	ldr	r3, [pc, #80]	; (80081bc <USBH_LL_Init+0x74>)
 800816c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008170:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008172:	4b12      	ldr	r3, [pc, #72]	; (80081bc <USBH_LL_Init+0x74>)
 8008174:	2208      	movs	r2, #8
 8008176:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008178:	4b10      	ldr	r3, [pc, #64]	; (80081bc <USBH_LL_Init+0x74>)
 800817a:	2201      	movs	r2, #1
 800817c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800817e:	4b0f      	ldr	r3, [pc, #60]	; (80081bc <USBH_LL_Init+0x74>)
 8008180:	2200      	movs	r2, #0
 8008182:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008184:	4b0d      	ldr	r3, [pc, #52]	; (80081bc <USBH_LL_Init+0x74>)
 8008186:	2202      	movs	r2, #2
 8008188:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800818a:	4b0c      	ldr	r3, [pc, #48]	; (80081bc <USBH_LL_Init+0x74>)
 800818c:	2200      	movs	r2, #0
 800818e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008190:	480a      	ldr	r0, [pc, #40]	; (80081bc <USBH_LL_Init+0x74>)
 8008192:	f7f9 fd68 	bl	8001c66 <HAL_HCD_Init>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d001      	beq.n	80081a0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800819c:	f7f8 fb5e 	bl	800085c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80081a0:	4806      	ldr	r0, [pc, #24]	; (80081bc <USBH_LL_Init+0x74>)
 80081a2:	f7fa f94c 	bl	800243e <HAL_HCD_GetCurrentFrame>
 80081a6:	4603      	mov	r3, r0
 80081a8:	4619      	mov	r1, r3
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f7fe ff6e 	bl	800708c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	200007ac 	.word	0x200007ac

080081c0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081c8:	2300      	movs	r3, #0
 80081ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081cc:	2300      	movs	r3, #0
 80081ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fa f8bb 	bl	8002352 <HAL_HCD_Start>
 80081dc:	4603      	mov	r3, r0
 80081de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 f952 	bl	800848c <USBH_Get_USB_Status>
 80081e8:	4603      	mov	r3, r0
 80081ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b084      	sub	sp, #16
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081fe:	2300      	movs	r3, #0
 8008200:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008202:	2300      	movs	r3, #0
 8008204:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800820c:	4618      	mov	r0, r3
 800820e:	f7fa f8c3 	bl	8002398 <HAL_HCD_Stop>
 8008212:	4603      	mov	r3, r0
 8008214:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008216:	7bfb      	ldrb	r3, [r7, #15]
 8008218:	4618      	mov	r0, r3
 800821a:	f000 f937 	bl	800848c <USBH_Get_USB_Status>
 800821e:	4603      	mov	r3, r0
 8008220:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008222:	7bbb      	ldrb	r3, [r7, #14]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008234:	2301      	movs	r3, #1
 8008236:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800823e:	4618      	mov	r0, r3
 8008240:	f7fa f90b 	bl	800245a <HAL_HCD_GetCurrentSpeed>
 8008244:	4603      	mov	r3, r0
 8008246:	2b02      	cmp	r3, #2
 8008248:	d00c      	beq.n	8008264 <USBH_LL_GetSpeed+0x38>
 800824a:	2b02      	cmp	r3, #2
 800824c:	d80d      	bhi.n	800826a <USBH_LL_GetSpeed+0x3e>
 800824e:	2b00      	cmp	r3, #0
 8008250:	d002      	beq.n	8008258 <USBH_LL_GetSpeed+0x2c>
 8008252:	2b01      	cmp	r3, #1
 8008254:	d003      	beq.n	800825e <USBH_LL_GetSpeed+0x32>
 8008256:	e008      	b.n	800826a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008258:	2300      	movs	r3, #0
 800825a:	73fb      	strb	r3, [r7, #15]
    break;
 800825c:	e008      	b.n	8008270 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800825e:	2301      	movs	r3, #1
 8008260:	73fb      	strb	r3, [r7, #15]
    break;
 8008262:	e005      	b.n	8008270 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008264:	2302      	movs	r3, #2
 8008266:	73fb      	strb	r3, [r7, #15]
    break;
 8008268:	e002      	b.n	8008270 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800826a:	2301      	movs	r3, #1
 800826c:	73fb      	strb	r3, [r7, #15]
    break;
 800826e:	bf00      	nop
  }
  return  speed;
 8008270:	7bfb      	ldrb	r3, [r7, #15]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b084      	sub	sp, #16
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008282:	2300      	movs	r3, #0
 8008284:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008290:	4618      	mov	r0, r3
 8008292:	f7fa f89e 	bl	80023d2 <HAL_HCD_ResetPort>
 8008296:	4603      	mov	r3, r0
 8008298:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800829a:	7bfb      	ldrb	r3, [r7, #15]
 800829c:	4618      	mov	r0, r3
 800829e:	f000 f8f5 	bl	800848c <USBH_Get_USB_Status>
 80082a2:	4603      	mov	r3, r0
 80082a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	460b      	mov	r3, r1
 80082ba:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082c2:	78fa      	ldrb	r2, [r7, #3]
 80082c4:	4611      	mov	r1, r2
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7fa f8a5 	bl	8002416 <HAL_HCD_HC_GetXferCount>
 80082cc:	4603      	mov	r3, r0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3708      	adds	r7, #8
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80082d6:	b590      	push	{r4, r7, lr}
 80082d8:	b089      	sub	sp, #36	; 0x24
 80082da:	af04      	add	r7, sp, #16
 80082dc:	6078      	str	r0, [r7, #4]
 80082de:	4608      	mov	r0, r1
 80082e0:	4611      	mov	r1, r2
 80082e2:	461a      	mov	r2, r3
 80082e4:	4603      	mov	r3, r0
 80082e6:	70fb      	strb	r3, [r7, #3]
 80082e8:	460b      	mov	r3, r1
 80082ea:	70bb      	strb	r3, [r7, #2]
 80082ec:	4613      	mov	r3, r2
 80082ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082f0:	2300      	movs	r3, #0
 80082f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80082fe:	787c      	ldrb	r4, [r7, #1]
 8008300:	78ba      	ldrb	r2, [r7, #2]
 8008302:	78f9      	ldrb	r1, [r7, #3]
 8008304:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008306:	9302      	str	r3, [sp, #8]
 8008308:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800830c:	9301      	str	r3, [sp, #4]
 800830e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	4623      	mov	r3, r4
 8008316:	f7f9 fd08 	bl	8001d2a <HAL_HCD_HC_Init>
 800831a:	4603      	mov	r3, r0
 800831c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800831e:	7bfb      	ldrb	r3, [r7, #15]
 8008320:	4618      	mov	r0, r3
 8008322:	f000 f8b3 	bl	800848c <USBH_Get_USB_Status>
 8008326:	4603      	mov	r3, r0
 8008328:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800832a:	7bbb      	ldrb	r3, [r7, #14]
}
 800832c:	4618      	mov	r0, r3
 800832e:	3714      	adds	r7, #20
 8008330:	46bd      	mov	sp, r7
 8008332:	bd90      	pop	{r4, r7, pc}

08008334 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	460b      	mov	r3, r1
 800833e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008340:	2300      	movs	r3, #0
 8008342:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008344:	2300      	movs	r3, #0
 8008346:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800834e:	78fa      	ldrb	r2, [r7, #3]
 8008350:	4611      	mov	r1, r2
 8008352:	4618      	mov	r0, r3
 8008354:	f7f9 fd78 	bl	8001e48 <HAL_HCD_HC_Halt>
 8008358:	4603      	mov	r3, r0
 800835a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800835c:	7bfb      	ldrb	r3, [r7, #15]
 800835e:	4618      	mov	r0, r3
 8008360:	f000 f894 	bl	800848c <USBH_Get_USB_Status>
 8008364:	4603      	mov	r3, r0
 8008366:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008368:	7bbb      	ldrb	r3, [r7, #14]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008372:	b590      	push	{r4, r7, lr}
 8008374:	b089      	sub	sp, #36	; 0x24
 8008376:	af04      	add	r7, sp, #16
 8008378:	6078      	str	r0, [r7, #4]
 800837a:	4608      	mov	r0, r1
 800837c:	4611      	mov	r1, r2
 800837e:	461a      	mov	r2, r3
 8008380:	4603      	mov	r3, r0
 8008382:	70fb      	strb	r3, [r7, #3]
 8008384:	460b      	mov	r3, r1
 8008386:	70bb      	strb	r3, [r7, #2]
 8008388:	4613      	mov	r3, r2
 800838a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800838c:	2300      	movs	r3, #0
 800838e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008390:	2300      	movs	r3, #0
 8008392:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800839a:	787c      	ldrb	r4, [r7, #1]
 800839c:	78ba      	ldrb	r2, [r7, #2]
 800839e:	78f9      	ldrb	r1, [r7, #3]
 80083a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083a4:	9303      	str	r3, [sp, #12]
 80083a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80083a8:	9302      	str	r3, [sp, #8]
 80083aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ac:	9301      	str	r3, [sp, #4]
 80083ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80083b2:	9300      	str	r3, [sp, #0]
 80083b4:	4623      	mov	r3, r4
 80083b6:	f7f9 fd6b 	bl	8001e90 <HAL_HCD_HC_SubmitRequest>
 80083ba:	4603      	mov	r3, r0
 80083bc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80083be:	7bfb      	ldrb	r3, [r7, #15]
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 f863 	bl	800848c <USBH_Get_USB_Status>
 80083c6:	4603      	mov	r3, r0
 80083c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3714      	adds	r7, #20
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd90      	pop	{r4, r7, pc}

080083d4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	460b      	mov	r3, r1
 80083de:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80083e6:	78fa      	ldrb	r2, [r7, #3]
 80083e8:	4611      	mov	r1, r2
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7f9 ffff 	bl	80023ee <HAL_HCD_HC_GetURBState>
 80083f0:	4603      	mov	r3, r0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3708      	adds	r7, #8
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b082      	sub	sp, #8
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
 8008402:	460b      	mov	r3, r1
 8008404:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 8008406:	20c8      	movs	r0, #200	; 0xc8
 8008408:	f7f8 fd58 	bl	8000ebc <HAL_Delay>
  return USBH_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008416:	b480      	push	{r7}
 8008418:	b085      	sub	sp, #20
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	460b      	mov	r3, r1
 8008420:	70fb      	strb	r3, [r7, #3]
 8008422:	4613      	mov	r3, r2
 8008424:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800842c:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800842e:	78fb      	ldrb	r3, [r7, #3]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	212c      	movs	r1, #44	; 0x2c
 8008434:	fb01 f303 	mul.w	r3, r1, r3
 8008438:	4413      	add	r3, r2
 800843a:	333b      	adds	r3, #59	; 0x3b
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d009      	beq.n	8008456 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008442:	78fb      	ldrb	r3, [r7, #3]
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	212c      	movs	r1, #44	; 0x2c
 8008448:	fb01 f303 	mul.w	r3, r1, r3
 800844c:	4413      	add	r3, r2
 800844e:	3354      	adds	r3, #84	; 0x54
 8008450:	78ba      	ldrb	r2, [r7, #2]
 8008452:	701a      	strb	r2, [r3, #0]
 8008454:	e008      	b.n	8008468 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008456:	78fb      	ldrb	r3, [r7, #3]
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	212c      	movs	r1, #44	; 0x2c
 800845c:	fb01 f303 	mul.w	r3, r1, r3
 8008460:	4413      	add	r3, r2
 8008462:	3355      	adds	r3, #85	; 0x55
 8008464:	78ba      	ldrb	r2, [r7, #2]
 8008466:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3714      	adds	r7, #20
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr

08008476 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b082      	sub	sp, #8
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f7f8 fd1c 	bl	8000ebc <HAL_Delay>
}
 8008484:	bf00      	nop
 8008486:	3708      	adds	r7, #8
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	4603      	mov	r3, r0
 8008494:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008496:	2300      	movs	r3, #0
 8008498:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800849a:	79fb      	ldrb	r3, [r7, #7]
 800849c:	2b03      	cmp	r3, #3
 800849e:	d817      	bhi.n	80084d0 <USBH_Get_USB_Status+0x44>
 80084a0:	a201      	add	r2, pc, #4	; (adr r2, 80084a8 <USBH_Get_USB_Status+0x1c>)
 80084a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a6:	bf00      	nop
 80084a8:	080084b9 	.word	0x080084b9
 80084ac:	080084bf 	.word	0x080084bf
 80084b0:	080084c5 	.word	0x080084c5
 80084b4:	080084cb 	.word	0x080084cb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80084b8:	2300      	movs	r3, #0
 80084ba:	73fb      	strb	r3, [r7, #15]
    break;
 80084bc:	e00b      	b.n	80084d6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80084be:	2302      	movs	r3, #2
 80084c0:	73fb      	strb	r3, [r7, #15]
    break;
 80084c2:	e008      	b.n	80084d6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80084c4:	2301      	movs	r3, #1
 80084c6:	73fb      	strb	r3, [r7, #15]
    break;
 80084c8:	e005      	b.n	80084d6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80084ca:	2302      	movs	r3, #2
 80084cc:	73fb      	strb	r3, [r7, #15]
    break;
 80084ce:	e002      	b.n	80084d6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80084d0:	2302      	movs	r3, #2
 80084d2:	73fb      	strb	r3, [r7, #15]
    break;
 80084d4:	bf00      	nop
  }
  return usb_status;
 80084d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3714      	adds	r7, #20
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <__assert_func>:
 80084e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084e6:	4614      	mov	r4, r2
 80084e8:	461a      	mov	r2, r3
 80084ea:	4b09      	ldr	r3, [pc, #36]	; (8008510 <__assert_func+0x2c>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4605      	mov	r5, r0
 80084f0:	68d8      	ldr	r0, [r3, #12]
 80084f2:	b14c      	cbz	r4, 8008508 <__assert_func+0x24>
 80084f4:	4b07      	ldr	r3, [pc, #28]	; (8008514 <__assert_func+0x30>)
 80084f6:	9100      	str	r1, [sp, #0]
 80084f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084fc:	4906      	ldr	r1, [pc, #24]	; (8008518 <__assert_func+0x34>)
 80084fe:	462b      	mov	r3, r5
 8008500:	f000 f814 	bl	800852c <fiprintf>
 8008504:	f000 fcfe 	bl	8008f04 <abort>
 8008508:	4b04      	ldr	r3, [pc, #16]	; (800851c <__assert_func+0x38>)
 800850a:	461c      	mov	r4, r3
 800850c:	e7f3      	b.n	80084f6 <__assert_func+0x12>
 800850e:	bf00      	nop
 8008510:	2000002c 	.word	0x2000002c
 8008514:	080095e0 	.word	0x080095e0
 8008518:	080095ed 	.word	0x080095ed
 800851c:	0800961b 	.word	0x0800961b

08008520 <__errno>:
 8008520:	4b01      	ldr	r3, [pc, #4]	; (8008528 <__errno+0x8>)
 8008522:	6818      	ldr	r0, [r3, #0]
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	2000002c 	.word	0x2000002c

0800852c <fiprintf>:
 800852c:	b40e      	push	{r1, r2, r3}
 800852e:	b503      	push	{r0, r1, lr}
 8008530:	4601      	mov	r1, r0
 8008532:	ab03      	add	r3, sp, #12
 8008534:	4805      	ldr	r0, [pc, #20]	; (800854c <fiprintf+0x20>)
 8008536:	f853 2b04 	ldr.w	r2, [r3], #4
 800853a:	6800      	ldr	r0, [r0, #0]
 800853c:	9301      	str	r3, [sp, #4]
 800853e:	f000 f94d 	bl	80087dc <_vfiprintf_r>
 8008542:	b002      	add	sp, #8
 8008544:	f85d eb04 	ldr.w	lr, [sp], #4
 8008548:	b003      	add	sp, #12
 800854a:	4770      	bx	lr
 800854c:	2000002c 	.word	0x2000002c

08008550 <__libc_init_array>:
 8008550:	b570      	push	{r4, r5, r6, lr}
 8008552:	4d0d      	ldr	r5, [pc, #52]	; (8008588 <__libc_init_array+0x38>)
 8008554:	4c0d      	ldr	r4, [pc, #52]	; (800858c <__libc_init_array+0x3c>)
 8008556:	1b64      	subs	r4, r4, r5
 8008558:	10a4      	asrs	r4, r4, #2
 800855a:	2600      	movs	r6, #0
 800855c:	42a6      	cmp	r6, r4
 800855e:	d109      	bne.n	8008574 <__libc_init_array+0x24>
 8008560:	4d0b      	ldr	r5, [pc, #44]	; (8008590 <__libc_init_array+0x40>)
 8008562:	4c0c      	ldr	r4, [pc, #48]	; (8008594 <__libc_init_array+0x44>)
 8008564:	f000 fff2 	bl	800954c <_init>
 8008568:	1b64      	subs	r4, r4, r5
 800856a:	10a4      	asrs	r4, r4, #2
 800856c:	2600      	movs	r6, #0
 800856e:	42a6      	cmp	r6, r4
 8008570:	d105      	bne.n	800857e <__libc_init_array+0x2e>
 8008572:	bd70      	pop	{r4, r5, r6, pc}
 8008574:	f855 3b04 	ldr.w	r3, [r5], #4
 8008578:	4798      	blx	r3
 800857a:	3601      	adds	r6, #1
 800857c:	e7ee      	b.n	800855c <__libc_init_array+0xc>
 800857e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008582:	4798      	blx	r3
 8008584:	3601      	adds	r6, #1
 8008586:	e7f2      	b.n	800856e <__libc_init_array+0x1e>
 8008588:	080096bc 	.word	0x080096bc
 800858c:	080096bc 	.word	0x080096bc
 8008590:	080096bc 	.word	0x080096bc
 8008594:	080096c0 	.word	0x080096c0

08008598 <malloc>:
 8008598:	4b02      	ldr	r3, [pc, #8]	; (80085a4 <malloc+0xc>)
 800859a:	4601      	mov	r1, r0
 800859c:	6818      	ldr	r0, [r3, #0]
 800859e:	f000 b87f 	b.w	80086a0 <_malloc_r>
 80085a2:	bf00      	nop
 80085a4:	2000002c 	.word	0x2000002c

080085a8 <free>:
 80085a8:	4b02      	ldr	r3, [pc, #8]	; (80085b4 <free+0xc>)
 80085aa:	4601      	mov	r1, r0
 80085ac:	6818      	ldr	r0, [r3, #0]
 80085ae:	f000 b80b 	b.w	80085c8 <_free_r>
 80085b2:	bf00      	nop
 80085b4:	2000002c 	.word	0x2000002c

080085b8 <memset>:
 80085b8:	4402      	add	r2, r0
 80085ba:	4603      	mov	r3, r0
 80085bc:	4293      	cmp	r3, r2
 80085be:	d100      	bne.n	80085c2 <memset+0xa>
 80085c0:	4770      	bx	lr
 80085c2:	f803 1b01 	strb.w	r1, [r3], #1
 80085c6:	e7f9      	b.n	80085bc <memset+0x4>

080085c8 <_free_r>:
 80085c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085ca:	2900      	cmp	r1, #0
 80085cc:	d044      	beq.n	8008658 <_free_r+0x90>
 80085ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085d2:	9001      	str	r0, [sp, #4]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f1a1 0404 	sub.w	r4, r1, #4
 80085da:	bfb8      	it	lt
 80085dc:	18e4      	addlt	r4, r4, r3
 80085de:	f000 feb9 	bl	8009354 <__malloc_lock>
 80085e2:	4a1e      	ldr	r2, [pc, #120]	; (800865c <_free_r+0x94>)
 80085e4:	9801      	ldr	r0, [sp, #4]
 80085e6:	6813      	ldr	r3, [r2, #0]
 80085e8:	b933      	cbnz	r3, 80085f8 <_free_r+0x30>
 80085ea:	6063      	str	r3, [r4, #4]
 80085ec:	6014      	str	r4, [r2, #0]
 80085ee:	b003      	add	sp, #12
 80085f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085f4:	f000 beb4 	b.w	8009360 <__malloc_unlock>
 80085f8:	42a3      	cmp	r3, r4
 80085fa:	d908      	bls.n	800860e <_free_r+0x46>
 80085fc:	6825      	ldr	r5, [r4, #0]
 80085fe:	1961      	adds	r1, r4, r5
 8008600:	428b      	cmp	r3, r1
 8008602:	bf01      	itttt	eq
 8008604:	6819      	ldreq	r1, [r3, #0]
 8008606:	685b      	ldreq	r3, [r3, #4]
 8008608:	1949      	addeq	r1, r1, r5
 800860a:	6021      	streq	r1, [r4, #0]
 800860c:	e7ed      	b.n	80085ea <_free_r+0x22>
 800860e:	461a      	mov	r2, r3
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	b10b      	cbz	r3, 8008618 <_free_r+0x50>
 8008614:	42a3      	cmp	r3, r4
 8008616:	d9fa      	bls.n	800860e <_free_r+0x46>
 8008618:	6811      	ldr	r1, [r2, #0]
 800861a:	1855      	adds	r5, r2, r1
 800861c:	42a5      	cmp	r5, r4
 800861e:	d10b      	bne.n	8008638 <_free_r+0x70>
 8008620:	6824      	ldr	r4, [r4, #0]
 8008622:	4421      	add	r1, r4
 8008624:	1854      	adds	r4, r2, r1
 8008626:	42a3      	cmp	r3, r4
 8008628:	6011      	str	r1, [r2, #0]
 800862a:	d1e0      	bne.n	80085ee <_free_r+0x26>
 800862c:	681c      	ldr	r4, [r3, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	6053      	str	r3, [r2, #4]
 8008632:	4421      	add	r1, r4
 8008634:	6011      	str	r1, [r2, #0]
 8008636:	e7da      	b.n	80085ee <_free_r+0x26>
 8008638:	d902      	bls.n	8008640 <_free_r+0x78>
 800863a:	230c      	movs	r3, #12
 800863c:	6003      	str	r3, [r0, #0]
 800863e:	e7d6      	b.n	80085ee <_free_r+0x26>
 8008640:	6825      	ldr	r5, [r4, #0]
 8008642:	1961      	adds	r1, r4, r5
 8008644:	428b      	cmp	r3, r1
 8008646:	bf04      	itt	eq
 8008648:	6819      	ldreq	r1, [r3, #0]
 800864a:	685b      	ldreq	r3, [r3, #4]
 800864c:	6063      	str	r3, [r4, #4]
 800864e:	bf04      	itt	eq
 8008650:	1949      	addeq	r1, r1, r5
 8008652:	6021      	streq	r1, [r4, #0]
 8008654:	6054      	str	r4, [r2, #4]
 8008656:	e7ca      	b.n	80085ee <_free_r+0x26>
 8008658:	b003      	add	sp, #12
 800865a:	bd30      	pop	{r4, r5, pc}
 800865c:	20000ab0 	.word	0x20000ab0

08008660 <sbrk_aligned>:
 8008660:	b570      	push	{r4, r5, r6, lr}
 8008662:	4e0e      	ldr	r6, [pc, #56]	; (800869c <sbrk_aligned+0x3c>)
 8008664:	460c      	mov	r4, r1
 8008666:	6831      	ldr	r1, [r6, #0]
 8008668:	4605      	mov	r5, r0
 800866a:	b911      	cbnz	r1, 8008672 <sbrk_aligned+0x12>
 800866c:	f000 fb7a 	bl	8008d64 <_sbrk_r>
 8008670:	6030      	str	r0, [r6, #0]
 8008672:	4621      	mov	r1, r4
 8008674:	4628      	mov	r0, r5
 8008676:	f000 fb75 	bl	8008d64 <_sbrk_r>
 800867a:	1c43      	adds	r3, r0, #1
 800867c:	d00a      	beq.n	8008694 <sbrk_aligned+0x34>
 800867e:	1cc4      	adds	r4, r0, #3
 8008680:	f024 0403 	bic.w	r4, r4, #3
 8008684:	42a0      	cmp	r0, r4
 8008686:	d007      	beq.n	8008698 <sbrk_aligned+0x38>
 8008688:	1a21      	subs	r1, r4, r0
 800868a:	4628      	mov	r0, r5
 800868c:	f000 fb6a 	bl	8008d64 <_sbrk_r>
 8008690:	3001      	adds	r0, #1
 8008692:	d101      	bne.n	8008698 <sbrk_aligned+0x38>
 8008694:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008698:	4620      	mov	r0, r4
 800869a:	bd70      	pop	{r4, r5, r6, pc}
 800869c:	20000ab4 	.word	0x20000ab4

080086a0 <_malloc_r>:
 80086a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086a4:	1ccd      	adds	r5, r1, #3
 80086a6:	f025 0503 	bic.w	r5, r5, #3
 80086aa:	3508      	adds	r5, #8
 80086ac:	2d0c      	cmp	r5, #12
 80086ae:	bf38      	it	cc
 80086b0:	250c      	movcc	r5, #12
 80086b2:	2d00      	cmp	r5, #0
 80086b4:	4607      	mov	r7, r0
 80086b6:	db01      	blt.n	80086bc <_malloc_r+0x1c>
 80086b8:	42a9      	cmp	r1, r5
 80086ba:	d905      	bls.n	80086c8 <_malloc_r+0x28>
 80086bc:	230c      	movs	r3, #12
 80086be:	603b      	str	r3, [r7, #0]
 80086c0:	2600      	movs	r6, #0
 80086c2:	4630      	mov	r0, r6
 80086c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086c8:	4e2e      	ldr	r6, [pc, #184]	; (8008784 <_malloc_r+0xe4>)
 80086ca:	f000 fe43 	bl	8009354 <__malloc_lock>
 80086ce:	6833      	ldr	r3, [r6, #0]
 80086d0:	461c      	mov	r4, r3
 80086d2:	bb34      	cbnz	r4, 8008722 <_malloc_r+0x82>
 80086d4:	4629      	mov	r1, r5
 80086d6:	4638      	mov	r0, r7
 80086d8:	f7ff ffc2 	bl	8008660 <sbrk_aligned>
 80086dc:	1c43      	adds	r3, r0, #1
 80086de:	4604      	mov	r4, r0
 80086e0:	d14d      	bne.n	800877e <_malloc_r+0xde>
 80086e2:	6834      	ldr	r4, [r6, #0]
 80086e4:	4626      	mov	r6, r4
 80086e6:	2e00      	cmp	r6, #0
 80086e8:	d140      	bne.n	800876c <_malloc_r+0xcc>
 80086ea:	6823      	ldr	r3, [r4, #0]
 80086ec:	4631      	mov	r1, r6
 80086ee:	4638      	mov	r0, r7
 80086f0:	eb04 0803 	add.w	r8, r4, r3
 80086f4:	f000 fb36 	bl	8008d64 <_sbrk_r>
 80086f8:	4580      	cmp	r8, r0
 80086fa:	d13a      	bne.n	8008772 <_malloc_r+0xd2>
 80086fc:	6821      	ldr	r1, [r4, #0]
 80086fe:	3503      	adds	r5, #3
 8008700:	1a6d      	subs	r5, r5, r1
 8008702:	f025 0503 	bic.w	r5, r5, #3
 8008706:	3508      	adds	r5, #8
 8008708:	2d0c      	cmp	r5, #12
 800870a:	bf38      	it	cc
 800870c:	250c      	movcc	r5, #12
 800870e:	4629      	mov	r1, r5
 8008710:	4638      	mov	r0, r7
 8008712:	f7ff ffa5 	bl	8008660 <sbrk_aligned>
 8008716:	3001      	adds	r0, #1
 8008718:	d02b      	beq.n	8008772 <_malloc_r+0xd2>
 800871a:	6823      	ldr	r3, [r4, #0]
 800871c:	442b      	add	r3, r5
 800871e:	6023      	str	r3, [r4, #0]
 8008720:	e00e      	b.n	8008740 <_malloc_r+0xa0>
 8008722:	6822      	ldr	r2, [r4, #0]
 8008724:	1b52      	subs	r2, r2, r5
 8008726:	d41e      	bmi.n	8008766 <_malloc_r+0xc6>
 8008728:	2a0b      	cmp	r2, #11
 800872a:	d916      	bls.n	800875a <_malloc_r+0xba>
 800872c:	1961      	adds	r1, r4, r5
 800872e:	42a3      	cmp	r3, r4
 8008730:	6025      	str	r5, [r4, #0]
 8008732:	bf18      	it	ne
 8008734:	6059      	strne	r1, [r3, #4]
 8008736:	6863      	ldr	r3, [r4, #4]
 8008738:	bf08      	it	eq
 800873a:	6031      	streq	r1, [r6, #0]
 800873c:	5162      	str	r2, [r4, r5]
 800873e:	604b      	str	r3, [r1, #4]
 8008740:	4638      	mov	r0, r7
 8008742:	f104 060b 	add.w	r6, r4, #11
 8008746:	f000 fe0b 	bl	8009360 <__malloc_unlock>
 800874a:	f026 0607 	bic.w	r6, r6, #7
 800874e:	1d23      	adds	r3, r4, #4
 8008750:	1af2      	subs	r2, r6, r3
 8008752:	d0b6      	beq.n	80086c2 <_malloc_r+0x22>
 8008754:	1b9b      	subs	r3, r3, r6
 8008756:	50a3      	str	r3, [r4, r2]
 8008758:	e7b3      	b.n	80086c2 <_malloc_r+0x22>
 800875a:	6862      	ldr	r2, [r4, #4]
 800875c:	42a3      	cmp	r3, r4
 800875e:	bf0c      	ite	eq
 8008760:	6032      	streq	r2, [r6, #0]
 8008762:	605a      	strne	r2, [r3, #4]
 8008764:	e7ec      	b.n	8008740 <_malloc_r+0xa0>
 8008766:	4623      	mov	r3, r4
 8008768:	6864      	ldr	r4, [r4, #4]
 800876a:	e7b2      	b.n	80086d2 <_malloc_r+0x32>
 800876c:	4634      	mov	r4, r6
 800876e:	6876      	ldr	r6, [r6, #4]
 8008770:	e7b9      	b.n	80086e6 <_malloc_r+0x46>
 8008772:	230c      	movs	r3, #12
 8008774:	603b      	str	r3, [r7, #0]
 8008776:	4638      	mov	r0, r7
 8008778:	f000 fdf2 	bl	8009360 <__malloc_unlock>
 800877c:	e7a1      	b.n	80086c2 <_malloc_r+0x22>
 800877e:	6025      	str	r5, [r4, #0]
 8008780:	e7de      	b.n	8008740 <_malloc_r+0xa0>
 8008782:	bf00      	nop
 8008784:	20000ab0 	.word	0x20000ab0

08008788 <__sfputc_r>:
 8008788:	6893      	ldr	r3, [r2, #8]
 800878a:	3b01      	subs	r3, #1
 800878c:	2b00      	cmp	r3, #0
 800878e:	b410      	push	{r4}
 8008790:	6093      	str	r3, [r2, #8]
 8008792:	da08      	bge.n	80087a6 <__sfputc_r+0x1e>
 8008794:	6994      	ldr	r4, [r2, #24]
 8008796:	42a3      	cmp	r3, r4
 8008798:	db01      	blt.n	800879e <__sfputc_r+0x16>
 800879a:	290a      	cmp	r1, #10
 800879c:	d103      	bne.n	80087a6 <__sfputc_r+0x1e>
 800879e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087a2:	f000 baef 	b.w	8008d84 <__swbuf_r>
 80087a6:	6813      	ldr	r3, [r2, #0]
 80087a8:	1c58      	adds	r0, r3, #1
 80087aa:	6010      	str	r0, [r2, #0]
 80087ac:	7019      	strb	r1, [r3, #0]
 80087ae:	4608      	mov	r0, r1
 80087b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087b4:	4770      	bx	lr

080087b6 <__sfputs_r>:
 80087b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b8:	4606      	mov	r6, r0
 80087ba:	460f      	mov	r7, r1
 80087bc:	4614      	mov	r4, r2
 80087be:	18d5      	adds	r5, r2, r3
 80087c0:	42ac      	cmp	r4, r5
 80087c2:	d101      	bne.n	80087c8 <__sfputs_r+0x12>
 80087c4:	2000      	movs	r0, #0
 80087c6:	e007      	b.n	80087d8 <__sfputs_r+0x22>
 80087c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087cc:	463a      	mov	r2, r7
 80087ce:	4630      	mov	r0, r6
 80087d0:	f7ff ffda 	bl	8008788 <__sfputc_r>
 80087d4:	1c43      	adds	r3, r0, #1
 80087d6:	d1f3      	bne.n	80087c0 <__sfputs_r+0xa>
 80087d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080087dc <_vfiprintf_r>:
 80087dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e0:	460d      	mov	r5, r1
 80087e2:	b09d      	sub	sp, #116	; 0x74
 80087e4:	4614      	mov	r4, r2
 80087e6:	4698      	mov	r8, r3
 80087e8:	4606      	mov	r6, r0
 80087ea:	b118      	cbz	r0, 80087f4 <_vfiprintf_r+0x18>
 80087ec:	6983      	ldr	r3, [r0, #24]
 80087ee:	b90b      	cbnz	r3, 80087f4 <_vfiprintf_r+0x18>
 80087f0:	f000 fcaa 	bl	8009148 <__sinit>
 80087f4:	4b89      	ldr	r3, [pc, #548]	; (8008a1c <_vfiprintf_r+0x240>)
 80087f6:	429d      	cmp	r5, r3
 80087f8:	d11b      	bne.n	8008832 <_vfiprintf_r+0x56>
 80087fa:	6875      	ldr	r5, [r6, #4]
 80087fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087fe:	07d9      	lsls	r1, r3, #31
 8008800:	d405      	bmi.n	800880e <_vfiprintf_r+0x32>
 8008802:	89ab      	ldrh	r3, [r5, #12]
 8008804:	059a      	lsls	r2, r3, #22
 8008806:	d402      	bmi.n	800880e <_vfiprintf_r+0x32>
 8008808:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800880a:	f000 fd3b 	bl	8009284 <__retarget_lock_acquire_recursive>
 800880e:	89ab      	ldrh	r3, [r5, #12]
 8008810:	071b      	lsls	r3, r3, #28
 8008812:	d501      	bpl.n	8008818 <_vfiprintf_r+0x3c>
 8008814:	692b      	ldr	r3, [r5, #16]
 8008816:	b9eb      	cbnz	r3, 8008854 <_vfiprintf_r+0x78>
 8008818:	4629      	mov	r1, r5
 800881a:	4630      	mov	r0, r6
 800881c:	f000 fb04 	bl	8008e28 <__swsetup_r>
 8008820:	b1c0      	cbz	r0, 8008854 <_vfiprintf_r+0x78>
 8008822:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008824:	07dc      	lsls	r4, r3, #31
 8008826:	d50e      	bpl.n	8008846 <_vfiprintf_r+0x6a>
 8008828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800882c:	b01d      	add	sp, #116	; 0x74
 800882e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008832:	4b7b      	ldr	r3, [pc, #492]	; (8008a20 <_vfiprintf_r+0x244>)
 8008834:	429d      	cmp	r5, r3
 8008836:	d101      	bne.n	800883c <_vfiprintf_r+0x60>
 8008838:	68b5      	ldr	r5, [r6, #8]
 800883a:	e7df      	b.n	80087fc <_vfiprintf_r+0x20>
 800883c:	4b79      	ldr	r3, [pc, #484]	; (8008a24 <_vfiprintf_r+0x248>)
 800883e:	429d      	cmp	r5, r3
 8008840:	bf08      	it	eq
 8008842:	68f5      	ldreq	r5, [r6, #12]
 8008844:	e7da      	b.n	80087fc <_vfiprintf_r+0x20>
 8008846:	89ab      	ldrh	r3, [r5, #12]
 8008848:	0598      	lsls	r0, r3, #22
 800884a:	d4ed      	bmi.n	8008828 <_vfiprintf_r+0x4c>
 800884c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800884e:	f000 fd1a 	bl	8009286 <__retarget_lock_release_recursive>
 8008852:	e7e9      	b.n	8008828 <_vfiprintf_r+0x4c>
 8008854:	2300      	movs	r3, #0
 8008856:	9309      	str	r3, [sp, #36]	; 0x24
 8008858:	2320      	movs	r3, #32
 800885a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800885e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008862:	2330      	movs	r3, #48	; 0x30
 8008864:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008a28 <_vfiprintf_r+0x24c>
 8008868:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800886c:	f04f 0901 	mov.w	r9, #1
 8008870:	4623      	mov	r3, r4
 8008872:	469a      	mov	sl, r3
 8008874:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008878:	b10a      	cbz	r2, 800887e <_vfiprintf_r+0xa2>
 800887a:	2a25      	cmp	r2, #37	; 0x25
 800887c:	d1f9      	bne.n	8008872 <_vfiprintf_r+0x96>
 800887e:	ebba 0b04 	subs.w	fp, sl, r4
 8008882:	d00b      	beq.n	800889c <_vfiprintf_r+0xc0>
 8008884:	465b      	mov	r3, fp
 8008886:	4622      	mov	r2, r4
 8008888:	4629      	mov	r1, r5
 800888a:	4630      	mov	r0, r6
 800888c:	f7ff ff93 	bl	80087b6 <__sfputs_r>
 8008890:	3001      	adds	r0, #1
 8008892:	f000 80aa 	beq.w	80089ea <_vfiprintf_r+0x20e>
 8008896:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008898:	445a      	add	r2, fp
 800889a:	9209      	str	r2, [sp, #36]	; 0x24
 800889c:	f89a 3000 	ldrb.w	r3, [sl]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f000 80a2 	beq.w	80089ea <_vfiprintf_r+0x20e>
 80088a6:	2300      	movs	r3, #0
 80088a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088b0:	f10a 0a01 	add.w	sl, sl, #1
 80088b4:	9304      	str	r3, [sp, #16]
 80088b6:	9307      	str	r3, [sp, #28]
 80088b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088bc:	931a      	str	r3, [sp, #104]	; 0x68
 80088be:	4654      	mov	r4, sl
 80088c0:	2205      	movs	r2, #5
 80088c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088c6:	4858      	ldr	r0, [pc, #352]	; (8008a28 <_vfiprintf_r+0x24c>)
 80088c8:	f7f7 fc8a 	bl	80001e0 <memchr>
 80088cc:	9a04      	ldr	r2, [sp, #16]
 80088ce:	b9d8      	cbnz	r0, 8008908 <_vfiprintf_r+0x12c>
 80088d0:	06d1      	lsls	r1, r2, #27
 80088d2:	bf44      	itt	mi
 80088d4:	2320      	movmi	r3, #32
 80088d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088da:	0713      	lsls	r3, r2, #28
 80088dc:	bf44      	itt	mi
 80088de:	232b      	movmi	r3, #43	; 0x2b
 80088e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088e4:	f89a 3000 	ldrb.w	r3, [sl]
 80088e8:	2b2a      	cmp	r3, #42	; 0x2a
 80088ea:	d015      	beq.n	8008918 <_vfiprintf_r+0x13c>
 80088ec:	9a07      	ldr	r2, [sp, #28]
 80088ee:	4654      	mov	r4, sl
 80088f0:	2000      	movs	r0, #0
 80088f2:	f04f 0c0a 	mov.w	ip, #10
 80088f6:	4621      	mov	r1, r4
 80088f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088fc:	3b30      	subs	r3, #48	; 0x30
 80088fe:	2b09      	cmp	r3, #9
 8008900:	d94e      	bls.n	80089a0 <_vfiprintf_r+0x1c4>
 8008902:	b1b0      	cbz	r0, 8008932 <_vfiprintf_r+0x156>
 8008904:	9207      	str	r2, [sp, #28]
 8008906:	e014      	b.n	8008932 <_vfiprintf_r+0x156>
 8008908:	eba0 0308 	sub.w	r3, r0, r8
 800890c:	fa09 f303 	lsl.w	r3, r9, r3
 8008910:	4313      	orrs	r3, r2
 8008912:	9304      	str	r3, [sp, #16]
 8008914:	46a2      	mov	sl, r4
 8008916:	e7d2      	b.n	80088be <_vfiprintf_r+0xe2>
 8008918:	9b03      	ldr	r3, [sp, #12]
 800891a:	1d19      	adds	r1, r3, #4
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	9103      	str	r1, [sp, #12]
 8008920:	2b00      	cmp	r3, #0
 8008922:	bfbb      	ittet	lt
 8008924:	425b      	neglt	r3, r3
 8008926:	f042 0202 	orrlt.w	r2, r2, #2
 800892a:	9307      	strge	r3, [sp, #28]
 800892c:	9307      	strlt	r3, [sp, #28]
 800892e:	bfb8      	it	lt
 8008930:	9204      	strlt	r2, [sp, #16]
 8008932:	7823      	ldrb	r3, [r4, #0]
 8008934:	2b2e      	cmp	r3, #46	; 0x2e
 8008936:	d10c      	bne.n	8008952 <_vfiprintf_r+0x176>
 8008938:	7863      	ldrb	r3, [r4, #1]
 800893a:	2b2a      	cmp	r3, #42	; 0x2a
 800893c:	d135      	bne.n	80089aa <_vfiprintf_r+0x1ce>
 800893e:	9b03      	ldr	r3, [sp, #12]
 8008940:	1d1a      	adds	r2, r3, #4
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	9203      	str	r2, [sp, #12]
 8008946:	2b00      	cmp	r3, #0
 8008948:	bfb8      	it	lt
 800894a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800894e:	3402      	adds	r4, #2
 8008950:	9305      	str	r3, [sp, #20]
 8008952:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008a38 <_vfiprintf_r+0x25c>
 8008956:	7821      	ldrb	r1, [r4, #0]
 8008958:	2203      	movs	r2, #3
 800895a:	4650      	mov	r0, sl
 800895c:	f7f7 fc40 	bl	80001e0 <memchr>
 8008960:	b140      	cbz	r0, 8008974 <_vfiprintf_r+0x198>
 8008962:	2340      	movs	r3, #64	; 0x40
 8008964:	eba0 000a 	sub.w	r0, r0, sl
 8008968:	fa03 f000 	lsl.w	r0, r3, r0
 800896c:	9b04      	ldr	r3, [sp, #16]
 800896e:	4303      	orrs	r3, r0
 8008970:	3401      	adds	r4, #1
 8008972:	9304      	str	r3, [sp, #16]
 8008974:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008978:	482c      	ldr	r0, [pc, #176]	; (8008a2c <_vfiprintf_r+0x250>)
 800897a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800897e:	2206      	movs	r2, #6
 8008980:	f7f7 fc2e 	bl	80001e0 <memchr>
 8008984:	2800      	cmp	r0, #0
 8008986:	d03f      	beq.n	8008a08 <_vfiprintf_r+0x22c>
 8008988:	4b29      	ldr	r3, [pc, #164]	; (8008a30 <_vfiprintf_r+0x254>)
 800898a:	bb1b      	cbnz	r3, 80089d4 <_vfiprintf_r+0x1f8>
 800898c:	9b03      	ldr	r3, [sp, #12]
 800898e:	3307      	adds	r3, #7
 8008990:	f023 0307 	bic.w	r3, r3, #7
 8008994:	3308      	adds	r3, #8
 8008996:	9303      	str	r3, [sp, #12]
 8008998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800899a:	443b      	add	r3, r7
 800899c:	9309      	str	r3, [sp, #36]	; 0x24
 800899e:	e767      	b.n	8008870 <_vfiprintf_r+0x94>
 80089a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80089a4:	460c      	mov	r4, r1
 80089a6:	2001      	movs	r0, #1
 80089a8:	e7a5      	b.n	80088f6 <_vfiprintf_r+0x11a>
 80089aa:	2300      	movs	r3, #0
 80089ac:	3401      	adds	r4, #1
 80089ae:	9305      	str	r3, [sp, #20]
 80089b0:	4619      	mov	r1, r3
 80089b2:	f04f 0c0a 	mov.w	ip, #10
 80089b6:	4620      	mov	r0, r4
 80089b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089bc:	3a30      	subs	r2, #48	; 0x30
 80089be:	2a09      	cmp	r2, #9
 80089c0:	d903      	bls.n	80089ca <_vfiprintf_r+0x1ee>
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d0c5      	beq.n	8008952 <_vfiprintf_r+0x176>
 80089c6:	9105      	str	r1, [sp, #20]
 80089c8:	e7c3      	b.n	8008952 <_vfiprintf_r+0x176>
 80089ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80089ce:	4604      	mov	r4, r0
 80089d0:	2301      	movs	r3, #1
 80089d2:	e7f0      	b.n	80089b6 <_vfiprintf_r+0x1da>
 80089d4:	ab03      	add	r3, sp, #12
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	462a      	mov	r2, r5
 80089da:	4b16      	ldr	r3, [pc, #88]	; (8008a34 <_vfiprintf_r+0x258>)
 80089dc:	a904      	add	r1, sp, #16
 80089de:	4630      	mov	r0, r6
 80089e0:	f3af 8000 	nop.w
 80089e4:	4607      	mov	r7, r0
 80089e6:	1c78      	adds	r0, r7, #1
 80089e8:	d1d6      	bne.n	8008998 <_vfiprintf_r+0x1bc>
 80089ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089ec:	07d9      	lsls	r1, r3, #31
 80089ee:	d405      	bmi.n	80089fc <_vfiprintf_r+0x220>
 80089f0:	89ab      	ldrh	r3, [r5, #12]
 80089f2:	059a      	lsls	r2, r3, #22
 80089f4:	d402      	bmi.n	80089fc <_vfiprintf_r+0x220>
 80089f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089f8:	f000 fc45 	bl	8009286 <__retarget_lock_release_recursive>
 80089fc:	89ab      	ldrh	r3, [r5, #12]
 80089fe:	065b      	lsls	r3, r3, #25
 8008a00:	f53f af12 	bmi.w	8008828 <_vfiprintf_r+0x4c>
 8008a04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a06:	e711      	b.n	800882c <_vfiprintf_r+0x50>
 8008a08:	ab03      	add	r3, sp, #12
 8008a0a:	9300      	str	r3, [sp, #0]
 8008a0c:	462a      	mov	r2, r5
 8008a0e:	4b09      	ldr	r3, [pc, #36]	; (8008a34 <_vfiprintf_r+0x258>)
 8008a10:	a904      	add	r1, sp, #16
 8008a12:	4630      	mov	r0, r6
 8008a14:	f000 f880 	bl	8008b18 <_printf_i>
 8008a18:	e7e4      	b.n	80089e4 <_vfiprintf_r+0x208>
 8008a1a:	bf00      	nop
 8008a1c:	08009674 	.word	0x08009674
 8008a20:	08009694 	.word	0x08009694
 8008a24:	08009654 	.word	0x08009654
 8008a28:	08009620 	.word	0x08009620
 8008a2c:	0800962a 	.word	0x0800962a
 8008a30:	00000000 	.word	0x00000000
 8008a34:	080087b7 	.word	0x080087b7
 8008a38:	08009626 	.word	0x08009626

08008a3c <_printf_common>:
 8008a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a40:	4616      	mov	r6, r2
 8008a42:	4699      	mov	r9, r3
 8008a44:	688a      	ldr	r2, [r1, #8]
 8008a46:	690b      	ldr	r3, [r1, #16]
 8008a48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	bfb8      	it	lt
 8008a50:	4613      	movlt	r3, r2
 8008a52:	6033      	str	r3, [r6, #0]
 8008a54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a58:	4607      	mov	r7, r0
 8008a5a:	460c      	mov	r4, r1
 8008a5c:	b10a      	cbz	r2, 8008a62 <_printf_common+0x26>
 8008a5e:	3301      	adds	r3, #1
 8008a60:	6033      	str	r3, [r6, #0]
 8008a62:	6823      	ldr	r3, [r4, #0]
 8008a64:	0699      	lsls	r1, r3, #26
 8008a66:	bf42      	ittt	mi
 8008a68:	6833      	ldrmi	r3, [r6, #0]
 8008a6a:	3302      	addmi	r3, #2
 8008a6c:	6033      	strmi	r3, [r6, #0]
 8008a6e:	6825      	ldr	r5, [r4, #0]
 8008a70:	f015 0506 	ands.w	r5, r5, #6
 8008a74:	d106      	bne.n	8008a84 <_printf_common+0x48>
 8008a76:	f104 0a19 	add.w	sl, r4, #25
 8008a7a:	68e3      	ldr	r3, [r4, #12]
 8008a7c:	6832      	ldr	r2, [r6, #0]
 8008a7e:	1a9b      	subs	r3, r3, r2
 8008a80:	42ab      	cmp	r3, r5
 8008a82:	dc26      	bgt.n	8008ad2 <_printf_common+0x96>
 8008a84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a88:	1e13      	subs	r3, r2, #0
 8008a8a:	6822      	ldr	r2, [r4, #0]
 8008a8c:	bf18      	it	ne
 8008a8e:	2301      	movne	r3, #1
 8008a90:	0692      	lsls	r2, r2, #26
 8008a92:	d42b      	bmi.n	8008aec <_printf_common+0xb0>
 8008a94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a98:	4649      	mov	r1, r9
 8008a9a:	4638      	mov	r0, r7
 8008a9c:	47c0      	blx	r8
 8008a9e:	3001      	adds	r0, #1
 8008aa0:	d01e      	beq.n	8008ae0 <_printf_common+0xa4>
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	68e5      	ldr	r5, [r4, #12]
 8008aa6:	6832      	ldr	r2, [r6, #0]
 8008aa8:	f003 0306 	and.w	r3, r3, #6
 8008aac:	2b04      	cmp	r3, #4
 8008aae:	bf08      	it	eq
 8008ab0:	1aad      	subeq	r5, r5, r2
 8008ab2:	68a3      	ldr	r3, [r4, #8]
 8008ab4:	6922      	ldr	r2, [r4, #16]
 8008ab6:	bf0c      	ite	eq
 8008ab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008abc:	2500      	movne	r5, #0
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	bfc4      	itt	gt
 8008ac2:	1a9b      	subgt	r3, r3, r2
 8008ac4:	18ed      	addgt	r5, r5, r3
 8008ac6:	2600      	movs	r6, #0
 8008ac8:	341a      	adds	r4, #26
 8008aca:	42b5      	cmp	r5, r6
 8008acc:	d11a      	bne.n	8008b04 <_printf_common+0xc8>
 8008ace:	2000      	movs	r0, #0
 8008ad0:	e008      	b.n	8008ae4 <_printf_common+0xa8>
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	4652      	mov	r2, sl
 8008ad6:	4649      	mov	r1, r9
 8008ad8:	4638      	mov	r0, r7
 8008ada:	47c0      	blx	r8
 8008adc:	3001      	adds	r0, #1
 8008ade:	d103      	bne.n	8008ae8 <_printf_common+0xac>
 8008ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ae8:	3501      	adds	r5, #1
 8008aea:	e7c6      	b.n	8008a7a <_printf_common+0x3e>
 8008aec:	18e1      	adds	r1, r4, r3
 8008aee:	1c5a      	adds	r2, r3, #1
 8008af0:	2030      	movs	r0, #48	; 0x30
 8008af2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008af6:	4422      	add	r2, r4
 8008af8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008afc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b00:	3302      	adds	r3, #2
 8008b02:	e7c7      	b.n	8008a94 <_printf_common+0x58>
 8008b04:	2301      	movs	r3, #1
 8008b06:	4622      	mov	r2, r4
 8008b08:	4649      	mov	r1, r9
 8008b0a:	4638      	mov	r0, r7
 8008b0c:	47c0      	blx	r8
 8008b0e:	3001      	adds	r0, #1
 8008b10:	d0e6      	beq.n	8008ae0 <_printf_common+0xa4>
 8008b12:	3601      	adds	r6, #1
 8008b14:	e7d9      	b.n	8008aca <_printf_common+0x8e>
	...

08008b18 <_printf_i>:
 8008b18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b1c:	7e0f      	ldrb	r7, [r1, #24]
 8008b1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b20:	2f78      	cmp	r7, #120	; 0x78
 8008b22:	4691      	mov	r9, r2
 8008b24:	4680      	mov	r8, r0
 8008b26:	460c      	mov	r4, r1
 8008b28:	469a      	mov	sl, r3
 8008b2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b2e:	d807      	bhi.n	8008b40 <_printf_i+0x28>
 8008b30:	2f62      	cmp	r7, #98	; 0x62
 8008b32:	d80a      	bhi.n	8008b4a <_printf_i+0x32>
 8008b34:	2f00      	cmp	r7, #0
 8008b36:	f000 80d8 	beq.w	8008cea <_printf_i+0x1d2>
 8008b3a:	2f58      	cmp	r7, #88	; 0x58
 8008b3c:	f000 80a3 	beq.w	8008c86 <_printf_i+0x16e>
 8008b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b48:	e03a      	b.n	8008bc0 <_printf_i+0xa8>
 8008b4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b4e:	2b15      	cmp	r3, #21
 8008b50:	d8f6      	bhi.n	8008b40 <_printf_i+0x28>
 8008b52:	a101      	add	r1, pc, #4	; (adr r1, 8008b58 <_printf_i+0x40>)
 8008b54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b58:	08008bb1 	.word	0x08008bb1
 8008b5c:	08008bc5 	.word	0x08008bc5
 8008b60:	08008b41 	.word	0x08008b41
 8008b64:	08008b41 	.word	0x08008b41
 8008b68:	08008b41 	.word	0x08008b41
 8008b6c:	08008b41 	.word	0x08008b41
 8008b70:	08008bc5 	.word	0x08008bc5
 8008b74:	08008b41 	.word	0x08008b41
 8008b78:	08008b41 	.word	0x08008b41
 8008b7c:	08008b41 	.word	0x08008b41
 8008b80:	08008b41 	.word	0x08008b41
 8008b84:	08008cd1 	.word	0x08008cd1
 8008b88:	08008bf5 	.word	0x08008bf5
 8008b8c:	08008cb3 	.word	0x08008cb3
 8008b90:	08008b41 	.word	0x08008b41
 8008b94:	08008b41 	.word	0x08008b41
 8008b98:	08008cf3 	.word	0x08008cf3
 8008b9c:	08008b41 	.word	0x08008b41
 8008ba0:	08008bf5 	.word	0x08008bf5
 8008ba4:	08008b41 	.word	0x08008b41
 8008ba8:	08008b41 	.word	0x08008b41
 8008bac:	08008cbb 	.word	0x08008cbb
 8008bb0:	682b      	ldr	r3, [r5, #0]
 8008bb2:	1d1a      	adds	r2, r3, #4
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	602a      	str	r2, [r5, #0]
 8008bb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e0a3      	b.n	8008d0c <_printf_i+0x1f4>
 8008bc4:	6820      	ldr	r0, [r4, #0]
 8008bc6:	6829      	ldr	r1, [r5, #0]
 8008bc8:	0606      	lsls	r6, r0, #24
 8008bca:	f101 0304 	add.w	r3, r1, #4
 8008bce:	d50a      	bpl.n	8008be6 <_printf_i+0xce>
 8008bd0:	680e      	ldr	r6, [r1, #0]
 8008bd2:	602b      	str	r3, [r5, #0]
 8008bd4:	2e00      	cmp	r6, #0
 8008bd6:	da03      	bge.n	8008be0 <_printf_i+0xc8>
 8008bd8:	232d      	movs	r3, #45	; 0x2d
 8008bda:	4276      	negs	r6, r6
 8008bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008be0:	485e      	ldr	r0, [pc, #376]	; (8008d5c <_printf_i+0x244>)
 8008be2:	230a      	movs	r3, #10
 8008be4:	e019      	b.n	8008c1a <_printf_i+0x102>
 8008be6:	680e      	ldr	r6, [r1, #0]
 8008be8:	602b      	str	r3, [r5, #0]
 8008bea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008bee:	bf18      	it	ne
 8008bf0:	b236      	sxthne	r6, r6
 8008bf2:	e7ef      	b.n	8008bd4 <_printf_i+0xbc>
 8008bf4:	682b      	ldr	r3, [r5, #0]
 8008bf6:	6820      	ldr	r0, [r4, #0]
 8008bf8:	1d19      	adds	r1, r3, #4
 8008bfa:	6029      	str	r1, [r5, #0]
 8008bfc:	0601      	lsls	r1, r0, #24
 8008bfe:	d501      	bpl.n	8008c04 <_printf_i+0xec>
 8008c00:	681e      	ldr	r6, [r3, #0]
 8008c02:	e002      	b.n	8008c0a <_printf_i+0xf2>
 8008c04:	0646      	lsls	r6, r0, #25
 8008c06:	d5fb      	bpl.n	8008c00 <_printf_i+0xe8>
 8008c08:	881e      	ldrh	r6, [r3, #0]
 8008c0a:	4854      	ldr	r0, [pc, #336]	; (8008d5c <_printf_i+0x244>)
 8008c0c:	2f6f      	cmp	r7, #111	; 0x6f
 8008c0e:	bf0c      	ite	eq
 8008c10:	2308      	moveq	r3, #8
 8008c12:	230a      	movne	r3, #10
 8008c14:	2100      	movs	r1, #0
 8008c16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c1a:	6865      	ldr	r5, [r4, #4]
 8008c1c:	60a5      	str	r5, [r4, #8]
 8008c1e:	2d00      	cmp	r5, #0
 8008c20:	bfa2      	ittt	ge
 8008c22:	6821      	ldrge	r1, [r4, #0]
 8008c24:	f021 0104 	bicge.w	r1, r1, #4
 8008c28:	6021      	strge	r1, [r4, #0]
 8008c2a:	b90e      	cbnz	r6, 8008c30 <_printf_i+0x118>
 8008c2c:	2d00      	cmp	r5, #0
 8008c2e:	d04d      	beq.n	8008ccc <_printf_i+0x1b4>
 8008c30:	4615      	mov	r5, r2
 8008c32:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c36:	fb03 6711 	mls	r7, r3, r1, r6
 8008c3a:	5dc7      	ldrb	r7, [r0, r7]
 8008c3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c40:	4637      	mov	r7, r6
 8008c42:	42bb      	cmp	r3, r7
 8008c44:	460e      	mov	r6, r1
 8008c46:	d9f4      	bls.n	8008c32 <_printf_i+0x11a>
 8008c48:	2b08      	cmp	r3, #8
 8008c4a:	d10b      	bne.n	8008c64 <_printf_i+0x14c>
 8008c4c:	6823      	ldr	r3, [r4, #0]
 8008c4e:	07de      	lsls	r6, r3, #31
 8008c50:	d508      	bpl.n	8008c64 <_printf_i+0x14c>
 8008c52:	6923      	ldr	r3, [r4, #16]
 8008c54:	6861      	ldr	r1, [r4, #4]
 8008c56:	4299      	cmp	r1, r3
 8008c58:	bfde      	ittt	le
 8008c5a:	2330      	movle	r3, #48	; 0x30
 8008c5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c60:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008c64:	1b52      	subs	r2, r2, r5
 8008c66:	6122      	str	r2, [r4, #16]
 8008c68:	f8cd a000 	str.w	sl, [sp]
 8008c6c:	464b      	mov	r3, r9
 8008c6e:	aa03      	add	r2, sp, #12
 8008c70:	4621      	mov	r1, r4
 8008c72:	4640      	mov	r0, r8
 8008c74:	f7ff fee2 	bl	8008a3c <_printf_common>
 8008c78:	3001      	adds	r0, #1
 8008c7a:	d14c      	bne.n	8008d16 <_printf_i+0x1fe>
 8008c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c80:	b004      	add	sp, #16
 8008c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c86:	4835      	ldr	r0, [pc, #212]	; (8008d5c <_printf_i+0x244>)
 8008c88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008c8c:	6829      	ldr	r1, [r5, #0]
 8008c8e:	6823      	ldr	r3, [r4, #0]
 8008c90:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c94:	6029      	str	r1, [r5, #0]
 8008c96:	061d      	lsls	r5, r3, #24
 8008c98:	d514      	bpl.n	8008cc4 <_printf_i+0x1ac>
 8008c9a:	07df      	lsls	r7, r3, #31
 8008c9c:	bf44      	itt	mi
 8008c9e:	f043 0320 	orrmi.w	r3, r3, #32
 8008ca2:	6023      	strmi	r3, [r4, #0]
 8008ca4:	b91e      	cbnz	r6, 8008cae <_printf_i+0x196>
 8008ca6:	6823      	ldr	r3, [r4, #0]
 8008ca8:	f023 0320 	bic.w	r3, r3, #32
 8008cac:	6023      	str	r3, [r4, #0]
 8008cae:	2310      	movs	r3, #16
 8008cb0:	e7b0      	b.n	8008c14 <_printf_i+0xfc>
 8008cb2:	6823      	ldr	r3, [r4, #0]
 8008cb4:	f043 0320 	orr.w	r3, r3, #32
 8008cb8:	6023      	str	r3, [r4, #0]
 8008cba:	2378      	movs	r3, #120	; 0x78
 8008cbc:	4828      	ldr	r0, [pc, #160]	; (8008d60 <_printf_i+0x248>)
 8008cbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008cc2:	e7e3      	b.n	8008c8c <_printf_i+0x174>
 8008cc4:	0659      	lsls	r1, r3, #25
 8008cc6:	bf48      	it	mi
 8008cc8:	b2b6      	uxthmi	r6, r6
 8008cca:	e7e6      	b.n	8008c9a <_printf_i+0x182>
 8008ccc:	4615      	mov	r5, r2
 8008cce:	e7bb      	b.n	8008c48 <_printf_i+0x130>
 8008cd0:	682b      	ldr	r3, [r5, #0]
 8008cd2:	6826      	ldr	r6, [r4, #0]
 8008cd4:	6961      	ldr	r1, [r4, #20]
 8008cd6:	1d18      	adds	r0, r3, #4
 8008cd8:	6028      	str	r0, [r5, #0]
 8008cda:	0635      	lsls	r5, r6, #24
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	d501      	bpl.n	8008ce4 <_printf_i+0x1cc>
 8008ce0:	6019      	str	r1, [r3, #0]
 8008ce2:	e002      	b.n	8008cea <_printf_i+0x1d2>
 8008ce4:	0670      	lsls	r0, r6, #25
 8008ce6:	d5fb      	bpl.n	8008ce0 <_printf_i+0x1c8>
 8008ce8:	8019      	strh	r1, [r3, #0]
 8008cea:	2300      	movs	r3, #0
 8008cec:	6123      	str	r3, [r4, #16]
 8008cee:	4615      	mov	r5, r2
 8008cf0:	e7ba      	b.n	8008c68 <_printf_i+0x150>
 8008cf2:	682b      	ldr	r3, [r5, #0]
 8008cf4:	1d1a      	adds	r2, r3, #4
 8008cf6:	602a      	str	r2, [r5, #0]
 8008cf8:	681d      	ldr	r5, [r3, #0]
 8008cfa:	6862      	ldr	r2, [r4, #4]
 8008cfc:	2100      	movs	r1, #0
 8008cfe:	4628      	mov	r0, r5
 8008d00:	f7f7 fa6e 	bl	80001e0 <memchr>
 8008d04:	b108      	cbz	r0, 8008d0a <_printf_i+0x1f2>
 8008d06:	1b40      	subs	r0, r0, r5
 8008d08:	6060      	str	r0, [r4, #4]
 8008d0a:	6863      	ldr	r3, [r4, #4]
 8008d0c:	6123      	str	r3, [r4, #16]
 8008d0e:	2300      	movs	r3, #0
 8008d10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d14:	e7a8      	b.n	8008c68 <_printf_i+0x150>
 8008d16:	6923      	ldr	r3, [r4, #16]
 8008d18:	462a      	mov	r2, r5
 8008d1a:	4649      	mov	r1, r9
 8008d1c:	4640      	mov	r0, r8
 8008d1e:	47d0      	blx	sl
 8008d20:	3001      	adds	r0, #1
 8008d22:	d0ab      	beq.n	8008c7c <_printf_i+0x164>
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	079b      	lsls	r3, r3, #30
 8008d28:	d413      	bmi.n	8008d52 <_printf_i+0x23a>
 8008d2a:	68e0      	ldr	r0, [r4, #12]
 8008d2c:	9b03      	ldr	r3, [sp, #12]
 8008d2e:	4298      	cmp	r0, r3
 8008d30:	bfb8      	it	lt
 8008d32:	4618      	movlt	r0, r3
 8008d34:	e7a4      	b.n	8008c80 <_printf_i+0x168>
 8008d36:	2301      	movs	r3, #1
 8008d38:	4632      	mov	r2, r6
 8008d3a:	4649      	mov	r1, r9
 8008d3c:	4640      	mov	r0, r8
 8008d3e:	47d0      	blx	sl
 8008d40:	3001      	adds	r0, #1
 8008d42:	d09b      	beq.n	8008c7c <_printf_i+0x164>
 8008d44:	3501      	adds	r5, #1
 8008d46:	68e3      	ldr	r3, [r4, #12]
 8008d48:	9903      	ldr	r1, [sp, #12]
 8008d4a:	1a5b      	subs	r3, r3, r1
 8008d4c:	42ab      	cmp	r3, r5
 8008d4e:	dcf2      	bgt.n	8008d36 <_printf_i+0x21e>
 8008d50:	e7eb      	b.n	8008d2a <_printf_i+0x212>
 8008d52:	2500      	movs	r5, #0
 8008d54:	f104 0619 	add.w	r6, r4, #25
 8008d58:	e7f5      	b.n	8008d46 <_printf_i+0x22e>
 8008d5a:	bf00      	nop
 8008d5c:	08009631 	.word	0x08009631
 8008d60:	08009642 	.word	0x08009642

08008d64 <_sbrk_r>:
 8008d64:	b538      	push	{r3, r4, r5, lr}
 8008d66:	4d06      	ldr	r5, [pc, #24]	; (8008d80 <_sbrk_r+0x1c>)
 8008d68:	2300      	movs	r3, #0
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	4608      	mov	r0, r1
 8008d6e:	602b      	str	r3, [r5, #0]
 8008d70:	f7f7 ffc0 	bl	8000cf4 <_sbrk>
 8008d74:	1c43      	adds	r3, r0, #1
 8008d76:	d102      	bne.n	8008d7e <_sbrk_r+0x1a>
 8008d78:	682b      	ldr	r3, [r5, #0]
 8008d7a:	b103      	cbz	r3, 8008d7e <_sbrk_r+0x1a>
 8008d7c:	6023      	str	r3, [r4, #0]
 8008d7e:	bd38      	pop	{r3, r4, r5, pc}
 8008d80:	20000abc 	.word	0x20000abc

08008d84 <__swbuf_r>:
 8008d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d86:	460e      	mov	r6, r1
 8008d88:	4614      	mov	r4, r2
 8008d8a:	4605      	mov	r5, r0
 8008d8c:	b118      	cbz	r0, 8008d96 <__swbuf_r+0x12>
 8008d8e:	6983      	ldr	r3, [r0, #24]
 8008d90:	b90b      	cbnz	r3, 8008d96 <__swbuf_r+0x12>
 8008d92:	f000 f9d9 	bl	8009148 <__sinit>
 8008d96:	4b21      	ldr	r3, [pc, #132]	; (8008e1c <__swbuf_r+0x98>)
 8008d98:	429c      	cmp	r4, r3
 8008d9a:	d12b      	bne.n	8008df4 <__swbuf_r+0x70>
 8008d9c:	686c      	ldr	r4, [r5, #4]
 8008d9e:	69a3      	ldr	r3, [r4, #24]
 8008da0:	60a3      	str	r3, [r4, #8]
 8008da2:	89a3      	ldrh	r3, [r4, #12]
 8008da4:	071a      	lsls	r2, r3, #28
 8008da6:	d52f      	bpl.n	8008e08 <__swbuf_r+0x84>
 8008da8:	6923      	ldr	r3, [r4, #16]
 8008daa:	b36b      	cbz	r3, 8008e08 <__swbuf_r+0x84>
 8008dac:	6923      	ldr	r3, [r4, #16]
 8008dae:	6820      	ldr	r0, [r4, #0]
 8008db0:	1ac0      	subs	r0, r0, r3
 8008db2:	6963      	ldr	r3, [r4, #20]
 8008db4:	b2f6      	uxtb	r6, r6
 8008db6:	4283      	cmp	r3, r0
 8008db8:	4637      	mov	r7, r6
 8008dba:	dc04      	bgt.n	8008dc6 <__swbuf_r+0x42>
 8008dbc:	4621      	mov	r1, r4
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	f000 f92e 	bl	8009020 <_fflush_r>
 8008dc4:	bb30      	cbnz	r0, 8008e14 <__swbuf_r+0x90>
 8008dc6:	68a3      	ldr	r3, [r4, #8]
 8008dc8:	3b01      	subs	r3, #1
 8008dca:	60a3      	str	r3, [r4, #8]
 8008dcc:	6823      	ldr	r3, [r4, #0]
 8008dce:	1c5a      	adds	r2, r3, #1
 8008dd0:	6022      	str	r2, [r4, #0]
 8008dd2:	701e      	strb	r6, [r3, #0]
 8008dd4:	6963      	ldr	r3, [r4, #20]
 8008dd6:	3001      	adds	r0, #1
 8008dd8:	4283      	cmp	r3, r0
 8008dda:	d004      	beq.n	8008de6 <__swbuf_r+0x62>
 8008ddc:	89a3      	ldrh	r3, [r4, #12]
 8008dde:	07db      	lsls	r3, r3, #31
 8008de0:	d506      	bpl.n	8008df0 <__swbuf_r+0x6c>
 8008de2:	2e0a      	cmp	r6, #10
 8008de4:	d104      	bne.n	8008df0 <__swbuf_r+0x6c>
 8008de6:	4621      	mov	r1, r4
 8008de8:	4628      	mov	r0, r5
 8008dea:	f000 f919 	bl	8009020 <_fflush_r>
 8008dee:	b988      	cbnz	r0, 8008e14 <__swbuf_r+0x90>
 8008df0:	4638      	mov	r0, r7
 8008df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008df4:	4b0a      	ldr	r3, [pc, #40]	; (8008e20 <__swbuf_r+0x9c>)
 8008df6:	429c      	cmp	r4, r3
 8008df8:	d101      	bne.n	8008dfe <__swbuf_r+0x7a>
 8008dfa:	68ac      	ldr	r4, [r5, #8]
 8008dfc:	e7cf      	b.n	8008d9e <__swbuf_r+0x1a>
 8008dfe:	4b09      	ldr	r3, [pc, #36]	; (8008e24 <__swbuf_r+0xa0>)
 8008e00:	429c      	cmp	r4, r3
 8008e02:	bf08      	it	eq
 8008e04:	68ec      	ldreq	r4, [r5, #12]
 8008e06:	e7ca      	b.n	8008d9e <__swbuf_r+0x1a>
 8008e08:	4621      	mov	r1, r4
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	f000 f80c 	bl	8008e28 <__swsetup_r>
 8008e10:	2800      	cmp	r0, #0
 8008e12:	d0cb      	beq.n	8008dac <__swbuf_r+0x28>
 8008e14:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008e18:	e7ea      	b.n	8008df0 <__swbuf_r+0x6c>
 8008e1a:	bf00      	nop
 8008e1c:	08009674 	.word	0x08009674
 8008e20:	08009694 	.word	0x08009694
 8008e24:	08009654 	.word	0x08009654

08008e28 <__swsetup_r>:
 8008e28:	4b32      	ldr	r3, [pc, #200]	; (8008ef4 <__swsetup_r+0xcc>)
 8008e2a:	b570      	push	{r4, r5, r6, lr}
 8008e2c:	681d      	ldr	r5, [r3, #0]
 8008e2e:	4606      	mov	r6, r0
 8008e30:	460c      	mov	r4, r1
 8008e32:	b125      	cbz	r5, 8008e3e <__swsetup_r+0x16>
 8008e34:	69ab      	ldr	r3, [r5, #24]
 8008e36:	b913      	cbnz	r3, 8008e3e <__swsetup_r+0x16>
 8008e38:	4628      	mov	r0, r5
 8008e3a:	f000 f985 	bl	8009148 <__sinit>
 8008e3e:	4b2e      	ldr	r3, [pc, #184]	; (8008ef8 <__swsetup_r+0xd0>)
 8008e40:	429c      	cmp	r4, r3
 8008e42:	d10f      	bne.n	8008e64 <__swsetup_r+0x3c>
 8008e44:	686c      	ldr	r4, [r5, #4]
 8008e46:	89a3      	ldrh	r3, [r4, #12]
 8008e48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e4c:	0719      	lsls	r1, r3, #28
 8008e4e:	d42c      	bmi.n	8008eaa <__swsetup_r+0x82>
 8008e50:	06dd      	lsls	r5, r3, #27
 8008e52:	d411      	bmi.n	8008e78 <__swsetup_r+0x50>
 8008e54:	2309      	movs	r3, #9
 8008e56:	6033      	str	r3, [r6, #0]
 8008e58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e5c:	81a3      	strh	r3, [r4, #12]
 8008e5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e62:	e03e      	b.n	8008ee2 <__swsetup_r+0xba>
 8008e64:	4b25      	ldr	r3, [pc, #148]	; (8008efc <__swsetup_r+0xd4>)
 8008e66:	429c      	cmp	r4, r3
 8008e68:	d101      	bne.n	8008e6e <__swsetup_r+0x46>
 8008e6a:	68ac      	ldr	r4, [r5, #8]
 8008e6c:	e7eb      	b.n	8008e46 <__swsetup_r+0x1e>
 8008e6e:	4b24      	ldr	r3, [pc, #144]	; (8008f00 <__swsetup_r+0xd8>)
 8008e70:	429c      	cmp	r4, r3
 8008e72:	bf08      	it	eq
 8008e74:	68ec      	ldreq	r4, [r5, #12]
 8008e76:	e7e6      	b.n	8008e46 <__swsetup_r+0x1e>
 8008e78:	0758      	lsls	r0, r3, #29
 8008e7a:	d512      	bpl.n	8008ea2 <__swsetup_r+0x7a>
 8008e7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e7e:	b141      	cbz	r1, 8008e92 <__swsetup_r+0x6a>
 8008e80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e84:	4299      	cmp	r1, r3
 8008e86:	d002      	beq.n	8008e8e <__swsetup_r+0x66>
 8008e88:	4630      	mov	r0, r6
 8008e8a:	f7ff fb9d 	bl	80085c8 <_free_r>
 8008e8e:	2300      	movs	r3, #0
 8008e90:	6363      	str	r3, [r4, #52]	; 0x34
 8008e92:	89a3      	ldrh	r3, [r4, #12]
 8008e94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e98:	81a3      	strh	r3, [r4, #12]
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	6063      	str	r3, [r4, #4]
 8008e9e:	6923      	ldr	r3, [r4, #16]
 8008ea0:	6023      	str	r3, [r4, #0]
 8008ea2:	89a3      	ldrh	r3, [r4, #12]
 8008ea4:	f043 0308 	orr.w	r3, r3, #8
 8008ea8:	81a3      	strh	r3, [r4, #12]
 8008eaa:	6923      	ldr	r3, [r4, #16]
 8008eac:	b94b      	cbnz	r3, 8008ec2 <__swsetup_r+0x9a>
 8008eae:	89a3      	ldrh	r3, [r4, #12]
 8008eb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008eb8:	d003      	beq.n	8008ec2 <__swsetup_r+0x9a>
 8008eba:	4621      	mov	r1, r4
 8008ebc:	4630      	mov	r0, r6
 8008ebe:	f000 fa09 	bl	80092d4 <__smakebuf_r>
 8008ec2:	89a0      	ldrh	r0, [r4, #12]
 8008ec4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ec8:	f010 0301 	ands.w	r3, r0, #1
 8008ecc:	d00a      	beq.n	8008ee4 <__swsetup_r+0xbc>
 8008ece:	2300      	movs	r3, #0
 8008ed0:	60a3      	str	r3, [r4, #8]
 8008ed2:	6963      	ldr	r3, [r4, #20]
 8008ed4:	425b      	negs	r3, r3
 8008ed6:	61a3      	str	r3, [r4, #24]
 8008ed8:	6923      	ldr	r3, [r4, #16]
 8008eda:	b943      	cbnz	r3, 8008eee <__swsetup_r+0xc6>
 8008edc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ee0:	d1ba      	bne.n	8008e58 <__swsetup_r+0x30>
 8008ee2:	bd70      	pop	{r4, r5, r6, pc}
 8008ee4:	0781      	lsls	r1, r0, #30
 8008ee6:	bf58      	it	pl
 8008ee8:	6963      	ldrpl	r3, [r4, #20]
 8008eea:	60a3      	str	r3, [r4, #8]
 8008eec:	e7f4      	b.n	8008ed8 <__swsetup_r+0xb0>
 8008eee:	2000      	movs	r0, #0
 8008ef0:	e7f7      	b.n	8008ee2 <__swsetup_r+0xba>
 8008ef2:	bf00      	nop
 8008ef4:	2000002c 	.word	0x2000002c
 8008ef8:	08009674 	.word	0x08009674
 8008efc:	08009694 	.word	0x08009694
 8008f00:	08009654 	.word	0x08009654

08008f04 <abort>:
 8008f04:	b508      	push	{r3, lr}
 8008f06:	2006      	movs	r0, #6
 8008f08:	f000 fa58 	bl	80093bc <raise>
 8008f0c:	2001      	movs	r0, #1
 8008f0e:	f7f7 fe79 	bl	8000c04 <_exit>
	...

08008f14 <__sflush_r>:
 8008f14:	898a      	ldrh	r2, [r1, #12]
 8008f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f1a:	4605      	mov	r5, r0
 8008f1c:	0710      	lsls	r0, r2, #28
 8008f1e:	460c      	mov	r4, r1
 8008f20:	d458      	bmi.n	8008fd4 <__sflush_r+0xc0>
 8008f22:	684b      	ldr	r3, [r1, #4]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	dc05      	bgt.n	8008f34 <__sflush_r+0x20>
 8008f28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	dc02      	bgt.n	8008f34 <__sflush_r+0x20>
 8008f2e:	2000      	movs	r0, #0
 8008f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f36:	2e00      	cmp	r6, #0
 8008f38:	d0f9      	beq.n	8008f2e <__sflush_r+0x1a>
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f40:	682f      	ldr	r7, [r5, #0]
 8008f42:	602b      	str	r3, [r5, #0]
 8008f44:	d032      	beq.n	8008fac <__sflush_r+0x98>
 8008f46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f48:	89a3      	ldrh	r3, [r4, #12]
 8008f4a:	075a      	lsls	r2, r3, #29
 8008f4c:	d505      	bpl.n	8008f5a <__sflush_r+0x46>
 8008f4e:	6863      	ldr	r3, [r4, #4]
 8008f50:	1ac0      	subs	r0, r0, r3
 8008f52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f54:	b10b      	cbz	r3, 8008f5a <__sflush_r+0x46>
 8008f56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f58:	1ac0      	subs	r0, r0, r3
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f60:	6a21      	ldr	r1, [r4, #32]
 8008f62:	4628      	mov	r0, r5
 8008f64:	47b0      	blx	r6
 8008f66:	1c43      	adds	r3, r0, #1
 8008f68:	89a3      	ldrh	r3, [r4, #12]
 8008f6a:	d106      	bne.n	8008f7a <__sflush_r+0x66>
 8008f6c:	6829      	ldr	r1, [r5, #0]
 8008f6e:	291d      	cmp	r1, #29
 8008f70:	d82c      	bhi.n	8008fcc <__sflush_r+0xb8>
 8008f72:	4a2a      	ldr	r2, [pc, #168]	; (800901c <__sflush_r+0x108>)
 8008f74:	40ca      	lsrs	r2, r1
 8008f76:	07d6      	lsls	r6, r2, #31
 8008f78:	d528      	bpl.n	8008fcc <__sflush_r+0xb8>
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	6062      	str	r2, [r4, #4]
 8008f7e:	04d9      	lsls	r1, r3, #19
 8008f80:	6922      	ldr	r2, [r4, #16]
 8008f82:	6022      	str	r2, [r4, #0]
 8008f84:	d504      	bpl.n	8008f90 <__sflush_r+0x7c>
 8008f86:	1c42      	adds	r2, r0, #1
 8008f88:	d101      	bne.n	8008f8e <__sflush_r+0x7a>
 8008f8a:	682b      	ldr	r3, [r5, #0]
 8008f8c:	b903      	cbnz	r3, 8008f90 <__sflush_r+0x7c>
 8008f8e:	6560      	str	r0, [r4, #84]	; 0x54
 8008f90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f92:	602f      	str	r7, [r5, #0]
 8008f94:	2900      	cmp	r1, #0
 8008f96:	d0ca      	beq.n	8008f2e <__sflush_r+0x1a>
 8008f98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f9c:	4299      	cmp	r1, r3
 8008f9e:	d002      	beq.n	8008fa6 <__sflush_r+0x92>
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	f7ff fb11 	bl	80085c8 <_free_r>
 8008fa6:	2000      	movs	r0, #0
 8008fa8:	6360      	str	r0, [r4, #52]	; 0x34
 8008faa:	e7c1      	b.n	8008f30 <__sflush_r+0x1c>
 8008fac:	6a21      	ldr	r1, [r4, #32]
 8008fae:	2301      	movs	r3, #1
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	47b0      	blx	r6
 8008fb4:	1c41      	adds	r1, r0, #1
 8008fb6:	d1c7      	bne.n	8008f48 <__sflush_r+0x34>
 8008fb8:	682b      	ldr	r3, [r5, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d0c4      	beq.n	8008f48 <__sflush_r+0x34>
 8008fbe:	2b1d      	cmp	r3, #29
 8008fc0:	d001      	beq.n	8008fc6 <__sflush_r+0xb2>
 8008fc2:	2b16      	cmp	r3, #22
 8008fc4:	d101      	bne.n	8008fca <__sflush_r+0xb6>
 8008fc6:	602f      	str	r7, [r5, #0]
 8008fc8:	e7b1      	b.n	8008f2e <__sflush_r+0x1a>
 8008fca:	89a3      	ldrh	r3, [r4, #12]
 8008fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fd0:	81a3      	strh	r3, [r4, #12]
 8008fd2:	e7ad      	b.n	8008f30 <__sflush_r+0x1c>
 8008fd4:	690f      	ldr	r7, [r1, #16]
 8008fd6:	2f00      	cmp	r7, #0
 8008fd8:	d0a9      	beq.n	8008f2e <__sflush_r+0x1a>
 8008fda:	0793      	lsls	r3, r2, #30
 8008fdc:	680e      	ldr	r6, [r1, #0]
 8008fde:	bf08      	it	eq
 8008fe0:	694b      	ldreq	r3, [r1, #20]
 8008fe2:	600f      	str	r7, [r1, #0]
 8008fe4:	bf18      	it	ne
 8008fe6:	2300      	movne	r3, #0
 8008fe8:	eba6 0807 	sub.w	r8, r6, r7
 8008fec:	608b      	str	r3, [r1, #8]
 8008fee:	f1b8 0f00 	cmp.w	r8, #0
 8008ff2:	dd9c      	ble.n	8008f2e <__sflush_r+0x1a>
 8008ff4:	6a21      	ldr	r1, [r4, #32]
 8008ff6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ff8:	4643      	mov	r3, r8
 8008ffa:	463a      	mov	r2, r7
 8008ffc:	4628      	mov	r0, r5
 8008ffe:	47b0      	blx	r6
 8009000:	2800      	cmp	r0, #0
 8009002:	dc06      	bgt.n	8009012 <__sflush_r+0xfe>
 8009004:	89a3      	ldrh	r3, [r4, #12]
 8009006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800900a:	81a3      	strh	r3, [r4, #12]
 800900c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009010:	e78e      	b.n	8008f30 <__sflush_r+0x1c>
 8009012:	4407      	add	r7, r0
 8009014:	eba8 0800 	sub.w	r8, r8, r0
 8009018:	e7e9      	b.n	8008fee <__sflush_r+0xda>
 800901a:	bf00      	nop
 800901c:	20400001 	.word	0x20400001

08009020 <_fflush_r>:
 8009020:	b538      	push	{r3, r4, r5, lr}
 8009022:	690b      	ldr	r3, [r1, #16]
 8009024:	4605      	mov	r5, r0
 8009026:	460c      	mov	r4, r1
 8009028:	b913      	cbnz	r3, 8009030 <_fflush_r+0x10>
 800902a:	2500      	movs	r5, #0
 800902c:	4628      	mov	r0, r5
 800902e:	bd38      	pop	{r3, r4, r5, pc}
 8009030:	b118      	cbz	r0, 800903a <_fflush_r+0x1a>
 8009032:	6983      	ldr	r3, [r0, #24]
 8009034:	b90b      	cbnz	r3, 800903a <_fflush_r+0x1a>
 8009036:	f000 f887 	bl	8009148 <__sinit>
 800903a:	4b14      	ldr	r3, [pc, #80]	; (800908c <_fflush_r+0x6c>)
 800903c:	429c      	cmp	r4, r3
 800903e:	d11b      	bne.n	8009078 <_fflush_r+0x58>
 8009040:	686c      	ldr	r4, [r5, #4]
 8009042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d0ef      	beq.n	800902a <_fflush_r+0xa>
 800904a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800904c:	07d0      	lsls	r0, r2, #31
 800904e:	d404      	bmi.n	800905a <_fflush_r+0x3a>
 8009050:	0599      	lsls	r1, r3, #22
 8009052:	d402      	bmi.n	800905a <_fflush_r+0x3a>
 8009054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009056:	f000 f915 	bl	8009284 <__retarget_lock_acquire_recursive>
 800905a:	4628      	mov	r0, r5
 800905c:	4621      	mov	r1, r4
 800905e:	f7ff ff59 	bl	8008f14 <__sflush_r>
 8009062:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009064:	07da      	lsls	r2, r3, #31
 8009066:	4605      	mov	r5, r0
 8009068:	d4e0      	bmi.n	800902c <_fflush_r+0xc>
 800906a:	89a3      	ldrh	r3, [r4, #12]
 800906c:	059b      	lsls	r3, r3, #22
 800906e:	d4dd      	bmi.n	800902c <_fflush_r+0xc>
 8009070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009072:	f000 f908 	bl	8009286 <__retarget_lock_release_recursive>
 8009076:	e7d9      	b.n	800902c <_fflush_r+0xc>
 8009078:	4b05      	ldr	r3, [pc, #20]	; (8009090 <_fflush_r+0x70>)
 800907a:	429c      	cmp	r4, r3
 800907c:	d101      	bne.n	8009082 <_fflush_r+0x62>
 800907e:	68ac      	ldr	r4, [r5, #8]
 8009080:	e7df      	b.n	8009042 <_fflush_r+0x22>
 8009082:	4b04      	ldr	r3, [pc, #16]	; (8009094 <_fflush_r+0x74>)
 8009084:	429c      	cmp	r4, r3
 8009086:	bf08      	it	eq
 8009088:	68ec      	ldreq	r4, [r5, #12]
 800908a:	e7da      	b.n	8009042 <_fflush_r+0x22>
 800908c:	08009674 	.word	0x08009674
 8009090:	08009694 	.word	0x08009694
 8009094:	08009654 	.word	0x08009654

08009098 <std>:
 8009098:	2300      	movs	r3, #0
 800909a:	b510      	push	{r4, lr}
 800909c:	4604      	mov	r4, r0
 800909e:	e9c0 3300 	strd	r3, r3, [r0]
 80090a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090a6:	6083      	str	r3, [r0, #8]
 80090a8:	8181      	strh	r1, [r0, #12]
 80090aa:	6643      	str	r3, [r0, #100]	; 0x64
 80090ac:	81c2      	strh	r2, [r0, #14]
 80090ae:	6183      	str	r3, [r0, #24]
 80090b0:	4619      	mov	r1, r3
 80090b2:	2208      	movs	r2, #8
 80090b4:	305c      	adds	r0, #92	; 0x5c
 80090b6:	f7ff fa7f 	bl	80085b8 <memset>
 80090ba:	4b05      	ldr	r3, [pc, #20]	; (80090d0 <std+0x38>)
 80090bc:	6263      	str	r3, [r4, #36]	; 0x24
 80090be:	4b05      	ldr	r3, [pc, #20]	; (80090d4 <std+0x3c>)
 80090c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80090c2:	4b05      	ldr	r3, [pc, #20]	; (80090d8 <std+0x40>)
 80090c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090c6:	4b05      	ldr	r3, [pc, #20]	; (80090dc <std+0x44>)
 80090c8:	6224      	str	r4, [r4, #32]
 80090ca:	6323      	str	r3, [r4, #48]	; 0x30
 80090cc:	bd10      	pop	{r4, pc}
 80090ce:	bf00      	nop
 80090d0:	080093f5 	.word	0x080093f5
 80090d4:	08009417 	.word	0x08009417
 80090d8:	0800944f 	.word	0x0800944f
 80090dc:	08009473 	.word	0x08009473

080090e0 <_cleanup_r>:
 80090e0:	4901      	ldr	r1, [pc, #4]	; (80090e8 <_cleanup_r+0x8>)
 80090e2:	f000 b8af 	b.w	8009244 <_fwalk_reent>
 80090e6:	bf00      	nop
 80090e8:	08009021 	.word	0x08009021

080090ec <__sfmoreglue>:
 80090ec:	b570      	push	{r4, r5, r6, lr}
 80090ee:	2268      	movs	r2, #104	; 0x68
 80090f0:	1e4d      	subs	r5, r1, #1
 80090f2:	4355      	muls	r5, r2
 80090f4:	460e      	mov	r6, r1
 80090f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80090fa:	f7ff fad1 	bl	80086a0 <_malloc_r>
 80090fe:	4604      	mov	r4, r0
 8009100:	b140      	cbz	r0, 8009114 <__sfmoreglue+0x28>
 8009102:	2100      	movs	r1, #0
 8009104:	e9c0 1600 	strd	r1, r6, [r0]
 8009108:	300c      	adds	r0, #12
 800910a:	60a0      	str	r0, [r4, #8]
 800910c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009110:	f7ff fa52 	bl	80085b8 <memset>
 8009114:	4620      	mov	r0, r4
 8009116:	bd70      	pop	{r4, r5, r6, pc}

08009118 <__sfp_lock_acquire>:
 8009118:	4801      	ldr	r0, [pc, #4]	; (8009120 <__sfp_lock_acquire+0x8>)
 800911a:	f000 b8b3 	b.w	8009284 <__retarget_lock_acquire_recursive>
 800911e:	bf00      	nop
 8009120:	20000ab9 	.word	0x20000ab9

08009124 <__sfp_lock_release>:
 8009124:	4801      	ldr	r0, [pc, #4]	; (800912c <__sfp_lock_release+0x8>)
 8009126:	f000 b8ae 	b.w	8009286 <__retarget_lock_release_recursive>
 800912a:	bf00      	nop
 800912c:	20000ab9 	.word	0x20000ab9

08009130 <__sinit_lock_acquire>:
 8009130:	4801      	ldr	r0, [pc, #4]	; (8009138 <__sinit_lock_acquire+0x8>)
 8009132:	f000 b8a7 	b.w	8009284 <__retarget_lock_acquire_recursive>
 8009136:	bf00      	nop
 8009138:	20000aba 	.word	0x20000aba

0800913c <__sinit_lock_release>:
 800913c:	4801      	ldr	r0, [pc, #4]	; (8009144 <__sinit_lock_release+0x8>)
 800913e:	f000 b8a2 	b.w	8009286 <__retarget_lock_release_recursive>
 8009142:	bf00      	nop
 8009144:	20000aba 	.word	0x20000aba

08009148 <__sinit>:
 8009148:	b510      	push	{r4, lr}
 800914a:	4604      	mov	r4, r0
 800914c:	f7ff fff0 	bl	8009130 <__sinit_lock_acquire>
 8009150:	69a3      	ldr	r3, [r4, #24]
 8009152:	b11b      	cbz	r3, 800915c <__sinit+0x14>
 8009154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009158:	f7ff bff0 	b.w	800913c <__sinit_lock_release>
 800915c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009160:	6523      	str	r3, [r4, #80]	; 0x50
 8009162:	4b13      	ldr	r3, [pc, #76]	; (80091b0 <__sinit+0x68>)
 8009164:	4a13      	ldr	r2, [pc, #76]	; (80091b4 <__sinit+0x6c>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	62a2      	str	r2, [r4, #40]	; 0x28
 800916a:	42a3      	cmp	r3, r4
 800916c:	bf04      	itt	eq
 800916e:	2301      	moveq	r3, #1
 8009170:	61a3      	streq	r3, [r4, #24]
 8009172:	4620      	mov	r0, r4
 8009174:	f000 f820 	bl	80091b8 <__sfp>
 8009178:	6060      	str	r0, [r4, #4]
 800917a:	4620      	mov	r0, r4
 800917c:	f000 f81c 	bl	80091b8 <__sfp>
 8009180:	60a0      	str	r0, [r4, #8]
 8009182:	4620      	mov	r0, r4
 8009184:	f000 f818 	bl	80091b8 <__sfp>
 8009188:	2200      	movs	r2, #0
 800918a:	60e0      	str	r0, [r4, #12]
 800918c:	2104      	movs	r1, #4
 800918e:	6860      	ldr	r0, [r4, #4]
 8009190:	f7ff ff82 	bl	8009098 <std>
 8009194:	68a0      	ldr	r0, [r4, #8]
 8009196:	2201      	movs	r2, #1
 8009198:	2109      	movs	r1, #9
 800919a:	f7ff ff7d 	bl	8009098 <std>
 800919e:	68e0      	ldr	r0, [r4, #12]
 80091a0:	2202      	movs	r2, #2
 80091a2:	2112      	movs	r1, #18
 80091a4:	f7ff ff78 	bl	8009098 <std>
 80091a8:	2301      	movs	r3, #1
 80091aa:	61a3      	str	r3, [r4, #24]
 80091ac:	e7d2      	b.n	8009154 <__sinit+0xc>
 80091ae:	bf00      	nop
 80091b0:	0800961c 	.word	0x0800961c
 80091b4:	080090e1 	.word	0x080090e1

080091b8 <__sfp>:
 80091b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ba:	4607      	mov	r7, r0
 80091bc:	f7ff ffac 	bl	8009118 <__sfp_lock_acquire>
 80091c0:	4b1e      	ldr	r3, [pc, #120]	; (800923c <__sfp+0x84>)
 80091c2:	681e      	ldr	r6, [r3, #0]
 80091c4:	69b3      	ldr	r3, [r6, #24]
 80091c6:	b913      	cbnz	r3, 80091ce <__sfp+0x16>
 80091c8:	4630      	mov	r0, r6
 80091ca:	f7ff ffbd 	bl	8009148 <__sinit>
 80091ce:	3648      	adds	r6, #72	; 0x48
 80091d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80091d4:	3b01      	subs	r3, #1
 80091d6:	d503      	bpl.n	80091e0 <__sfp+0x28>
 80091d8:	6833      	ldr	r3, [r6, #0]
 80091da:	b30b      	cbz	r3, 8009220 <__sfp+0x68>
 80091dc:	6836      	ldr	r6, [r6, #0]
 80091de:	e7f7      	b.n	80091d0 <__sfp+0x18>
 80091e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80091e4:	b9d5      	cbnz	r5, 800921c <__sfp+0x64>
 80091e6:	4b16      	ldr	r3, [pc, #88]	; (8009240 <__sfp+0x88>)
 80091e8:	60e3      	str	r3, [r4, #12]
 80091ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80091ee:	6665      	str	r5, [r4, #100]	; 0x64
 80091f0:	f000 f847 	bl	8009282 <__retarget_lock_init_recursive>
 80091f4:	f7ff ff96 	bl	8009124 <__sfp_lock_release>
 80091f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80091fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009200:	6025      	str	r5, [r4, #0]
 8009202:	61a5      	str	r5, [r4, #24]
 8009204:	2208      	movs	r2, #8
 8009206:	4629      	mov	r1, r5
 8009208:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800920c:	f7ff f9d4 	bl	80085b8 <memset>
 8009210:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009214:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009218:	4620      	mov	r0, r4
 800921a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800921c:	3468      	adds	r4, #104	; 0x68
 800921e:	e7d9      	b.n	80091d4 <__sfp+0x1c>
 8009220:	2104      	movs	r1, #4
 8009222:	4638      	mov	r0, r7
 8009224:	f7ff ff62 	bl	80090ec <__sfmoreglue>
 8009228:	4604      	mov	r4, r0
 800922a:	6030      	str	r0, [r6, #0]
 800922c:	2800      	cmp	r0, #0
 800922e:	d1d5      	bne.n	80091dc <__sfp+0x24>
 8009230:	f7ff ff78 	bl	8009124 <__sfp_lock_release>
 8009234:	230c      	movs	r3, #12
 8009236:	603b      	str	r3, [r7, #0]
 8009238:	e7ee      	b.n	8009218 <__sfp+0x60>
 800923a:	bf00      	nop
 800923c:	0800961c 	.word	0x0800961c
 8009240:	ffff0001 	.word	0xffff0001

08009244 <_fwalk_reent>:
 8009244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009248:	4606      	mov	r6, r0
 800924a:	4688      	mov	r8, r1
 800924c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009250:	2700      	movs	r7, #0
 8009252:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009256:	f1b9 0901 	subs.w	r9, r9, #1
 800925a:	d505      	bpl.n	8009268 <_fwalk_reent+0x24>
 800925c:	6824      	ldr	r4, [r4, #0]
 800925e:	2c00      	cmp	r4, #0
 8009260:	d1f7      	bne.n	8009252 <_fwalk_reent+0xe>
 8009262:	4638      	mov	r0, r7
 8009264:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009268:	89ab      	ldrh	r3, [r5, #12]
 800926a:	2b01      	cmp	r3, #1
 800926c:	d907      	bls.n	800927e <_fwalk_reent+0x3a>
 800926e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009272:	3301      	adds	r3, #1
 8009274:	d003      	beq.n	800927e <_fwalk_reent+0x3a>
 8009276:	4629      	mov	r1, r5
 8009278:	4630      	mov	r0, r6
 800927a:	47c0      	blx	r8
 800927c:	4307      	orrs	r7, r0
 800927e:	3568      	adds	r5, #104	; 0x68
 8009280:	e7e9      	b.n	8009256 <_fwalk_reent+0x12>

08009282 <__retarget_lock_init_recursive>:
 8009282:	4770      	bx	lr

08009284 <__retarget_lock_acquire_recursive>:
 8009284:	4770      	bx	lr

08009286 <__retarget_lock_release_recursive>:
 8009286:	4770      	bx	lr

08009288 <__swhatbuf_r>:
 8009288:	b570      	push	{r4, r5, r6, lr}
 800928a:	460e      	mov	r6, r1
 800928c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009290:	2900      	cmp	r1, #0
 8009292:	b096      	sub	sp, #88	; 0x58
 8009294:	4614      	mov	r4, r2
 8009296:	461d      	mov	r5, r3
 8009298:	da08      	bge.n	80092ac <__swhatbuf_r+0x24>
 800929a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	602a      	str	r2, [r5, #0]
 80092a2:	061a      	lsls	r2, r3, #24
 80092a4:	d410      	bmi.n	80092c8 <__swhatbuf_r+0x40>
 80092a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092aa:	e00e      	b.n	80092ca <__swhatbuf_r+0x42>
 80092ac:	466a      	mov	r2, sp
 80092ae:	f000 f907 	bl	80094c0 <_fstat_r>
 80092b2:	2800      	cmp	r0, #0
 80092b4:	dbf1      	blt.n	800929a <__swhatbuf_r+0x12>
 80092b6:	9a01      	ldr	r2, [sp, #4]
 80092b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80092bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80092c0:	425a      	negs	r2, r3
 80092c2:	415a      	adcs	r2, r3
 80092c4:	602a      	str	r2, [r5, #0]
 80092c6:	e7ee      	b.n	80092a6 <__swhatbuf_r+0x1e>
 80092c8:	2340      	movs	r3, #64	; 0x40
 80092ca:	2000      	movs	r0, #0
 80092cc:	6023      	str	r3, [r4, #0]
 80092ce:	b016      	add	sp, #88	; 0x58
 80092d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080092d4 <__smakebuf_r>:
 80092d4:	898b      	ldrh	r3, [r1, #12]
 80092d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092d8:	079d      	lsls	r5, r3, #30
 80092da:	4606      	mov	r6, r0
 80092dc:	460c      	mov	r4, r1
 80092de:	d507      	bpl.n	80092f0 <__smakebuf_r+0x1c>
 80092e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092e4:	6023      	str	r3, [r4, #0]
 80092e6:	6123      	str	r3, [r4, #16]
 80092e8:	2301      	movs	r3, #1
 80092ea:	6163      	str	r3, [r4, #20]
 80092ec:	b002      	add	sp, #8
 80092ee:	bd70      	pop	{r4, r5, r6, pc}
 80092f0:	ab01      	add	r3, sp, #4
 80092f2:	466a      	mov	r2, sp
 80092f4:	f7ff ffc8 	bl	8009288 <__swhatbuf_r>
 80092f8:	9900      	ldr	r1, [sp, #0]
 80092fa:	4605      	mov	r5, r0
 80092fc:	4630      	mov	r0, r6
 80092fe:	f7ff f9cf 	bl	80086a0 <_malloc_r>
 8009302:	b948      	cbnz	r0, 8009318 <__smakebuf_r+0x44>
 8009304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009308:	059a      	lsls	r2, r3, #22
 800930a:	d4ef      	bmi.n	80092ec <__smakebuf_r+0x18>
 800930c:	f023 0303 	bic.w	r3, r3, #3
 8009310:	f043 0302 	orr.w	r3, r3, #2
 8009314:	81a3      	strh	r3, [r4, #12]
 8009316:	e7e3      	b.n	80092e0 <__smakebuf_r+0xc>
 8009318:	4b0d      	ldr	r3, [pc, #52]	; (8009350 <__smakebuf_r+0x7c>)
 800931a:	62b3      	str	r3, [r6, #40]	; 0x28
 800931c:	89a3      	ldrh	r3, [r4, #12]
 800931e:	6020      	str	r0, [r4, #0]
 8009320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009324:	81a3      	strh	r3, [r4, #12]
 8009326:	9b00      	ldr	r3, [sp, #0]
 8009328:	6163      	str	r3, [r4, #20]
 800932a:	9b01      	ldr	r3, [sp, #4]
 800932c:	6120      	str	r0, [r4, #16]
 800932e:	b15b      	cbz	r3, 8009348 <__smakebuf_r+0x74>
 8009330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009334:	4630      	mov	r0, r6
 8009336:	f000 f8d5 	bl	80094e4 <_isatty_r>
 800933a:	b128      	cbz	r0, 8009348 <__smakebuf_r+0x74>
 800933c:	89a3      	ldrh	r3, [r4, #12]
 800933e:	f023 0303 	bic.w	r3, r3, #3
 8009342:	f043 0301 	orr.w	r3, r3, #1
 8009346:	81a3      	strh	r3, [r4, #12]
 8009348:	89a0      	ldrh	r0, [r4, #12]
 800934a:	4305      	orrs	r5, r0
 800934c:	81a5      	strh	r5, [r4, #12]
 800934e:	e7cd      	b.n	80092ec <__smakebuf_r+0x18>
 8009350:	080090e1 	.word	0x080090e1

08009354 <__malloc_lock>:
 8009354:	4801      	ldr	r0, [pc, #4]	; (800935c <__malloc_lock+0x8>)
 8009356:	f7ff bf95 	b.w	8009284 <__retarget_lock_acquire_recursive>
 800935a:	bf00      	nop
 800935c:	20000ab8 	.word	0x20000ab8

08009360 <__malloc_unlock>:
 8009360:	4801      	ldr	r0, [pc, #4]	; (8009368 <__malloc_unlock+0x8>)
 8009362:	f7ff bf90 	b.w	8009286 <__retarget_lock_release_recursive>
 8009366:	bf00      	nop
 8009368:	20000ab8 	.word	0x20000ab8

0800936c <_raise_r>:
 800936c:	291f      	cmp	r1, #31
 800936e:	b538      	push	{r3, r4, r5, lr}
 8009370:	4604      	mov	r4, r0
 8009372:	460d      	mov	r5, r1
 8009374:	d904      	bls.n	8009380 <_raise_r+0x14>
 8009376:	2316      	movs	r3, #22
 8009378:	6003      	str	r3, [r0, #0]
 800937a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800937e:	bd38      	pop	{r3, r4, r5, pc}
 8009380:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009382:	b112      	cbz	r2, 800938a <_raise_r+0x1e>
 8009384:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009388:	b94b      	cbnz	r3, 800939e <_raise_r+0x32>
 800938a:	4620      	mov	r0, r4
 800938c:	f000 f830 	bl	80093f0 <_getpid_r>
 8009390:	462a      	mov	r2, r5
 8009392:	4601      	mov	r1, r0
 8009394:	4620      	mov	r0, r4
 8009396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800939a:	f000 b817 	b.w	80093cc <_kill_r>
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d00a      	beq.n	80093b8 <_raise_r+0x4c>
 80093a2:	1c59      	adds	r1, r3, #1
 80093a4:	d103      	bne.n	80093ae <_raise_r+0x42>
 80093a6:	2316      	movs	r3, #22
 80093a8:	6003      	str	r3, [r0, #0]
 80093aa:	2001      	movs	r0, #1
 80093ac:	e7e7      	b.n	800937e <_raise_r+0x12>
 80093ae:	2400      	movs	r4, #0
 80093b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80093b4:	4628      	mov	r0, r5
 80093b6:	4798      	blx	r3
 80093b8:	2000      	movs	r0, #0
 80093ba:	e7e0      	b.n	800937e <_raise_r+0x12>

080093bc <raise>:
 80093bc:	4b02      	ldr	r3, [pc, #8]	; (80093c8 <raise+0xc>)
 80093be:	4601      	mov	r1, r0
 80093c0:	6818      	ldr	r0, [r3, #0]
 80093c2:	f7ff bfd3 	b.w	800936c <_raise_r>
 80093c6:	bf00      	nop
 80093c8:	2000002c 	.word	0x2000002c

080093cc <_kill_r>:
 80093cc:	b538      	push	{r3, r4, r5, lr}
 80093ce:	4d07      	ldr	r5, [pc, #28]	; (80093ec <_kill_r+0x20>)
 80093d0:	2300      	movs	r3, #0
 80093d2:	4604      	mov	r4, r0
 80093d4:	4608      	mov	r0, r1
 80093d6:	4611      	mov	r1, r2
 80093d8:	602b      	str	r3, [r5, #0]
 80093da:	f7f7 fc03 	bl	8000be4 <_kill>
 80093de:	1c43      	adds	r3, r0, #1
 80093e0:	d102      	bne.n	80093e8 <_kill_r+0x1c>
 80093e2:	682b      	ldr	r3, [r5, #0]
 80093e4:	b103      	cbz	r3, 80093e8 <_kill_r+0x1c>
 80093e6:	6023      	str	r3, [r4, #0]
 80093e8:	bd38      	pop	{r3, r4, r5, pc}
 80093ea:	bf00      	nop
 80093ec:	20000abc 	.word	0x20000abc

080093f0 <_getpid_r>:
 80093f0:	f7f7 bbf0 	b.w	8000bd4 <_getpid>

080093f4 <__sread>:
 80093f4:	b510      	push	{r4, lr}
 80093f6:	460c      	mov	r4, r1
 80093f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093fc:	f000 f894 	bl	8009528 <_read_r>
 8009400:	2800      	cmp	r0, #0
 8009402:	bfab      	itete	ge
 8009404:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009406:	89a3      	ldrhlt	r3, [r4, #12]
 8009408:	181b      	addge	r3, r3, r0
 800940a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800940e:	bfac      	ite	ge
 8009410:	6563      	strge	r3, [r4, #84]	; 0x54
 8009412:	81a3      	strhlt	r3, [r4, #12]
 8009414:	bd10      	pop	{r4, pc}

08009416 <__swrite>:
 8009416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800941a:	461f      	mov	r7, r3
 800941c:	898b      	ldrh	r3, [r1, #12]
 800941e:	05db      	lsls	r3, r3, #23
 8009420:	4605      	mov	r5, r0
 8009422:	460c      	mov	r4, r1
 8009424:	4616      	mov	r6, r2
 8009426:	d505      	bpl.n	8009434 <__swrite+0x1e>
 8009428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800942c:	2302      	movs	r3, #2
 800942e:	2200      	movs	r2, #0
 8009430:	f000 f868 	bl	8009504 <_lseek_r>
 8009434:	89a3      	ldrh	r3, [r4, #12]
 8009436:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800943a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800943e:	81a3      	strh	r3, [r4, #12]
 8009440:	4632      	mov	r2, r6
 8009442:	463b      	mov	r3, r7
 8009444:	4628      	mov	r0, r5
 8009446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800944a:	f000 b817 	b.w	800947c <_write_r>

0800944e <__sseek>:
 800944e:	b510      	push	{r4, lr}
 8009450:	460c      	mov	r4, r1
 8009452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009456:	f000 f855 	bl	8009504 <_lseek_r>
 800945a:	1c43      	adds	r3, r0, #1
 800945c:	89a3      	ldrh	r3, [r4, #12]
 800945e:	bf15      	itete	ne
 8009460:	6560      	strne	r0, [r4, #84]	; 0x54
 8009462:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009466:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800946a:	81a3      	strheq	r3, [r4, #12]
 800946c:	bf18      	it	ne
 800946e:	81a3      	strhne	r3, [r4, #12]
 8009470:	bd10      	pop	{r4, pc}

08009472 <__sclose>:
 8009472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009476:	f000 b813 	b.w	80094a0 <_close_r>
	...

0800947c <_write_r>:
 800947c:	b538      	push	{r3, r4, r5, lr}
 800947e:	4d07      	ldr	r5, [pc, #28]	; (800949c <_write_r+0x20>)
 8009480:	4604      	mov	r4, r0
 8009482:	4608      	mov	r0, r1
 8009484:	4611      	mov	r1, r2
 8009486:	2200      	movs	r2, #0
 8009488:	602a      	str	r2, [r5, #0]
 800948a:	461a      	mov	r2, r3
 800948c:	f7f7 fbe1 	bl	8000c52 <_write>
 8009490:	1c43      	adds	r3, r0, #1
 8009492:	d102      	bne.n	800949a <_write_r+0x1e>
 8009494:	682b      	ldr	r3, [r5, #0]
 8009496:	b103      	cbz	r3, 800949a <_write_r+0x1e>
 8009498:	6023      	str	r3, [r4, #0]
 800949a:	bd38      	pop	{r3, r4, r5, pc}
 800949c:	20000abc 	.word	0x20000abc

080094a0 <_close_r>:
 80094a0:	b538      	push	{r3, r4, r5, lr}
 80094a2:	4d06      	ldr	r5, [pc, #24]	; (80094bc <_close_r+0x1c>)
 80094a4:	2300      	movs	r3, #0
 80094a6:	4604      	mov	r4, r0
 80094a8:	4608      	mov	r0, r1
 80094aa:	602b      	str	r3, [r5, #0]
 80094ac:	f7f7 fbed 	bl	8000c8a <_close>
 80094b0:	1c43      	adds	r3, r0, #1
 80094b2:	d102      	bne.n	80094ba <_close_r+0x1a>
 80094b4:	682b      	ldr	r3, [r5, #0]
 80094b6:	b103      	cbz	r3, 80094ba <_close_r+0x1a>
 80094b8:	6023      	str	r3, [r4, #0]
 80094ba:	bd38      	pop	{r3, r4, r5, pc}
 80094bc:	20000abc 	.word	0x20000abc

080094c0 <_fstat_r>:
 80094c0:	b538      	push	{r3, r4, r5, lr}
 80094c2:	4d07      	ldr	r5, [pc, #28]	; (80094e0 <_fstat_r+0x20>)
 80094c4:	2300      	movs	r3, #0
 80094c6:	4604      	mov	r4, r0
 80094c8:	4608      	mov	r0, r1
 80094ca:	4611      	mov	r1, r2
 80094cc:	602b      	str	r3, [r5, #0]
 80094ce:	f7f7 fbe8 	bl	8000ca2 <_fstat>
 80094d2:	1c43      	adds	r3, r0, #1
 80094d4:	d102      	bne.n	80094dc <_fstat_r+0x1c>
 80094d6:	682b      	ldr	r3, [r5, #0]
 80094d8:	b103      	cbz	r3, 80094dc <_fstat_r+0x1c>
 80094da:	6023      	str	r3, [r4, #0]
 80094dc:	bd38      	pop	{r3, r4, r5, pc}
 80094de:	bf00      	nop
 80094e0:	20000abc 	.word	0x20000abc

080094e4 <_isatty_r>:
 80094e4:	b538      	push	{r3, r4, r5, lr}
 80094e6:	4d06      	ldr	r5, [pc, #24]	; (8009500 <_isatty_r+0x1c>)
 80094e8:	2300      	movs	r3, #0
 80094ea:	4604      	mov	r4, r0
 80094ec:	4608      	mov	r0, r1
 80094ee:	602b      	str	r3, [r5, #0]
 80094f0:	f7f7 fbe7 	bl	8000cc2 <_isatty>
 80094f4:	1c43      	adds	r3, r0, #1
 80094f6:	d102      	bne.n	80094fe <_isatty_r+0x1a>
 80094f8:	682b      	ldr	r3, [r5, #0]
 80094fa:	b103      	cbz	r3, 80094fe <_isatty_r+0x1a>
 80094fc:	6023      	str	r3, [r4, #0]
 80094fe:	bd38      	pop	{r3, r4, r5, pc}
 8009500:	20000abc 	.word	0x20000abc

08009504 <_lseek_r>:
 8009504:	b538      	push	{r3, r4, r5, lr}
 8009506:	4d07      	ldr	r5, [pc, #28]	; (8009524 <_lseek_r+0x20>)
 8009508:	4604      	mov	r4, r0
 800950a:	4608      	mov	r0, r1
 800950c:	4611      	mov	r1, r2
 800950e:	2200      	movs	r2, #0
 8009510:	602a      	str	r2, [r5, #0]
 8009512:	461a      	mov	r2, r3
 8009514:	f7f7 fbe0 	bl	8000cd8 <_lseek>
 8009518:	1c43      	adds	r3, r0, #1
 800951a:	d102      	bne.n	8009522 <_lseek_r+0x1e>
 800951c:	682b      	ldr	r3, [r5, #0]
 800951e:	b103      	cbz	r3, 8009522 <_lseek_r+0x1e>
 8009520:	6023      	str	r3, [r4, #0]
 8009522:	bd38      	pop	{r3, r4, r5, pc}
 8009524:	20000abc 	.word	0x20000abc

08009528 <_read_r>:
 8009528:	b538      	push	{r3, r4, r5, lr}
 800952a:	4d07      	ldr	r5, [pc, #28]	; (8009548 <_read_r+0x20>)
 800952c:	4604      	mov	r4, r0
 800952e:	4608      	mov	r0, r1
 8009530:	4611      	mov	r1, r2
 8009532:	2200      	movs	r2, #0
 8009534:	602a      	str	r2, [r5, #0]
 8009536:	461a      	mov	r2, r3
 8009538:	f7f7 fb6e 	bl	8000c18 <_read>
 800953c:	1c43      	adds	r3, r0, #1
 800953e:	d102      	bne.n	8009546 <_read_r+0x1e>
 8009540:	682b      	ldr	r3, [r5, #0]
 8009542:	b103      	cbz	r3, 8009546 <_read_r+0x1e>
 8009544:	6023      	str	r3, [r4, #0]
 8009546:	bd38      	pop	{r3, r4, r5, pc}
 8009548:	20000abc 	.word	0x20000abc

0800954c <_init>:
 800954c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800954e:	bf00      	nop
 8009550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009552:	bc08      	pop	{r3}
 8009554:	469e      	mov	lr, r3
 8009556:	4770      	bx	lr

08009558 <_fini>:
 8009558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800955a:	bf00      	nop
 800955c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800955e:	bc08      	pop	{r3}
 8009560:	469e      	mov	lr, r3
 8009562:	4770      	bx	lr
