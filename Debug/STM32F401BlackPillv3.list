
STM32F401BlackPillv3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084fc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08008690  08008690  00018690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086b4  080086b4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080086b4  080086b4  000186b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086bc  080086bc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086bc  080086bc  000186bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086c0  080086c0  000186c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080086c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000083c  20000090  08008754  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008cc  08008754  000208cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013123  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003035  00000000  00000000  000331e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00036218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  00036f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b7b  00000000  00000000  00037b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011898  00000000  00000000  0004f6db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089be5  00000000  00000000  00060f73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eab58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037f4  00000000  00000000  000eaba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000090 	.word	0x20000090
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08008678 	.word	0x08008678

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000094 	.word	0x20000094
 80001d0:	08008678 	.word	0x08008678

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_UARTEx_RxEventCallback>:
  * @brief  The application entry point.
  * @retval int
  */

// call back when uart irq
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	460b      	mov	r3, r1
 80004e2:	807b      	strh	r3, [r7, #2]
	if(huart->Instance==USART1){
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a11      	ldr	r2, [pc, #68]	; (8000530 <HAL_UARTEx_RxEventCallback+0x58>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d11c      	bne.n	8000528 <HAL_UARTEx_RxEventCallback+0x50>
		memccpy(rxUartBuff,dmaUartRxBuff,Size);
 80004ee:	887b      	ldrh	r3, [r7, #2]
 80004f0:	461a      	mov	r2, r3
 80004f2:	4910      	ldr	r1, [pc, #64]	; (8000534 <HAL_UARTEx_RxEventCallback+0x5c>)
 80004f4:	4810      	ldr	r0, [pc, #64]	; (8000538 <HAL_UARTEx_RxEventCallback+0x60>)
 80004f6:	f007 ffa9 	bl	800844c <memccpy>
		rxUartSize=Size;
 80004fa:	4a10      	ldr	r2, [pc, #64]	; (800053c <HAL_UARTEx_RxEventCallback+0x64>)
 80004fc:	887b      	ldrh	r3, [r7, #2]
 80004fe:	8013      	strh	r3, [r2, #0]

		HAL_UART_Transmit_DMA(&huart1, rxUartBuff, rxUartSize);
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <HAL_UARTEx_RxEventCallback+0x64>)
 8000502:	881b      	ldrh	r3, [r3, #0]
 8000504:	461a      	mov	r2, r3
 8000506:	490c      	ldr	r1, [pc, #48]	; (8000538 <HAL_UARTEx_RxEventCallback+0x60>)
 8000508:	480d      	ldr	r0, [pc, #52]	; (8000540 <HAL_UARTEx_RxEventCallback+0x68>)
 800050a:	f003 faf1 	bl	8003af0 <HAL_UART_Transmit_DMA>

		//enable again

		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, dmaUartRxBuff, sizeof(dmaUartRxBuff));// enable all irq related to
 800050e:	220a      	movs	r2, #10
 8000510:	4908      	ldr	r1, [pc, #32]	; (8000534 <HAL_UARTEx_RxEventCallback+0x5c>)
 8000512:	480b      	ldr	r0, [pc, #44]	; (8000540 <HAL_UARTEx_RxEventCallback+0x68>)
 8000514:	f003 fb6a 	bl	8003bec <HAL_UARTEx_ReceiveToIdle_DMA>
		  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);// dsiable half buffer dma irq
 8000518:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <HAL_UARTEx_RxEventCallback+0x6c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	4b09      	ldr	r3, [pc, #36]	; (8000544 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f022 0208 	bic.w	r2, r2, #8
 8000526:	601a      	str	r2, [r3, #0]


	}

}
 8000528:	bf00      	nop
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40011000 	.word	0x40011000
 8000534:	200000ac 	.word	0x200000ac
 8000538:	200000b8 	.word	0x200000b8
 800053c:	200000cc 	.word	0x200000cc
 8000540:	200000d0 	.word	0x200000d0
 8000544:	20000114 	.word	0x20000114

08000548 <main>:

int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054c:	f000 fad8 	bl	8000b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000550:	f000 f81e 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000554:	f000 f8da 	bl	800070c <MX_GPIO_Init>
  MX_DMA_Init();
 8000558:	f000 f8b0 	bl	80006bc <MX_DMA_Init>
  MX_USART1_UART_Init();
 800055c:	f000 f884 	bl	8000668 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 8000560:	f007 fc66 	bl	8007e30 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  //whenever the dma buffer is full or the tx line is idle for one frame time ( 1 byte time) --> the uart irq will be call
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, dmaUartRxBuff, sizeof(dmaUartRxBuff));// enable all irq related to
 8000564:	220a      	movs	r2, #10
 8000566:	4907      	ldr	r1, [pc, #28]	; (8000584 <main+0x3c>)
 8000568:	4807      	ldr	r0, [pc, #28]	; (8000588 <main+0x40>)
 800056a:	f003 fb3f 	bl	8003bec <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);// dsiable half buffer dma irq
 800056e:	4b07      	ldr	r3, [pc, #28]	; (800058c <main+0x44>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <main+0x44>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f022 0208 	bic.w	r2, r2, #8
 800057c:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800057e:	f007 fc7d 	bl	8007e7c <MX_USB_HOST_Process>
 8000582:	e7fc      	b.n	800057e <main+0x36>
 8000584:	200000ac 	.word	0x200000ac
 8000588:	200000d0 	.word	0x200000d0
 800058c:	20000114 	.word	0x20000114

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	; 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	; 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f007 ff63 	bl	800846a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b29      	ldr	r3, [pc, #164]	; (8000660 <SystemClock_Config+0xd0>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a28      	ldr	r2, [pc, #160]	; (8000660 <SystemClock_Config+0xd0>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b26      	ldr	r3, [pc, #152]	; (8000660 <SystemClock_Config+0xd0>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b23      	ldr	r3, [pc, #140]	; (8000664 <SystemClock_Config+0xd4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005dc:	4a21      	ldr	r2, [pc, #132]	; (8000664 <SystemClock_Config+0xd4>)
 80005de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <SystemClock_Config+0xd4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f0:	2301      	movs	r3, #1
 80005f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	2302      	movs	r3, #2
 80005fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000602:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000604:	2319      	movs	r3, #25
 8000606:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000608:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800060c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800060e:	2304      	movs	r3, #4
 8000610:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000612:	2307      	movs	r3, #7
 8000614:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	4618      	mov	r0, r3
 800061c:	f002 fdc2 	bl	80031a4 <HAL_RCC_OscConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000626:	f000 f8c3 	bl	80007b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062a:	230f      	movs	r3, #15
 800062c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062e:	2302      	movs	r3, #2
 8000630:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2102      	movs	r1, #2
 8000646:	4618      	mov	r0, r3
 8000648:	f003 f824 	bl	8003694 <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000652:	f000 f8ad 	bl	80007b0 <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3750      	adds	r7, #80	; 0x50
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_USART1_UART_Init+0x4c>)
 800066e:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <MX_USART1_UART_Init+0x50>)
 8000670:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MX_USART1_UART_Init+0x4c>)
 8000674:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000678:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_USART1_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_USART1_UART_Init+0x4c>)
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_USART1_UART_Init+0x4c>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_USART1_UART_Init+0x4c>)
 800068e:	220c      	movs	r2, #12
 8000690:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_USART1_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_USART1_UART_Init+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_USART1_UART_Init+0x4c>)
 80006a0:	f003 f9d8 	bl	8003a54 <HAL_UART_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006aa:	f000 f881 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200000d0 	.word	0x200000d0
 80006b8:	40011000 	.word	0x40011000

080006bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <MX_DMA_Init+0x4c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a0f      	ldr	r2, [pc, #60]	; (8000708 <MX_DMA_Init+0x4c>)
 80006cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <MX_DMA_Init+0x4c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80006de:	2200      	movs	r2, #0
 80006e0:	2100      	movs	r1, #0
 80006e2:	203a      	movs	r0, #58	; 0x3a
 80006e4:	f000 fb7d 	bl	8000de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80006e8:	203a      	movs	r0, #58	; 0x3a
 80006ea:	f000 fb96 	bl	8000e1a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2100      	movs	r1, #0
 80006f2:	2046      	movs	r0, #70	; 0x46
 80006f4:	f000 fb75 	bl	8000de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80006f8:	2046      	movs	r0, #70	; 0x46
 80006fa:	f000 fb8e 	bl	8000e1a <HAL_NVIC_EnableIRQ>

}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	4b20      	ldr	r3, [pc, #128]	; (80007a8 <MX_GPIO_Init+0x9c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <MX_GPIO_Init+0x9c>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <MX_GPIO_Init+0x9c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <MX_GPIO_Init+0x9c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a18      	ldr	r2, [pc, #96]	; (80007a8 <MX_GPIO_Init+0x9c>)
 8000748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_GPIO_Init+0x9c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_GPIO_Init+0x9c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a11      	ldr	r2, [pc, #68]	; (80007a8 <MX_GPIO_Init+0x9c>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_GPIO_Init+0x9c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800077c:	480b      	ldr	r0, [pc, #44]	; (80007ac <MX_GPIO_Init+0xa0>)
 800077e:	f001 f8ed 	bl	800195c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000782:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	2301      	movs	r3, #1
 800078a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	4619      	mov	r1, r3
 800079a:	4804      	ldr	r0, [pc, #16]	; (80007ac <MX_GPIO_Init+0xa0>)
 800079c:	f000 ff5a 	bl	8001654 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a0:	bf00      	nop
 80007a2:	3720      	adds	r7, #32
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40020800 	.word	0x40020800

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
}
 80007b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <Error_Handler+0x8>
	...

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <HAL_MspInit+0x4c>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ca:	4a0f      	ldr	r2, [pc, #60]	; (8000808 <HAL_MspInit+0x4c>)
 80007cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d0:	6453      	str	r3, [r2, #68]	; 0x44
 80007d2:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <HAL_MspInit+0x4c>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <HAL_MspInit+0x4c>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	4a08      	ldr	r2, [pc, #32]	; (8000808 <HAL_MspInit+0x4c>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ec:	6413      	str	r3, [r2, #64]	; 0x40
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_MspInit+0x4c>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800

0800080c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a4c      	ldr	r2, [pc, #304]	; (800095c <HAL_UART_MspInit+0x150>)
 800082a:	4293      	cmp	r3, r2
 800082c:	f040 8091 	bne.w	8000952 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	4b4a      	ldr	r3, [pc, #296]	; (8000960 <HAL_UART_MspInit+0x154>)
 8000836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000838:	4a49      	ldr	r2, [pc, #292]	; (8000960 <HAL_UART_MspInit+0x154>)
 800083a:	f043 0310 	orr.w	r3, r3, #16
 800083e:	6453      	str	r3, [r2, #68]	; 0x44
 8000840:	4b47      	ldr	r3, [pc, #284]	; (8000960 <HAL_UART_MspInit+0x154>)
 8000842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000844:	f003 0310 	and.w	r3, r3, #16
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	4b43      	ldr	r3, [pc, #268]	; (8000960 <HAL_UART_MspInit+0x154>)
 8000852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000854:	4a42      	ldr	r2, [pc, #264]	; (8000960 <HAL_UART_MspInit+0x154>)
 8000856:	f043 0301 	orr.w	r3, r3, #1
 800085a:	6313      	str	r3, [r2, #48]	; 0x30
 800085c:	4b40      	ldr	r3, [pc, #256]	; (8000960 <HAL_UART_MspInit+0x154>)
 800085e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000868:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800086c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000876:	2303      	movs	r3, #3
 8000878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800087a:	2307      	movs	r3, #7
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	4837      	ldr	r0, [pc, #220]	; (8000964 <HAL_UART_MspInit+0x158>)
 8000886:	f000 fee5 	bl	8001654 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800088a:	4b37      	ldr	r3, [pc, #220]	; (8000968 <HAL_UART_MspInit+0x15c>)
 800088c:	4a37      	ldr	r2, [pc, #220]	; (800096c <HAL_UART_MspInit+0x160>)
 800088e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000890:	4b35      	ldr	r3, [pc, #212]	; (8000968 <HAL_UART_MspInit+0x15c>)
 8000892:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000896:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000898:	4b33      	ldr	r3, [pc, #204]	; (8000968 <HAL_UART_MspInit+0x15c>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800089e:	4b32      	ldr	r3, [pc, #200]	; (8000968 <HAL_UART_MspInit+0x15c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008a4:	4b30      	ldr	r3, [pc, #192]	; (8000968 <HAL_UART_MspInit+0x15c>)
 80008a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008aa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008ac:	4b2e      	ldr	r3, [pc, #184]	; (8000968 <HAL_UART_MspInit+0x15c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008b2:	4b2d      	ldr	r3, [pc, #180]	; (8000968 <HAL_UART_MspInit+0x15c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80008b8:	4b2b      	ldr	r3, [pc, #172]	; (8000968 <HAL_UART_MspInit+0x15c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008be:	4b2a      	ldr	r3, [pc, #168]	; (8000968 <HAL_UART_MspInit+0x15c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008c4:	4b28      	ldr	r3, [pc, #160]	; (8000968 <HAL_UART_MspInit+0x15c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80008ca:	4827      	ldr	r0, [pc, #156]	; (8000968 <HAL_UART_MspInit+0x15c>)
 80008cc:	f000 fac0 	bl	8000e50 <HAL_DMA_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80008d6:	f7ff ff6b 	bl	80007b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a22      	ldr	r2, [pc, #136]	; (8000968 <HAL_UART_MspInit+0x15c>)
 80008de:	639a      	str	r2, [r3, #56]	; 0x38
 80008e0:	4a21      	ldr	r2, [pc, #132]	; (8000968 <HAL_UART_MspInit+0x15c>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80008e6:	4b22      	ldr	r3, [pc, #136]	; (8000970 <HAL_UART_MspInit+0x164>)
 80008e8:	4a22      	ldr	r2, [pc, #136]	; (8000974 <HAL_UART_MspInit+0x168>)
 80008ea:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80008ec:	4b20      	ldr	r3, [pc, #128]	; (8000970 <HAL_UART_MspInit+0x164>)
 80008ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008f2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008f4:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <HAL_UART_MspInit+0x164>)
 80008f6:	2240      	movs	r2, #64	; 0x40
 80008f8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008fa:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <HAL_UART_MspInit+0x164>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000900:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <HAL_UART_MspInit+0x164>)
 8000902:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000906:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000908:	4b19      	ldr	r3, [pc, #100]	; (8000970 <HAL_UART_MspInit+0x164>)
 800090a:	2200      	movs	r2, #0
 800090c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <HAL_UART_MspInit+0x164>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000914:	4b16      	ldr	r3, [pc, #88]	; (8000970 <HAL_UART_MspInit+0x164>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <HAL_UART_MspInit+0x164>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000920:	4b13      	ldr	r3, [pc, #76]	; (8000970 <HAL_UART_MspInit+0x164>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000926:	4812      	ldr	r0, [pc, #72]	; (8000970 <HAL_UART_MspInit+0x164>)
 8000928:	f000 fa92 	bl	8000e50 <HAL_DMA_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000932:	f7ff ff3d 	bl	80007b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a0d      	ldr	r2, [pc, #52]	; (8000970 <HAL_UART_MspInit+0x164>)
 800093a:	635a      	str	r2, [r3, #52]	; 0x34
 800093c:	4a0c      	ldr	r2, [pc, #48]	; (8000970 <HAL_UART_MspInit+0x164>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	2100      	movs	r1, #0
 8000946:	2025      	movs	r0, #37	; 0x25
 8000948:	f000 fa4b 	bl	8000de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800094c:	2025      	movs	r0, #37	; 0x25
 800094e:	f000 fa64 	bl	8000e1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000952:	bf00      	nop
 8000954:	3728      	adds	r7, #40	; 0x28
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40011000 	.word	0x40011000
 8000960:	40023800 	.word	0x40023800
 8000964:	40020000 	.word	0x40020000
 8000968:	20000114 	.word	0x20000114
 800096c:	40026440 	.word	0x40026440
 8000970:	20000174 	.word	0x20000174
 8000974:	400264b8 	.word	0x400264b8

08000978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800097c:	e7fe      	b.n	800097c <NMI_Handler+0x4>

0800097e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <HardFault_Handler+0x4>

08000984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <MemManage_Handler+0x4>

0800098a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <BusFault_Handler+0x4>

08000990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <UsageFault_Handler+0x4>

08000996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c4:	f000 f8ee 	bl	8000ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}

080009cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <USART1_IRQHandler+0x10>)
 80009d2:	f003 f971 	bl	8003cb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000d0 	.word	0x200000d0

080009e0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80009e4:	4802      	ldr	r0, [pc, #8]	; (80009f0 <DMA2_Stream2_IRQHandler+0x10>)
 80009e6:	f000 fbcb 	bl	8001180 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000114 	.word	0x20000114

080009f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80009f8:	4802      	ldr	r0, [pc, #8]	; (8000a04 <OTG_FS_IRQHandler+0x10>)
 80009fa:	f001 fa33 	bl	8001e64 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200005b8 	.word	0x200005b8

08000a08 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000a0c:	4802      	ldr	r0, [pc, #8]	; (8000a18 <DMA2_Stream7_IRQHandler+0x10>)
 8000a0e:	f000 fbb7 	bl	8001180 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000174 	.word	0x20000174

08000a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a24:	4a14      	ldr	r2, [pc, #80]	; (8000a78 <_sbrk+0x5c>)
 8000a26:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <_sbrk+0x60>)
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <_sbrk+0x64>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d102      	bne.n	8000a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <_sbrk+0x64>)
 8000a3a:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <_sbrk+0x68>)
 8000a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <_sbrk+0x64>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d207      	bcs.n	8000a5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a4c:	f007 fcc4 	bl	80083d8 <__errno>
 8000a50:	4603      	mov	r3, r0
 8000a52:	220c      	movs	r2, #12
 8000a54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a5a:	e009      	b.n	8000a70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <_sbrk+0x64>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a62:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <_sbrk+0x64>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4413      	add	r3, r2
 8000a6a:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <_sbrk+0x64>)
 8000a6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3718      	adds	r7, #24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20010000 	.word	0x20010000
 8000a7c:	00000400 	.word	0x00000400
 8000a80:	200001d4 	.word	0x200001d4
 8000a84:	200008d0 	.word	0x200008d0

08000a88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <SystemInit+0x20>)
 8000a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a92:	4a05      	ldr	r2, [pc, #20]	; (8000aa8 <SystemInit+0x20>)
 8000a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ab0:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ab2:	490e      	ldr	r1, [pc, #56]	; (8000aec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ab4:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab8:	e002      	b.n	8000ac0 <LoopCopyDataInit>

08000aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000abe:	3304      	adds	r3, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac4:	d3f9      	bcc.n	8000aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac6:	4a0b      	ldr	r2, [pc, #44]	; (8000af4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ac8:	4c0b      	ldr	r4, [pc, #44]	; (8000af8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000acc:	e001      	b.n	8000ad2 <LoopFillZerobss>

08000ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad0:	3204      	adds	r2, #4

08000ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad4:	d3fb      	bcc.n	8000ace <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ad6:	f7ff ffd7 	bl	8000a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ada:	f007 fc83 	bl	80083e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ade:	f7ff fd33 	bl	8000548 <main>
  bx  lr    
 8000ae2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ae4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aec:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000af0:	080086c4 	.word	0x080086c4
  ldr r2, =_sbss
 8000af4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000af8:	200008cc 	.word	0x200008cc

08000afc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC_IRQHandler>
	...

08000b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b04:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <HAL_Init+0x40>)
 8000b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b10:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <HAL_Init+0x40>)
 8000b16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <HAL_Init+0x40>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <HAL_Init+0x40>)
 8000b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b28:	2003      	movs	r0, #3
 8000b2a:	f000 f94f 	bl	8000dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2e:	200f      	movs	r0, #15
 8000b30:	f000 f808 	bl	8000b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b34:	f7ff fe42 	bl	80007bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023c00 	.word	0x40023c00

08000b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_InitTick+0x54>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_InitTick+0x58>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	4619      	mov	r1, r3
 8000b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 f967 	bl	8000e36 <HAL_SYSTICK_Config>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e00e      	b.n	8000b90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2b0f      	cmp	r3, #15
 8000b76:	d80a      	bhi.n	8000b8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b80:	f000 f92f 	bl	8000de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b84:	4a06      	ldr	r2, [pc, #24]	; (8000ba0 <HAL_InitTick+0x5c>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e000      	b.n	8000b90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	20000004 	.word	0x20000004

08000ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_IncTick+0x20>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_IncTick+0x24>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <HAL_IncTick+0x24>)
 8000bb6:	6013      	str	r3, [r2, #0]
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	200001d8 	.word	0x200001d8

08000bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <HAL_GetTick+0x14>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	200001d8 	.word	0x200001d8

08000be4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bec:	f7ff ffee 	bl	8000bcc <HAL_GetTick>
 8000bf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bfc:	d005      	beq.n	8000c0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <HAL_Delay+0x44>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	461a      	mov	r2, r3
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	4413      	add	r3, r2
 8000c08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c0a:	bf00      	nop
 8000c0c:	f7ff ffde 	bl	8000bcc <HAL_GetTick>
 8000c10:	4602      	mov	r2, r0
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d8f7      	bhi.n	8000c0c <HAL_Delay+0x28>
  {
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	bf00      	nop
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000008 	.word	0x20000008

08000c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <__NVIC_SetPriorityGrouping+0x44>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5e:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <__NVIC_SetPriorityGrouping+0x44>)
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	60d3      	str	r3, [r2, #12]
}
 8000c64:	bf00      	nop
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <__NVIC_GetPriorityGrouping+0x18>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	0a1b      	lsrs	r3, r3, #8
 8000c7e:	f003 0307 	and.w	r3, r3, #7
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	db0b      	blt.n	8000cba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	f003 021f 	and.w	r2, r3, #31
 8000ca8:	4907      	ldr	r1, [pc, #28]	; (8000cc8 <__NVIC_EnableIRQ+0x38>)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	095b      	lsrs	r3, r3, #5
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000e100 	.word	0xe000e100

08000ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	6039      	str	r1, [r7, #0]
 8000cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	db0a      	blt.n	8000cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	490c      	ldr	r1, [pc, #48]	; (8000d18 <__NVIC_SetPriority+0x4c>)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	0112      	lsls	r2, r2, #4
 8000cec:	b2d2      	uxtb	r2, r2
 8000cee:	440b      	add	r3, r1
 8000cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf4:	e00a      	b.n	8000d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4908      	ldr	r1, [pc, #32]	; (8000d1c <__NVIC_SetPriority+0x50>)
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	f003 030f 	and.w	r3, r3, #15
 8000d02:	3b04      	subs	r3, #4
 8000d04:	0112      	lsls	r2, r2, #4
 8000d06:	b2d2      	uxtb	r2, r2
 8000d08:	440b      	add	r3, r1
 8000d0a:	761a      	strb	r2, [r3, #24]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000e100 	.word	0xe000e100
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b089      	sub	sp, #36	; 0x24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	f1c3 0307 	rsb	r3, r3, #7
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	bf28      	it	cs
 8000d3e:	2304      	movcs	r3, #4
 8000d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3304      	adds	r3, #4
 8000d46:	2b06      	cmp	r3, #6
 8000d48:	d902      	bls.n	8000d50 <NVIC_EncodePriority+0x30>
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3b03      	subs	r3, #3
 8000d4e:	e000      	b.n	8000d52 <NVIC_EncodePriority+0x32>
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43da      	mvns	r2, r3
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	401a      	ands	r2, r3
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d72:	43d9      	mvns	r1, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	4313      	orrs	r3, r2
         );
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3724      	adds	r7, #36	; 0x24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d98:	d301      	bcc.n	8000d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00f      	b.n	8000dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <SysTick_Config+0x40>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da6:	210f      	movs	r1, #15
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dac:	f7ff ff8e 	bl	8000ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <SysTick_Config+0x40>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db6:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <SysTick_Config+0x40>)
 8000db8:	2207      	movs	r2, #7
 8000dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	e000e010 	.word	0xe000e010

08000dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff ff29 	bl	8000c2c <__NVIC_SetPriorityGrouping>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b086      	sub	sp, #24
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
 8000dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df4:	f7ff ff3e 	bl	8000c74 <__NVIC_GetPriorityGrouping>
 8000df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	68b9      	ldr	r1, [r7, #8]
 8000dfe:	6978      	ldr	r0, [r7, #20]
 8000e00:	f7ff ff8e 	bl	8000d20 <NVIC_EncodePriority>
 8000e04:	4602      	mov	r2, r0
 8000e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff5d 	bl	8000ccc <__NVIC_SetPriority>
}
 8000e12:	bf00      	nop
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff31 	bl	8000c90 <__NVIC_EnableIRQ>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ffa2 	bl	8000d88 <SysTick_Config>
 8000e44:	4603      	mov	r3, r0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e5c:	f7ff feb6 	bl	8000bcc <HAL_GetTick>
 8000e60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d101      	bne.n	8000e6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e099      	b.n	8000fa0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2202      	movs	r2, #2
 8000e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f022 0201 	bic.w	r2, r2, #1
 8000e8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e8c:	e00f      	b.n	8000eae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e8e:	f7ff fe9d 	bl	8000bcc <HAL_GetTick>
 8000e92:	4602      	mov	r2, r0
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	2b05      	cmp	r3, #5
 8000e9a:	d908      	bls.n	8000eae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2220      	movs	r2, #32
 8000ea0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e078      	b.n	8000fa0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1e8      	bne.n	8000e8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <HAL_DMA_Init+0x158>)
 8000ec8:	4013      	ands	r3, r2
 8000eca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	691b      	ldr	r3, [r3, #16]
 8000ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ee6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ef2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a1b      	ldr	r3, [r3, #32]
 8000ef8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f04:	2b04      	cmp	r3, #4
 8000f06:	d107      	bne.n	8000f18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f10:	4313      	orrs	r3, r2
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	f023 0307 	bic.w	r3, r3, #7
 8000f2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f34:	697a      	ldr	r2, [r7, #20]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	d117      	bne.n	8000f72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d00e      	beq.n	8000f72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 fb01 	bl	800155c <DMA_CheckFifoParam>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d008      	beq.n	8000f72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2240      	movs	r2, #64	; 0x40
 8000f64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e016      	b.n	8000fa0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 fab8 	bl	80014f0 <DMA_CalcBaseAndBitshift>
 8000f80:	4603      	mov	r3, r0
 8000f82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f88:	223f      	movs	r2, #63	; 0x3f
 8000f8a:	409a      	lsls	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	f010803f 	.word	0xf010803f

08000fac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d101      	bne.n	8000fd2 <HAL_DMA_Start_IT+0x26>
 8000fce:	2302      	movs	r3, #2
 8000fd0:	e040      	b.n	8001054 <HAL_DMA_Start_IT+0xa8>
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d12f      	bne.n	8001046 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2202      	movs	r2, #2
 8000fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f000 fa4a 	bl	8001494 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001004:	223f      	movs	r2, #63	; 0x3f
 8001006:	409a      	lsls	r2, r3
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f042 0216 	orr.w	r2, r2, #22
 800101a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	2b00      	cmp	r3, #0
 8001022:	d007      	beq.n	8001034 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f042 0208 	orr.w	r2, r2, #8
 8001032:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f042 0201 	orr.w	r2, r2, #1
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	e005      	b.n	8001052 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800104e:	2302      	movs	r3, #2
 8001050:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001052:	7dfb      	ldrb	r3, [r7, #23]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001068:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800106a:	f7ff fdaf 	bl	8000bcc <HAL_GetTick>
 800106e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d008      	beq.n	800108e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2280      	movs	r2, #128	; 0x80
 8001080:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e052      	b.n	8001134 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f022 0216 	bic.w	r2, r2, #22
 800109c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	695a      	ldr	r2, [r3, #20]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d103      	bne.n	80010be <HAL_DMA_Abort+0x62>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d007      	beq.n	80010ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f022 0208 	bic.w	r2, r2, #8
 80010cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 0201 	bic.w	r2, r2, #1
 80010dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010de:	e013      	b.n	8001108 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010e0:	f7ff fd74 	bl	8000bcc <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b05      	cmp	r3, #5
 80010ec:	d90c      	bls.n	8001108 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2220      	movs	r2, #32
 80010f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2203      	movs	r2, #3
 80010f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	e015      	b.n	8001134 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1e4      	bne.n	80010e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800111a:	223f      	movs	r2, #63	; 0x3f
 800111c:	409a      	lsls	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2201      	movs	r2, #1
 8001126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
}
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d004      	beq.n	800115a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2280      	movs	r2, #128	; 0x80
 8001154:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e00c      	b.n	8001174 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2205      	movs	r2, #5
 800115e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 0201 	bic.w	r2, r2, #1
 8001170:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001188:	2300      	movs	r3, #0
 800118a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800118c:	4b8e      	ldr	r3, [pc, #568]	; (80013c8 <HAL_DMA_IRQHandler+0x248>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a8e      	ldr	r2, [pc, #568]	; (80013cc <HAL_DMA_IRQHandler+0x24c>)
 8001192:	fba2 2303 	umull	r2, r3, r2, r3
 8001196:	0a9b      	lsrs	r3, r3, #10
 8001198:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011aa:	2208      	movs	r2, #8
 80011ac:	409a      	lsls	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4013      	ands	r3, r2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d01a      	beq.n	80011ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d013      	beq.n	80011ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f022 0204 	bic.w	r2, r2, #4
 80011d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d8:	2208      	movs	r2, #8
 80011da:	409a      	lsls	r2, r3
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011e4:	f043 0201 	orr.w	r2, r3, #1
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f0:	2201      	movs	r2, #1
 80011f2:	409a      	lsls	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4013      	ands	r3, r2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d012      	beq.n	8001222 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001206:	2b00      	cmp	r3, #0
 8001208:	d00b      	beq.n	8001222 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800120e:	2201      	movs	r2, #1
 8001210:	409a      	lsls	r2, r3
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800121a:	f043 0202 	orr.w	r2, r3, #2
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001226:	2204      	movs	r2, #4
 8001228:	409a      	lsls	r2, r3
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4013      	ands	r3, r2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d012      	beq.n	8001258 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d00b      	beq.n	8001258 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001244:	2204      	movs	r2, #4
 8001246:	409a      	lsls	r2, r3
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001250:	f043 0204 	orr.w	r2, r3, #4
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800125c:	2210      	movs	r2, #16
 800125e:	409a      	lsls	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4013      	ands	r3, r2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d043      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	2b00      	cmp	r3, #0
 8001274:	d03c      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800127a:	2210      	movs	r2, #16
 800127c:	409a      	lsls	r2, r3
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d018      	beq.n	80012c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d108      	bne.n	80012b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d024      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	4798      	blx	r3
 80012ae:	e01f      	b.n	80012f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d01b      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	4798      	blx	r3
 80012c0:	e016      	b.n	80012f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d107      	bne.n	80012e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0208 	bic.w	r2, r2, #8
 80012de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f4:	2220      	movs	r2, #32
 80012f6:	409a      	lsls	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4013      	ands	r3, r2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 808f 	beq.w	8001420 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0310 	and.w	r3, r3, #16
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 8087 	beq.w	8001420 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001316:	2220      	movs	r2, #32
 8001318:	409a      	lsls	r2, r3
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b05      	cmp	r3, #5
 8001328:	d136      	bne.n	8001398 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 0216 	bic.w	r2, r2, #22
 8001338:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	695a      	ldr	r2, [r3, #20]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001348:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	2b00      	cmp	r3, #0
 8001350:	d103      	bne.n	800135a <HAL_DMA_IRQHandler+0x1da>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001356:	2b00      	cmp	r3, #0
 8001358:	d007      	beq.n	800136a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 0208 	bic.w	r2, r2, #8
 8001368:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800136e:	223f      	movs	r2, #63	; 0x3f
 8001370:	409a      	lsls	r2, r3
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2201      	movs	r2, #1
 800137a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800138a:	2b00      	cmp	r3, #0
 800138c:	d07e      	beq.n	800148c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	4798      	blx	r3
        }
        return;
 8001396:	e079      	b.n	800148c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d01d      	beq.n	80013e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d10d      	bne.n	80013d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d031      	beq.n	8001420 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	4798      	blx	r3
 80013c4:	e02c      	b.n	8001420 <HAL_DMA_IRQHandler+0x2a0>
 80013c6:	bf00      	nop
 80013c8:	20000000 	.word	0x20000000
 80013cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d023      	beq.n	8001420 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	4798      	blx	r3
 80013e0:	e01e      	b.n	8001420 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d10f      	bne.n	8001410 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0210 	bic.w	r2, r2, #16
 80013fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2201      	movs	r2, #1
 8001404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001424:	2b00      	cmp	r3, #0
 8001426:	d032      	beq.n	800148e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	2b00      	cmp	r3, #0
 8001432:	d022      	beq.n	800147a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2205      	movs	r2, #5
 8001438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f022 0201 	bic.w	r2, r2, #1
 800144a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	3301      	adds	r3, #1
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	429a      	cmp	r2, r3
 8001456:	d307      	bcc.n	8001468 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f2      	bne.n	800144c <HAL_DMA_IRQHandler+0x2cc>
 8001466:	e000      	b.n	800146a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001468:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2201      	movs	r2, #1
 800146e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147e:	2b00      	cmp	r3, #0
 8001480:	d005      	beq.n	800148e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	4798      	blx	r3
 800148a:	e000      	b.n	800148e <HAL_DMA_IRQHandler+0x30e>
        return;
 800148c:	bf00      	nop
    }
  }
}
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
 80014a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	2b40      	cmp	r3, #64	; 0x40
 80014c0:	d108      	bne.n	80014d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80014d2:	e007      	b.n	80014e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68ba      	ldr	r2, [r7, #8]
 80014da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	60da      	str	r2, [r3, #12]
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	3b10      	subs	r3, #16
 8001500:	4a14      	ldr	r2, [pc, #80]	; (8001554 <DMA_CalcBaseAndBitshift+0x64>)
 8001502:	fba2 2303 	umull	r2, r3, r2, r3
 8001506:	091b      	lsrs	r3, r3, #4
 8001508:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800150a:	4a13      	ldr	r2, [pc, #76]	; (8001558 <DMA_CalcBaseAndBitshift+0x68>)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4413      	add	r3, r2
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	461a      	mov	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b03      	cmp	r3, #3
 800151c:	d909      	bls.n	8001532 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001526:	f023 0303 	bic.w	r3, r3, #3
 800152a:	1d1a      	adds	r2, r3, #4
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	659a      	str	r2, [r3, #88]	; 0x58
 8001530:	e007      	b.n	8001542 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800153a:	f023 0303 	bic.w	r3, r3, #3
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001546:	4618      	mov	r0, r3
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	aaaaaaab 	.word	0xaaaaaaab
 8001558:	080086ac 	.word	0x080086ac

0800155c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001564:	2300      	movs	r3, #0
 8001566:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d11f      	bne.n	80015b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	2b03      	cmp	r3, #3
 800157a:	d856      	bhi.n	800162a <DMA_CheckFifoParam+0xce>
 800157c:	a201      	add	r2, pc, #4	; (adr r2, 8001584 <DMA_CheckFifoParam+0x28>)
 800157e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001582:	bf00      	nop
 8001584:	08001595 	.word	0x08001595
 8001588:	080015a7 	.word	0x080015a7
 800158c:	08001595 	.word	0x08001595
 8001590:	0800162b 	.word	0x0800162b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001598:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d046      	beq.n	800162e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015a4:	e043      	b.n	800162e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015ae:	d140      	bne.n	8001632 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015b4:	e03d      	b.n	8001632 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015be:	d121      	bne.n	8001604 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	d837      	bhi.n	8001636 <DMA_CheckFifoParam+0xda>
 80015c6:	a201      	add	r2, pc, #4	; (adr r2, 80015cc <DMA_CheckFifoParam+0x70>)
 80015c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015cc:	080015dd 	.word	0x080015dd
 80015d0:	080015e3 	.word	0x080015e3
 80015d4:	080015dd 	.word	0x080015dd
 80015d8:	080015f5 	.word	0x080015f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]
      break;
 80015e0:	e030      	b.n	8001644 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d025      	beq.n	800163a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015f2:	e022      	b.n	800163a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015fc:	d11f      	bne.n	800163e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001602:	e01c      	b.n	800163e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	2b02      	cmp	r3, #2
 8001608:	d903      	bls.n	8001612 <DMA_CheckFifoParam+0xb6>
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	2b03      	cmp	r3, #3
 800160e:	d003      	beq.n	8001618 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001610:	e018      	b.n	8001644 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	73fb      	strb	r3, [r7, #15]
      break;
 8001616:	e015      	b.n	8001644 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00e      	beq.n	8001642 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	73fb      	strb	r3, [r7, #15]
      break;
 8001628:	e00b      	b.n	8001642 <DMA_CheckFifoParam+0xe6>
      break;
 800162a:	bf00      	nop
 800162c:	e00a      	b.n	8001644 <DMA_CheckFifoParam+0xe8>
      break;
 800162e:	bf00      	nop
 8001630:	e008      	b.n	8001644 <DMA_CheckFifoParam+0xe8>
      break;
 8001632:	bf00      	nop
 8001634:	e006      	b.n	8001644 <DMA_CheckFifoParam+0xe8>
      break;
 8001636:	bf00      	nop
 8001638:	e004      	b.n	8001644 <DMA_CheckFifoParam+0xe8>
      break;
 800163a:	bf00      	nop
 800163c:	e002      	b.n	8001644 <DMA_CheckFifoParam+0xe8>
      break;   
 800163e:	bf00      	nop
 8001640:	e000      	b.n	8001644 <DMA_CheckFifoParam+0xe8>
      break;
 8001642:	bf00      	nop
    }
  } 
  
  return status; 
 8001644:	7bfb      	ldrb	r3, [r7, #15]
}
 8001646:	4618      	mov	r0, r3
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop

08001654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	; 0x24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001666:	2300      	movs	r3, #0
 8001668:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
 800166e:	e159      	b.n	8001924 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001670:	2201      	movs	r2, #1
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	429a      	cmp	r2, r3
 800168a:	f040 8148 	bne.w	800191e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	2b01      	cmp	r3, #1
 8001698:	d005      	beq.n	80016a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d130      	bne.n	8001708 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	2203      	movs	r2, #3
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016dc:	2201      	movs	r2, #1
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	091b      	lsrs	r3, r3, #4
 80016f2:	f003 0201 	and.w	r2, r3, #1
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	2b03      	cmp	r3, #3
 8001712:	d017      	beq.n	8001744 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	2203      	movs	r2, #3
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d123      	bne.n	8001798 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	08da      	lsrs	r2, r3, #3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3208      	adds	r2, #8
 8001758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	220f      	movs	r2, #15
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	691a      	ldr	r2, [r3, #16]
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	08da      	lsrs	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3208      	adds	r2, #8
 8001792:	69b9      	ldr	r1, [r7, #24]
 8001794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	2203      	movs	r2, #3
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0203 	and.w	r2, r3, #3
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 80a2 	beq.w	800191e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b57      	ldr	r3, [pc, #348]	; (800193c <HAL_GPIO_Init+0x2e8>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	4a56      	ldr	r2, [pc, #344]	; (800193c <HAL_GPIO_Init+0x2e8>)
 80017e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ea:	4b54      	ldr	r3, [pc, #336]	; (800193c <HAL_GPIO_Init+0x2e8>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017f6:	4a52      	ldr	r2, [pc, #328]	; (8001940 <HAL_GPIO_Init+0x2ec>)
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	089b      	lsrs	r3, r3, #2
 80017fc:	3302      	adds	r3, #2
 80017fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	220f      	movs	r2, #15
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a49      	ldr	r2, [pc, #292]	; (8001944 <HAL_GPIO_Init+0x2f0>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d019      	beq.n	8001856 <HAL_GPIO_Init+0x202>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a48      	ldr	r2, [pc, #288]	; (8001948 <HAL_GPIO_Init+0x2f4>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d013      	beq.n	8001852 <HAL_GPIO_Init+0x1fe>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a47      	ldr	r2, [pc, #284]	; (800194c <HAL_GPIO_Init+0x2f8>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d00d      	beq.n	800184e <HAL_GPIO_Init+0x1fa>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a46      	ldr	r2, [pc, #280]	; (8001950 <HAL_GPIO_Init+0x2fc>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d007      	beq.n	800184a <HAL_GPIO_Init+0x1f6>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a45      	ldr	r2, [pc, #276]	; (8001954 <HAL_GPIO_Init+0x300>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d101      	bne.n	8001846 <HAL_GPIO_Init+0x1f2>
 8001842:	2304      	movs	r3, #4
 8001844:	e008      	b.n	8001858 <HAL_GPIO_Init+0x204>
 8001846:	2307      	movs	r3, #7
 8001848:	e006      	b.n	8001858 <HAL_GPIO_Init+0x204>
 800184a:	2303      	movs	r3, #3
 800184c:	e004      	b.n	8001858 <HAL_GPIO_Init+0x204>
 800184e:	2302      	movs	r3, #2
 8001850:	e002      	b.n	8001858 <HAL_GPIO_Init+0x204>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <HAL_GPIO_Init+0x204>
 8001856:	2300      	movs	r3, #0
 8001858:	69fa      	ldr	r2, [r7, #28]
 800185a:	f002 0203 	and.w	r2, r2, #3
 800185e:	0092      	lsls	r2, r2, #2
 8001860:	4093      	lsls	r3, r2
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4313      	orrs	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001868:	4935      	ldr	r1, [pc, #212]	; (8001940 <HAL_GPIO_Init+0x2ec>)
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	089b      	lsrs	r3, r3, #2
 800186e:	3302      	adds	r3, #2
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001876:	4b38      	ldr	r3, [pc, #224]	; (8001958 <HAL_GPIO_Init+0x304>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800189a:	4a2f      	ldr	r2, [pc, #188]	; (8001958 <HAL_GPIO_Init+0x304>)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018a0:	4b2d      	ldr	r3, [pc, #180]	; (8001958 <HAL_GPIO_Init+0x304>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018c4:	4a24      	ldr	r2, [pc, #144]	; (8001958 <HAL_GPIO_Init+0x304>)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018ca:	4b23      	ldr	r3, [pc, #140]	; (8001958 <HAL_GPIO_Init+0x304>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018ee:	4a1a      	ldr	r2, [pc, #104]	; (8001958 <HAL_GPIO_Init+0x304>)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018f4:	4b18      	ldr	r3, [pc, #96]	; (8001958 <HAL_GPIO_Init+0x304>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001918:	4a0f      	ldr	r2, [pc, #60]	; (8001958 <HAL_GPIO_Init+0x304>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3301      	adds	r3, #1
 8001922:	61fb      	str	r3, [r7, #28]
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	2b0f      	cmp	r3, #15
 8001928:	f67f aea2 	bls.w	8001670 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	3724      	adds	r7, #36	; 0x24
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800
 8001940:	40013800 	.word	0x40013800
 8001944:	40020000 	.word	0x40020000
 8001948:	40020400 	.word	0x40020400
 800194c:	40020800 	.word	0x40020800
 8001950:	40020c00 	.word	0x40020c00
 8001954:	40021000 	.word	0x40021000
 8001958:	40013c00 	.word	0x40013c00

0800195c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
 8001968:	4613      	mov	r3, r2
 800196a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800196c:	787b      	ldrb	r3, [r7, #1]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001972:	887a      	ldrh	r2, [r7, #2]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001978:	e003      	b.n	8001982 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800197a:	887b      	ldrh	r3, [r7, #2]
 800197c:	041a      	lsls	r2, r3, #16
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	619a      	str	r2, [r3, #24]
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800198e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001990:	b08f      	sub	sp, #60	; 0x3c
 8001992:	af0a      	add	r7, sp, #40	; 0x28
 8001994:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e054      	b.n	8001a4a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d106      	bne.n	80019c0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f006 fa96 	bl	8007eec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2203      	movs	r2, #3
 80019c4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d102      	bne.n	80019da <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f003 fac4 	bl	8004f6c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	603b      	str	r3, [r7, #0]
 80019ea:	687e      	ldr	r6, [r7, #4]
 80019ec:	466d      	mov	r5, sp
 80019ee:	f106 0410 	add.w	r4, r6, #16
 80019f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a02:	1d33      	adds	r3, r6, #4
 8001a04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a06:	6838      	ldr	r0, [r7, #0]
 8001a08:	f003 fa3e 	bl	8004e88 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2101      	movs	r1, #1
 8001a12:	4618      	mov	r0, r3
 8001a14:	f003 fabb 	bl	8004f8e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	603b      	str	r3, [r7, #0]
 8001a1e:	687e      	ldr	r6, [r7, #4]
 8001a20:	466d      	mov	r5, sp
 8001a22:	f106 0410 	add.w	r4, r6, #16
 8001a26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a32:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a36:	1d33      	adds	r3, r6, #4
 8001a38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a3a:	6838      	ldr	r0, [r7, #0]
 8001a3c:	f003 fc44 	bl	80052c8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a52 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001a52:	b590      	push	{r4, r7, lr}
 8001a54:	b089      	sub	sp, #36	; 0x24
 8001a56:	af04      	add	r7, sp, #16
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	4608      	mov	r0, r1
 8001a5c:	4611      	mov	r1, r2
 8001a5e:	461a      	mov	r2, r3
 8001a60:	4603      	mov	r3, r0
 8001a62:	70fb      	strb	r3, [r7, #3]
 8001a64:	460b      	mov	r3, r1
 8001a66:	70bb      	strb	r3, [r7, #2]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d101      	bne.n	8001a7a <HAL_HCD_HC_Init+0x28>
 8001a76:	2302      	movs	r3, #2
 8001a78:	e076      	b.n	8001b68 <HAL_HCD_HC_Init+0x116>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001a82:	78fb      	ldrb	r3, [r7, #3]
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	212c      	movs	r1, #44	; 0x2c
 8001a88:	fb01 f303 	mul.w	r3, r1, r3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	333d      	adds	r3, #61	; 0x3d
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	212c      	movs	r1, #44	; 0x2c
 8001a9a:	fb01 f303 	mul.w	r3, r1, r3
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3338      	adds	r3, #56	; 0x38
 8001aa2:	787a      	ldrb	r2, [r7, #1]
 8001aa4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001aa6:	78fb      	ldrb	r3, [r7, #3]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	212c      	movs	r1, #44	; 0x2c
 8001aac:	fb01 f303 	mul.w	r3, r1, r3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3340      	adds	r3, #64	; 0x40
 8001ab4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001ab6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	212c      	movs	r1, #44	; 0x2c
 8001abe:	fb01 f303 	mul.w	r3, r1, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	3339      	adds	r3, #57	; 0x39
 8001ac6:	78fa      	ldrb	r2, [r7, #3]
 8001ac8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001aca:	78fb      	ldrb	r3, [r7, #3]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	212c      	movs	r1, #44	; 0x2c
 8001ad0:	fb01 f303 	mul.w	r3, r1, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	333f      	adds	r3, #63	; 0x3f
 8001ad8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001adc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001ade:	78fb      	ldrb	r3, [r7, #3]
 8001ae0:	78ba      	ldrb	r2, [r7, #2]
 8001ae2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ae6:	b2d0      	uxtb	r0, r2
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	212c      	movs	r1, #44	; 0x2c
 8001aec:	fb01 f303 	mul.w	r3, r1, r3
 8001af0:	4413      	add	r3, r2
 8001af2:	333a      	adds	r3, #58	; 0x3a
 8001af4:	4602      	mov	r2, r0
 8001af6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001af8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	da09      	bge.n	8001b14 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	212c      	movs	r1, #44	; 0x2c
 8001b06:	fb01 f303 	mul.w	r3, r1, r3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	333b      	adds	r3, #59	; 0x3b
 8001b0e:	2201      	movs	r2, #1
 8001b10:	701a      	strb	r2, [r3, #0]
 8001b12:	e008      	b.n	8001b26 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	212c      	movs	r1, #44	; 0x2c
 8001b1a:	fb01 f303 	mul.w	r3, r1, r3
 8001b1e:	4413      	add	r3, r2
 8001b20:	333b      	adds	r3, #59	; 0x3b
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001b26:	78fb      	ldrb	r3, [r7, #3]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	212c      	movs	r1, #44	; 0x2c
 8001b2c:	fb01 f303 	mul.w	r3, r1, r3
 8001b30:	4413      	add	r3, r2
 8001b32:	333c      	adds	r3, #60	; 0x3c
 8001b34:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b38:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	787c      	ldrb	r4, [r7, #1]
 8001b40:	78ba      	ldrb	r2, [r7, #2]
 8001b42:	78f9      	ldrb	r1, [r7, #3]
 8001b44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b46:	9302      	str	r3, [sp, #8]
 8001b48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b4c:	9301      	str	r3, [sp, #4]
 8001b4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	4623      	mov	r3, r4
 8001b56:	f003 fd3d 	bl	80055d4 <USB_HC_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd90      	pop	{r4, r7, pc}

08001b70 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d101      	bne.n	8001b8e <HAL_HCD_HC_Halt+0x1e>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e00f      	b.n	8001bae <HAL_HCD_HC_Halt+0x3e>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	78fa      	ldrb	r2, [r7, #3]
 8001b9c:	4611      	mov	r1, r2
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f003 ff8d 	bl	8005abe <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	4608      	mov	r0, r1
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	70fb      	strb	r3, [r7, #3]
 8001bca:	460b      	mov	r3, r1
 8001bcc:	70bb      	strb	r3, [r7, #2]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001bd2:	78fb      	ldrb	r3, [r7, #3]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	212c      	movs	r1, #44	; 0x2c
 8001bd8:	fb01 f303 	mul.w	r3, r1, r3
 8001bdc:	4413      	add	r3, r2
 8001bde:	333b      	adds	r3, #59	; 0x3b
 8001be0:	78ba      	ldrb	r2, [r7, #2]
 8001be2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	212c      	movs	r1, #44	; 0x2c
 8001bea:	fb01 f303 	mul.w	r3, r1, r3
 8001bee:	4413      	add	r3, r2
 8001bf0:	333f      	adds	r3, #63	; 0x3f
 8001bf2:	787a      	ldrb	r2, [r7, #1]
 8001bf4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001bf6:	7c3b      	ldrb	r3, [r7, #16]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d112      	bne.n	8001c22 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	212c      	movs	r1, #44	; 0x2c
 8001c02:	fb01 f303 	mul.w	r3, r1, r3
 8001c06:	4413      	add	r3, r2
 8001c08:	3342      	adds	r3, #66	; 0x42
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	212c      	movs	r1, #44	; 0x2c
 8001c14:	fb01 f303 	mul.w	r3, r1, r3
 8001c18:	4413      	add	r3, r2
 8001c1a:	333d      	adds	r3, #61	; 0x3d
 8001c1c:	7f3a      	ldrb	r2, [r7, #28]
 8001c1e:	701a      	strb	r2, [r3, #0]
 8001c20:	e008      	b.n	8001c34 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c22:	78fb      	ldrb	r3, [r7, #3]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	212c      	movs	r1, #44	; 0x2c
 8001c28:	fb01 f303 	mul.w	r3, r1, r3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3342      	adds	r3, #66	; 0x42
 8001c30:	2202      	movs	r2, #2
 8001c32:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001c34:	787b      	ldrb	r3, [r7, #1]
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	f200 80c6 	bhi.w	8001dc8 <HAL_HCD_HC_SubmitRequest+0x210>
 8001c3c:	a201      	add	r2, pc, #4	; (adr r2, 8001c44 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c42:	bf00      	nop
 8001c44:	08001c55 	.word	0x08001c55
 8001c48:	08001db5 	.word	0x08001db5
 8001c4c:	08001cb9 	.word	0x08001cb9
 8001c50:	08001d37 	.word	0x08001d37
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001c54:	7c3b      	ldrb	r3, [r7, #16]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	f040 80b8 	bne.w	8001dcc <HAL_HCD_HC_SubmitRequest+0x214>
 8001c5c:	78bb      	ldrb	r3, [r7, #2]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f040 80b4 	bne.w	8001dcc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001c64:	8b3b      	ldrh	r3, [r7, #24]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d108      	bne.n	8001c7c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	212c      	movs	r1, #44	; 0x2c
 8001c70:	fb01 f303 	mul.w	r3, r1, r3
 8001c74:	4413      	add	r3, r2
 8001c76:	3355      	adds	r3, #85	; 0x55
 8001c78:	2201      	movs	r2, #1
 8001c7a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c7c:	78fb      	ldrb	r3, [r7, #3]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	212c      	movs	r1, #44	; 0x2c
 8001c82:	fb01 f303 	mul.w	r3, r1, r3
 8001c86:	4413      	add	r3, r2
 8001c88:	3355      	adds	r3, #85	; 0x55
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d109      	bne.n	8001ca4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	212c      	movs	r1, #44	; 0x2c
 8001c96:	fb01 f303 	mul.w	r3, r1, r3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3342      	adds	r3, #66	; 0x42
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001ca2:	e093      	b.n	8001dcc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ca4:	78fb      	ldrb	r3, [r7, #3]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	212c      	movs	r1, #44	; 0x2c
 8001caa:	fb01 f303 	mul.w	r3, r1, r3
 8001cae:	4413      	add	r3, r2
 8001cb0:	3342      	adds	r3, #66	; 0x42
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	701a      	strb	r2, [r3, #0]
      break;
 8001cb6:	e089      	b.n	8001dcc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001cb8:	78bb      	ldrb	r3, [r7, #2]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d11d      	bne.n	8001cfa <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001cbe:	78fb      	ldrb	r3, [r7, #3]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	212c      	movs	r1, #44	; 0x2c
 8001cc4:	fb01 f303 	mul.w	r3, r1, r3
 8001cc8:	4413      	add	r3, r2
 8001cca:	3355      	adds	r3, #85	; 0x55
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d109      	bne.n	8001ce6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	212c      	movs	r1, #44	; 0x2c
 8001cd8:	fb01 f303 	mul.w	r3, r1, r3
 8001cdc:	4413      	add	r3, r2
 8001cde:	3342      	adds	r3, #66	; 0x42
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001ce4:	e073      	b.n	8001dce <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ce6:	78fb      	ldrb	r3, [r7, #3]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	212c      	movs	r1, #44	; 0x2c
 8001cec:	fb01 f303 	mul.w	r3, r1, r3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3342      	adds	r3, #66	; 0x42
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	701a      	strb	r2, [r3, #0]
      break;
 8001cf8:	e069      	b.n	8001dce <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cfa:	78fb      	ldrb	r3, [r7, #3]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	212c      	movs	r1, #44	; 0x2c
 8001d00:	fb01 f303 	mul.w	r3, r1, r3
 8001d04:	4413      	add	r3, r2
 8001d06:	3354      	adds	r3, #84	; 0x54
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d109      	bne.n	8001d22 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d0e:	78fb      	ldrb	r3, [r7, #3]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	212c      	movs	r1, #44	; 0x2c
 8001d14:	fb01 f303 	mul.w	r3, r1, r3
 8001d18:	4413      	add	r3, r2
 8001d1a:	3342      	adds	r3, #66	; 0x42
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
      break;
 8001d20:	e055      	b.n	8001dce <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d22:	78fb      	ldrb	r3, [r7, #3]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	212c      	movs	r1, #44	; 0x2c
 8001d28:	fb01 f303 	mul.w	r3, r1, r3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	3342      	adds	r3, #66	; 0x42
 8001d30:	2202      	movs	r2, #2
 8001d32:	701a      	strb	r2, [r3, #0]
      break;
 8001d34:	e04b      	b.n	8001dce <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001d36:	78bb      	ldrb	r3, [r7, #2]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d11d      	bne.n	8001d78 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	212c      	movs	r1, #44	; 0x2c
 8001d42:	fb01 f303 	mul.w	r3, r1, r3
 8001d46:	4413      	add	r3, r2
 8001d48:	3355      	adds	r3, #85	; 0x55
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d109      	bne.n	8001d64 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	212c      	movs	r1, #44	; 0x2c
 8001d56:	fb01 f303 	mul.w	r3, r1, r3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3342      	adds	r3, #66	; 0x42
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d62:	e034      	b.n	8001dce <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	212c      	movs	r1, #44	; 0x2c
 8001d6a:	fb01 f303 	mul.w	r3, r1, r3
 8001d6e:	4413      	add	r3, r2
 8001d70:	3342      	adds	r3, #66	; 0x42
 8001d72:	2202      	movs	r2, #2
 8001d74:	701a      	strb	r2, [r3, #0]
      break;
 8001d76:	e02a      	b.n	8001dce <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	212c      	movs	r1, #44	; 0x2c
 8001d7e:	fb01 f303 	mul.w	r3, r1, r3
 8001d82:	4413      	add	r3, r2
 8001d84:	3354      	adds	r3, #84	; 0x54
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d109      	bne.n	8001da0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	212c      	movs	r1, #44	; 0x2c
 8001d92:	fb01 f303 	mul.w	r3, r1, r3
 8001d96:	4413      	add	r3, r2
 8001d98:	3342      	adds	r3, #66	; 0x42
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
      break;
 8001d9e:	e016      	b.n	8001dce <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	212c      	movs	r1, #44	; 0x2c
 8001da6:	fb01 f303 	mul.w	r3, r1, r3
 8001daa:	4413      	add	r3, r2
 8001dac:	3342      	adds	r3, #66	; 0x42
 8001dae:	2202      	movs	r2, #2
 8001db0:	701a      	strb	r2, [r3, #0]
      break;
 8001db2:	e00c      	b.n	8001dce <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	212c      	movs	r1, #44	; 0x2c
 8001dba:	fb01 f303 	mul.w	r3, r1, r3
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3342      	adds	r3, #66	; 0x42
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]
      break;
 8001dc6:	e002      	b.n	8001dce <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001dc8:	bf00      	nop
 8001dca:	e000      	b.n	8001dce <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001dcc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	212c      	movs	r1, #44	; 0x2c
 8001dd4:	fb01 f303 	mul.w	r3, r1, r3
 8001dd8:	4413      	add	r3, r2
 8001dda:	3344      	adds	r3, #68	; 0x44
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001de0:	78fb      	ldrb	r3, [r7, #3]
 8001de2:	8b3a      	ldrh	r2, [r7, #24]
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	202c      	movs	r0, #44	; 0x2c
 8001de8:	fb00 f303 	mul.w	r3, r0, r3
 8001dec:	440b      	add	r3, r1
 8001dee:	334c      	adds	r3, #76	; 0x4c
 8001df0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001df2:	78fb      	ldrb	r3, [r7, #3]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	212c      	movs	r1, #44	; 0x2c
 8001df8:	fb01 f303 	mul.w	r3, r1, r3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3360      	adds	r3, #96	; 0x60
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	212c      	movs	r1, #44	; 0x2c
 8001e0a:	fb01 f303 	mul.w	r3, r1, r3
 8001e0e:	4413      	add	r3, r2
 8001e10:	3350      	adds	r3, #80	; 0x50
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e16:	78fb      	ldrb	r3, [r7, #3]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	212c      	movs	r1, #44	; 0x2c
 8001e1c:	fb01 f303 	mul.w	r3, r1, r3
 8001e20:	4413      	add	r3, r2
 8001e22:	3339      	adds	r3, #57	; 0x39
 8001e24:	78fa      	ldrb	r2, [r7, #3]
 8001e26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	212c      	movs	r1, #44	; 0x2c
 8001e2e:	fb01 f303 	mul.w	r3, r1, r3
 8001e32:	4413      	add	r3, r2
 8001e34:	3361      	adds	r3, #97	; 0x61
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6818      	ldr	r0, [r3, #0]
 8001e3e:	78fb      	ldrb	r3, [r7, #3]
 8001e40:	222c      	movs	r2, #44	; 0x2c
 8001e42:	fb02 f303 	mul.w	r3, r2, r3
 8001e46:	3338      	adds	r3, #56	; 0x38
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	18d1      	adds	r1, r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	461a      	mov	r2, r3
 8001e54:	f003 fce0 	bl	8005818 <USB_HC_StartXfer>
 8001e58:	4603      	mov	r3, r0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop

08001e64 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f003 f9e1 	bl	8005242 <USB_GetMode>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	f040 80f6 	bne.w	8002074 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f003 f9c5 	bl	800521c <USB_ReadInterrupts>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 80ec 	beq.w	8002072 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f003 f9bc 	bl	800521c <USB_ReadInterrupts>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001eae:	d104      	bne.n	8001eba <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001eb8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f003 f9ac 	bl	800521c <USB_ReadInterrupts>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ece:	d104      	bne.n	8001eda <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ed8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f003 f99c 	bl	800521c <USB_ReadInterrupts>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001eea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001eee:	d104      	bne.n	8001efa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ef8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 f98c 	bl	800521c <USB_ReadInterrupts>
 8001f04:	4603      	mov	r3, r0
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d103      	bne.n	8001f16 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2202      	movs	r2, #2
 8001f14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f003 f97e 	bl	800521c <USB_ReadInterrupts>
 8001f20:	4603      	mov	r3, r0
 8001f22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f2a:	d11c      	bne.n	8001f66 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001f34:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10f      	bne.n	8001f66 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001f46:	2110      	movs	r1, #16
 8001f48:	6938      	ldr	r0, [r7, #16]
 8001f4a:	f003 f86d 	bl	8005028 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001f4e:	6938      	ldr	r0, [r7, #16]
 8001f50:	f003 f89e 	bl	8005090 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2101      	movs	r1, #1
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f003 fa74 	bl	8005448 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f006 f833 	bl	8007fcc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f003 f956 	bl	800521c <USB_ReadInterrupts>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f7a:	d102      	bne.n	8001f82 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f001 f89e 	bl	80030be <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f003 f948 	bl	800521c <USB_ReadInterrupts>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d106      	bne.n	8001fa4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f005 fffc 	bl	8007f94 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f003 f937 	bl	800521c <USB_ReadInterrupts>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	f003 0310 	and.w	r3, r3, #16
 8001fb4:	2b10      	cmp	r3, #16
 8001fb6:	d101      	bne.n	8001fbc <HAL_HCD_IRQHandler+0x158>
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e000      	b.n	8001fbe <HAL_HCD_IRQHandler+0x15a>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d012      	beq.n	8001fe8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	699a      	ldr	r2, [r3, #24]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0210 	bic.w	r2, r2, #16
 8001fd0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 ffa1 	bl	8002f1a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699a      	ldr	r2, [r3, #24]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0210 	orr.w	r2, r2, #16
 8001fe6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f003 f915 	bl	800521c <USB_ReadInterrupts>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ffc:	d13a      	bne.n	8002074 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f003 fd4a 	bl	8005a9c <USB_HC_ReadInterrupt>
 8002008:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	e025      	b.n	800205c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	fa22 f303 	lsr.w	r3, r2, r3
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b00      	cmp	r3, #0
 8002022:	d018      	beq.n	8002056 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	015a      	lsls	r2, r3, #5
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4413      	add	r3, r2
 800202c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800203a:	d106      	bne.n	800204a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	b2db      	uxtb	r3, r3
 8002040:	4619      	mov	r1, r3
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f8ab 	bl	800219e <HCD_HC_IN_IRQHandler>
 8002048:	e005      	b.n	8002056 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	4619      	mov	r1, r3
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 fbf9 	bl	8002848 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	3301      	adds	r3, #1
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	429a      	cmp	r2, r3
 8002064:	d3d4      	bcc.n	8002010 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800206e:	615a      	str	r2, [r3, #20]
 8002070:	e000      	b.n	8002074 <HAL_HCD_IRQHandler+0x210>
      return;
 8002072:	bf00      	nop
    }
  }
}
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_HCD_Start+0x16>
 800208c:	2302      	movs	r3, #2
 800208e:	e013      	b.n	80020b8 <HAL_HCD_Start+0x3e>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2101      	movs	r1, #1
 800209e:	4618      	mov	r0, r3
 80020a0:	f003 fa36 	bl	8005510 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f002 ff4e 	bl	8004f4a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d101      	bne.n	80020d6 <HAL_HCD_Stop+0x16>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e00d      	b.n	80020f2 <HAL_HCD_Stop+0x32>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f003 fe24 	bl	8005d30 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f003 f9d8 	bl	80054bc <USB_ResetPort>
 800210c:	4603      	mov	r3, r0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	460b      	mov	r3, r1
 8002120:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002122:	78fb      	ldrb	r3, [r7, #3]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	212c      	movs	r1, #44	; 0x2c
 8002128:	fb01 f303 	mul.w	r3, r1, r3
 800212c:	4413      	add	r3, r2
 800212e:	3360      	adds	r3, #96	; 0x60
 8002130:	781b      	ldrb	r3, [r3, #0]
}
 8002132:	4618      	mov	r0, r3
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	460b      	mov	r3, r1
 8002148:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800214a:	78fb      	ldrb	r3, [r7, #3]
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	212c      	movs	r1, #44	; 0x2c
 8002150:	fb01 f303 	mul.w	r3, r1, r3
 8002154:	4413      	add	r3, r2
 8002156:	3350      	adds	r3, #80	; 0x50
 8002158:	681b      	ldr	r3, [r3, #0]
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f003 fa1c 	bl	80055b0 <USB_GetCurrentFrame>
 8002178:	4603      	mov	r3, r0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f003 f9f7 	bl	8005582 <USB_GetHostSpeed>
 8002194:	4603      	mov	r3, r0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b086      	sub	sp, #24
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	460b      	mov	r3, r1
 80021a8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80021b4:	78fb      	ldrb	r3, [r7, #3]
 80021b6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	015a      	lsls	r2, r3, #5
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	4413      	add	r3, r2
 80021c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 0304 	and.w	r3, r3, #4
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d11a      	bne.n	8002204 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	015a      	lsls	r2, r3, #5
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021da:	461a      	mov	r2, r3
 80021dc:	2304      	movs	r3, #4
 80021de:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	212c      	movs	r1, #44	; 0x2c
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	3361      	adds	r3, #97	; 0x61
 80021ee:	2206      	movs	r2, #6
 80021f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	4611      	mov	r1, r2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f003 fc5e 	bl	8005abe <USB_HC_Halt>
 8002202:	e0af      	b.n	8002364 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	015a      	lsls	r2, r3, #5
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4413      	add	r3, r2
 800220c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800221a:	d11b      	bne.n	8002254 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	015a      	lsls	r2, r3, #5
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4413      	add	r3, r2
 8002224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002228:	461a      	mov	r2, r3
 800222a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800222e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	212c      	movs	r1, #44	; 0x2c
 8002236:	fb01 f303 	mul.w	r3, r1, r3
 800223a:	4413      	add	r3, r2
 800223c:	3361      	adds	r3, #97	; 0x61
 800223e:	2207      	movs	r2, #7
 8002240:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f003 fc36 	bl	8005abe <USB_HC_Halt>
 8002252:	e087      	b.n	8002364 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	015a      	lsls	r2, r3, #5
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4413      	add	r3, r2
 800225c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 0320 	and.w	r3, r3, #32
 8002266:	2b20      	cmp	r3, #32
 8002268:	d109      	bne.n	800227e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4413      	add	r3, r2
 8002272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002276:	461a      	mov	r2, r3
 8002278:	2320      	movs	r3, #32
 800227a:	6093      	str	r3, [r2, #8]
 800227c:	e072      	b.n	8002364 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	015a      	lsls	r2, r3, #5
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4413      	add	r3, r2
 8002286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b08      	cmp	r3, #8
 8002292:	d11a      	bne.n	80022ca <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	015a      	lsls	r2, r3, #5
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4413      	add	r3, r2
 800229c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a0:	461a      	mov	r2, r3
 80022a2:	2308      	movs	r3, #8
 80022a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	212c      	movs	r1, #44	; 0x2c
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	3361      	adds	r3, #97	; 0x61
 80022b4:	2205      	movs	r2, #5
 80022b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	4611      	mov	r1, r2
 80022c2:	4618      	mov	r0, r3
 80022c4:	f003 fbfb 	bl	8005abe <USB_HC_Halt>
 80022c8:	e04c      	b.n	8002364 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	015a      	lsls	r2, r3, #5
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4413      	add	r3, r2
 80022d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022e0:	d11b      	bne.n	800231a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ee:	461a      	mov	r2, r3
 80022f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	212c      	movs	r1, #44	; 0x2c
 80022fc:	fb01 f303 	mul.w	r3, r1, r3
 8002300:	4413      	add	r3, r2
 8002302:	3361      	adds	r3, #97	; 0x61
 8002304:	2208      	movs	r2, #8
 8002306:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	4611      	mov	r1, r2
 8002312:	4618      	mov	r0, r3
 8002314:	f003 fbd3 	bl	8005abe <USB_HC_Halt>
 8002318:	e024      	b.n	8002364 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	015a      	lsls	r2, r3, #5
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4413      	add	r3, r2
 8002322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232c:	2b80      	cmp	r3, #128	; 0x80
 800232e:	d119      	bne.n	8002364 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	015a      	lsls	r2, r3, #5
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4413      	add	r3, r2
 8002338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233c:	461a      	mov	r2, r3
 800233e:	2380      	movs	r3, #128	; 0x80
 8002340:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	212c      	movs	r1, #44	; 0x2c
 8002348:	fb01 f303 	mul.w	r3, r1, r3
 800234c:	4413      	add	r3, r2
 800234e:	3361      	adds	r3, #97	; 0x61
 8002350:	2206      	movs	r2, #6
 8002352:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	4611      	mov	r1, r2
 800235e:	4618      	mov	r0, r3
 8002360:	f003 fbad 	bl	8005abe <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	015a      	lsls	r2, r3, #5
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4413      	add	r3, r2
 800236c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800237a:	d112      	bne.n	80023a2 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	4611      	mov	r1, r2
 8002386:	4618      	mov	r0, r3
 8002388:	f003 fb99 	bl	8005abe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	015a      	lsls	r2, r3, #5
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4413      	add	r3, r2
 8002394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002398:	461a      	mov	r2, r3
 800239a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800239e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80023a0:	e24e      	b.n	8002840 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	015a      	lsls	r2, r3, #5
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	f040 80df 	bne.w	8002578 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d019      	beq.n	80023f6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	212c      	movs	r1, #44	; 0x2c
 80023c8:	fb01 f303 	mul.w	r3, r1, r3
 80023cc:	4413      	add	r3, r2
 80023ce:	3348      	adds	r3, #72	; 0x48
 80023d0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	0159      	lsls	r1, r3, #5
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	440b      	add	r3, r1
 80023da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80023e4:	1ad2      	subs	r2, r2, r3
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	202c      	movs	r0, #44	; 0x2c
 80023ec:	fb00 f303 	mul.w	r3, r0, r3
 80023f0:	440b      	add	r3, r1
 80023f2:	3350      	adds	r3, #80	; 0x50
 80023f4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	212c      	movs	r1, #44	; 0x2c
 80023fc:	fb01 f303 	mul.w	r3, r1, r3
 8002400:	4413      	add	r3, r2
 8002402:	3361      	adds	r3, #97	; 0x61
 8002404:	2201      	movs	r2, #1
 8002406:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	212c      	movs	r1, #44	; 0x2c
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	4413      	add	r3, r2
 8002414:	335c      	adds	r3, #92	; 0x5c
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	015a      	lsls	r2, r3, #5
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4413      	add	r3, r2
 8002422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002426:	461a      	mov	r2, r3
 8002428:	2301      	movs	r3, #1
 800242a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	212c      	movs	r1, #44	; 0x2c
 8002432:	fb01 f303 	mul.w	r3, r1, r3
 8002436:	4413      	add	r3, r2
 8002438:	333f      	adds	r3, #63	; 0x3f
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d009      	beq.n	8002454 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	212c      	movs	r1, #44	; 0x2c
 8002446:	fb01 f303 	mul.w	r3, r1, r3
 800244a:	4413      	add	r3, r2
 800244c:	333f      	adds	r3, #63	; 0x3f
 800244e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002450:	2b02      	cmp	r3, #2
 8002452:	d111      	bne.n	8002478 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	4611      	mov	r1, r2
 800245e:	4618      	mov	r0, r3
 8002460:	f003 fb2d 	bl	8005abe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	015a      	lsls	r2, r3, #5
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4413      	add	r3, r2
 800246c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002470:	461a      	mov	r2, r3
 8002472:	2310      	movs	r3, #16
 8002474:	6093      	str	r3, [r2, #8]
 8002476:	e03a      	b.n	80024ee <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	212c      	movs	r1, #44	; 0x2c
 800247e:	fb01 f303 	mul.w	r3, r1, r3
 8002482:	4413      	add	r3, r2
 8002484:	333f      	adds	r3, #63	; 0x3f
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b03      	cmp	r3, #3
 800248a:	d009      	beq.n	80024a0 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	212c      	movs	r1, #44	; 0x2c
 8002492:	fb01 f303 	mul.w	r3, r1, r3
 8002496:	4413      	add	r3, r2
 8002498:	333f      	adds	r3, #63	; 0x3f
 800249a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800249c:	2b01      	cmp	r3, #1
 800249e:	d126      	bne.n	80024ee <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	015a      	lsls	r2, r3, #5
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	0151      	lsls	r1, r2, #5
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	440a      	add	r2, r1
 80024b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80024be:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	212c      	movs	r1, #44	; 0x2c
 80024c6:	fb01 f303 	mul.w	r3, r1, r3
 80024ca:	4413      	add	r3, r2
 80024cc:	3360      	adds	r3, #96	; 0x60
 80024ce:	2201      	movs	r2, #1
 80024d0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	b2d9      	uxtb	r1, r3
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	202c      	movs	r0, #44	; 0x2c
 80024dc:	fb00 f303 	mul.w	r3, r0, r3
 80024e0:	4413      	add	r3, r2
 80024e2:	3360      	adds	r3, #96	; 0x60
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f005 fd7d 	bl	8007fe8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d12b      	bne.n	800254e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	212c      	movs	r1, #44	; 0x2c
 80024fc:	fb01 f303 	mul.w	r3, r1, r3
 8002500:	4413      	add	r3, r2
 8002502:	3348      	adds	r3, #72	; 0x48
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	202c      	movs	r0, #44	; 0x2c
 800250c:	fb00 f202 	mul.w	r2, r0, r2
 8002510:	440a      	add	r2, r1
 8002512:	3240      	adds	r2, #64	; 0x40
 8002514:	8812      	ldrh	r2, [r2, #0]
 8002516:	fbb3 f3f2 	udiv	r3, r3, r2
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 818e 	beq.w	8002840 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	212c      	movs	r1, #44	; 0x2c
 800252a:	fb01 f303 	mul.w	r3, r1, r3
 800252e:	4413      	add	r3, r2
 8002530:	3354      	adds	r3, #84	; 0x54
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	f083 0301 	eor.w	r3, r3, #1
 8002538:	b2d8      	uxtb	r0, r3
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	212c      	movs	r1, #44	; 0x2c
 8002540:	fb01 f303 	mul.w	r3, r1, r3
 8002544:	4413      	add	r3, r2
 8002546:	3354      	adds	r3, #84	; 0x54
 8002548:	4602      	mov	r2, r0
 800254a:	701a      	strb	r2, [r3, #0]
}
 800254c:	e178      	b.n	8002840 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	212c      	movs	r1, #44	; 0x2c
 8002554:	fb01 f303 	mul.w	r3, r1, r3
 8002558:	4413      	add	r3, r2
 800255a:	3354      	adds	r3, #84	; 0x54
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	f083 0301 	eor.w	r3, r3, #1
 8002562:	b2d8      	uxtb	r0, r3
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	212c      	movs	r1, #44	; 0x2c
 800256a:	fb01 f303 	mul.w	r3, r1, r3
 800256e:	4413      	add	r3, r2
 8002570:	3354      	adds	r3, #84	; 0x54
 8002572:	4602      	mov	r2, r0
 8002574:	701a      	strb	r2, [r3, #0]
}
 8002576:	e163      	b.n	8002840 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	015a      	lsls	r2, r3, #5
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4413      	add	r3, r2
 8002580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b02      	cmp	r3, #2
 800258c:	f040 80f6 	bne.w	800277c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	212c      	movs	r1, #44	; 0x2c
 8002596:	fb01 f303 	mul.w	r3, r1, r3
 800259a:	4413      	add	r3, r2
 800259c:	3361      	adds	r3, #97	; 0x61
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d109      	bne.n	80025b8 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	212c      	movs	r1, #44	; 0x2c
 80025aa:	fb01 f303 	mul.w	r3, r1, r3
 80025ae:	4413      	add	r3, r2
 80025b0:	3360      	adds	r3, #96	; 0x60
 80025b2:	2201      	movs	r2, #1
 80025b4:	701a      	strb	r2, [r3, #0]
 80025b6:	e0c9      	b.n	800274c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	212c      	movs	r1, #44	; 0x2c
 80025be:	fb01 f303 	mul.w	r3, r1, r3
 80025c2:	4413      	add	r3, r2
 80025c4:	3361      	adds	r3, #97	; 0x61
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b05      	cmp	r3, #5
 80025ca:	d109      	bne.n	80025e0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	212c      	movs	r1, #44	; 0x2c
 80025d2:	fb01 f303 	mul.w	r3, r1, r3
 80025d6:	4413      	add	r3, r2
 80025d8:	3360      	adds	r3, #96	; 0x60
 80025da:	2205      	movs	r2, #5
 80025dc:	701a      	strb	r2, [r3, #0]
 80025de:	e0b5      	b.n	800274c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	212c      	movs	r1, #44	; 0x2c
 80025e6:	fb01 f303 	mul.w	r3, r1, r3
 80025ea:	4413      	add	r3, r2
 80025ec:	3361      	adds	r3, #97	; 0x61
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b06      	cmp	r3, #6
 80025f2:	d009      	beq.n	8002608 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	212c      	movs	r1, #44	; 0x2c
 80025fa:	fb01 f303 	mul.w	r3, r1, r3
 80025fe:	4413      	add	r3, r2
 8002600:	3361      	adds	r3, #97	; 0x61
 8002602:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002604:	2b08      	cmp	r3, #8
 8002606:	d150      	bne.n	80026aa <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	212c      	movs	r1, #44	; 0x2c
 800260e:	fb01 f303 	mul.w	r3, r1, r3
 8002612:	4413      	add	r3, r2
 8002614:	335c      	adds	r3, #92	; 0x5c
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	1c5a      	adds	r2, r3, #1
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	202c      	movs	r0, #44	; 0x2c
 8002620:	fb00 f303 	mul.w	r3, r0, r3
 8002624:	440b      	add	r3, r1
 8002626:	335c      	adds	r3, #92	; 0x5c
 8002628:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	212c      	movs	r1, #44	; 0x2c
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	4413      	add	r3, r2
 8002636:	335c      	adds	r3, #92	; 0x5c
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b02      	cmp	r3, #2
 800263c:	d912      	bls.n	8002664 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	212c      	movs	r1, #44	; 0x2c
 8002644:	fb01 f303 	mul.w	r3, r1, r3
 8002648:	4413      	add	r3, r2
 800264a:	335c      	adds	r3, #92	; 0x5c
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	212c      	movs	r1, #44	; 0x2c
 8002656:	fb01 f303 	mul.w	r3, r1, r3
 800265a:	4413      	add	r3, r2
 800265c:	3360      	adds	r3, #96	; 0x60
 800265e:	2204      	movs	r2, #4
 8002660:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002662:	e073      	b.n	800274c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	212c      	movs	r1, #44	; 0x2c
 800266a:	fb01 f303 	mul.w	r3, r1, r3
 800266e:	4413      	add	r3, r2
 8002670:	3360      	adds	r3, #96	; 0x60
 8002672:	2202      	movs	r2, #2
 8002674:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4413      	add	r3, r2
 800267e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800268c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002694:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	015a      	lsls	r2, r3, #5
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4413      	add	r3, r2
 800269e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a2:	461a      	mov	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026a8:	e050      	b.n	800274c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	212c      	movs	r1, #44	; 0x2c
 80026b0:	fb01 f303 	mul.w	r3, r1, r3
 80026b4:	4413      	add	r3, r2
 80026b6:	3361      	adds	r3, #97	; 0x61
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	d122      	bne.n	8002704 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	212c      	movs	r1, #44	; 0x2c
 80026c4:	fb01 f303 	mul.w	r3, r1, r3
 80026c8:	4413      	add	r3, r2
 80026ca:	3360      	adds	r3, #96	; 0x60
 80026cc:	2202      	movs	r2, #2
 80026ce:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026e6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026ee:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	015a      	lsls	r2, r3, #5
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4413      	add	r3, r2
 80026f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fc:	461a      	mov	r2, r3
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	e023      	b.n	800274c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	212c      	movs	r1, #44	; 0x2c
 800270a:	fb01 f303 	mul.w	r3, r1, r3
 800270e:	4413      	add	r3, r2
 8002710:	3361      	adds	r3, #97	; 0x61
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b07      	cmp	r3, #7
 8002716:	d119      	bne.n	800274c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	212c      	movs	r1, #44	; 0x2c
 800271e:	fb01 f303 	mul.w	r3, r1, r3
 8002722:	4413      	add	r3, r2
 8002724:	335c      	adds	r3, #92	; 0x5c
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	202c      	movs	r0, #44	; 0x2c
 8002730:	fb00 f303 	mul.w	r3, r0, r3
 8002734:	440b      	add	r3, r1
 8002736:	335c      	adds	r3, #92	; 0x5c
 8002738:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	212c      	movs	r1, #44	; 0x2c
 8002740:	fb01 f303 	mul.w	r3, r1, r3
 8002744:	4413      	add	r3, r2
 8002746:	3360      	adds	r3, #96	; 0x60
 8002748:	2204      	movs	r2, #4
 800274a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	015a      	lsls	r2, r3, #5
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4413      	add	r3, r2
 8002754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002758:	461a      	mov	r2, r3
 800275a:	2302      	movs	r3, #2
 800275c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	b2d9      	uxtb	r1, r3
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	202c      	movs	r0, #44	; 0x2c
 8002768:	fb00 f303 	mul.w	r3, r0, r3
 800276c:	4413      	add	r3, r2
 800276e:	3360      	adds	r3, #96	; 0x60
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	461a      	mov	r2, r3
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f005 fc37 	bl	8007fe8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800277a:	e061      	b.n	8002840 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	015a      	lsls	r2, r3, #5
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4413      	add	r3, r2
 8002784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 0310 	and.w	r3, r3, #16
 800278e:	2b10      	cmp	r3, #16
 8002790:	d156      	bne.n	8002840 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	212c      	movs	r1, #44	; 0x2c
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	4413      	add	r3, r2
 800279e:	333f      	adds	r3, #63	; 0x3f
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b03      	cmp	r3, #3
 80027a4:	d111      	bne.n	80027ca <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	212c      	movs	r1, #44	; 0x2c
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	335c      	adds	r3, #92	; 0x5c
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f003 f97b 	bl	8005abe <USB_HC_Halt>
 80027c8:	e031      	b.n	800282e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	212c      	movs	r1, #44	; 0x2c
 80027d0:	fb01 f303 	mul.w	r3, r1, r3
 80027d4:	4413      	add	r3, r2
 80027d6:	333f      	adds	r3, #63	; 0x3f
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d009      	beq.n	80027f2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	212c      	movs	r1, #44	; 0x2c
 80027e4:	fb01 f303 	mul.w	r3, r1, r3
 80027e8:	4413      	add	r3, r2
 80027ea:	333f      	adds	r3, #63	; 0x3f
 80027ec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d11d      	bne.n	800282e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	335c      	adds	r3, #92	; 0x5c
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d110      	bne.n	800282e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	212c      	movs	r1, #44	; 0x2c
 8002812:	fb01 f303 	mul.w	r3, r1, r3
 8002816:	4413      	add	r3, r2
 8002818:	3361      	adds	r3, #97	; 0x61
 800281a:	2203      	movs	r2, #3
 800281c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	4611      	mov	r1, r2
 8002828:	4618      	mov	r0, r3
 800282a:	f003 f948 	bl	8005abe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	015a      	lsls	r2, r3, #5
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4413      	add	r3, r2
 8002836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283a:	461a      	mov	r2, r3
 800283c:	2310      	movs	r3, #16
 800283e:	6093      	str	r3, [r2, #8]
}
 8002840:	bf00      	nop
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800285e:	78fb      	ldrb	r3, [r7, #3]
 8002860:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	4413      	add	r3, r2
 800286a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b04      	cmp	r3, #4
 8002876:	d11a      	bne.n	80028ae <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	4413      	add	r3, r2
 8002880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002884:	461a      	mov	r2, r3
 8002886:	2304      	movs	r3, #4
 8002888:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	212c      	movs	r1, #44	; 0x2c
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	4413      	add	r3, r2
 8002896:	3361      	adds	r3, #97	; 0x61
 8002898:	2206      	movs	r2, #6
 800289a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	4611      	mov	r1, r2
 80028a6:	4618      	mov	r0, r3
 80028a8:	f003 f909 	bl	8005abe <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80028ac:	e331      	b.n	8002f12 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	015a      	lsls	r2, r3, #5
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 0320 	and.w	r3, r3, #32
 80028c0:	2b20      	cmp	r3, #32
 80028c2:	d12e      	bne.n	8002922 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d0:	461a      	mov	r2, r3
 80028d2:	2320      	movs	r3, #32
 80028d4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	212c      	movs	r1, #44	; 0x2c
 80028dc:	fb01 f303 	mul.w	r3, r1, r3
 80028e0:	4413      	add	r3, r2
 80028e2:	333d      	adds	r3, #61	; 0x3d
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	f040 8313 	bne.w	8002f12 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	212c      	movs	r1, #44	; 0x2c
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	333d      	adds	r3, #61	; 0x3d
 80028fa:	2200      	movs	r2, #0
 80028fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	212c      	movs	r1, #44	; 0x2c
 8002904:	fb01 f303 	mul.w	r3, r1, r3
 8002908:	4413      	add	r3, r2
 800290a:	3360      	adds	r3, #96	; 0x60
 800290c:	2202      	movs	r2, #2
 800290e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	4611      	mov	r1, r2
 800291a:	4618      	mov	r0, r3
 800291c:	f003 f8cf 	bl	8005abe <USB_HC_Halt>
}
 8002920:	e2f7      	b.n	8002f12 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	015a      	lsls	r2, r3, #5
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	4413      	add	r3, r2
 800292a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002938:	d112      	bne.n	8002960 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	015a      	lsls	r2, r3, #5
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	4413      	add	r3, r2
 8002942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002946:	461a      	mov	r2, r3
 8002948:	f44f 7300 	mov.w	r3, #512	; 0x200
 800294c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	4611      	mov	r1, r2
 8002958:	4618      	mov	r0, r3
 800295a:	f003 f8b0 	bl	8005abe <USB_HC_Halt>
}
 800295e:	e2d8      	b.n	8002f12 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	4413      	add	r3, r2
 8002968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b01      	cmp	r3, #1
 8002974:	d140      	bne.n	80029f8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	212c      	movs	r1, #44	; 0x2c
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	4413      	add	r3, r2
 8002982:	335c      	adds	r3, #92	; 0x5c
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	4413      	add	r3, r2
 8002990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299a:	2b40      	cmp	r3, #64	; 0x40
 800299c:	d111      	bne.n	80029c2 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	212c      	movs	r1, #44	; 0x2c
 80029a4:	fb01 f303 	mul.w	r3, r1, r3
 80029a8:	4413      	add	r3, r2
 80029aa:	333d      	adds	r3, #61	; 0x3d
 80029ac:	2201      	movs	r2, #1
 80029ae:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	015a      	lsls	r2, r3, #5
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	4413      	add	r3, r2
 80029b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029bc:	461a      	mov	r2, r3
 80029be:	2340      	movs	r3, #64	; 0x40
 80029c0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	015a      	lsls	r2, r3, #5
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	4413      	add	r3, r2
 80029ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ce:	461a      	mov	r2, r3
 80029d0:	2301      	movs	r3, #1
 80029d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	212c      	movs	r1, #44	; 0x2c
 80029da:	fb01 f303 	mul.w	r3, r1, r3
 80029de:	4413      	add	r3, r2
 80029e0:	3361      	adds	r3, #97	; 0x61
 80029e2:	2201      	movs	r2, #1
 80029e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f003 f864 	bl	8005abe <USB_HC_Halt>
}
 80029f6:	e28c      	b.n	8002f12 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	015a      	lsls	r2, r3, #5
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0a:	2b40      	cmp	r3, #64	; 0x40
 8002a0c:	d12c      	bne.n	8002a68 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	212c      	movs	r1, #44	; 0x2c
 8002a14:	fb01 f303 	mul.w	r3, r1, r3
 8002a18:	4413      	add	r3, r2
 8002a1a:	3361      	adds	r3, #97	; 0x61
 8002a1c:	2204      	movs	r2, #4
 8002a1e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	212c      	movs	r1, #44	; 0x2c
 8002a26:	fb01 f303 	mul.w	r3, r1, r3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	333d      	adds	r3, #61	; 0x3d
 8002a2e:	2201      	movs	r2, #1
 8002a30:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	212c      	movs	r1, #44	; 0x2c
 8002a38:	fb01 f303 	mul.w	r3, r1, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	335c      	adds	r3, #92	; 0x5c
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	4611      	mov	r1, r2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f003 f835 	bl	8005abe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a60:	461a      	mov	r2, r3
 8002a62:	2340      	movs	r3, #64	; 0x40
 8002a64:	6093      	str	r3, [r2, #8]
}
 8002a66:	e254      	b.n	8002f12 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d11a      	bne.n	8002ab4 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	015a      	lsls	r2, r3, #5
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	4413      	add	r3, r2
 8002a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	2308      	movs	r3, #8
 8002a8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	212c      	movs	r1, #44	; 0x2c
 8002a96:	fb01 f303 	mul.w	r3, r1, r3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3361      	adds	r3, #97	; 0x61
 8002a9e:	2205      	movs	r2, #5
 8002aa0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f003 f806 	bl	8005abe <USB_HC_Halt>
}
 8002ab2:	e22e      	b.n	8002f12 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	2b10      	cmp	r3, #16
 8002ac8:	d140      	bne.n	8002b4c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	212c      	movs	r1, #44	; 0x2c
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	335c      	adds	r3, #92	; 0x5c
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	212c      	movs	r1, #44	; 0x2c
 8002ae2:	fb01 f303 	mul.w	r3, r1, r3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3361      	adds	r3, #97	; 0x61
 8002aea:	2203      	movs	r2, #3
 8002aec:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	212c      	movs	r1, #44	; 0x2c
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	4413      	add	r3, r2
 8002afa:	333d      	adds	r3, #61	; 0x3d
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d112      	bne.n	8002b28 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	212c      	movs	r1, #44	; 0x2c
 8002b08:	fb01 f303 	mul.w	r3, r1, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	333c      	adds	r3, #60	; 0x3c
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d108      	bne.n	8002b28 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	212c      	movs	r1, #44	; 0x2c
 8002b1c:	fb01 f303 	mul.w	r3, r1, r3
 8002b20:	4413      	add	r3, r2
 8002b22:	333d      	adds	r3, #61	; 0x3d
 8002b24:	2201      	movs	r2, #1
 8002b26:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	4611      	mov	r1, r2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f002 ffc3 	bl	8005abe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	015a      	lsls	r2, r3, #5
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b44:	461a      	mov	r2, r3
 8002b46:	2310      	movs	r3, #16
 8002b48:	6093      	str	r3, [r2, #8]
}
 8002b4a:	e1e2      	b.n	8002f12 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5e:	2b80      	cmp	r3, #128	; 0x80
 8002b60:	d164      	bne.n	8002c2c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d111      	bne.n	8002b8e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	212c      	movs	r1, #44	; 0x2c
 8002b70:	fb01 f303 	mul.w	r3, r1, r3
 8002b74:	4413      	add	r3, r2
 8002b76:	3361      	adds	r3, #97	; 0x61
 8002b78:	2206      	movs	r2, #6
 8002b7a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	4611      	mov	r1, r2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f002 ff99 	bl	8005abe <USB_HC_Halt>
 8002b8c:	e044      	b.n	8002c18 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	212c      	movs	r1, #44	; 0x2c
 8002b94:	fb01 f303 	mul.w	r3, r1, r3
 8002b98:	4413      	add	r3, r2
 8002b9a:	335c      	adds	r3, #92	; 0x5c
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	202c      	movs	r0, #44	; 0x2c
 8002ba6:	fb00 f303 	mul.w	r3, r0, r3
 8002baa:	440b      	add	r3, r1
 8002bac:	335c      	adds	r3, #92	; 0x5c
 8002bae:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	212c      	movs	r1, #44	; 0x2c
 8002bb6:	fb01 f303 	mul.w	r3, r1, r3
 8002bba:	4413      	add	r3, r2
 8002bbc:	335c      	adds	r3, #92	; 0x5c
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d920      	bls.n	8002c06 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	212c      	movs	r1, #44	; 0x2c
 8002bca:	fb01 f303 	mul.w	r3, r1, r3
 8002bce:	4413      	add	r3, r2
 8002bd0:	335c      	adds	r3, #92	; 0x5c
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	212c      	movs	r1, #44	; 0x2c
 8002bdc:	fb01 f303 	mul.w	r3, r1, r3
 8002be0:	4413      	add	r3, r2
 8002be2:	3360      	adds	r3, #96	; 0x60
 8002be4:	2204      	movs	r2, #4
 8002be6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	b2d9      	uxtb	r1, r3
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	202c      	movs	r0, #44	; 0x2c
 8002bf2:	fb00 f303 	mul.w	r3, r0, r3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3360      	adds	r3, #96	; 0x60
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f005 f9f2 	bl	8007fe8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c04:	e008      	b.n	8002c18 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	212c      	movs	r1, #44	; 0x2c
 8002c0c:	fb01 f303 	mul.w	r3, r1, r3
 8002c10:	4413      	add	r3, r2
 8002c12:	3360      	adds	r3, #96	; 0x60
 8002c14:	2202      	movs	r2, #2
 8002c16:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c24:	461a      	mov	r2, r3
 8002c26:	2380      	movs	r3, #128	; 0x80
 8002c28:	6093      	str	r3, [r2, #8]
}
 8002c2a:	e172      	b.n	8002f12 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	015a      	lsls	r2, r3, #5
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c42:	d11b      	bne.n	8002c7c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	212c      	movs	r1, #44	; 0x2c
 8002c4a:	fb01 f303 	mul.w	r3, r1, r3
 8002c4e:	4413      	add	r3, r2
 8002c50:	3361      	adds	r3, #97	; 0x61
 8002c52:	2208      	movs	r2, #8
 8002c54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	4611      	mov	r1, r2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f002 ff2c 	bl	8005abe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c72:	461a      	mov	r2, r3
 8002c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c78:	6093      	str	r3, [r2, #8]
}
 8002c7a:	e14a      	b.n	8002f12 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	f040 813f 	bne.w	8002f12 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	212c      	movs	r1, #44	; 0x2c
 8002c9a:	fb01 f303 	mul.w	r3, r1, r3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3361      	adds	r3, #97	; 0x61
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d17d      	bne.n	8002da4 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	212c      	movs	r1, #44	; 0x2c
 8002cae:	fb01 f303 	mul.w	r3, r1, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3360      	adds	r3, #96	; 0x60
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	212c      	movs	r1, #44	; 0x2c
 8002cc0:	fb01 f303 	mul.w	r3, r1, r3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	333f      	adds	r3, #63	; 0x3f
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d00a      	beq.n	8002ce4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	212c      	movs	r1, #44	; 0x2c
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	4413      	add	r3, r2
 8002cda:	333f      	adds	r3, #63	; 0x3f
 8002cdc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	f040 8100 	bne.w	8002ee4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d113      	bne.n	8002d14 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	212c      	movs	r1, #44	; 0x2c
 8002cf2:	fb01 f303 	mul.w	r3, r1, r3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3355      	adds	r3, #85	; 0x55
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	f083 0301 	eor.w	r3, r3, #1
 8002d00:	b2d8      	uxtb	r0, r3
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	212c      	movs	r1, #44	; 0x2c
 8002d08:	fb01 f303 	mul.w	r3, r1, r3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	3355      	adds	r3, #85	; 0x55
 8002d10:	4602      	mov	r2, r0
 8002d12:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	f040 80e3 	bne.w	8002ee4 <HCD_HC_OUT_IRQHandler+0x69c>
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	212c      	movs	r1, #44	; 0x2c
 8002d24:	fb01 f303 	mul.w	r3, r1, r3
 8002d28:	4413      	add	r3, r2
 8002d2a:	334c      	adds	r3, #76	; 0x4c
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 80d8 	beq.w	8002ee4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	212c      	movs	r1, #44	; 0x2c
 8002d3a:	fb01 f303 	mul.w	r3, r1, r3
 8002d3e:	4413      	add	r3, r2
 8002d40:	334c      	adds	r3, #76	; 0x4c
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	202c      	movs	r0, #44	; 0x2c
 8002d4a:	fb00 f202 	mul.w	r2, r0, r2
 8002d4e:	440a      	add	r2, r1
 8002d50:	3240      	adds	r2, #64	; 0x40
 8002d52:	8812      	ldrh	r2, [r2, #0]
 8002d54:	4413      	add	r3, r2
 8002d56:	3b01      	subs	r3, #1
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	202c      	movs	r0, #44	; 0x2c
 8002d5e:	fb00 f202 	mul.w	r2, r0, r2
 8002d62:	440a      	add	r2, r1
 8002d64:	3240      	adds	r2, #64	; 0x40
 8002d66:	8812      	ldrh	r2, [r2, #0]
 8002d68:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 80b5 	beq.w	8002ee4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	212c      	movs	r1, #44	; 0x2c
 8002d80:	fb01 f303 	mul.w	r3, r1, r3
 8002d84:	4413      	add	r3, r2
 8002d86:	3355      	adds	r3, #85	; 0x55
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	f083 0301 	eor.w	r3, r3, #1
 8002d8e:	b2d8      	uxtb	r0, r3
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	212c      	movs	r1, #44	; 0x2c
 8002d96:	fb01 f303 	mul.w	r3, r1, r3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3355      	adds	r3, #85	; 0x55
 8002d9e:	4602      	mov	r2, r0
 8002da0:	701a      	strb	r2, [r3, #0]
 8002da2:	e09f      	b.n	8002ee4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	212c      	movs	r1, #44	; 0x2c
 8002daa:	fb01 f303 	mul.w	r3, r1, r3
 8002dae:	4413      	add	r3, r2
 8002db0:	3361      	adds	r3, #97	; 0x61
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b03      	cmp	r3, #3
 8002db6:	d109      	bne.n	8002dcc <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	212c      	movs	r1, #44	; 0x2c
 8002dbe:	fb01 f303 	mul.w	r3, r1, r3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3360      	adds	r3, #96	; 0x60
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	701a      	strb	r2, [r3, #0]
 8002dca:	e08b      	b.n	8002ee4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	212c      	movs	r1, #44	; 0x2c
 8002dd2:	fb01 f303 	mul.w	r3, r1, r3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3361      	adds	r3, #97	; 0x61
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d109      	bne.n	8002df4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	212c      	movs	r1, #44	; 0x2c
 8002de6:	fb01 f303 	mul.w	r3, r1, r3
 8002dea:	4413      	add	r3, r2
 8002dec:	3360      	adds	r3, #96	; 0x60
 8002dee:	2202      	movs	r2, #2
 8002df0:	701a      	strb	r2, [r3, #0]
 8002df2:	e077      	b.n	8002ee4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	212c      	movs	r1, #44	; 0x2c
 8002dfa:	fb01 f303 	mul.w	r3, r1, r3
 8002dfe:	4413      	add	r3, r2
 8002e00:	3361      	adds	r3, #97	; 0x61
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b05      	cmp	r3, #5
 8002e06:	d109      	bne.n	8002e1c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	212c      	movs	r1, #44	; 0x2c
 8002e0e:	fb01 f303 	mul.w	r3, r1, r3
 8002e12:	4413      	add	r3, r2
 8002e14:	3360      	adds	r3, #96	; 0x60
 8002e16:	2205      	movs	r2, #5
 8002e18:	701a      	strb	r2, [r3, #0]
 8002e1a:	e063      	b.n	8002ee4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	212c      	movs	r1, #44	; 0x2c
 8002e22:	fb01 f303 	mul.w	r3, r1, r3
 8002e26:	4413      	add	r3, r2
 8002e28:	3361      	adds	r3, #97	; 0x61
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b06      	cmp	r3, #6
 8002e2e:	d009      	beq.n	8002e44 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	212c      	movs	r1, #44	; 0x2c
 8002e36:	fb01 f303 	mul.w	r3, r1, r3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3361      	adds	r3, #97	; 0x61
 8002e3e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d14f      	bne.n	8002ee4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	212c      	movs	r1, #44	; 0x2c
 8002e4a:	fb01 f303 	mul.w	r3, r1, r3
 8002e4e:	4413      	add	r3, r2
 8002e50:	335c      	adds	r3, #92	; 0x5c
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	1c5a      	adds	r2, r3, #1
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	202c      	movs	r0, #44	; 0x2c
 8002e5c:	fb00 f303 	mul.w	r3, r0, r3
 8002e60:	440b      	add	r3, r1
 8002e62:	335c      	adds	r3, #92	; 0x5c
 8002e64:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	212c      	movs	r1, #44	; 0x2c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	335c      	adds	r3, #92	; 0x5c
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d912      	bls.n	8002ea0 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	212c      	movs	r1, #44	; 0x2c
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	4413      	add	r3, r2
 8002e86:	335c      	adds	r3, #92	; 0x5c
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	212c      	movs	r1, #44	; 0x2c
 8002e92:	fb01 f303 	mul.w	r3, r1, r3
 8002e96:	4413      	add	r3, r2
 8002e98:	3360      	adds	r3, #96	; 0x60
 8002e9a:	2204      	movs	r2, #4
 8002e9c:	701a      	strb	r2, [r3, #0]
 8002e9e:	e021      	b.n	8002ee4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	212c      	movs	r1, #44	; 0x2c
 8002ea6:	fb01 f303 	mul.w	r3, r1, r3
 8002eaa:	4413      	add	r3, r2
 8002eac:	3360      	adds	r3, #96	; 0x60
 8002eae:	2202      	movs	r2, #2
 8002eb0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ec8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ed0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	015a      	lsls	r2, r3, #5
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ede:	461a      	mov	r2, r3
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	015a      	lsls	r2, r3, #5
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	b2d9      	uxtb	r1, r3
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	202c      	movs	r0, #44	; 0x2c
 8002f00:	fb00 f303 	mul.w	r3, r0, r3
 8002f04:	4413      	add	r3, r2
 8002f06:	3360      	adds	r3, #96	; 0x60
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f005 f86b 	bl	8007fe8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f12:	bf00      	nop
 8002f14:	3720      	adds	r7, #32
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b08a      	sub	sp, #40	; 0x28
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	0c5b      	lsrs	r3, r3, #17
 8002f40:	f003 030f 	and.w	r3, r3, #15
 8002f44:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	091b      	lsrs	r3, r3, #4
 8002f4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f4e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d004      	beq.n	8002f60 <HCD_RXQLVL_IRQHandler+0x46>
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2b05      	cmp	r3, #5
 8002f5a:	f000 80a9 	beq.w	80030b0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002f5e:	e0aa      	b.n	80030b6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 80a6 	beq.w	80030b4 <HCD_RXQLVL_IRQHandler+0x19a>
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	212c      	movs	r1, #44	; 0x2c
 8002f6e:	fb01 f303 	mul.w	r3, r1, r3
 8002f72:	4413      	add	r3, r2
 8002f74:	3344      	adds	r3, #68	; 0x44
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 809b 	beq.w	80030b4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	212c      	movs	r1, #44	; 0x2c
 8002f84:	fb01 f303 	mul.w	r3, r1, r3
 8002f88:	4413      	add	r3, r2
 8002f8a:	3350      	adds	r3, #80	; 0x50
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	441a      	add	r2, r3
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	202c      	movs	r0, #44	; 0x2c
 8002f98:	fb00 f303 	mul.w	r3, r0, r3
 8002f9c:	440b      	add	r3, r1
 8002f9e:	334c      	adds	r3, #76	; 0x4c
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d87a      	bhi.n	800309c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6818      	ldr	r0, [r3, #0]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	212c      	movs	r1, #44	; 0x2c
 8002fb0:	fb01 f303 	mul.w	r3, r1, r3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3344      	adds	r3, #68	; 0x44
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	b292      	uxth	r2, r2
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	f002 f8d4 	bl	800516c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	212c      	movs	r1, #44	; 0x2c
 8002fca:	fb01 f303 	mul.w	r3, r1, r3
 8002fce:	4413      	add	r3, r2
 8002fd0:	3344      	adds	r3, #68	; 0x44
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	441a      	add	r2, r3
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	202c      	movs	r0, #44	; 0x2c
 8002fde:	fb00 f303 	mul.w	r3, r0, r3
 8002fe2:	440b      	add	r3, r1
 8002fe4:	3344      	adds	r3, #68	; 0x44
 8002fe6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	212c      	movs	r1, #44	; 0x2c
 8002fee:	fb01 f303 	mul.w	r3, r1, r3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3350      	adds	r3, #80	; 0x50
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	441a      	add	r2, r3
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	202c      	movs	r0, #44	; 0x2c
 8003002:	fb00 f303 	mul.w	r3, r0, r3
 8003006:	440b      	add	r3, r1
 8003008:	3350      	adds	r3, #80	; 0x50
 800300a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	4413      	add	r3, r2
 8003014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	0cdb      	lsrs	r3, r3, #19
 800301c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003020:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	212c      	movs	r1, #44	; 0x2c
 8003028:	fb01 f303 	mul.w	r3, r1, r3
 800302c:	4413      	add	r3, r2
 800302e:	3340      	adds	r3, #64	; 0x40
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	461a      	mov	r2, r3
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4293      	cmp	r3, r2
 8003038:	d13c      	bne.n	80030b4 <HCD_RXQLVL_IRQHandler+0x19a>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d039      	beq.n	80030b4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	4413      	add	r3, r2
 8003048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003056:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800305e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	4413      	add	r3, r2
 8003068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800306c:	461a      	mov	r2, r3
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	212c      	movs	r1, #44	; 0x2c
 8003078:	fb01 f303 	mul.w	r3, r1, r3
 800307c:	4413      	add	r3, r2
 800307e:	3354      	adds	r3, #84	; 0x54
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	f083 0301 	eor.w	r3, r3, #1
 8003086:	b2d8      	uxtb	r0, r3
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	212c      	movs	r1, #44	; 0x2c
 800308e:	fb01 f303 	mul.w	r3, r1, r3
 8003092:	4413      	add	r3, r2
 8003094:	3354      	adds	r3, #84	; 0x54
 8003096:	4602      	mov	r2, r0
 8003098:	701a      	strb	r2, [r3, #0]
      break;
 800309a:	e00b      	b.n	80030b4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	212c      	movs	r1, #44	; 0x2c
 80030a2:	fb01 f303 	mul.w	r3, r1, r3
 80030a6:	4413      	add	r3, r2
 80030a8:	3360      	adds	r3, #96	; 0x60
 80030aa:	2204      	movs	r2, #4
 80030ac:	701a      	strb	r2, [r3, #0]
      break;
 80030ae:	e001      	b.n	80030b4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80030b0:	bf00      	nop
 80030b2:	e000      	b.n	80030b6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80030b4:	bf00      	nop
  }
}
 80030b6:	bf00      	nop
 80030b8:	3728      	adds	r7, #40	; 0x28
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b086      	sub	sp, #24
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80030ea:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d10b      	bne.n	800310e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d102      	bne.n	8003106 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f004 ff55 	bl	8007fb0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f043 0302 	orr.w	r3, r3, #2
 800310c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f003 0308 	and.w	r3, r3, #8
 8003114:	2b08      	cmp	r3, #8
 8003116:	d132      	bne.n	800317e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f043 0308 	orr.w	r3, r3, #8
 800311e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f003 0304 	and.w	r3, r3, #4
 8003126:	2b04      	cmp	r3, #4
 8003128:	d126      	bne.n	8003178 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d113      	bne.n	800315a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003138:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800313c:	d106      	bne.n	800314c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2102      	movs	r1, #2
 8003144:	4618      	mov	r0, r3
 8003146:	f002 f97f 	bl	8005448 <USB_InitFSLSPClkSel>
 800314a:	e011      	b.n	8003170 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2101      	movs	r1, #1
 8003152:	4618      	mov	r0, r3
 8003154:	f002 f978 	bl	8005448 <USB_InitFSLSPClkSel>
 8003158:	e00a      	b.n	8003170 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d106      	bne.n	8003170 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003168:	461a      	mov	r2, r3
 800316a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800316e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f004 ff47 	bl	8008004 <HAL_HCD_PortEnabled_Callback>
 8003176:	e002      	b.n	800317e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f004 ff51 	bl	8008020 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f003 0320 	and.w	r3, r3, #32
 8003184:	2b20      	cmp	r3, #32
 8003186:	d103      	bne.n	8003190 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f043 0320 	orr.w	r3, r3, #32
 800318e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003196:	461a      	mov	r2, r3
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	6013      	str	r3, [r2, #0]
}
 800319c:	bf00      	nop
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e267      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d075      	beq.n	80032ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031c2:	4b88      	ldr	r3, [pc, #544]	; (80033e4 <HAL_RCC_OscConfig+0x240>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 030c 	and.w	r3, r3, #12
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d00c      	beq.n	80031e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ce:	4b85      	ldr	r3, [pc, #532]	; (80033e4 <HAL_RCC_OscConfig+0x240>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d112      	bne.n	8003200 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031da:	4b82      	ldr	r3, [pc, #520]	; (80033e4 <HAL_RCC_OscConfig+0x240>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031e6:	d10b      	bne.n	8003200 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e8:	4b7e      	ldr	r3, [pc, #504]	; (80033e4 <HAL_RCC_OscConfig+0x240>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d05b      	beq.n	80032ac <HAL_RCC_OscConfig+0x108>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d157      	bne.n	80032ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e242      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003208:	d106      	bne.n	8003218 <HAL_RCC_OscConfig+0x74>
 800320a:	4b76      	ldr	r3, [pc, #472]	; (80033e4 <HAL_RCC_OscConfig+0x240>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a75      	ldr	r2, [pc, #468]	; (80033e4 <HAL_RCC_OscConfig+0x240>)
 8003210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	e01d      	b.n	8003254 <HAL_RCC_OscConfig+0xb0>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003220:	d10c      	bne.n	800323c <HAL_RCC_OscConfig+0x98>
 8003222:	4b70      	ldr	r3, [pc, #448]	; (80033e4 <HAL_RCC_OscConfig+0x240>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a6f      	ldr	r2, [pc, #444]	; (80033e4 <HAL_RCC_OscConfig+0x240>)
 8003228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	4b6d      	ldr	r3, [pc, #436]	; (80033e4 <HAL_RCC_OscConfig+0x240>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a6c      	ldr	r2, [pc, #432]	; (80033e4 <HAL_RCC_OscConfig+0x240>)
 8003234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	e00b      	b.n	8003254 <HAL_RCC_OscConfig+0xb0>
 800323c:	4b69      	ldr	r3, [pc, #420]	; (80033e4 <HAL_RCC_OscConfig+0x240>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a68      	ldr	r2, [pc, #416]	; (80033e4 <HAL_RCC_OscConfig+0x240>)
 8003242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003246:	6013      	str	r3, [r2, #0]
 8003248:	4b66      	ldr	r3, [pc, #408]	; (80033e4 <HAL_RCC_OscConfig+0x240>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a65      	ldr	r2, [pc, #404]	; (80033e4 <HAL_RCC_OscConfig+0x240>)
 800324e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003252:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d013      	beq.n	8003284 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325c:	f7fd fcb6 	bl	8000bcc <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003264:	f7fd fcb2 	bl	8000bcc <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b64      	cmp	r3, #100	; 0x64
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e207      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003276:	4b5b      	ldr	r3, [pc, #364]	; (80033e4 <HAL_RCC_OscConfig+0x240>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f0      	beq.n	8003264 <HAL_RCC_OscConfig+0xc0>
 8003282:	e014      	b.n	80032ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003284:	f7fd fca2 	bl	8000bcc <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800328c:	f7fd fc9e 	bl	8000bcc <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b64      	cmp	r3, #100	; 0x64
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e1f3      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800329e:	4b51      	ldr	r3, [pc, #324]	; (80033e4 <HAL_RCC_OscConfig+0x240>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f0      	bne.n	800328c <HAL_RCC_OscConfig+0xe8>
 80032aa:	e000      	b.n	80032ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d063      	beq.n	8003382 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032ba:	4b4a      	ldr	r3, [pc, #296]	; (80033e4 <HAL_RCC_OscConfig+0x240>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00b      	beq.n	80032de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032c6:	4b47      	ldr	r3, [pc, #284]	; (80033e4 <HAL_RCC_OscConfig+0x240>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d11c      	bne.n	800330c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032d2:	4b44      	ldr	r3, [pc, #272]	; (80033e4 <HAL_RCC_OscConfig+0x240>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d116      	bne.n	800330c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032de:	4b41      	ldr	r3, [pc, #260]	; (80033e4 <HAL_RCC_OscConfig+0x240>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d005      	beq.n	80032f6 <HAL_RCC_OscConfig+0x152>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d001      	beq.n	80032f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e1c7      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f6:	4b3b      	ldr	r3, [pc, #236]	; (80033e4 <HAL_RCC_OscConfig+0x240>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	4937      	ldr	r1, [pc, #220]	; (80033e4 <HAL_RCC_OscConfig+0x240>)
 8003306:	4313      	orrs	r3, r2
 8003308:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800330a:	e03a      	b.n	8003382 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d020      	beq.n	8003356 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003314:	4b34      	ldr	r3, [pc, #208]	; (80033e8 <HAL_RCC_OscConfig+0x244>)
 8003316:	2201      	movs	r2, #1
 8003318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331a:	f7fd fc57 	bl	8000bcc <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003320:	e008      	b.n	8003334 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003322:	f7fd fc53 	bl	8000bcc <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e1a8      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003334:	4b2b      	ldr	r3, [pc, #172]	; (80033e4 <HAL_RCC_OscConfig+0x240>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0f0      	beq.n	8003322 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003340:	4b28      	ldr	r3, [pc, #160]	; (80033e4 <HAL_RCC_OscConfig+0x240>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	4925      	ldr	r1, [pc, #148]	; (80033e4 <HAL_RCC_OscConfig+0x240>)
 8003350:	4313      	orrs	r3, r2
 8003352:	600b      	str	r3, [r1, #0]
 8003354:	e015      	b.n	8003382 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003356:	4b24      	ldr	r3, [pc, #144]	; (80033e8 <HAL_RCC_OscConfig+0x244>)
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335c:	f7fd fc36 	bl	8000bcc <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003364:	f7fd fc32 	bl	8000bcc <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e187      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003376:	4b1b      	ldr	r3, [pc, #108]	; (80033e4 <HAL_RCC_OscConfig+0x240>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1f0      	bne.n	8003364 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0308 	and.w	r3, r3, #8
 800338a:	2b00      	cmp	r3, #0
 800338c:	d036      	beq.n	80033fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d016      	beq.n	80033c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003396:	4b15      	ldr	r3, [pc, #84]	; (80033ec <HAL_RCC_OscConfig+0x248>)
 8003398:	2201      	movs	r2, #1
 800339a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339c:	f7fd fc16 	bl	8000bcc <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033a4:	f7fd fc12 	bl	8000bcc <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e167      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033b6:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <HAL_RCC_OscConfig+0x240>)
 80033b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0f0      	beq.n	80033a4 <HAL_RCC_OscConfig+0x200>
 80033c2:	e01b      	b.n	80033fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033c4:	4b09      	ldr	r3, [pc, #36]	; (80033ec <HAL_RCC_OscConfig+0x248>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ca:	f7fd fbff 	bl	8000bcc <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d0:	e00e      	b.n	80033f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033d2:	f7fd fbfb 	bl	8000bcc <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d907      	bls.n	80033f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e150      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
 80033e4:	40023800 	.word	0x40023800
 80033e8:	42470000 	.word	0x42470000
 80033ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f0:	4b88      	ldr	r3, [pc, #544]	; (8003614 <HAL_RCC_OscConfig+0x470>)
 80033f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1ea      	bne.n	80033d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 8097 	beq.w	8003538 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800340a:	2300      	movs	r3, #0
 800340c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800340e:	4b81      	ldr	r3, [pc, #516]	; (8003614 <HAL_RCC_OscConfig+0x470>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10f      	bne.n	800343a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800341a:	2300      	movs	r3, #0
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	4b7d      	ldr	r3, [pc, #500]	; (8003614 <HAL_RCC_OscConfig+0x470>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	4a7c      	ldr	r2, [pc, #496]	; (8003614 <HAL_RCC_OscConfig+0x470>)
 8003424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003428:	6413      	str	r3, [r2, #64]	; 0x40
 800342a:	4b7a      	ldr	r3, [pc, #488]	; (8003614 <HAL_RCC_OscConfig+0x470>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003436:	2301      	movs	r3, #1
 8003438:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343a:	4b77      	ldr	r3, [pc, #476]	; (8003618 <HAL_RCC_OscConfig+0x474>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003442:	2b00      	cmp	r3, #0
 8003444:	d118      	bne.n	8003478 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003446:	4b74      	ldr	r3, [pc, #464]	; (8003618 <HAL_RCC_OscConfig+0x474>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a73      	ldr	r2, [pc, #460]	; (8003618 <HAL_RCC_OscConfig+0x474>)
 800344c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003450:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003452:	f7fd fbbb 	bl	8000bcc <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003458:	e008      	b.n	800346c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800345a:	f7fd fbb7 	bl	8000bcc <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e10c      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346c:	4b6a      	ldr	r3, [pc, #424]	; (8003618 <HAL_RCC_OscConfig+0x474>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0f0      	beq.n	800345a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d106      	bne.n	800348e <HAL_RCC_OscConfig+0x2ea>
 8003480:	4b64      	ldr	r3, [pc, #400]	; (8003614 <HAL_RCC_OscConfig+0x470>)
 8003482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003484:	4a63      	ldr	r2, [pc, #396]	; (8003614 <HAL_RCC_OscConfig+0x470>)
 8003486:	f043 0301 	orr.w	r3, r3, #1
 800348a:	6713      	str	r3, [r2, #112]	; 0x70
 800348c:	e01c      	b.n	80034c8 <HAL_RCC_OscConfig+0x324>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b05      	cmp	r3, #5
 8003494:	d10c      	bne.n	80034b0 <HAL_RCC_OscConfig+0x30c>
 8003496:	4b5f      	ldr	r3, [pc, #380]	; (8003614 <HAL_RCC_OscConfig+0x470>)
 8003498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349a:	4a5e      	ldr	r2, [pc, #376]	; (8003614 <HAL_RCC_OscConfig+0x470>)
 800349c:	f043 0304 	orr.w	r3, r3, #4
 80034a0:	6713      	str	r3, [r2, #112]	; 0x70
 80034a2:	4b5c      	ldr	r3, [pc, #368]	; (8003614 <HAL_RCC_OscConfig+0x470>)
 80034a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a6:	4a5b      	ldr	r2, [pc, #364]	; (8003614 <HAL_RCC_OscConfig+0x470>)
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	6713      	str	r3, [r2, #112]	; 0x70
 80034ae:	e00b      	b.n	80034c8 <HAL_RCC_OscConfig+0x324>
 80034b0:	4b58      	ldr	r3, [pc, #352]	; (8003614 <HAL_RCC_OscConfig+0x470>)
 80034b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b4:	4a57      	ldr	r2, [pc, #348]	; (8003614 <HAL_RCC_OscConfig+0x470>)
 80034b6:	f023 0301 	bic.w	r3, r3, #1
 80034ba:	6713      	str	r3, [r2, #112]	; 0x70
 80034bc:	4b55      	ldr	r3, [pc, #340]	; (8003614 <HAL_RCC_OscConfig+0x470>)
 80034be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c0:	4a54      	ldr	r2, [pc, #336]	; (8003614 <HAL_RCC_OscConfig+0x470>)
 80034c2:	f023 0304 	bic.w	r3, r3, #4
 80034c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d015      	beq.n	80034fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d0:	f7fd fb7c 	bl	8000bcc <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d6:	e00a      	b.n	80034ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034d8:	f7fd fb78 	bl	8000bcc <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e0cb      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ee:	4b49      	ldr	r3, [pc, #292]	; (8003614 <HAL_RCC_OscConfig+0x470>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0ee      	beq.n	80034d8 <HAL_RCC_OscConfig+0x334>
 80034fa:	e014      	b.n	8003526 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034fc:	f7fd fb66 	bl	8000bcc <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003502:	e00a      	b.n	800351a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003504:	f7fd fb62 	bl	8000bcc <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003512:	4293      	cmp	r3, r2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e0b5      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800351a:	4b3e      	ldr	r3, [pc, #248]	; (8003614 <HAL_RCC_OscConfig+0x470>)
 800351c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1ee      	bne.n	8003504 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003526:	7dfb      	ldrb	r3, [r7, #23]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d105      	bne.n	8003538 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800352c:	4b39      	ldr	r3, [pc, #228]	; (8003614 <HAL_RCC_OscConfig+0x470>)
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	4a38      	ldr	r2, [pc, #224]	; (8003614 <HAL_RCC_OscConfig+0x470>)
 8003532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003536:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 80a1 	beq.w	8003684 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003542:	4b34      	ldr	r3, [pc, #208]	; (8003614 <HAL_RCC_OscConfig+0x470>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	2b08      	cmp	r3, #8
 800354c:	d05c      	beq.n	8003608 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	2b02      	cmp	r3, #2
 8003554:	d141      	bne.n	80035da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003556:	4b31      	ldr	r3, [pc, #196]	; (800361c <HAL_RCC_OscConfig+0x478>)
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355c:	f7fd fb36 	bl	8000bcc <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003564:	f7fd fb32 	bl	8000bcc <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e087      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003576:	4b27      	ldr	r3, [pc, #156]	; (8003614 <HAL_RCC_OscConfig+0x470>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f0      	bne.n	8003564 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69da      	ldr	r2, [r3, #28]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	019b      	lsls	r3, r3, #6
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003598:	085b      	lsrs	r3, r3, #1
 800359a:	3b01      	subs	r3, #1
 800359c:	041b      	lsls	r3, r3, #16
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	061b      	lsls	r3, r3, #24
 80035a6:	491b      	ldr	r1, [pc, #108]	; (8003614 <HAL_RCC_OscConfig+0x470>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035ac:	4b1b      	ldr	r3, [pc, #108]	; (800361c <HAL_RCC_OscConfig+0x478>)
 80035ae:	2201      	movs	r2, #1
 80035b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b2:	f7fd fb0b 	bl	8000bcc <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b8:	e008      	b.n	80035cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ba:	f7fd fb07 	bl	8000bcc <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e05c      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035cc:	4b11      	ldr	r3, [pc, #68]	; (8003614 <HAL_RCC_OscConfig+0x470>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0f0      	beq.n	80035ba <HAL_RCC_OscConfig+0x416>
 80035d8:	e054      	b.n	8003684 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035da:	4b10      	ldr	r3, [pc, #64]	; (800361c <HAL_RCC_OscConfig+0x478>)
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e0:	f7fd faf4 	bl	8000bcc <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e8:	f7fd faf0 	bl	8000bcc <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e045      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fa:	4b06      	ldr	r3, [pc, #24]	; (8003614 <HAL_RCC_OscConfig+0x470>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f0      	bne.n	80035e8 <HAL_RCC_OscConfig+0x444>
 8003606:	e03d      	b.n	8003684 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d107      	bne.n	8003620 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e038      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
 8003614:	40023800 	.word	0x40023800
 8003618:	40007000 	.word	0x40007000
 800361c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003620:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <HAL_RCC_OscConfig+0x4ec>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d028      	beq.n	8003680 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003638:	429a      	cmp	r2, r3
 800363a:	d121      	bne.n	8003680 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003646:	429a      	cmp	r2, r3
 8003648:	d11a      	bne.n	8003680 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003650:	4013      	ands	r3, r2
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003656:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003658:	4293      	cmp	r3, r2
 800365a:	d111      	bne.n	8003680 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003666:	085b      	lsrs	r3, r3, #1
 8003668:	3b01      	subs	r3, #1
 800366a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800366c:	429a      	cmp	r2, r3
 800366e:	d107      	bne.n	8003680 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800367c:	429a      	cmp	r2, r3
 800367e:	d001      	beq.n	8003684 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e000      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3718      	adds	r7, #24
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40023800 	.word	0x40023800

08003694 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e0cc      	b.n	8003842 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036a8:	4b68      	ldr	r3, [pc, #416]	; (800384c <HAL_RCC_ClockConfig+0x1b8>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d90c      	bls.n	80036d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b6:	4b65      	ldr	r3, [pc, #404]	; (800384c <HAL_RCC_ClockConfig+0x1b8>)
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036be:	4b63      	ldr	r3, [pc, #396]	; (800384c <HAL_RCC_ClockConfig+0x1b8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d001      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e0b8      	b.n	8003842 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d020      	beq.n	800371e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d005      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036e8:	4b59      	ldr	r3, [pc, #356]	; (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	4a58      	ldr	r2, [pc, #352]	; (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003700:	4b53      	ldr	r3, [pc, #332]	; (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	4a52      	ldr	r2, [pc, #328]	; (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800370a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800370c:	4b50      	ldr	r3, [pc, #320]	; (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	494d      	ldr	r1, [pc, #308]	; (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	4313      	orrs	r3, r2
 800371c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d044      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d107      	bne.n	8003742 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003732:	4b47      	ldr	r3, [pc, #284]	; (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d119      	bne.n	8003772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e07f      	b.n	8003842 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b02      	cmp	r3, #2
 8003748:	d003      	beq.n	8003752 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800374e:	2b03      	cmp	r3, #3
 8003750:	d107      	bne.n	8003762 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003752:	4b3f      	ldr	r3, [pc, #252]	; (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d109      	bne.n	8003772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e06f      	b.n	8003842 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003762:	4b3b      	ldr	r3, [pc, #236]	; (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e067      	b.n	8003842 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003772:	4b37      	ldr	r3, [pc, #220]	; (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f023 0203 	bic.w	r2, r3, #3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	4934      	ldr	r1, [pc, #208]	; (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 8003780:	4313      	orrs	r3, r2
 8003782:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003784:	f7fd fa22 	bl	8000bcc <HAL_GetTick>
 8003788:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378a:	e00a      	b.n	80037a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800378c:	f7fd fa1e 	bl	8000bcc <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	f241 3288 	movw	r2, #5000	; 0x1388
 800379a:	4293      	cmp	r3, r2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e04f      	b.n	8003842 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a2:	4b2b      	ldr	r3, [pc, #172]	; (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 020c 	and.w	r2, r3, #12
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d1eb      	bne.n	800378c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037b4:	4b25      	ldr	r3, [pc, #148]	; (800384c <HAL_RCC_ClockConfig+0x1b8>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d20c      	bcs.n	80037dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c2:	4b22      	ldr	r3, [pc, #136]	; (800384c <HAL_RCC_ClockConfig+0x1b8>)
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ca:	4b20      	ldr	r3, [pc, #128]	; (800384c <HAL_RCC_ClockConfig+0x1b8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d001      	beq.n	80037dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e032      	b.n	8003842 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d008      	beq.n	80037fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037e8:	4b19      	ldr	r3, [pc, #100]	; (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	4916      	ldr	r1, [pc, #88]	; (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d009      	beq.n	800381a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003806:	4b12      	ldr	r3, [pc, #72]	; (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	490e      	ldr	r1, [pc, #56]	; (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	4313      	orrs	r3, r2
 8003818:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800381a:	f000 f821 	bl	8003860 <HAL_RCC_GetSysClockFreq>
 800381e:	4602      	mov	r2, r0
 8003820:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	091b      	lsrs	r3, r3, #4
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	490a      	ldr	r1, [pc, #40]	; (8003854 <HAL_RCC_ClockConfig+0x1c0>)
 800382c:	5ccb      	ldrb	r3, [r1, r3]
 800382e:	fa22 f303 	lsr.w	r3, r2, r3
 8003832:	4a09      	ldr	r2, [pc, #36]	; (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 8003834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003836:	4b09      	ldr	r3, [pc, #36]	; (800385c <HAL_RCC_ClockConfig+0x1c8>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f7fd f982 	bl	8000b44 <HAL_InitTick>

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40023c00 	.word	0x40023c00
 8003850:	40023800 	.word	0x40023800
 8003854:	08008694 	.word	0x08008694
 8003858:	20000000 	.word	0x20000000
 800385c:	20000004 	.word	0x20000004

08003860 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003864:	b090      	sub	sp, #64	; 0x40
 8003866:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003868:	2300      	movs	r3, #0
 800386a:	637b      	str	r3, [r7, #52]	; 0x34
 800386c:	2300      	movs	r3, #0
 800386e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003870:	2300      	movs	r3, #0
 8003872:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003878:	4b59      	ldr	r3, [pc, #356]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 030c 	and.w	r3, r3, #12
 8003880:	2b08      	cmp	r3, #8
 8003882:	d00d      	beq.n	80038a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003884:	2b08      	cmp	r3, #8
 8003886:	f200 80a1 	bhi.w	80039cc <HAL_RCC_GetSysClockFreq+0x16c>
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <HAL_RCC_GetSysClockFreq+0x34>
 800388e:	2b04      	cmp	r3, #4
 8003890:	d003      	beq.n	800389a <HAL_RCC_GetSysClockFreq+0x3a>
 8003892:	e09b      	b.n	80039cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003894:	4b53      	ldr	r3, [pc, #332]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003896:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003898:	e09b      	b.n	80039d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800389a:	4b53      	ldr	r3, [pc, #332]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800389c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800389e:	e098      	b.n	80039d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038a0:	4b4f      	ldr	r3, [pc, #316]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038aa:	4b4d      	ldr	r3, [pc, #308]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d028      	beq.n	8003908 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038b6:	4b4a      	ldr	r3, [pc, #296]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	099b      	lsrs	r3, r3, #6
 80038bc:	2200      	movs	r2, #0
 80038be:	623b      	str	r3, [r7, #32]
 80038c0:	627a      	str	r2, [r7, #36]	; 0x24
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80038c8:	2100      	movs	r1, #0
 80038ca:	4b47      	ldr	r3, [pc, #284]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80038cc:	fb03 f201 	mul.w	r2, r3, r1
 80038d0:	2300      	movs	r3, #0
 80038d2:	fb00 f303 	mul.w	r3, r0, r3
 80038d6:	4413      	add	r3, r2
 80038d8:	4a43      	ldr	r2, [pc, #268]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80038da:	fba0 1202 	umull	r1, r2, r0, r2
 80038de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038e0:	460a      	mov	r2, r1
 80038e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80038e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038e6:	4413      	add	r3, r2
 80038e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ec:	2200      	movs	r2, #0
 80038ee:	61bb      	str	r3, [r7, #24]
 80038f0:	61fa      	str	r2, [r7, #28]
 80038f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80038fa:	f7fc fc6b 	bl	80001d4 <__aeabi_uldivmod>
 80038fe:	4602      	mov	r2, r0
 8003900:	460b      	mov	r3, r1
 8003902:	4613      	mov	r3, r2
 8003904:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003906:	e053      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003908:	4b35      	ldr	r3, [pc, #212]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	099b      	lsrs	r3, r3, #6
 800390e:	2200      	movs	r2, #0
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	617a      	str	r2, [r7, #20]
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800391a:	f04f 0b00 	mov.w	fp, #0
 800391e:	4652      	mov	r2, sl
 8003920:	465b      	mov	r3, fp
 8003922:	f04f 0000 	mov.w	r0, #0
 8003926:	f04f 0100 	mov.w	r1, #0
 800392a:	0159      	lsls	r1, r3, #5
 800392c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003930:	0150      	lsls	r0, r2, #5
 8003932:	4602      	mov	r2, r0
 8003934:	460b      	mov	r3, r1
 8003936:	ebb2 080a 	subs.w	r8, r2, sl
 800393a:	eb63 090b 	sbc.w	r9, r3, fp
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	f04f 0300 	mov.w	r3, #0
 8003946:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800394a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800394e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003952:	ebb2 0408 	subs.w	r4, r2, r8
 8003956:	eb63 0509 	sbc.w	r5, r3, r9
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	00eb      	lsls	r3, r5, #3
 8003964:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003968:	00e2      	lsls	r2, r4, #3
 800396a:	4614      	mov	r4, r2
 800396c:	461d      	mov	r5, r3
 800396e:	eb14 030a 	adds.w	r3, r4, sl
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	eb45 030b 	adc.w	r3, r5, fp
 8003978:	607b      	str	r3, [r7, #4]
 800397a:	f04f 0200 	mov.w	r2, #0
 800397e:	f04f 0300 	mov.w	r3, #0
 8003982:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003986:	4629      	mov	r1, r5
 8003988:	028b      	lsls	r3, r1, #10
 800398a:	4621      	mov	r1, r4
 800398c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003990:	4621      	mov	r1, r4
 8003992:	028a      	lsls	r2, r1, #10
 8003994:	4610      	mov	r0, r2
 8003996:	4619      	mov	r1, r3
 8003998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800399a:	2200      	movs	r2, #0
 800399c:	60bb      	str	r3, [r7, #8]
 800399e:	60fa      	str	r2, [r7, #12]
 80039a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039a4:	f7fc fc16 	bl	80001d4 <__aeabi_uldivmod>
 80039a8:	4602      	mov	r2, r0
 80039aa:	460b      	mov	r3, r1
 80039ac:	4613      	mov	r3, r2
 80039ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039b0:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	0c1b      	lsrs	r3, r3, #16
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	3301      	adds	r3, #1
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80039c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039ca:	e002      	b.n	80039d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80039ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3740      	adds	r7, #64	; 0x40
 80039d8:	46bd      	mov	sp, r7
 80039da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039de:	bf00      	nop
 80039e0:	40023800 	.word	0x40023800
 80039e4:	00f42400 	.word	0x00f42400
 80039e8:	017d7840 	.word	0x017d7840

080039ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039f0:	4b03      	ldr	r3, [pc, #12]	; (8003a00 <HAL_RCC_GetHCLKFreq+0x14>)
 80039f2:	681b      	ldr	r3, [r3, #0]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	20000000 	.word	0x20000000

08003a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a08:	f7ff fff0 	bl	80039ec <HAL_RCC_GetHCLKFreq>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	0a9b      	lsrs	r3, r3, #10
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	4903      	ldr	r1, [pc, #12]	; (8003a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a1a:	5ccb      	ldrb	r3, [r1, r3]
 8003a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40023800 	.word	0x40023800
 8003a28:	080086a4 	.word	0x080086a4

08003a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a30:	f7ff ffdc 	bl	80039ec <HAL_RCC_GetHCLKFreq>
 8003a34:	4602      	mov	r2, r0
 8003a36:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	0b5b      	lsrs	r3, r3, #13
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	4903      	ldr	r1, [pc, #12]	; (8003a50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a42:	5ccb      	ldrb	r3, [r1, r3]
 8003a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	080086a4 	.word	0x080086a4

08003a54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e03f      	b.n	8003ae6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d106      	bne.n	8003a80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7fc fec6 	bl	800080c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2224      	movs	r2, #36	; 0x24
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 ff81 	bl	80049a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695a      	ldr	r2, [r3, #20]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003abc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68da      	ldr	r2, [r3, #12]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003acc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
	...

08003af0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08c      	sub	sp, #48	; 0x30
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	4613      	mov	r3, r2
 8003afc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b20      	cmp	r3, #32
 8003b08:	d165      	bne.n	8003bd6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <HAL_UART_Transmit_DMA+0x26>
 8003b10:	88fb      	ldrh	r3, [r7, #6]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e05e      	b.n	8003bd8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_UART_Transmit_DMA+0x38>
 8003b24:	2302      	movs	r3, #2
 8003b26:	e057      	b.n	8003bd8 <HAL_UART_Transmit_DMA+0xe8>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	88fa      	ldrh	r2, [r7, #6]
 8003b3a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	88fa      	ldrh	r2, [r7, #6]
 8003b40:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2221      	movs	r2, #33	; 0x21
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b54:	4a22      	ldr	r2, [pc, #136]	; (8003be0 <HAL_UART_Transmit_DMA+0xf0>)
 8003b56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5c:	4a21      	ldr	r2, [pc, #132]	; (8003be4 <HAL_UART_Transmit_DMA+0xf4>)
 8003b5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b64:	4a20      	ldr	r2, [pc, #128]	; (8003be8 <HAL_UART_Transmit_DMA+0xf8>)
 8003b66:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003b70:	f107 0308 	add.w	r3, r7, #8
 8003b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7c:	6819      	ldr	r1, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3304      	adds	r3, #4
 8003b84:	461a      	mov	r2, r3
 8003b86:	88fb      	ldrh	r3, [r7, #6]
 8003b88:	f7fd fa10 	bl	8000fac <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b94:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	3314      	adds	r3, #20
 8003ba4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	e853 3f00 	ldrex	r3, [r3]
 8003bac:	617b      	str	r3, [r7, #20]
   return(result);
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3314      	adds	r3, #20
 8003bbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bbe:	627a      	str	r2, [r7, #36]	; 0x24
 8003bc0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc2:	6a39      	ldr	r1, [r7, #32]
 8003bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc6:	e841 2300 	strex	r3, r2, [r1]
 8003bca:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1e5      	bne.n	8003b9e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e000      	b.n	8003bd8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8003bd6:	2302      	movs	r3, #2
  }
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3730      	adds	r7, #48	; 0x30
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	08004239 	.word	0x08004239
 8003be4:	080042d3 	.word	0x080042d3
 8003be8:	0800444b 	.word	0x0800444b

08003bec <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08c      	sub	sp, #48	; 0x30
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b20      	cmp	r3, #32
 8003c04:	d152      	bne.n	8003cac <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003c0c:	88fb      	ldrh	r3, [r7, #6]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e04b      	b.n	8003cae <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e044      	b.n	8003cae <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	461a      	mov	r2, r3
 8003c36:	68b9      	ldr	r1, [r7, #8]
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 fc51 	bl	80044e0 <UART_Start_Receive_DMA>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003c44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d12c      	bne.n	8003ca6 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d125      	bne.n	8003ca0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c54:	2300      	movs	r3, #0
 8003c56:	613b      	str	r3, [r7, #16]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	613b      	str	r3, [r7, #16]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	613b      	str	r3, [r7, #16]
 8003c68:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	330c      	adds	r3, #12
 8003c70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	e853 3f00 	ldrex	r3, [r3]
 8003c78:	617b      	str	r3, [r7, #20]
   return(result);
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f043 0310 	orr.w	r3, r3, #16
 8003c80:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	330c      	adds	r3, #12
 8003c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c8a:	627a      	str	r2, [r7, #36]	; 0x24
 8003c8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8e:	6a39      	ldr	r1, [r7, #32]
 8003c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c92:	e841 2300 	strex	r3, r2, [r1]
 8003c96:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1e5      	bne.n	8003c6a <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8003c9e:	e002      	b.n	8003ca6 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003ca6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003caa:	e000      	b.n	8003cae <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8003cac:	2302      	movs	r3, #2
  }
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3730      	adds	r7, #48	; 0x30
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
	...

08003cb8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b0ba      	sub	sp, #232	; 0xe8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003cf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10f      	bne.n	8003d1e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d02:	f003 0320 	and.w	r3, r3, #32
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d009      	beq.n	8003d1e <HAL_UART_IRQHandler+0x66>
 8003d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fd87 	bl	800482a <UART_Receive_IT>
      return;
 8003d1c:	e256      	b.n	80041cc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 80de 	beq.w	8003ee4 <HAL_UART_IRQHandler+0x22c>
 8003d28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d106      	bne.n	8003d42 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d38:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 80d1 	beq.w	8003ee4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00b      	beq.n	8003d66 <HAL_UART_IRQHandler+0xae>
 8003d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d005      	beq.n	8003d66 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	f043 0201 	orr.w	r2, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00b      	beq.n	8003d8a <HAL_UART_IRQHandler+0xd2>
 8003d72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d005      	beq.n	8003d8a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	f043 0202 	orr.w	r2, r3, #2
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00b      	beq.n	8003dae <HAL_UART_IRQHandler+0xf6>
 8003d96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d005      	beq.n	8003dae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	f043 0204 	orr.w	r2, r3, #4
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d011      	beq.n	8003dde <HAL_UART_IRQHandler+0x126>
 8003dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dbe:	f003 0320 	and.w	r3, r3, #32
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d105      	bne.n	8003dd2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003dc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d005      	beq.n	8003dde <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	f043 0208 	orr.w	r2, r3, #8
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 81ed 	beq.w	80041c2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dec:	f003 0320 	and.w	r3, r3, #32
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <HAL_UART_IRQHandler+0x14e>
 8003df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003df8:	f003 0320 	and.w	r3, r3, #32
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 fd12 	bl	800482a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e10:	2b40      	cmp	r3, #64	; 0x40
 8003e12:	bf0c      	ite	eq
 8003e14:	2301      	moveq	r3, #1
 8003e16:	2300      	movne	r3, #0
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d103      	bne.n	8003e32 <HAL_UART_IRQHandler+0x17a>
 8003e2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d04f      	beq.n	8003ed2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fc1a 	bl	800466c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e42:	2b40      	cmp	r3, #64	; 0x40
 8003e44:	d141      	bne.n	8003eca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3314      	adds	r3, #20
 8003e4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e54:	e853 3f00 	ldrex	r3, [r3]
 8003e58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3314      	adds	r3, #20
 8003e6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e82:	e841 2300 	strex	r3, r2, [r1]
 8003e86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1d9      	bne.n	8003e46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d013      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9e:	4a7d      	ldr	r2, [pc, #500]	; (8004094 <HAL_UART_IRQHandler+0x3dc>)
 8003ea0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fd f948 	bl	800113c <HAL_DMA_Abort_IT>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d016      	beq.n	8003ee0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ebc:	4610      	mov	r0, r2
 8003ebe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec0:	e00e      	b.n	8003ee0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f9ae 	bl	8004224 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec8:	e00a      	b.n	8003ee0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f9aa 	bl	8004224 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed0:	e006      	b.n	8003ee0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f9a6 	bl	8004224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003ede:	e170      	b.n	80041c2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee0:	bf00      	nop
    return;
 8003ee2:	e16e      	b.n	80041c2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	f040 814a 	bne.w	8004182 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 8143 	beq.w	8004182 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f00:	f003 0310 	and.w	r3, r3, #16
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 813c 	beq.w	8004182 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60bb      	str	r3, [r7, #8]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	60bb      	str	r3, [r7, #8]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2a:	2b40      	cmp	r3, #64	; 0x40
 8003f2c:	f040 80b4 	bne.w	8004098 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 8140 	beq.w	80041c6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	f080 8139 	bcs.w	80041c6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f5a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f66:	f000 8088 	beq.w	800407a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	330c      	adds	r3, #12
 8003f70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f78:	e853 3f00 	ldrex	r3, [r3]
 8003f7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	330c      	adds	r3, #12
 8003f92:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003f96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003fa2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003fa6:	e841 2300 	strex	r3, r2, [r1]
 8003faa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003fae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1d9      	bne.n	8003f6a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	3314      	adds	r3, #20
 8003fbc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fc0:	e853 3f00 	ldrex	r3, [r3]
 8003fc4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003fc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fc8:	f023 0301 	bic.w	r3, r3, #1
 8003fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3314      	adds	r3, #20
 8003fd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fda:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003fde:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003fe2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003fe6:	e841 2300 	strex	r3, r2, [r1]
 8003fea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003fec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1e1      	bne.n	8003fb6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	3314      	adds	r3, #20
 8003ff8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ffc:	e853 3f00 	ldrex	r3, [r3]
 8004000:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004008:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3314      	adds	r3, #20
 8004012:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004016:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004018:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800401c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800401e:	e841 2300 	strex	r3, r2, [r1]
 8004022:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1e3      	bne.n	8003ff2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2220      	movs	r2, #32
 800402e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	330c      	adds	r3, #12
 800403e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004042:	e853 3f00 	ldrex	r3, [r3]
 8004046:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800404a:	f023 0310 	bic.w	r3, r3, #16
 800404e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	330c      	adds	r3, #12
 8004058:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800405c:	65ba      	str	r2, [r7, #88]	; 0x58
 800405e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004060:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004062:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004064:	e841 2300 	strex	r3, r2, [r1]
 8004068:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800406a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1e3      	bne.n	8004038 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004074:	4618      	mov	r0, r3
 8004076:	f7fc fff1 	bl	800105c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004082:	b29b      	uxth	r3, r3
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	b29b      	uxth	r3, r3
 8004088:	4619      	mov	r1, r3
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fc fa24 	bl	80004d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004090:	e099      	b.n	80041c6 <HAL_UART_IRQHandler+0x50e>
 8004092:	bf00      	nop
 8004094:	08004733 	.word	0x08004733
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 808b 	beq.w	80041ca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80040b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 8086 	beq.w	80041ca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	330c      	adds	r3, #12
 80040c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c8:	e853 3f00 	ldrex	r3, [r3]
 80040cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	330c      	adds	r3, #12
 80040de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80040e2:	647a      	str	r2, [r7, #68]	; 0x44
 80040e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040ea:	e841 2300 	strex	r3, r2, [r1]
 80040ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1e3      	bne.n	80040be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3314      	adds	r3, #20
 80040fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	e853 3f00 	ldrex	r3, [r3]
 8004104:	623b      	str	r3, [r7, #32]
   return(result);
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	f023 0301 	bic.w	r3, r3, #1
 800410c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3314      	adds	r3, #20
 8004116:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800411a:	633a      	str	r2, [r7, #48]	; 0x30
 800411c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004122:	e841 2300 	strex	r3, r2, [r1]
 8004126:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1e3      	bne.n	80040f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2220      	movs	r2, #32
 8004132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	330c      	adds	r3, #12
 8004142:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	e853 3f00 	ldrex	r3, [r3]
 800414a:	60fb      	str	r3, [r7, #12]
   return(result);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f023 0310 	bic.w	r3, r3, #16
 8004152:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	330c      	adds	r3, #12
 800415c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004160:	61fa      	str	r2, [r7, #28]
 8004162:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004164:	69b9      	ldr	r1, [r7, #24]
 8004166:	69fa      	ldr	r2, [r7, #28]
 8004168:	e841 2300 	strex	r3, r2, [r1]
 800416c:	617b      	str	r3, [r7, #20]
   return(result);
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1e3      	bne.n	800413c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004174:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004178:	4619      	mov	r1, r3
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7fc f9ac 	bl	80004d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004180:	e023      	b.n	80041ca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418a:	2b00      	cmp	r3, #0
 800418c:	d009      	beq.n	80041a2 <HAL_UART_IRQHandler+0x4ea>
 800418e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 fadd 	bl	800475a <UART_Transmit_IT>
    return;
 80041a0:	e014      	b.n	80041cc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00e      	beq.n	80041cc <HAL_UART_IRQHandler+0x514>
 80041ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d008      	beq.n	80041cc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 fb1d 	bl	80047fa <UART_EndTransmit_IT>
    return;
 80041c0:	e004      	b.n	80041cc <HAL_UART_IRQHandler+0x514>
    return;
 80041c2:	bf00      	nop
 80041c4:	e002      	b.n	80041cc <HAL_UART_IRQHandler+0x514>
      return;
 80041c6:	bf00      	nop
 80041c8:	e000      	b.n	80041cc <HAL_UART_IRQHandler+0x514>
      return;
 80041ca:	bf00      	nop
  }
}
 80041cc:	37e8      	adds	r7, #232	; 0xe8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop

080041d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b090      	sub	sp, #64	; 0x40
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004244:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004250:	2b00      	cmp	r3, #0
 8004252:	d137      	bne.n	80042c4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004256:	2200      	movs	r2, #0
 8004258:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800425a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3314      	adds	r3, #20
 8004260:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	e853 3f00 	ldrex	r3, [r3]
 8004268:	623b      	str	r3, [r7, #32]
   return(result);
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004270:	63bb      	str	r3, [r7, #56]	; 0x38
 8004272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3314      	adds	r3, #20
 8004278:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800427a:	633a      	str	r2, [r7, #48]	; 0x30
 800427c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004282:	e841 2300 	strex	r3, r2, [r1]
 8004286:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1e5      	bne.n	800425a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800428e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	330c      	adds	r3, #12
 8004294:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	e853 3f00 	ldrex	r3, [r3]
 800429c:	60fb      	str	r3, [r7, #12]
   return(result);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042a4:	637b      	str	r3, [r7, #52]	; 0x34
 80042a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	330c      	adds	r3, #12
 80042ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042ae:	61fa      	str	r2, [r7, #28]
 80042b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b2:	69b9      	ldr	r1, [r7, #24]
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	e841 2300 	strex	r3, r2, [r1]
 80042ba:	617b      	str	r3, [r7, #20]
   return(result);
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1e5      	bne.n	800428e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80042c2:	e002      	b.n	80042ca <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80042c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80042c6:	f7ff ff85 	bl	80041d4 <HAL_UART_TxCpltCallback>
}
 80042ca:	bf00      	nop
 80042cc:	3740      	adds	r7, #64	; 0x40
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b084      	sub	sp, #16
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042de:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f7ff ff81 	bl	80041e8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042e6:	bf00      	nop
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b09c      	sub	sp, #112	; 0x70
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004306:	2b00      	cmp	r3, #0
 8004308:	d172      	bne.n	80043f0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800430a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800430c:	2200      	movs	r2, #0
 800430e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	330c      	adds	r3, #12
 8004316:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800431a:	e853 3f00 	ldrex	r3, [r3]
 800431e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004322:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004326:	66bb      	str	r3, [r7, #104]	; 0x68
 8004328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	330c      	adds	r3, #12
 800432e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004330:	65ba      	str	r2, [r7, #88]	; 0x58
 8004332:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004336:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800433e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e5      	bne.n	8004310 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3314      	adds	r3, #20
 800434a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434e:	e853 3f00 	ldrex	r3, [r3]
 8004352:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004356:	f023 0301 	bic.w	r3, r3, #1
 800435a:	667b      	str	r3, [r7, #100]	; 0x64
 800435c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3314      	adds	r3, #20
 8004362:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004364:	647a      	str	r2, [r7, #68]	; 0x44
 8004366:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004368:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800436a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800436c:	e841 2300 	strex	r3, r2, [r1]
 8004370:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1e5      	bne.n	8004344 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	3314      	adds	r3, #20
 800437e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	e853 3f00 	ldrex	r3, [r3]
 8004386:	623b      	str	r3, [r7, #32]
   return(result);
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800438e:	663b      	str	r3, [r7, #96]	; 0x60
 8004390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3314      	adds	r3, #20
 8004396:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004398:	633a      	str	r2, [r7, #48]	; 0x30
 800439a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800439e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043a0:	e841 2300 	strex	r3, r2, [r1]
 80043a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1e5      	bne.n	8004378 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80043ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ae:	2220      	movs	r2, #32
 80043b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d119      	bne.n	80043f0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	330c      	adds	r3, #12
 80043c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	e853 3f00 	ldrex	r3, [r3]
 80043ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0310 	bic.w	r3, r3, #16
 80043d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	330c      	adds	r3, #12
 80043da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80043dc:	61fa      	str	r2, [r7, #28]
 80043de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e0:	69b9      	ldr	r1, [r7, #24]
 80043e2:	69fa      	ldr	r2, [r7, #28]
 80043e4:	e841 2300 	strex	r3, r2, [r1]
 80043e8:	617b      	str	r3, [r7, #20]
   return(result);
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1e5      	bne.n	80043bc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d106      	bne.n	8004406 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043fc:	4619      	mov	r1, r3
 80043fe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004400:	f7fc f86a 	bl	80004d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004404:	e002      	b.n	800440c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004406:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004408:	f7ff fef8 	bl	80041fc <HAL_UART_RxCpltCallback>
}
 800440c:	bf00      	nop
 800440e:	3770      	adds	r7, #112	; 0x70
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004420:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004426:	2b01      	cmp	r3, #1
 8004428:	d108      	bne.n	800443c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800442e:	085b      	lsrs	r3, r3, #1
 8004430:	b29b      	uxth	r3, r3
 8004432:	4619      	mov	r1, r3
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f7fc f84f 	bl	80004d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800443a:	e002      	b.n	8004442 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f7ff fee7 	bl	8004210 <HAL_UART_RxHalfCpltCallback>
}
 8004442:	bf00      	nop
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b084      	sub	sp, #16
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004466:	2b80      	cmp	r3, #128	; 0x80
 8004468:	bf0c      	ite	eq
 800446a:	2301      	moveq	r3, #1
 800446c:	2300      	movne	r3, #0
 800446e:	b2db      	uxtb	r3, r3
 8004470:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b21      	cmp	r3, #33	; 0x21
 800447c:	d108      	bne.n	8004490 <UART_DMAError+0x46>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d005      	beq.n	8004490 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2200      	movs	r2, #0
 8004488:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800448a:	68b8      	ldr	r0, [r7, #8]
 800448c:	f000 f8c6 	bl	800461c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449a:	2b40      	cmp	r3, #64	; 0x40
 800449c:	bf0c      	ite	eq
 800449e:	2301      	moveq	r3, #1
 80044a0:	2300      	movne	r3, #0
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b22      	cmp	r3, #34	; 0x22
 80044b0:	d108      	bne.n	80044c4 <UART_DMAError+0x7a>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d005      	beq.n	80044c4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2200      	movs	r2, #0
 80044bc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80044be:	68b8      	ldr	r0, [r7, #8]
 80044c0:	f000 f8d4 	bl	800466c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c8:	f043 0210 	orr.w	r2, r3, #16
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044d0:	68b8      	ldr	r0, [r7, #8]
 80044d2:	f7ff fea7 	bl	8004224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044d6:	bf00      	nop
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b098      	sub	sp, #96	; 0x60
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	4613      	mov	r3, r2
 80044ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	88fa      	ldrh	r2, [r7, #6]
 80044f8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2222      	movs	r2, #34	; 0x22
 8004504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450c:	4a40      	ldr	r2, [pc, #256]	; (8004610 <UART_Start_Receive_DMA+0x130>)
 800450e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004514:	4a3f      	ldr	r2, [pc, #252]	; (8004614 <UART_Start_Receive_DMA+0x134>)
 8004516:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451c:	4a3e      	ldr	r2, [pc, #248]	; (8004618 <UART_Start_Receive_DMA+0x138>)
 800451e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004524:	2200      	movs	r2, #0
 8004526:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004528:	f107 0308 	add.w	r3, r7, #8
 800452c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	3304      	adds	r3, #4
 8004538:	4619      	mov	r1, r3
 800453a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	88fb      	ldrh	r3, [r7, #6]
 8004540:	f7fc fd34 	bl	8000fac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004544:	2300      	movs	r3, #0
 8004546:	613b      	str	r3, [r7, #16]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	613b      	str	r3, [r7, #16]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d019      	beq.n	800459e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	330c      	adds	r3, #12
 8004570:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004574:	e853 3f00 	ldrex	r3, [r3]
 8004578:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800457a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800457c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004580:	65bb      	str	r3, [r7, #88]	; 0x58
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	330c      	adds	r3, #12
 8004588:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800458a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800458c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004590:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004592:	e841 2300 	strex	r3, r2, [r1]
 8004596:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1e5      	bne.n	800456a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3314      	adds	r3, #20
 80045a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a8:	e853 3f00 	ldrex	r3, [r3]
 80045ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b0:	f043 0301 	orr.w	r3, r3, #1
 80045b4:	657b      	str	r3, [r7, #84]	; 0x54
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	3314      	adds	r3, #20
 80045bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80045be:	63ba      	str	r2, [r7, #56]	; 0x38
 80045c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80045c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045c6:	e841 2300 	strex	r3, r2, [r1]
 80045ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1e5      	bne.n	800459e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3314      	adds	r3, #20
 80045d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	e853 3f00 	ldrex	r3, [r3]
 80045e0:	617b      	str	r3, [r7, #20]
   return(result);
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045e8:	653b      	str	r3, [r7, #80]	; 0x50
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3314      	adds	r3, #20
 80045f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80045f2:	627a      	str	r2, [r7, #36]	; 0x24
 80045f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f6:	6a39      	ldr	r1, [r7, #32]
 80045f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045fa:	e841 2300 	strex	r3, r2, [r1]
 80045fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1e5      	bne.n	80045d2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3760      	adds	r7, #96	; 0x60
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	080042ef 	.word	0x080042ef
 8004614:	08004415 	.word	0x08004415
 8004618:	0800444b 	.word	0x0800444b

0800461c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800461c:	b480      	push	{r7}
 800461e:	b089      	sub	sp, #36	; 0x24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	330c      	adds	r3, #12
 800462a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	e853 3f00 	ldrex	r3, [r3]
 8004632:	60bb      	str	r3, [r7, #8]
   return(result);
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800463a:	61fb      	str	r3, [r7, #28]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	330c      	adds	r3, #12
 8004642:	69fa      	ldr	r2, [r7, #28]
 8004644:	61ba      	str	r2, [r7, #24]
 8004646:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004648:	6979      	ldr	r1, [r7, #20]
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	e841 2300 	strex	r3, r2, [r1]
 8004650:	613b      	str	r3, [r7, #16]
   return(result);
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1e5      	bne.n	8004624 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2220      	movs	r2, #32
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004660:	bf00      	nop
 8004662:	3724      	adds	r7, #36	; 0x24
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800466c:	b480      	push	{r7}
 800466e:	b095      	sub	sp, #84	; 0x54
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	330c      	adds	r3, #12
 800467a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800467e:	e853 3f00 	ldrex	r3, [r3]
 8004682:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004686:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800468a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	330c      	adds	r3, #12
 8004692:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004694:	643a      	str	r2, [r7, #64]	; 0x40
 8004696:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004698:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800469a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800469c:	e841 2300 	strex	r3, r2, [r1]
 80046a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1e5      	bne.n	8004674 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3314      	adds	r3, #20
 80046ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	e853 3f00 	ldrex	r3, [r3]
 80046b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	f023 0301 	bic.w	r3, r3, #1
 80046be:	64bb      	str	r3, [r7, #72]	; 0x48
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3314      	adds	r3, #20
 80046c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046d0:	e841 2300 	strex	r3, r2, [r1]
 80046d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1e5      	bne.n	80046a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d119      	bne.n	8004718 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	330c      	adds	r3, #12
 80046ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	e853 3f00 	ldrex	r3, [r3]
 80046f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f023 0310 	bic.w	r3, r3, #16
 80046fa:	647b      	str	r3, [r7, #68]	; 0x44
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	330c      	adds	r3, #12
 8004702:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004704:	61ba      	str	r2, [r7, #24]
 8004706:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004708:	6979      	ldr	r1, [r7, #20]
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	e841 2300 	strex	r3, r2, [r1]
 8004710:	613b      	str	r3, [r7, #16]
   return(result);
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1e5      	bne.n	80046e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2220      	movs	r2, #32
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004726:	bf00      	nop
 8004728:	3754      	adds	r7, #84	; 0x54
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b084      	sub	sp, #16
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f7ff fd69 	bl	8004224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004752:	bf00      	nop
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800475a:	b480      	push	{r7}
 800475c:	b085      	sub	sp, #20
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b21      	cmp	r3, #33	; 0x21
 800476c:	d13e      	bne.n	80047ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004776:	d114      	bne.n	80047a2 <UART_Transmit_IT+0x48>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d110      	bne.n	80047a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004794:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	1c9a      	adds	r2, r3, #2
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	621a      	str	r2, [r3, #32]
 80047a0:	e008      	b.n	80047b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	1c59      	adds	r1, r3, #1
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	6211      	str	r1, [r2, #32]
 80047ac:	781a      	ldrb	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29b      	uxth	r3, r3
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	4619      	mov	r1, r3
 80047c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10f      	bne.n	80047e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047e8:	2300      	movs	r3, #0
 80047ea:	e000      	b.n	80047ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047ec:	2302      	movs	r3, #2
  }
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b082      	sub	sp, #8
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68da      	ldr	r2, [r3, #12]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004810:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2220      	movs	r2, #32
 8004816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7ff fcda 	bl	80041d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b08c      	sub	sp, #48	; 0x30
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b22      	cmp	r3, #34	; 0x22
 800483c:	f040 80ab 	bne.w	8004996 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004848:	d117      	bne.n	800487a <UART_Receive_IT+0x50>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d113      	bne.n	800487a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004852:	2300      	movs	r3, #0
 8004854:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	b29b      	uxth	r3, r3
 8004864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004868:	b29a      	uxth	r2, r3
 800486a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004872:	1c9a      	adds	r2, r3, #2
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	629a      	str	r2, [r3, #40]	; 0x28
 8004878:	e026      	b.n	80048c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004880:	2300      	movs	r3, #0
 8004882:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800488c:	d007      	beq.n	800489e <UART_Receive_IT+0x74>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10a      	bne.n	80048ac <UART_Receive_IT+0x82>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d106      	bne.n	80048ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a8:	701a      	strb	r2, [r3, #0]
 80048aa:	e008      	b.n	80048be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	3b01      	subs	r3, #1
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	4619      	mov	r1, r3
 80048d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d15a      	bne.n	8004992 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0220 	bic.w	r2, r2, #32
 80048ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	695a      	ldr	r2, [r3, #20]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0201 	bic.w	r2, r2, #1
 800490a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	2b01      	cmp	r3, #1
 800491a:	d135      	bne.n	8004988 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	330c      	adds	r3, #12
 8004928:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	e853 3f00 	ldrex	r3, [r3]
 8004930:	613b      	str	r3, [r7, #16]
   return(result);
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f023 0310 	bic.w	r3, r3, #16
 8004938:	627b      	str	r3, [r7, #36]	; 0x24
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	330c      	adds	r3, #12
 8004940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004942:	623a      	str	r2, [r7, #32]
 8004944:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004946:	69f9      	ldr	r1, [r7, #28]
 8004948:	6a3a      	ldr	r2, [r7, #32]
 800494a:	e841 2300 	strex	r3, r2, [r1]
 800494e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1e5      	bne.n	8004922 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0310 	and.w	r3, r3, #16
 8004960:	2b10      	cmp	r3, #16
 8004962:	d10a      	bne.n	800497a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004964:	2300      	movs	r3, #0
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800497e:	4619      	mov	r1, r3
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7fb fda9 	bl	80004d8 <HAL_UARTEx_RxEventCallback>
 8004986:	e002      	b.n	800498e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7ff fc37 	bl	80041fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800498e:	2300      	movs	r3, #0
 8004990:	e002      	b.n	8004998 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	e000      	b.n	8004998 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004996:	2302      	movs	r3, #2
  }
}
 8004998:	4618      	mov	r0, r3
 800499a:	3730      	adds	r7, #48	; 0x30
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049a4:	b0c0      	sub	sp, #256	; 0x100
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049bc:	68d9      	ldr	r1, [r3, #12]
 80049be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	ea40 0301 	orr.w	r3, r0, r1
 80049c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	431a      	orrs	r2, r3
 80049d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	431a      	orrs	r2, r3
 80049e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049f8:	f021 010c 	bic.w	r1, r1, #12
 80049fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a06:	430b      	orrs	r3, r1
 8004a08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1a:	6999      	ldr	r1, [r3, #24]
 8004a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	ea40 0301 	orr.w	r3, r0, r1
 8004a26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	4b8f      	ldr	r3, [pc, #572]	; (8004c6c <UART_SetConfig+0x2cc>)
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d005      	beq.n	8004a40 <UART_SetConfig+0xa0>
 8004a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	4b8d      	ldr	r3, [pc, #564]	; (8004c70 <UART_SetConfig+0x2d0>)
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d104      	bne.n	8004a4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a40:	f7fe fff4 	bl	8003a2c <HAL_RCC_GetPCLK2Freq>
 8004a44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a48:	e003      	b.n	8004a52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a4a:	f7fe ffdb 	bl	8003a04 <HAL_RCC_GetPCLK1Freq>
 8004a4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a56:	69db      	ldr	r3, [r3, #28]
 8004a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a5c:	f040 810c 	bne.w	8004c78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a64:	2200      	movs	r2, #0
 8004a66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a72:	4622      	mov	r2, r4
 8004a74:	462b      	mov	r3, r5
 8004a76:	1891      	adds	r1, r2, r2
 8004a78:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a7a:	415b      	adcs	r3, r3
 8004a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a82:	4621      	mov	r1, r4
 8004a84:	eb12 0801 	adds.w	r8, r2, r1
 8004a88:	4629      	mov	r1, r5
 8004a8a:	eb43 0901 	adc.w	r9, r3, r1
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	f04f 0300 	mov.w	r3, #0
 8004a96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aa2:	4690      	mov	r8, r2
 8004aa4:	4699      	mov	r9, r3
 8004aa6:	4623      	mov	r3, r4
 8004aa8:	eb18 0303 	adds.w	r3, r8, r3
 8004aac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ab0:	462b      	mov	r3, r5
 8004ab2:	eb49 0303 	adc.w	r3, r9, r3
 8004ab6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ac6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004aca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ace:	460b      	mov	r3, r1
 8004ad0:	18db      	adds	r3, r3, r3
 8004ad2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	eb42 0303 	adc.w	r3, r2, r3
 8004ada:	657b      	str	r3, [r7, #84]	; 0x54
 8004adc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ae0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ae4:	f7fb fb76 	bl	80001d4 <__aeabi_uldivmod>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	460b      	mov	r3, r1
 8004aec:	4b61      	ldr	r3, [pc, #388]	; (8004c74 <UART_SetConfig+0x2d4>)
 8004aee:	fba3 2302 	umull	r2, r3, r3, r2
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	011c      	lsls	r4, r3, #4
 8004af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004afa:	2200      	movs	r2, #0
 8004afc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b08:	4642      	mov	r2, r8
 8004b0a:	464b      	mov	r3, r9
 8004b0c:	1891      	adds	r1, r2, r2
 8004b0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b10:	415b      	adcs	r3, r3
 8004b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b18:	4641      	mov	r1, r8
 8004b1a:	eb12 0a01 	adds.w	sl, r2, r1
 8004b1e:	4649      	mov	r1, r9
 8004b20:	eb43 0b01 	adc.w	fp, r3, r1
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	f04f 0300 	mov.w	r3, #0
 8004b2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b38:	4692      	mov	sl, r2
 8004b3a:	469b      	mov	fp, r3
 8004b3c:	4643      	mov	r3, r8
 8004b3e:	eb1a 0303 	adds.w	r3, sl, r3
 8004b42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b46:	464b      	mov	r3, r9
 8004b48:	eb4b 0303 	adc.w	r3, fp, r3
 8004b4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b64:	460b      	mov	r3, r1
 8004b66:	18db      	adds	r3, r3, r3
 8004b68:	643b      	str	r3, [r7, #64]	; 0x40
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	eb42 0303 	adc.w	r3, r2, r3
 8004b70:	647b      	str	r3, [r7, #68]	; 0x44
 8004b72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b7a:	f7fb fb2b 	bl	80001d4 <__aeabi_uldivmod>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	460b      	mov	r3, r1
 8004b82:	4611      	mov	r1, r2
 8004b84:	4b3b      	ldr	r3, [pc, #236]	; (8004c74 <UART_SetConfig+0x2d4>)
 8004b86:	fba3 2301 	umull	r2, r3, r3, r1
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	2264      	movs	r2, #100	; 0x64
 8004b8e:	fb02 f303 	mul.w	r3, r2, r3
 8004b92:	1acb      	subs	r3, r1, r3
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b9a:	4b36      	ldr	r3, [pc, #216]	; (8004c74 <UART_SetConfig+0x2d4>)
 8004b9c:	fba3 2302 	umull	r2, r3, r3, r2
 8004ba0:	095b      	lsrs	r3, r3, #5
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ba8:	441c      	add	r4, r3
 8004baa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bb4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004bb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004bbc:	4642      	mov	r2, r8
 8004bbe:	464b      	mov	r3, r9
 8004bc0:	1891      	adds	r1, r2, r2
 8004bc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004bc4:	415b      	adcs	r3, r3
 8004bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004bcc:	4641      	mov	r1, r8
 8004bce:	1851      	adds	r1, r2, r1
 8004bd0:	6339      	str	r1, [r7, #48]	; 0x30
 8004bd2:	4649      	mov	r1, r9
 8004bd4:	414b      	adcs	r3, r1
 8004bd6:	637b      	str	r3, [r7, #52]	; 0x34
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004be4:	4659      	mov	r1, fp
 8004be6:	00cb      	lsls	r3, r1, #3
 8004be8:	4651      	mov	r1, sl
 8004bea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bee:	4651      	mov	r1, sl
 8004bf0:	00ca      	lsls	r2, r1, #3
 8004bf2:	4610      	mov	r0, r2
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	4642      	mov	r2, r8
 8004bfa:	189b      	adds	r3, r3, r2
 8004bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c00:	464b      	mov	r3, r9
 8004c02:	460a      	mov	r2, r1
 8004c04:	eb42 0303 	adc.w	r3, r2, r3
 8004c08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c20:	460b      	mov	r3, r1
 8004c22:	18db      	adds	r3, r3, r3
 8004c24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c26:	4613      	mov	r3, r2
 8004c28:	eb42 0303 	adc.w	r3, r2, r3
 8004c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c36:	f7fb facd 	bl	80001d4 <__aeabi_uldivmod>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4b0d      	ldr	r3, [pc, #52]	; (8004c74 <UART_SetConfig+0x2d4>)
 8004c40:	fba3 1302 	umull	r1, r3, r3, r2
 8004c44:	095b      	lsrs	r3, r3, #5
 8004c46:	2164      	movs	r1, #100	; 0x64
 8004c48:	fb01 f303 	mul.w	r3, r1, r3
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	3332      	adds	r3, #50	; 0x32
 8004c52:	4a08      	ldr	r2, [pc, #32]	; (8004c74 <UART_SetConfig+0x2d4>)
 8004c54:	fba2 2303 	umull	r2, r3, r2, r3
 8004c58:	095b      	lsrs	r3, r3, #5
 8004c5a:	f003 0207 	and.w	r2, r3, #7
 8004c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4422      	add	r2, r4
 8004c66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c68:	e105      	b.n	8004e76 <UART_SetConfig+0x4d6>
 8004c6a:	bf00      	nop
 8004c6c:	40011000 	.word	0x40011000
 8004c70:	40011400 	.word	0x40011400
 8004c74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c8a:	4642      	mov	r2, r8
 8004c8c:	464b      	mov	r3, r9
 8004c8e:	1891      	adds	r1, r2, r2
 8004c90:	6239      	str	r1, [r7, #32]
 8004c92:	415b      	adcs	r3, r3
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
 8004c96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c9a:	4641      	mov	r1, r8
 8004c9c:	1854      	adds	r4, r2, r1
 8004c9e:	4649      	mov	r1, r9
 8004ca0:	eb43 0501 	adc.w	r5, r3, r1
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	00eb      	lsls	r3, r5, #3
 8004cae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cb2:	00e2      	lsls	r2, r4, #3
 8004cb4:	4614      	mov	r4, r2
 8004cb6:	461d      	mov	r5, r3
 8004cb8:	4643      	mov	r3, r8
 8004cba:	18e3      	adds	r3, r4, r3
 8004cbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004cc0:	464b      	mov	r3, r9
 8004cc2:	eb45 0303 	adc.w	r3, r5, r3
 8004cc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004cd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ce6:	4629      	mov	r1, r5
 8004ce8:	008b      	lsls	r3, r1, #2
 8004cea:	4621      	mov	r1, r4
 8004cec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cf0:	4621      	mov	r1, r4
 8004cf2:	008a      	lsls	r2, r1, #2
 8004cf4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004cf8:	f7fb fa6c 	bl	80001d4 <__aeabi_uldivmod>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4b60      	ldr	r3, [pc, #384]	; (8004e84 <UART_SetConfig+0x4e4>)
 8004d02:	fba3 2302 	umull	r2, r3, r3, r2
 8004d06:	095b      	lsrs	r3, r3, #5
 8004d08:	011c      	lsls	r4, r3, #4
 8004d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d1c:	4642      	mov	r2, r8
 8004d1e:	464b      	mov	r3, r9
 8004d20:	1891      	adds	r1, r2, r2
 8004d22:	61b9      	str	r1, [r7, #24]
 8004d24:	415b      	adcs	r3, r3
 8004d26:	61fb      	str	r3, [r7, #28]
 8004d28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d2c:	4641      	mov	r1, r8
 8004d2e:	1851      	adds	r1, r2, r1
 8004d30:	6139      	str	r1, [r7, #16]
 8004d32:	4649      	mov	r1, r9
 8004d34:	414b      	adcs	r3, r1
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	f04f 0200 	mov.w	r2, #0
 8004d3c:	f04f 0300 	mov.w	r3, #0
 8004d40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d44:	4659      	mov	r1, fp
 8004d46:	00cb      	lsls	r3, r1, #3
 8004d48:	4651      	mov	r1, sl
 8004d4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d4e:	4651      	mov	r1, sl
 8004d50:	00ca      	lsls	r2, r1, #3
 8004d52:	4610      	mov	r0, r2
 8004d54:	4619      	mov	r1, r3
 8004d56:	4603      	mov	r3, r0
 8004d58:	4642      	mov	r2, r8
 8004d5a:	189b      	adds	r3, r3, r2
 8004d5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d60:	464b      	mov	r3, r9
 8004d62:	460a      	mov	r2, r1
 8004d64:	eb42 0303 	adc.w	r3, r2, r3
 8004d68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	f04f 0300 	mov.w	r3, #0
 8004d80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d84:	4649      	mov	r1, r9
 8004d86:	008b      	lsls	r3, r1, #2
 8004d88:	4641      	mov	r1, r8
 8004d8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d8e:	4641      	mov	r1, r8
 8004d90:	008a      	lsls	r2, r1, #2
 8004d92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d96:	f7fb fa1d 	bl	80001d4 <__aeabi_uldivmod>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	4b39      	ldr	r3, [pc, #228]	; (8004e84 <UART_SetConfig+0x4e4>)
 8004da0:	fba3 1302 	umull	r1, r3, r3, r2
 8004da4:	095b      	lsrs	r3, r3, #5
 8004da6:	2164      	movs	r1, #100	; 0x64
 8004da8:	fb01 f303 	mul.w	r3, r1, r3
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	011b      	lsls	r3, r3, #4
 8004db0:	3332      	adds	r3, #50	; 0x32
 8004db2:	4a34      	ldr	r2, [pc, #208]	; (8004e84 <UART_SetConfig+0x4e4>)
 8004db4:	fba2 2303 	umull	r2, r3, r2, r3
 8004db8:	095b      	lsrs	r3, r3, #5
 8004dba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dbe:	441c      	add	r4, r3
 8004dc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	673b      	str	r3, [r7, #112]	; 0x70
 8004dc8:	677a      	str	r2, [r7, #116]	; 0x74
 8004dca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004dce:	4642      	mov	r2, r8
 8004dd0:	464b      	mov	r3, r9
 8004dd2:	1891      	adds	r1, r2, r2
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	415b      	adcs	r3, r3
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dde:	4641      	mov	r1, r8
 8004de0:	1851      	adds	r1, r2, r1
 8004de2:	6039      	str	r1, [r7, #0]
 8004de4:	4649      	mov	r1, r9
 8004de6:	414b      	adcs	r3, r1
 8004de8:	607b      	str	r3, [r7, #4]
 8004dea:	f04f 0200 	mov.w	r2, #0
 8004dee:	f04f 0300 	mov.w	r3, #0
 8004df2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004df6:	4659      	mov	r1, fp
 8004df8:	00cb      	lsls	r3, r1, #3
 8004dfa:	4651      	mov	r1, sl
 8004dfc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e00:	4651      	mov	r1, sl
 8004e02:	00ca      	lsls	r2, r1, #3
 8004e04:	4610      	mov	r0, r2
 8004e06:	4619      	mov	r1, r3
 8004e08:	4603      	mov	r3, r0
 8004e0a:	4642      	mov	r2, r8
 8004e0c:	189b      	adds	r3, r3, r2
 8004e0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e10:	464b      	mov	r3, r9
 8004e12:	460a      	mov	r2, r1
 8004e14:	eb42 0303 	adc.w	r3, r2, r3
 8004e18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	663b      	str	r3, [r7, #96]	; 0x60
 8004e24:	667a      	str	r2, [r7, #100]	; 0x64
 8004e26:	f04f 0200 	mov.w	r2, #0
 8004e2a:	f04f 0300 	mov.w	r3, #0
 8004e2e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e32:	4649      	mov	r1, r9
 8004e34:	008b      	lsls	r3, r1, #2
 8004e36:	4641      	mov	r1, r8
 8004e38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e3c:	4641      	mov	r1, r8
 8004e3e:	008a      	lsls	r2, r1, #2
 8004e40:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e44:	f7fb f9c6 	bl	80001d4 <__aeabi_uldivmod>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4b0d      	ldr	r3, [pc, #52]	; (8004e84 <UART_SetConfig+0x4e4>)
 8004e4e:	fba3 1302 	umull	r1, r3, r3, r2
 8004e52:	095b      	lsrs	r3, r3, #5
 8004e54:	2164      	movs	r1, #100	; 0x64
 8004e56:	fb01 f303 	mul.w	r3, r1, r3
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	011b      	lsls	r3, r3, #4
 8004e5e:	3332      	adds	r3, #50	; 0x32
 8004e60:	4a08      	ldr	r2, [pc, #32]	; (8004e84 <UART_SetConfig+0x4e4>)
 8004e62:	fba2 2303 	umull	r2, r3, r2, r3
 8004e66:	095b      	lsrs	r3, r3, #5
 8004e68:	f003 020f 	and.w	r2, r3, #15
 8004e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4422      	add	r2, r4
 8004e74:	609a      	str	r2, [r3, #8]
}
 8004e76:	bf00      	nop
 8004e78:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e82:	bf00      	nop
 8004e84:	51eb851f 	.word	0x51eb851f

08004e88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e88:	b084      	sub	sp, #16
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b084      	sub	sp, #16
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
 8004e92:	f107 001c 	add.w	r0, r7, #28
 8004e96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d122      	bne.n	8004ee6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d105      	bne.n	8004eda <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f9c0 	bl	8005260 <USB_CoreReset>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	73fb      	strb	r3, [r7, #15]
 8004ee4:	e01a      	b.n	8004f1c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f9b4 	bl	8005260 <USB_CoreReset>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d106      	bne.n	8004f10 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	639a      	str	r2, [r3, #56]	; 0x38
 8004f0e:	e005      	b.n	8004f1c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d10b      	bne.n	8004f3a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f043 0206 	orr.w	r2, r3, #6
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f043 0220 	orr.w	r2, r3, #32
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f46:	b004      	add	sp, #16
 8004f48:	4770      	bx	lr

08004f4a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f043 0201 	orr.w	r2, r3, #1
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f023 0201 	bic.w	r2, r3, #1
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b084      	sub	sp, #16
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	460b      	mov	r3, r1
 8004f98:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004faa:	78fb      	ldrb	r3, [r7, #3]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d115      	bne.n	8004fdc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fbc:	2001      	movs	r0, #1
 8004fbe:	f7fb fe11 	bl	8000be4 <HAL_Delay>
      ms++;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f93a 	bl	8005242 <USB_GetMode>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d01e      	beq.n	8005012 <USB_SetCurrentMode+0x84>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2b31      	cmp	r3, #49	; 0x31
 8004fd8:	d9f0      	bls.n	8004fbc <USB_SetCurrentMode+0x2e>
 8004fda:	e01a      	b.n	8005012 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fdc:	78fb      	ldrb	r3, [r7, #3]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d115      	bne.n	800500e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fee:	2001      	movs	r0, #1
 8004ff0:	f7fb fdf8 	bl	8000be4 <HAL_Delay>
      ms++;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f921 	bl	8005242 <USB_GetMode>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d005      	beq.n	8005012 <USB_SetCurrentMode+0x84>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2b31      	cmp	r3, #49	; 0x31
 800500a:	d9f0      	bls.n	8004fee <USB_SetCurrentMode+0x60>
 800500c:	e001      	b.n	8005012 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e005      	b.n	800501e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2b32      	cmp	r3, #50	; 0x32
 8005016:	d101      	bne.n	800501c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e000      	b.n	800501e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
	...

08005028 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005032:	2300      	movs	r3, #0
 8005034:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	3301      	adds	r3, #1
 800503a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	4a13      	ldr	r2, [pc, #76]	; (800508c <USB_FlushTxFifo+0x64>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d901      	bls.n	8005048 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e01b      	b.n	8005080 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	2b00      	cmp	r3, #0
 800504e:	daf2      	bge.n	8005036 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	019b      	lsls	r3, r3, #6
 8005058:	f043 0220 	orr.w	r2, r3, #32
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	3301      	adds	r3, #1
 8005064:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	4a08      	ldr	r2, [pc, #32]	; (800508c <USB_FlushTxFifo+0x64>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d901      	bls.n	8005072 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e006      	b.n	8005080 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	f003 0320 	and.w	r3, r3, #32
 800507a:	2b20      	cmp	r3, #32
 800507c:	d0f0      	beq.n	8005060 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	00030d40 	.word	0x00030d40

08005090 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	3301      	adds	r3, #1
 80050a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	4a11      	ldr	r2, [pc, #68]	; (80050ec <USB_FlushRxFifo+0x5c>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d901      	bls.n	80050ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e018      	b.n	80050e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	daf2      	bge.n	800509c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2210      	movs	r2, #16
 80050be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	3301      	adds	r3, #1
 80050c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4a08      	ldr	r2, [pc, #32]	; (80050ec <USB_FlushRxFifo+0x5c>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d901      	bls.n	80050d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e006      	b.n	80050e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	f003 0310 	and.w	r3, r3, #16
 80050da:	2b10      	cmp	r3, #16
 80050dc:	d0f0      	beq.n	80050c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	00030d40 	.word	0x00030d40

080050f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b089      	sub	sp, #36	; 0x24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	4611      	mov	r1, r2
 80050fc:	461a      	mov	r2, r3
 80050fe:	460b      	mov	r3, r1
 8005100:	71fb      	strb	r3, [r7, #7]
 8005102:	4613      	mov	r3, r2
 8005104:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800510e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005112:	2b00      	cmp	r3, #0
 8005114:	d123      	bne.n	800515e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005116:	88bb      	ldrh	r3, [r7, #4]
 8005118:	3303      	adds	r3, #3
 800511a:	089b      	lsrs	r3, r3, #2
 800511c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800511e:	2300      	movs	r3, #0
 8005120:	61bb      	str	r3, [r7, #24]
 8005122:	e018      	b.n	8005156 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005124:	79fb      	ldrb	r3, [r7, #7]
 8005126:	031a      	lsls	r2, r3, #12
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	4413      	add	r3, r2
 800512c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005130:	461a      	mov	r2, r3
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	3301      	adds	r3, #1
 800513c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	3301      	adds	r3, #1
 8005142:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	3301      	adds	r3, #1
 8005148:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	3301      	adds	r3, #1
 800514e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	3301      	adds	r3, #1
 8005154:	61bb      	str	r3, [r7, #24]
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	429a      	cmp	r2, r3
 800515c:	d3e2      	bcc.n	8005124 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3724      	adds	r7, #36	; 0x24
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800516c:	b480      	push	{r7}
 800516e:	b08b      	sub	sp, #44	; 0x2c
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	4613      	mov	r3, r2
 8005178:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005182:	88fb      	ldrh	r3, [r7, #6]
 8005184:	089b      	lsrs	r3, r3, #2
 8005186:	b29b      	uxth	r3, r3
 8005188:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800518a:	88fb      	ldrh	r3, [r7, #6]
 800518c:	f003 0303 	and.w	r3, r3, #3
 8005190:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005192:	2300      	movs	r3, #0
 8005194:	623b      	str	r3, [r7, #32]
 8005196:	e014      	b.n	80051c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	3301      	adds	r3, #1
 80051a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	3301      	adds	r3, #1
 80051ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	3301      	adds	r3, #1
 80051b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	3301      	adds	r3, #1
 80051ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	3301      	adds	r3, #1
 80051c0:	623b      	str	r3, [r7, #32]
 80051c2:	6a3a      	ldr	r2, [r7, #32]
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d3e6      	bcc.n	8005198 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80051ca:	8bfb      	ldrh	r3, [r7, #30]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d01e      	beq.n	800520e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051da:	461a      	mov	r2, r3
 80051dc:	f107 0310 	add.w	r3, r7, #16
 80051e0:	6812      	ldr	r2, [r2, #0]
 80051e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	fa22 f303 	lsr.w	r3, r2, r3
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	701a      	strb	r2, [r3, #0]
      i++;
 80051f6:	6a3b      	ldr	r3, [r7, #32]
 80051f8:	3301      	adds	r3, #1
 80051fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	3301      	adds	r3, #1
 8005200:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005202:	8bfb      	ldrh	r3, [r7, #30]
 8005204:	3b01      	subs	r3, #1
 8005206:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005208:	8bfb      	ldrh	r3, [r7, #30]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1ea      	bne.n	80051e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005210:	4618      	mov	r0, r3
 8005212:	372c      	adds	r7, #44	; 0x2c
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4013      	ands	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005234:	68fb      	ldr	r3, [r7, #12]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005242:	b480      	push	{r7}
 8005244:	b083      	sub	sp, #12
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	f003 0301 	and.w	r3, r3, #1
}
 8005252:	4618      	mov	r0, r3
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
	...

08005260 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005268:	2300      	movs	r3, #0
 800526a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	3301      	adds	r3, #1
 8005270:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	4a13      	ldr	r2, [pc, #76]	; (80052c4 <USB_CoreReset+0x64>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d901      	bls.n	800527e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e01b      	b.n	80052b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	2b00      	cmp	r3, #0
 8005284:	daf2      	bge.n	800526c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005286:	2300      	movs	r3, #0
 8005288:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	f043 0201 	orr.w	r2, r3, #1
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	3301      	adds	r3, #1
 800529a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4a09      	ldr	r2, [pc, #36]	; (80052c4 <USB_CoreReset+0x64>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d901      	bls.n	80052a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e006      	b.n	80052b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d0f0      	beq.n	8005296 <USB_CoreReset+0x36>

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	00030d40 	.word	0x00030d40

080052c8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052c8:	b084      	sub	sp, #16
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b086      	sub	sp, #24
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80052d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80052da:	2300      	movs	r3, #0
 80052dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052e8:	461a      	mov	r2, r3
 80052ea:	2300      	movs	r3, #0
 80052ec:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531a:	2b00      	cmp	r3, #0
 800531c:	d018      	beq.n	8005350 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800531e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005320:	2b01      	cmp	r3, #1
 8005322:	d10a      	bne.n	800533a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005332:	f043 0304 	orr.w	r3, r3, #4
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	e014      	b.n	8005364 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005348:	f023 0304 	bic.w	r3, r3, #4
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	e009      	b.n	8005364 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800535e:	f023 0304 	bic.w	r3, r3, #4
 8005362:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005364:	2110      	movs	r1, #16
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7ff fe5e 	bl	8005028 <USB_FlushTxFifo>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7ff fe8a 	bl	8005090 <USB_FlushRxFifo>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005386:	2300      	movs	r3, #0
 8005388:	613b      	str	r3, [r7, #16]
 800538a:	e015      	b.n	80053b8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4413      	add	r3, r2
 8005394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005398:	461a      	mov	r2, r3
 800539a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800539e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ac:	461a      	mov	r2, r3
 80053ae:	2300      	movs	r3, #0
 80053b0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	3301      	adds	r3, #1
 80053b6:	613b      	str	r3, [r7, #16]
 80053b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d3e5      	bcc.n	800538c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053cc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00b      	beq.n	80053f2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053e0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a13      	ldr	r2, [pc, #76]	; (8005434 <USB_HostInit+0x16c>)
 80053e6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a13      	ldr	r2, [pc, #76]	; (8005438 <USB_HostInit+0x170>)
 80053ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80053f0:	e009      	b.n	8005406 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2280      	movs	r2, #128	; 0x80
 80053f6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a10      	ldr	r2, [pc, #64]	; (800543c <USB_HostInit+0x174>)
 80053fc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a0f      	ldr	r2, [pc, #60]	; (8005440 <USB_HostInit+0x178>)
 8005402:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005408:	2b00      	cmp	r3, #0
 800540a:	d105      	bne.n	8005418 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	f043 0210 	orr.w	r2, r3, #16
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	699a      	ldr	r2, [r3, #24]
 800541c:	4b09      	ldr	r3, [pc, #36]	; (8005444 <USB_HostInit+0x17c>)
 800541e:	4313      	orrs	r3, r2
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005424:	7dfb      	ldrb	r3, [r7, #23]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005430:	b004      	add	sp, #16
 8005432:	4770      	bx	lr
 8005434:	01000200 	.word	0x01000200
 8005438:	00e00300 	.word	0x00e00300
 800543c:	00600080 	.word	0x00600080
 8005440:	004000e0 	.word	0x004000e0
 8005444:	a3200008 	.word	0xa3200008

08005448 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	460b      	mov	r3, r1
 8005452:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005466:	f023 0303 	bic.w	r3, r3, #3
 800546a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	78fb      	ldrb	r3, [r7, #3]
 8005476:	f003 0303 	and.w	r3, r3, #3
 800547a:	68f9      	ldr	r1, [r7, #12]
 800547c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005480:	4313      	orrs	r3, r2
 8005482:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005484:	78fb      	ldrb	r3, [r7, #3]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d107      	bne.n	800549a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005490:	461a      	mov	r2, r3
 8005492:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005496:	6053      	str	r3, [r2, #4]
 8005498:	e009      	b.n	80054ae <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800549a:	78fb      	ldrb	r3, [r7, #3]
 800549c:	2b02      	cmp	r3, #2
 800549e:	d106      	bne.n	80054ae <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054a6:	461a      	mov	r2, r3
 80054a8:	f241 7370 	movw	r3, #6000	; 0x1770
 80054ac:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80054c8:	2300      	movs	r3, #0
 80054ca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80054dc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ea:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80054ec:	2064      	movs	r0, #100	; 0x64
 80054ee:	f7fb fb79 	bl	8000be4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054fe:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005500:	200a      	movs	r0, #10
 8005502:	f7fb fb6f 	bl	8000be4 <HAL_Delay>

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	460b      	mov	r3, r1
 800551a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005534:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d109      	bne.n	8005554 <USB_DriveVbus+0x44>
 8005540:	78fb      	ldrb	r3, [r7, #3]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d106      	bne.n	8005554 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800554e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005552:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800555a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800555e:	d109      	bne.n	8005574 <USB_DriveVbus+0x64>
 8005560:	78fb      	ldrb	r3, [r7, #3]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d106      	bne.n	8005574 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800556e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005572:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005582:	b480      	push	{r7}
 8005584:	b085      	sub	sp, #20
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800558e:	2300      	movs	r3, #0
 8005590:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	0c5b      	lsrs	r3, r3, #17
 80055a0:	f003 0303 	and.w	r3, r3, #3
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	b29b      	uxth	r3, r3
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
	...

080055d4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b088      	sub	sp, #32
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	4608      	mov	r0, r1
 80055de:	4611      	mov	r1, r2
 80055e0:	461a      	mov	r2, r3
 80055e2:	4603      	mov	r3, r0
 80055e4:	70fb      	strb	r3, [r7, #3]
 80055e6:	460b      	mov	r3, r1
 80055e8:	70bb      	strb	r3, [r7, #2]
 80055ea:	4613      	mov	r3, r2
 80055ec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80055f6:	78fb      	ldrb	r3, [r7, #3]
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005602:	461a      	mov	r2, r3
 8005604:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005608:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800560a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800560e:	2b03      	cmp	r3, #3
 8005610:	d87e      	bhi.n	8005710 <USB_HC_Init+0x13c>
 8005612:	a201      	add	r2, pc, #4	; (adr r2, 8005618 <USB_HC_Init+0x44>)
 8005614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005618:	08005629 	.word	0x08005629
 800561c:	080056d3 	.word	0x080056d3
 8005620:	08005629 	.word	0x08005629
 8005624:	08005695 	.word	0x08005695
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005628:	78fb      	ldrb	r3, [r7, #3]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	4413      	add	r3, r2
 8005630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005634:	461a      	mov	r2, r3
 8005636:	f240 439d 	movw	r3, #1181	; 0x49d
 800563a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800563c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005640:	2b00      	cmp	r3, #0
 8005642:	da10      	bge.n	8005666 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005644:	78fb      	ldrb	r3, [r7, #3]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	4413      	add	r3, r2
 800564c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	78fa      	ldrb	r2, [r7, #3]
 8005654:	0151      	lsls	r1, r2, #5
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	440a      	add	r2, r1
 800565a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800565e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005662:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005664:	e057      	b.n	8005716 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800566a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566e:	2b00      	cmp	r3, #0
 8005670:	d051      	beq.n	8005716 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005672:	78fb      	ldrb	r3, [r7, #3]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	4413      	add	r3, r2
 800567a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	78fa      	ldrb	r2, [r7, #3]
 8005682:	0151      	lsls	r1, r2, #5
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	440a      	add	r2, r1
 8005688:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800568c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005690:	60d3      	str	r3, [r2, #12]
      break;
 8005692:	e040      	b.n	8005716 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005694:	78fb      	ldrb	r3, [r7, #3]
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	4413      	add	r3, r2
 800569c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a0:	461a      	mov	r2, r3
 80056a2:	f240 639d 	movw	r3, #1693	; 0x69d
 80056a6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80056a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	da34      	bge.n	800571a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80056b0:	78fb      	ldrb	r3, [r7, #3]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	78fa      	ldrb	r2, [r7, #3]
 80056c0:	0151      	lsls	r1, r2, #5
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	440a      	add	r2, r1
 80056c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ce:	60d3      	str	r3, [r2, #12]
      }

      break;
 80056d0:	e023      	b.n	800571a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80056d2:	78fb      	ldrb	r3, [r7, #3]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056de:	461a      	mov	r2, r3
 80056e0:	f240 2325 	movw	r3, #549	; 0x225
 80056e4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80056e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	da17      	bge.n	800571e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80056ee:	78fb      	ldrb	r3, [r7, #3]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	78fa      	ldrb	r2, [r7, #3]
 80056fe:	0151      	lsls	r1, r2, #5
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	440a      	add	r2, r1
 8005704:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005708:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800570c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800570e:	e006      	b.n	800571e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	77fb      	strb	r3, [r7, #31]
      break;
 8005714:	e004      	b.n	8005720 <USB_HC_Init+0x14c>
      break;
 8005716:	bf00      	nop
 8005718:	e002      	b.n	8005720 <USB_HC_Init+0x14c>
      break;
 800571a:	bf00      	nop
 800571c:	e000      	b.n	8005720 <USB_HC_Init+0x14c>
      break;
 800571e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005720:	78fb      	ldrb	r3, [r7, #3]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	4413      	add	r3, r2
 8005728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	78fa      	ldrb	r2, [r7, #3]
 8005730:	0151      	lsls	r1, r2, #5
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	440a      	add	r2, r1
 8005736:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800573a:	f043 0302 	orr.w	r3, r3, #2
 800573e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005746:	699a      	ldr	r2, [r3, #24]
 8005748:	78fb      	ldrb	r3, [r7, #3]
 800574a:	f003 030f 	and.w	r3, r3, #15
 800574e:	2101      	movs	r1, #1
 8005750:	fa01 f303 	lsl.w	r3, r1, r3
 8005754:	6939      	ldr	r1, [r7, #16]
 8005756:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800575a:	4313      	orrs	r3, r2
 800575c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800576a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800576e:	2b00      	cmp	r3, #0
 8005770:	da03      	bge.n	800577a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005776:	61bb      	str	r3, [r7, #24]
 8005778:	e001      	b.n	800577e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7ff feff 	bl	8005582 <USB_GetHostSpeed>
 8005784:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005786:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800578a:	2b02      	cmp	r3, #2
 800578c:	d106      	bne.n	800579c <USB_HC_Init+0x1c8>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b02      	cmp	r3, #2
 8005792:	d003      	beq.n	800579c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005794:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005798:	617b      	str	r3, [r7, #20]
 800579a:	e001      	b.n	80057a0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057a0:	787b      	ldrb	r3, [r7, #1]
 80057a2:	059b      	lsls	r3, r3, #22
 80057a4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80057a8:	78bb      	ldrb	r3, [r7, #2]
 80057aa:	02db      	lsls	r3, r3, #11
 80057ac:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057b0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80057b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80057b6:	049b      	lsls	r3, r3, #18
 80057b8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80057bc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80057be:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80057c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80057c4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057ca:	78fb      	ldrb	r3, [r7, #3]
 80057cc:	0159      	lsls	r1, r3, #5
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	440b      	add	r3, r1
 80057d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057dc:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80057de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	d003      	beq.n	80057ee <USB_HC_Init+0x21a>
 80057e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d10f      	bne.n	800580e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80057ee:	78fb      	ldrb	r3, [r7, #3]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	78fa      	ldrb	r2, [r7, #3]
 80057fe:	0151      	lsls	r1, r2, #5
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	440a      	add	r2, r1
 8005804:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005808:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800580c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800580e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005810:	4618      	mov	r0, r3
 8005812:	3720      	adds	r7, #32
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b08c      	sub	sp, #48	; 0x30
 800581c:	af02      	add	r7, sp, #8
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	4613      	mov	r3, r2
 8005824:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	785b      	ldrb	r3, [r3, #1]
 800582e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005830:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005834:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800583a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800583e:	2b00      	cmp	r3, #0
 8005840:	d02d      	beq.n	800589e <USB_HC_StartXfer+0x86>
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	791b      	ldrb	r3, [r3, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d129      	bne.n	800589e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800584a:	79fb      	ldrb	r3, [r7, #7]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d117      	bne.n	8005880 <USB_HC_StartXfer+0x68>
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	79db      	ldrb	r3, [r3, #7]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d003      	beq.n	8005860 <USB_HC_StartXfer+0x48>
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	79db      	ldrb	r3, [r3, #7]
 800585c:	2b02      	cmp	r3, #2
 800585e:	d10f      	bne.n	8005880 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	4413      	add	r3, r2
 8005868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	69fa      	ldr	r2, [r7, #28]
 8005870:	0151      	lsls	r1, r2, #5
 8005872:	6a3a      	ldr	r2, [r7, #32]
 8005874:	440a      	add	r2, r1
 8005876:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800587a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800587e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005880:	79fb      	ldrb	r3, [r7, #7]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10b      	bne.n	800589e <USB_HC_StartXfer+0x86>
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	795b      	ldrb	r3, [r3, #5]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d107      	bne.n	800589e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	785b      	ldrb	r3, [r3, #1]
 8005892:	4619      	mov	r1, r3
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 fa0f 	bl	8005cb8 <USB_DoPing>
      return HAL_OK;
 800589a:	2300      	movs	r3, #0
 800589c:	e0f8      	b.n	8005a90 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d018      	beq.n	80058d8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	8912      	ldrh	r2, [r2, #8]
 80058ae:	4413      	add	r3, r2
 80058b0:	3b01      	subs	r3, #1
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	8912      	ldrh	r2, [r2, #8]
 80058b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80058ba:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80058bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80058be:	8b7b      	ldrh	r3, [r7, #26]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d90b      	bls.n	80058dc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80058c4:	8b7b      	ldrh	r3, [r7, #26]
 80058c6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80058c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	8912      	ldrh	r2, [r2, #8]
 80058ce:	fb03 f202 	mul.w	r2, r3, r2
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	611a      	str	r2, [r3, #16]
 80058d6:	e001      	b.n	80058dc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80058d8:	2301      	movs	r3, #1
 80058da:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	78db      	ldrb	r3, [r3, #3]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d007      	beq.n	80058f4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80058e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	8912      	ldrh	r2, [r2, #8]
 80058ea:	fb03 f202 	mul.w	r2, r3, r2
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	611a      	str	r2, [r3, #16]
 80058f2:	e003      	b.n	80058fc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	695a      	ldr	r2, [r3, #20]
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005904:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005906:	04d9      	lsls	r1, r3, #19
 8005908:	4b63      	ldr	r3, [pc, #396]	; (8005a98 <USB_HC_StartXfer+0x280>)
 800590a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800590c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	7a9b      	ldrb	r3, [r3, #10]
 8005912:	075b      	lsls	r3, r3, #29
 8005914:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005918:	69f9      	ldr	r1, [r7, #28]
 800591a:	0148      	lsls	r0, r1, #5
 800591c:	6a39      	ldr	r1, [r7, #32]
 800591e:	4401      	add	r1, r0
 8005920:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005924:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005926:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005928:	79fb      	ldrb	r3, [r7, #7]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d009      	beq.n	8005942 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	68d9      	ldr	r1, [r3, #12]
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	4413      	add	r3, r2
 800593a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800593e:	460a      	mov	r2, r1
 8005940:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	bf0c      	ite	eq
 8005952:	2301      	moveq	r3, #1
 8005954:	2300      	movne	r3, #0
 8005956:	b2db      	uxtb	r3, r3
 8005958:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	4413      	add	r3, r2
 8005962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	69fa      	ldr	r2, [r7, #28]
 800596a:	0151      	lsls	r1, r2, #5
 800596c:	6a3a      	ldr	r2, [r7, #32]
 800596e:	440a      	add	r2, r1
 8005970:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005974:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005978:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	015a      	lsls	r2, r3, #5
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	4413      	add	r3, r2
 8005982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	7e7b      	ldrb	r3, [r7, #25]
 800598a:	075b      	lsls	r3, r3, #29
 800598c:	69f9      	ldr	r1, [r7, #28]
 800598e:	0148      	lsls	r0, r1, #5
 8005990:	6a39      	ldr	r1, [r7, #32]
 8005992:	4401      	add	r1, r0
 8005994:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005998:	4313      	orrs	r3, r2
 800599a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059b2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	78db      	ldrb	r3, [r3, #3]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d004      	beq.n	80059c6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059c2:	613b      	str	r3, [r7, #16]
 80059c4:	e003      	b.n	80059ce <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059cc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059d4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	6a3b      	ldr	r3, [r7, #32]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e2:	461a      	mov	r2, r3
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80059e8:	79fb      	ldrb	r3, [r7, #7]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80059ee:	2300      	movs	r3, #0
 80059f0:	e04e      	b.n	8005a90 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	78db      	ldrb	r3, [r3, #3]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d149      	bne.n	8005a8e <USB_HC_StartXfer+0x276>
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d045      	beq.n	8005a8e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	79db      	ldrb	r3, [r3, #7]
 8005a06:	2b03      	cmp	r3, #3
 8005a08:	d830      	bhi.n	8005a6c <USB_HC_StartXfer+0x254>
 8005a0a:	a201      	add	r2, pc, #4	; (adr r2, 8005a10 <USB_HC_StartXfer+0x1f8>)
 8005a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a10:	08005a21 	.word	0x08005a21
 8005a14:	08005a45 	.word	0x08005a45
 8005a18:	08005a21 	.word	0x08005a21
 8005a1c:	08005a45 	.word	0x08005a45
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	3303      	adds	r3, #3
 8005a26:	089b      	lsrs	r3, r3, #2
 8005a28:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005a2a:	8afa      	ldrh	r2, [r7, #22]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d91c      	bls.n	8005a70 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	f043 0220 	orr.w	r2, r3, #32
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	619a      	str	r2, [r3, #24]
        }
        break;
 8005a42:	e015      	b.n	8005a70 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	3303      	adds	r3, #3
 8005a4a:	089b      	lsrs	r3, r3, #2
 8005a4c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005a4e:	8afa      	ldrh	r2, [r7, #22]
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d90a      	bls.n	8005a74 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	619a      	str	r2, [r3, #24]
        }
        break;
 8005a6a:	e003      	b.n	8005a74 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005a6c:	bf00      	nop
 8005a6e:	e002      	b.n	8005a76 <USB_HC_StartXfer+0x25e>
        break;
 8005a70:	bf00      	nop
 8005a72:	e000      	b.n	8005a76 <USB_HC_StartXfer+0x25e>
        break;
 8005a74:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	68d9      	ldr	r1, [r3, #12]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	785a      	ldrb	r2, [r3, #1]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	2000      	movs	r0, #0
 8005a86:	9000      	str	r0, [sp, #0]
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f7ff fb31 	bl	80050f0 <USB_WritePacket>
  }

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3728      	adds	r7, #40	; 0x28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	1ff80000 	.word	0x1ff80000

08005a9c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	b29b      	uxth	r3, r3
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b089      	sub	sp, #36	; 0x24
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005ace:	78fb      	ldrb	r3, [r7, #3]
 8005ad0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	0c9b      	lsrs	r3, r3, #18
 8005ae6:	f003 0303 	and.w	r3, r3, #3
 8005aea:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	0fdb      	lsrs	r3, r3, #31
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f003 0320 	and.w	r3, r3, #32
 8005b0a:	2b20      	cmp	r3, #32
 8005b0c:	d104      	bne.n	8005b18 <USB_HC_Halt+0x5a>
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005b14:	2300      	movs	r3, #0
 8005b16:	e0c8      	b.n	8005caa <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d002      	beq.n	8005b24 <USB_HC_Halt+0x66>
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d163      	bne.n	8005bec <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	0151      	lsls	r1, r2, #5
 8005b36:	69fa      	ldr	r2, [r7, #28]
 8005b38:	440a      	add	r2, r1
 8005b3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b42:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f003 0320 	and.w	r3, r3, #32
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f040 80ab 	bne.w	8005ca8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b56:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d133      	bne.n	8005bc6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	69ba      	ldr	r2, [r7, #24]
 8005b6e:	0151      	lsls	r1, r2, #5
 8005b70:	69fa      	ldr	r2, [r7, #28]
 8005b72:	440a      	add	r2, r1
 8005b74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b7c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	0151      	lsls	r1, r2, #5
 8005b90:	69fa      	ldr	r2, [r7, #28]
 8005b92:	440a      	add	r2, r1
 8005b94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b9c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005baa:	d81d      	bhi.n	8005be8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	015a      	lsls	r2, r3, #5
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bc2:	d0ec      	beq.n	8005b9e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005bc4:	e070      	b.n	8005ca8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	015a      	lsls	r2, r3, #5
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	0151      	lsls	r1, r2, #5
 8005bd8:	69fa      	ldr	r2, [r7, #28]
 8005bda:	440a      	add	r2, r1
 8005bdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005be0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005be4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005be6:	e05f      	b.n	8005ca8 <USB_HC_Halt+0x1ea>
            break;
 8005be8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005bea:	e05d      	b.n	8005ca8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	0151      	lsls	r1, r2, #5
 8005bfe:	69fa      	ldr	r2, [r7, #28]
 8005c00:	440a      	add	r2, r1
 8005c02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c0a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d133      	bne.n	8005c84 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	0151      	lsls	r1, r2, #5
 8005c2e:	69fa      	ldr	r2, [r7, #28]
 8005c30:	440a      	add	r2, r1
 8005c32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c3a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	0151      	lsls	r1, r2, #5
 8005c4e:	69fa      	ldr	r2, [r7, #28]
 8005c50:	440a      	add	r2, r1
 8005c52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c5a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c68:	d81d      	bhi.n	8005ca6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c80:	d0ec      	beq.n	8005c5c <USB_HC_Halt+0x19e>
 8005c82:	e011      	b.n	8005ca8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	0151      	lsls	r1, r2, #5
 8005c96:	69fa      	ldr	r2, [r7, #28]
 8005c98:	440a      	add	r2, r1
 8005c9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ca2:	6013      	str	r3, [r2, #0]
 8005ca4:	e000      	b.n	8005ca8 <USB_HC_Halt+0x1ea>
          break;
 8005ca6:	bf00      	nop
    }
  }

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3724      	adds	r7, #36	; 0x24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
	...

08005cb8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005cc8:	78fb      	ldrb	r3, [r7, #3]
 8005cca:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	04da      	lsls	r2, r3, #19
 8005cd4:	4b15      	ldr	r3, [pc, #84]	; (8005d2c <USB_DoPing+0x74>)
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	0151      	lsls	r1, r2, #5
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	440a      	add	r2, r1
 8005ce0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ce4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ce8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d00:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d08:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	015a      	lsls	r2, r3, #5
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	4413      	add	r3, r2
 8005d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d16:	461a      	mov	r2, r3
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	371c      	adds	r7, #28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	1ff80000 	.word	0x1ff80000

08005d30 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b088      	sub	sp, #32
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005d40:	2300      	movs	r3, #0
 8005d42:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7ff f911 	bl	8004f6c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d4a:	2110      	movs	r1, #16
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7ff f96b 	bl	8005028 <USB_FlushTxFifo>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f7ff f997 	bl	8005090 <USB_FlushRxFifo>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	61bb      	str	r3, [r7, #24]
 8005d70:	e01f      	b.n	8005db2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d88:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d90:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d98:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da6:	461a      	mov	r2, r3
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	3301      	adds	r3, #1
 8005db0:	61bb      	str	r3, [r7, #24]
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	2b0f      	cmp	r3, #15
 8005db6:	d9dc      	bls.n	8005d72 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005db8:	2300      	movs	r3, #0
 8005dba:	61bb      	str	r3, [r7, #24]
 8005dbc:	e034      	b.n	8005e28 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dd4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ddc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005de4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df2:	461a      	mov	r2, r3
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e04:	d80c      	bhi.n	8005e20 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e1c:	d0ec      	beq.n	8005df8 <USB_StopHost+0xc8>
 8005e1e:	e000      	b.n	8005e22 <USB_StopHost+0xf2>
        break;
 8005e20:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	3301      	adds	r3, #1
 8005e26:	61bb      	str	r3, [r7, #24]
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	2b0f      	cmp	r3, #15
 8005e2c:	d9c7      	bls.n	8005dbe <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e34:	461a      	mov	r2, r3
 8005e36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e3a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e42:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f7ff f880 	bl	8004f4a <USB_EnableGlobalInt>

  return ret;
 8005e4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3720      	adds	r7, #32
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005e54:	b590      	push	{r4, r7, lr}
 8005e56:	b089      	sub	sp, #36	; 0x24
 8005e58:	af04      	add	r7, sp, #16
 8005e5a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	2202      	movs	r2, #2
 8005e60:	2102      	movs	r1, #2
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 fc66 	bl	8006734 <USBH_FindInterface>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
 8005e6e:	2bff      	cmp	r3, #255	; 0xff
 8005e70:	d002      	beq.n	8005e78 <USBH_CDC_InterfaceInit+0x24>
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d901      	bls.n	8005e7c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005e78:	2302      	movs	r3, #2
 8005e7a:	e13d      	b.n	80060f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005e7c:	7bfb      	ldrb	r3, [r7, #15]
 8005e7e:	4619      	mov	r1, r3
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fc3b 	bl	80066fc <USBH_SelectInterface>
 8005e86:	4603      	mov	r3, r0
 8005e88:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005e8a:	7bbb      	ldrb	r3, [r7, #14]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005e90:	2302      	movs	r3, #2
 8005e92:	e131      	b.n	80060f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005e9a:	2050      	movs	r0, #80	; 0x50
 8005e9c:	f002 fac6 	bl	800842c <malloc>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005eaa:	69db      	ldr	r3, [r3, #28]
 8005eac:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	e11f      	b.n	80060f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005eb8:	2250      	movs	r2, #80	; 0x50
 8005eba:	2100      	movs	r1, #0
 8005ebc:	68b8      	ldr	r0, [r7, #8]
 8005ebe:	f002 fad4 	bl	800846a <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005ec2:	7bfb      	ldrb	r3, [r7, #15]
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	211a      	movs	r1, #26
 8005ec8:	fb01 f303 	mul.w	r3, r1, r3
 8005ecc:	4413      	add	r3, r2
 8005ece:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	b25b      	sxtb	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	da15      	bge.n	8005f06 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005eda:	7bfb      	ldrb	r3, [r7, #15]
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	211a      	movs	r1, #26
 8005ee0:	fb01 f303 	mul.w	r3, r1, r3
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005eea:	781a      	ldrb	r2, [r3, #0]
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ef0:	7bfb      	ldrb	r3, [r7, #15]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	211a      	movs	r1, #26
 8005ef6:	fb01 f303 	mul.w	r3, r1, r3
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005f00:	881a      	ldrh	r2, [r3, #0]
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	785b      	ldrb	r3, [r3, #1]
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f001 ff2c 	bl	8007d6a <USBH_AllocPipe>
 8005f12:	4603      	mov	r3, r0
 8005f14:	461a      	mov	r2, r3
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	7819      	ldrb	r1, [r3, #0]
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	7858      	ldrb	r0, [r3, #1]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	8952      	ldrh	r2, [r2, #10]
 8005f32:	9202      	str	r2, [sp, #8]
 8005f34:	2203      	movs	r2, #3
 8005f36:	9201      	str	r2, [sp, #4]
 8005f38:	9300      	str	r3, [sp, #0]
 8005f3a:	4623      	mov	r3, r4
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f001 fee4 	bl	8007d0c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f002 f9dc 	bl	800830a <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005f52:	2300      	movs	r3, #0
 8005f54:	2200      	movs	r2, #0
 8005f56:	210a      	movs	r1, #10
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 fbeb 	bl	8006734 <USBH_FindInterface>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
 8005f64:	2bff      	cmp	r3, #255	; 0xff
 8005f66:	d002      	beq.n	8005f6e <USBH_CDC_InterfaceInit+0x11a>
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d901      	bls.n	8005f72 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005f6e:	2302      	movs	r3, #2
 8005f70:	e0c2      	b.n	80060f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005f72:	7bfb      	ldrb	r3, [r7, #15]
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	211a      	movs	r1, #26
 8005f78:	fb01 f303 	mul.w	r3, r1, r3
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	b25b      	sxtb	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	da16      	bge.n	8005fb8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f8a:	7bfb      	ldrb	r3, [r7, #15]
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	211a      	movs	r1, #26
 8005f90:	fb01 f303 	mul.w	r3, r1, r3
 8005f94:	4413      	add	r3, r2
 8005f96:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f9a:	781a      	ldrb	r2, [r3, #0]
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	211a      	movs	r1, #26
 8005fa6:	fb01 f303 	mul.w	r3, r1, r3
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005fb0:	881a      	ldrh	r2, [r3, #0]
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	835a      	strh	r2, [r3, #26]
 8005fb6:	e015      	b.n	8005fe4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	211a      	movs	r1, #26
 8005fbe:	fb01 f303 	mul.w	r3, r1, r3
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005fc8:	781a      	ldrb	r2, [r3, #0]
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005fce:	7bfb      	ldrb	r3, [r7, #15]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	211a      	movs	r1, #26
 8005fd4:	fb01 f303 	mul.w	r3, r1, r3
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005fde:	881a      	ldrh	r2, [r3, #0]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	211a      	movs	r1, #26
 8005fea:	fb01 f303 	mul.w	r3, r1, r3
 8005fee:	4413      	add	r3, r2
 8005ff0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	b25b      	sxtb	r3, r3
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	da16      	bge.n	800602a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	211a      	movs	r1, #26
 8006002:	fb01 f303 	mul.w	r3, r1, r3
 8006006:	4413      	add	r3, r2
 8006008:	f203 3356 	addw	r3, r3, #854	; 0x356
 800600c:	781a      	ldrb	r2, [r3, #0]
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006012:	7bfb      	ldrb	r3, [r7, #15]
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	211a      	movs	r1, #26
 8006018:	fb01 f303 	mul.w	r3, r1, r3
 800601c:	4413      	add	r3, r2
 800601e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006022:	881a      	ldrh	r2, [r3, #0]
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	835a      	strh	r2, [r3, #26]
 8006028:	e015      	b.n	8006056 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800602a:	7bfb      	ldrb	r3, [r7, #15]
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	211a      	movs	r1, #26
 8006030:	fb01 f303 	mul.w	r3, r1, r3
 8006034:	4413      	add	r3, r2
 8006036:	f203 3356 	addw	r3, r3, #854	; 0x356
 800603a:	781a      	ldrb	r2, [r3, #0]
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006040:	7bfb      	ldrb	r3, [r7, #15]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	211a      	movs	r1, #26
 8006046:	fb01 f303 	mul.w	r3, r1, r3
 800604a:	4413      	add	r3, r2
 800604c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006050:	881a      	ldrh	r2, [r3, #0]
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	7b9b      	ldrb	r3, [r3, #14]
 800605a:	4619      	mov	r1, r3
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f001 fe84 	bl	8007d6a <USBH_AllocPipe>
 8006062:	4603      	mov	r3, r0
 8006064:	461a      	mov	r2, r3
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	7bdb      	ldrb	r3, [r3, #15]
 800606e:	4619      	mov	r1, r3
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f001 fe7a 	bl	8007d6a <USBH_AllocPipe>
 8006076:	4603      	mov	r3, r0
 8006078:	461a      	mov	r2, r3
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	7b59      	ldrb	r1, [r3, #13]
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	7b98      	ldrb	r0, [r3, #14]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	8b12      	ldrh	r2, [r2, #24]
 8006096:	9202      	str	r2, [sp, #8]
 8006098:	2202      	movs	r2, #2
 800609a:	9201      	str	r2, [sp, #4]
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	4623      	mov	r3, r4
 80060a0:	4602      	mov	r2, r0
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f001 fe32 	bl	8007d0c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	7b19      	ldrb	r1, [r3, #12]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	7bd8      	ldrb	r0, [r3, #15]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	8b52      	ldrh	r2, [r2, #26]
 80060c0:	9202      	str	r2, [sp, #8]
 80060c2:	2202      	movs	r2, #2
 80060c4:	9201      	str	r2, [sp, #4]
 80060c6:	9300      	str	r3, [sp, #0]
 80060c8:	4623      	mov	r3, r4
 80060ca:	4602      	mov	r2, r0
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f001 fe1d 	bl	8007d0c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	7b5b      	ldrb	r3, [r3, #13]
 80060de:	2200      	movs	r2, #0
 80060e0:	4619      	mov	r1, r3
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f002 f911 	bl	800830a <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	7b1b      	ldrb	r3, [r3, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	4619      	mov	r1, r3
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f002 f90a 	bl	800830a <USBH_LL_SetToggle>

  return USBH_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3714      	adds	r7, #20
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd90      	pop	{r4, r7, pc}

08006100 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800610e:	69db      	ldr	r3, [r3, #28]
 8006110:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00e      	beq.n	8006138 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	4619      	mov	r1, r3
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f001 fe12 	bl	8007d4a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	4619      	mov	r1, r3
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f001 fe3d 	bl	8007dac <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	7b1b      	ldrb	r3, [r3, #12]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00e      	beq.n	800615e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	7b1b      	ldrb	r3, [r3, #12]
 8006144:	4619      	mov	r1, r3
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f001 fdff 	bl	8007d4a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	7b1b      	ldrb	r3, [r3, #12]
 8006150:	4619      	mov	r1, r3
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f001 fe2a 	bl	8007dac <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	7b5b      	ldrb	r3, [r3, #13]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00e      	beq.n	8006184 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	7b5b      	ldrb	r3, [r3, #13]
 800616a:	4619      	mov	r1, r3
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f001 fdec 	bl	8007d4a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	7b5b      	ldrb	r3, [r3, #13]
 8006176:	4619      	mov	r1, r3
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f001 fe17 	bl	8007dac <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800618a:	69db      	ldr	r3, [r3, #28]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00b      	beq.n	80061a8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	4618      	mov	r0, r3
 800619a:	f002 f94f 	bl	800843c <free>
    phost->pActiveClass->pData = 0U;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061a4:	2200      	movs	r2, #0
 80061a6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b084      	sub	sp, #16
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3340      	adds	r3, #64	; 0x40
 80061c8:	4619      	mov	r1, r3
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f8b1 	bl	8006332 <GetLineCoding>
 80061d0:	4603      	mov	r3, r0
 80061d2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80061d4:	7afb      	ldrb	r3, [r7, #11]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d105      	bne.n	80061e6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061e0:	2102      	movs	r1, #2
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80061e6:	7afb      	ldrb	r3, [r7, #11]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80061f8:	2301      	movs	r3, #1
 80061fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80061fc:	2300      	movs	r3, #0
 80061fe:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006206:	69db      	ldr	r3, [r3, #28]
 8006208:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006210:	2b04      	cmp	r3, #4
 8006212:	d877      	bhi.n	8006304 <USBH_CDC_Process+0x114>
 8006214:	a201      	add	r2, pc, #4	; (adr r2, 800621c <USBH_CDC_Process+0x2c>)
 8006216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621a:	bf00      	nop
 800621c:	08006231 	.word	0x08006231
 8006220:	08006237 	.word	0x08006237
 8006224:	08006267 	.word	0x08006267
 8006228:	080062db 	.word	0x080062db
 800622c:	080062e9 	.word	0x080062e9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006230:	2300      	movs	r3, #0
 8006232:	73fb      	strb	r3, [r7, #15]
      break;
 8006234:	e06d      	b.n	8006312 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800623a:	4619      	mov	r1, r3
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 f897 	bl	8006370 <SetLineCoding>
 8006242:	4603      	mov	r3, r0
 8006244:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006246:	7bbb      	ldrb	r3, [r7, #14]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d104      	bne.n	8006256 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	2202      	movs	r2, #2
 8006250:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006254:	e058      	b.n	8006308 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006256:	7bbb      	ldrb	r3, [r7, #14]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d055      	beq.n	8006308 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	2204      	movs	r2, #4
 8006260:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006264:	e050      	b.n	8006308 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	3340      	adds	r3, #64	; 0x40
 800626a:	4619      	mov	r1, r3
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f860 	bl	8006332 <GetLineCoding>
 8006272:	4603      	mov	r3, r0
 8006274:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006276:	7bbb      	ldrb	r3, [r7, #14]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d126      	bne.n	80062ca <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800628e:	791b      	ldrb	r3, [r3, #4]
 8006290:	429a      	cmp	r2, r3
 8006292:	d13b      	bne.n	800630c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800629e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d133      	bne.n	800630c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062ae:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d12b      	bne.n	800630c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062bc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80062be:	429a      	cmp	r2, r3
 80062c0:	d124      	bne.n	800630c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f958 	bl	8006578 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80062c8:	e020      	b.n	800630c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80062ca:	7bbb      	ldrb	r3, [r7, #14]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d01d      	beq.n	800630c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2204      	movs	r2, #4
 80062d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80062d8:	e018      	b.n	800630c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f867 	bl	80063ae <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 f8da 	bl	800649a <CDC_ProcessReception>
      break;
 80062e6:	e014      	b.n	8006312 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80062e8:	2100      	movs	r1, #0
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 ffef 	bl	80072ce <USBH_ClrFeature>
 80062f0:	4603      	mov	r3, r0
 80062f2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80062f4:	7bbb      	ldrb	r3, [r7, #14]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10a      	bne.n	8006310 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006302:	e005      	b.n	8006310 <USBH_CDC_Process+0x120>

    default:
      break;
 8006304:	bf00      	nop
 8006306:	e004      	b.n	8006312 <USBH_CDC_Process+0x122>
      break;
 8006308:	bf00      	nop
 800630a:	e002      	b.n	8006312 <USBH_CDC_Process+0x122>
      break;
 800630c:	bf00      	nop
 800630e:	e000      	b.n	8006312 <USBH_CDC_Process+0x122>
      break;
 8006310:	bf00      	nop

  }

  return status;
 8006312:	7bfb      	ldrb	r3, [r7, #15]
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b082      	sub	sp, #8
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
 800633a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	22a1      	movs	r2, #161	; 0xa1
 8006340:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2221      	movs	r2, #33	; 0x21
 8006346:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2207      	movs	r2, #7
 8006358:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	2207      	movs	r2, #7
 800635e:	4619      	mov	r1, r3
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f001 fa81 	bl	8007868 <USBH_CtlReq>
 8006366:	4603      	mov	r3, r0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3708      	adds	r7, #8
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2221      	movs	r2, #33	; 0x21
 800637e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2220      	movs	r2, #32
 8006384:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2207      	movs	r2, #7
 8006396:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2207      	movs	r2, #7
 800639c:	4619      	mov	r1, r3
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f001 fa62 	bl	8007868 <USBH_CtlReq>
 80063a4:	4603      	mov	r3, r0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3708      	adds	r7, #8
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b086      	sub	sp, #24
 80063b2:	af02      	add	r7, sp, #8
 80063b4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80063c0:	2300      	movs	r3, #0
 80063c2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d002      	beq.n	80063d4 <CDC_ProcessTransmission+0x26>
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d023      	beq.n	800641a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80063d2:	e05e      	b.n	8006492 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	8b12      	ldrh	r2, [r2, #24]
 80063dc:	4293      	cmp	r3, r2
 80063de:	d90b      	bls.n	80063f8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	69d9      	ldr	r1, [r3, #28]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8b1a      	ldrh	r2, [r3, #24]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	7b5b      	ldrb	r3, [r3, #13]
 80063ec:	2001      	movs	r0, #1
 80063ee:	9000      	str	r0, [sp, #0]
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f001 fc48 	bl	8007c86 <USBH_BulkSendData>
 80063f6:	e00b      	b.n	8006410 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006400:	b29a      	uxth	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	7b5b      	ldrb	r3, [r3, #13]
 8006406:	2001      	movs	r0, #1
 8006408:	9000      	str	r0, [sp, #0]
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f001 fc3b 	bl	8007c86 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2202      	movs	r2, #2
 8006414:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006418:	e03b      	b.n	8006492 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	7b5b      	ldrb	r3, [r3, #13]
 800641e:	4619      	mov	r1, r3
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f001 ff51 	bl	80082c8 <USBH_LL_GetURBState>
 8006426:	4603      	mov	r3, r0
 8006428:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800642a:	7afb      	ldrb	r3, [r7, #11]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d128      	bne.n	8006482 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	8b12      	ldrh	r2, [r2, #24]
 8006438:	4293      	cmp	r3, r2
 800643a:	d90e      	bls.n	800645a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	8b12      	ldrh	r2, [r2, #24]
 8006444:	1a9a      	subs	r2, r3, r2
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	8b12      	ldrh	r2, [r2, #24]
 8006452:	441a      	add	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	61da      	str	r2, [r3, #28]
 8006458:	e002      	b.n	8006460 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006464:	2b00      	cmp	r3, #0
 8006466:	d004      	beq.n	8006472 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006470:	e00e      	b.n	8006490 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f868 	bl	8006550 <USBH_CDC_TransmitCallback>
      break;
 8006480:	e006      	b.n	8006490 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006482:	7afb      	ldrb	r3, [r7, #11]
 8006484:	2b02      	cmp	r3, #2
 8006486:	d103      	bne.n	8006490 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006490:	bf00      	nop
  }
}
 8006492:	bf00      	nop
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b086      	sub	sp, #24
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80064ac:	2300      	movs	r3, #0
 80064ae:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80064b6:	2b03      	cmp	r3, #3
 80064b8:	d002      	beq.n	80064c0 <CDC_ProcessReception+0x26>
 80064ba:	2b04      	cmp	r3, #4
 80064bc:	d00e      	beq.n	80064dc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80064be:	e043      	b.n	8006548 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	6a19      	ldr	r1, [r3, #32]
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	8b5a      	ldrh	r2, [r3, #26]
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	7b1b      	ldrb	r3, [r3, #12]
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f001 fbff 	bl	8007cd0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2204      	movs	r2, #4
 80064d6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80064da:	e035      	b.n	8006548 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	7b1b      	ldrb	r3, [r3, #12]
 80064e0:	4619      	mov	r1, r3
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f001 fef0 	bl	80082c8 <USBH_LL_GetURBState>
 80064e8:	4603      	mov	r3, r0
 80064ea:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80064ec:	7cfb      	ldrb	r3, [r7, #19]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d129      	bne.n	8006546 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	7b1b      	ldrb	r3, [r3, #12]
 80064f6:	4619      	mov	r1, r3
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f001 fe53 	bl	80081a4 <USBH_LL_GetLastXferSize>
 80064fe:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	429a      	cmp	r2, r3
 8006508:	d016      	beq.n	8006538 <CDC_ProcessReception+0x9e>
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	8b5b      	ldrh	r3, [r3, #26]
 800650e:	461a      	mov	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4293      	cmp	r3, r2
 8006514:	d910      	bls.n	8006538 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	1ad2      	subs	r2, r2, r3
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	6a1a      	ldr	r2, [r3, #32]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	441a      	add	r2, r3
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	2203      	movs	r2, #3
 8006532:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006536:	e006      	b.n	8006546 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 f80f 	bl	8006564 <USBH_CDC_ReceiveCallback>
      break;
 8006546:	bf00      	nop
  }
}
 8006548:	bf00      	nop
 800654a:	3718      	adds	r7, #24
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	4613      	mov	r3, r2
 8006598:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d101      	bne.n	80065a4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80065a0:	2302      	movs	r3, #2
 80065a2:	e029      	b.n	80065f8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	79fa      	ldrb	r2, [r7, #7]
 80065a8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f000 f81f 	bl	8006600 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d003      	beq.n	80065f0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f001 fd23 	bl	800803c <USBH_LL_Init>

  return USBH_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006608:	2300      	movs	r3, #0
 800660a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800660c:	2300      	movs	r3, #0
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	e009      	b.n	8006626 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	33e0      	adds	r3, #224	; 0xe0
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	2200      	movs	r2, #0
 800661e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	3301      	adds	r3, #1
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2b0f      	cmp	r3, #15
 800662a:	d9f2      	bls.n	8006612 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800662c:	2300      	movs	r3, #0
 800662e:	60fb      	str	r3, [r7, #12]
 8006630:	e009      	b.n	8006646 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	4413      	add	r3, r2
 8006638:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800663c:	2200      	movs	r2, #0
 800663e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	3301      	adds	r3, #1
 8006644:	60fb      	str	r3, [r7, #12]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800664c:	d3f1      	bcc.n	8006632 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2240      	movs	r2, #64	; 0x40
 8006672:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3714      	adds	r7, #20
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80066b2:	2300      	movs	r3, #0
 80066b4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d016      	beq.n	80066ea <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10e      	bne.n	80066e4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80066cc:	1c59      	adds	r1, r3, #1
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	33de      	adds	r3, #222	; 0xde
 80066d8:	6839      	ldr	r1, [r7, #0]
 80066da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80066de:	2300      	movs	r3, #0
 80066e0:	73fb      	strb	r3, [r7, #15]
 80066e2:	e004      	b.n	80066ee <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80066e4:	2302      	movs	r3, #2
 80066e6:	73fb      	strb	r3, [r7, #15]
 80066e8:	e001      	b.n	80066ee <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80066ea:	2302      	movs	r3, #2
 80066ec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80066ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	460b      	mov	r3, r1
 8006706:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006708:	2300      	movs	r3, #0
 800670a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006712:	78fa      	ldrb	r2, [r7, #3]
 8006714:	429a      	cmp	r2, r3
 8006716:	d204      	bcs.n	8006722 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	78fa      	ldrb	r2, [r7, #3]
 800671c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006720:	e001      	b.n	8006726 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006722:	2302      	movs	r3, #2
 8006724:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006726:	7bfb      	ldrb	r3, [r7, #15]
}
 8006728:	4618      	mov	r0, r3
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006734:	b480      	push	{r7}
 8006736:	b087      	sub	sp, #28
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	4608      	mov	r0, r1
 800673e:	4611      	mov	r1, r2
 8006740:	461a      	mov	r2, r3
 8006742:	4603      	mov	r3, r0
 8006744:	70fb      	strb	r3, [r7, #3]
 8006746:	460b      	mov	r3, r1
 8006748:	70bb      	strb	r3, [r7, #2]
 800674a:	4613      	mov	r3, r2
 800674c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800674e:	2300      	movs	r3, #0
 8006750:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006752:	2300      	movs	r3, #0
 8006754:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800675c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800675e:	e025      	b.n	80067ac <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006760:	7dfb      	ldrb	r3, [r7, #23]
 8006762:	221a      	movs	r2, #26
 8006764:	fb02 f303 	mul.w	r3, r2, r3
 8006768:	3308      	adds	r3, #8
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	4413      	add	r3, r2
 800676e:	3302      	adds	r3, #2
 8006770:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	795b      	ldrb	r3, [r3, #5]
 8006776:	78fa      	ldrb	r2, [r7, #3]
 8006778:	429a      	cmp	r2, r3
 800677a:	d002      	beq.n	8006782 <USBH_FindInterface+0x4e>
 800677c:	78fb      	ldrb	r3, [r7, #3]
 800677e:	2bff      	cmp	r3, #255	; 0xff
 8006780:	d111      	bne.n	80067a6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006786:	78ba      	ldrb	r2, [r7, #2]
 8006788:	429a      	cmp	r2, r3
 800678a:	d002      	beq.n	8006792 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800678c:	78bb      	ldrb	r3, [r7, #2]
 800678e:	2bff      	cmp	r3, #255	; 0xff
 8006790:	d109      	bne.n	80067a6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006796:	787a      	ldrb	r2, [r7, #1]
 8006798:	429a      	cmp	r2, r3
 800679a:	d002      	beq.n	80067a2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800679c:	787b      	ldrb	r3, [r7, #1]
 800679e:	2bff      	cmp	r3, #255	; 0xff
 80067a0:	d101      	bne.n	80067a6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80067a2:	7dfb      	ldrb	r3, [r7, #23]
 80067a4:	e006      	b.n	80067b4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80067a6:	7dfb      	ldrb	r3, [r7, #23]
 80067a8:	3301      	adds	r3, #1
 80067aa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80067ac:	7dfb      	ldrb	r3, [r7, #23]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d9d6      	bls.n	8006760 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80067b2:	23ff      	movs	r3, #255	; 0xff
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	371c      	adds	r7, #28
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f001 fc73 	bl	80080b4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80067ce:	2101      	movs	r1, #1
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f001 fd8c 	bl	80082ee <USBH_LL_DriverVBUS>

  return USBH_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b088      	sub	sp, #32
 80067e4:	af04      	add	r7, sp, #16
 80067e6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80067e8:	2302      	movs	r3, #2
 80067ea:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80067ec:	2300      	movs	r3, #0
 80067ee:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d102      	bne.n	8006802 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2203      	movs	r2, #3
 8006800:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	b2db      	uxtb	r3, r3
 8006808:	2b0b      	cmp	r3, #11
 800680a:	f200 81be 	bhi.w	8006b8a <USBH_Process+0x3aa>
 800680e:	a201      	add	r2, pc, #4	; (adr r2, 8006814 <USBH_Process+0x34>)
 8006810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006814:	08006845 	.word	0x08006845
 8006818:	08006877 	.word	0x08006877
 800681c:	080068df 	.word	0x080068df
 8006820:	08006b25 	.word	0x08006b25
 8006824:	08006b8b 	.word	0x08006b8b
 8006828:	08006983 	.word	0x08006983
 800682c:	08006acb 	.word	0x08006acb
 8006830:	080069b9 	.word	0x080069b9
 8006834:	080069d9 	.word	0x080069d9
 8006838:	080069f9 	.word	0x080069f9
 800683c:	08006a3d 	.word	0x08006a3d
 8006840:	08006b0d 	.word	0x08006b0d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800684a:	b2db      	uxtb	r3, r3
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 819e 	beq.w	8006b8e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006858:	20c8      	movs	r0, #200	; 0xc8
 800685a:	f001 fd86 	bl	800836a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f001 fc85 	bl	800816e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006874:	e18b      	b.n	8006b8e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800687c:	2b01      	cmp	r3, #1
 800687e:	d107      	bne.n	8006890 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2202      	movs	r2, #2
 800688c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800688e:	e18d      	b.n	8006bac <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006896:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800689a:	d914      	bls.n	80068c6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80068a2:	3301      	adds	r3, #1
 80068a4:	b2da      	uxtb	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80068b2:	2b03      	cmp	r3, #3
 80068b4:	d903      	bls.n	80068be <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	220d      	movs	r2, #13
 80068ba:	701a      	strb	r2, [r3, #0]
      break;
 80068bc:	e176      	b.n	8006bac <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	701a      	strb	r2, [r3, #0]
      break;
 80068c4:	e172      	b.n	8006bac <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80068cc:	f103 020a 	add.w	r2, r3, #10
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80068d6:	200a      	movs	r0, #10
 80068d8:	f001 fd47 	bl	800836a <USBH_Delay>
      break;
 80068dc:	e166      	b.n	8006bac <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d005      	beq.n	80068f4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068ee:	2104      	movs	r1, #4
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80068f4:	2064      	movs	r0, #100	; 0x64
 80068f6:	f001 fd38 	bl	800836a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f001 fc10 	bl	8008120 <USBH_LL_GetSpeed>
 8006900:	4603      	mov	r3, r0
 8006902:	461a      	mov	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2205      	movs	r2, #5
 800690e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006910:	2100      	movs	r1, #0
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f001 fa29 	bl	8007d6a <USBH_AllocPipe>
 8006918:	4603      	mov	r3, r0
 800691a:	461a      	mov	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006920:	2180      	movs	r1, #128	; 0x80
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f001 fa21 	bl	8007d6a <USBH_AllocPipe>
 8006928:	4603      	mov	r3, r0
 800692a:	461a      	mov	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	7919      	ldrb	r1, [r3, #4]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006944:	b292      	uxth	r2, r2
 8006946:	9202      	str	r2, [sp, #8]
 8006948:	2200      	movs	r2, #0
 800694a:	9201      	str	r2, [sp, #4]
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	4603      	mov	r3, r0
 8006950:	2280      	movs	r2, #128	; 0x80
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f001 f9da 	bl	8007d0c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	7959      	ldrb	r1, [r3, #5]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800696c:	b292      	uxth	r2, r2
 800696e:	9202      	str	r2, [sp, #8]
 8006970:	2200      	movs	r2, #0
 8006972:	9201      	str	r2, [sp, #4]
 8006974:	9300      	str	r3, [sp, #0]
 8006976:	4603      	mov	r3, r0
 8006978:	2200      	movs	r2, #0
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f001 f9c6 	bl	8007d0c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006980:	e114      	b.n	8006bac <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f918 	bl	8006bb8 <USBH_HandleEnum>
 8006988:	4603      	mov	r3, r0
 800698a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800698c:	7bbb      	ldrb	r3, [r7, #14]
 800698e:	b2db      	uxtb	r3, r3
 8006990:	2b00      	cmp	r3, #0
 8006992:	f040 80fe 	bne.w	8006b92 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d103      	bne.n	80069b0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2208      	movs	r2, #8
 80069ac:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80069ae:	e0f0      	b.n	8006b92 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2207      	movs	r2, #7
 80069b4:	701a      	strb	r2, [r3, #0]
      break;
 80069b6:	e0ec      	b.n	8006b92 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f000 80e9 	beq.w	8006b96 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069ca:	2101      	movs	r1, #1
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2208      	movs	r2, #8
 80069d4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80069d6:	e0de      	b.n	8006b96 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80069de:	b29b      	uxth	r3, r3
 80069e0:	4619      	mov	r1, r3
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fc2c 	bl	8007240 <USBH_SetCfg>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f040 80d5 	bne.w	8006b9a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2209      	movs	r2, #9
 80069f4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80069f6:	e0d0      	b.n	8006b9a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80069fe:	f003 0320 	and.w	r3, r3, #32
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d016      	beq.n	8006a34 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006a06:	2101      	movs	r1, #1
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fc3c 	bl	8007286 <USBH_SetFeature>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006a12:	7bbb      	ldrb	r3, [r7, #14]
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d103      	bne.n	8006a22 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	220a      	movs	r2, #10
 8006a1e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a20:	e0bd      	b.n	8006b9e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006a22:	7bbb      	ldrb	r3, [r7, #14]
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b03      	cmp	r3, #3
 8006a28:	f040 80b9 	bne.w	8006b9e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	220a      	movs	r2, #10
 8006a30:	701a      	strb	r2, [r3, #0]
      break;
 8006a32:	e0b4      	b.n	8006b9e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	220a      	movs	r2, #10
 8006a38:	701a      	strb	r2, [r3, #0]
      break;
 8006a3a:	e0b0      	b.n	8006b9e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 80ad 	beq.w	8006ba2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006a50:	2300      	movs	r3, #0
 8006a52:	73fb      	strb	r3, [r7, #15]
 8006a54:	e016      	b.n	8006a84 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006a56:	7bfa      	ldrb	r2, [r7, #15]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	32de      	adds	r2, #222	; 0xde
 8006a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a60:	791a      	ldrb	r2, [r3, #4]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d108      	bne.n	8006a7e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006a6c:	7bfa      	ldrb	r2, [r7, #15]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	32de      	adds	r2, #222	; 0xde
 8006a72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006a7c:	e005      	b.n	8006a8a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006a7e:	7bfb      	ldrb	r3, [r7, #15]
 8006a80:	3301      	adds	r3, #1
 8006a82:	73fb      	strb	r3, [r7, #15]
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d0e5      	beq.n	8006a56 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d016      	beq.n	8006ac2 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	4798      	blx	r3
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d109      	bne.n	8006aba <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2206      	movs	r2, #6
 8006aaa:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ab2:	2103      	movs	r1, #3
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ab8:	e073      	b.n	8006ba2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	220d      	movs	r2, #13
 8006abe:	701a      	strb	r2, [r3, #0]
      break;
 8006ac0:	e06f      	b.n	8006ba2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	220d      	movs	r2, #13
 8006ac6:	701a      	strb	r2, [r3, #0]
      break;
 8006ac8:	e06b      	b.n	8006ba2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d017      	beq.n	8006b04 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	4798      	blx	r3
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006ae4:	7bbb      	ldrb	r3, [r7, #14]
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d103      	bne.n	8006af4 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	220b      	movs	r2, #11
 8006af0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006af2:	e058      	b.n	8006ba6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006af4:	7bbb      	ldrb	r3, [r7, #14]
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d154      	bne.n	8006ba6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	220d      	movs	r2, #13
 8006b00:	701a      	strb	r2, [r3, #0]
      break;
 8006b02:	e050      	b.n	8006ba6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	220d      	movs	r2, #13
 8006b08:	701a      	strb	r2, [r3, #0]
      break;
 8006b0a:	e04c      	b.n	8006ba6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d049      	beq.n	8006baa <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	4798      	blx	r3
      }
      break;
 8006b22:	e042      	b.n	8006baa <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f7ff fd67 	bl	8006600 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d009      	beq.n	8006b50 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d005      	beq.n	8006b66 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b60:	2105      	movs	r1, #5
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d107      	bne.n	8006b82 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7ff fe20 	bl	80067c0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006b80:	e014      	b.n	8006bac <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f001 fa96 	bl	80080b4 <USBH_LL_Start>
      break;
 8006b88:	e010      	b.n	8006bac <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006b8a:	bf00      	nop
 8006b8c:	e00e      	b.n	8006bac <USBH_Process+0x3cc>
      break;
 8006b8e:	bf00      	nop
 8006b90:	e00c      	b.n	8006bac <USBH_Process+0x3cc>
      break;
 8006b92:	bf00      	nop
 8006b94:	e00a      	b.n	8006bac <USBH_Process+0x3cc>
    break;
 8006b96:	bf00      	nop
 8006b98:	e008      	b.n	8006bac <USBH_Process+0x3cc>
      break;
 8006b9a:	bf00      	nop
 8006b9c:	e006      	b.n	8006bac <USBH_Process+0x3cc>
      break;
 8006b9e:	bf00      	nop
 8006ba0:	e004      	b.n	8006bac <USBH_Process+0x3cc>
      break;
 8006ba2:	bf00      	nop
 8006ba4:	e002      	b.n	8006bac <USBH_Process+0x3cc>
      break;
 8006ba6:	bf00      	nop
 8006ba8:	e000      	b.n	8006bac <USBH_Process+0x3cc>
      break;
 8006baa:	bf00      	nop
  }
  return USBH_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop

08006bb8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b088      	sub	sp, #32
 8006bbc:	af04      	add	r7, sp, #16
 8006bbe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	785b      	ldrb	r3, [r3, #1]
 8006bcc:	2b07      	cmp	r3, #7
 8006bce:	f200 81c1 	bhi.w	8006f54 <USBH_HandleEnum+0x39c>
 8006bd2:	a201      	add	r2, pc, #4	; (adr r2, 8006bd8 <USBH_HandleEnum+0x20>)
 8006bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd8:	08006bf9 	.word	0x08006bf9
 8006bdc:	08006cb7 	.word	0x08006cb7
 8006be0:	08006d21 	.word	0x08006d21
 8006be4:	08006daf 	.word	0x08006daf
 8006be8:	08006e19 	.word	0x08006e19
 8006bec:	08006e89 	.word	0x08006e89
 8006bf0:	08006ecf 	.word	0x08006ecf
 8006bf4:	08006f15 	.word	0x08006f15
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006bf8:	2108      	movs	r1, #8
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fa50 	bl	80070a0 <USBH_Get_DevDesc>
 8006c00:	4603      	mov	r3, r0
 8006c02:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c04:	7bbb      	ldrb	r3, [r7, #14]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d130      	bne.n	8006c6c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	7919      	ldrb	r1, [r3, #4]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006c2e:	b292      	uxth	r2, r2
 8006c30:	9202      	str	r2, [sp, #8]
 8006c32:	2200      	movs	r2, #0
 8006c34:	9201      	str	r2, [sp, #4]
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2280      	movs	r2, #128	; 0x80
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f001 f865 	bl	8007d0c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	7959      	ldrb	r1, [r3, #5]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006c56:	b292      	uxth	r2, r2
 8006c58:	9202      	str	r2, [sp, #8]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	9201      	str	r2, [sp, #4]
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	4603      	mov	r3, r0
 8006c62:	2200      	movs	r2, #0
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f001 f851 	bl	8007d0c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006c6a:	e175      	b.n	8006f58 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c6c:	7bbb      	ldrb	r3, [r7, #14]
 8006c6e:	2b03      	cmp	r3, #3
 8006c70:	f040 8172 	bne.w	8006f58 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	b2da      	uxtb	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c8a:	2b03      	cmp	r3, #3
 8006c8c:	d903      	bls.n	8006c96 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	220d      	movs	r2, #13
 8006c92:	701a      	strb	r2, [r3, #0]
      break;
 8006c94:	e160      	b.n	8006f58 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	795b      	ldrb	r3, [r3, #5]
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f001 f885 	bl	8007dac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	791b      	ldrb	r3, [r3, #4]
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f001 f87f 	bl	8007dac <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	701a      	strb	r2, [r3, #0]
      break;
 8006cb4:	e150      	b.n	8006f58 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006cb6:	2112      	movs	r1, #18
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f9f1 	bl	80070a0 <USBH_Get_DevDesc>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006cc2:	7bbb      	ldrb	r3, [r7, #14]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d103      	bne.n	8006cd0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006cce:	e145      	b.n	8006f5c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006cd0:	7bbb      	ldrb	r3, [r7, #14]
 8006cd2:	2b03      	cmp	r3, #3
 8006cd4:	f040 8142 	bne.w	8006f5c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006cde:	3301      	adds	r3, #1
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006cee:	2b03      	cmp	r3, #3
 8006cf0:	d903      	bls.n	8006cfa <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	220d      	movs	r2, #13
 8006cf6:	701a      	strb	r2, [r3, #0]
      break;
 8006cf8:	e130      	b.n	8006f5c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	795b      	ldrb	r3, [r3, #5]
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f001 f853 	bl	8007dac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	791b      	ldrb	r3, [r3, #4]
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f001 f84d 	bl	8007dac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	701a      	strb	r2, [r3, #0]
      break;
 8006d1e:	e11d      	b.n	8006f5c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006d20:	2101      	movs	r1, #1
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fa68 	bl	80071f8 <USBH_SetAddress>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d2c:	7bbb      	ldrb	r3, [r7, #14]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d132      	bne.n	8006d98 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006d32:	2002      	movs	r0, #2
 8006d34:	f001 fb19 	bl	800836a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2203      	movs	r2, #3
 8006d44:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	7919      	ldrb	r1, [r3, #4]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006d5a:	b292      	uxth	r2, r2
 8006d5c:	9202      	str	r2, [sp, #8]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	9201      	str	r2, [sp, #4]
 8006d62:	9300      	str	r3, [sp, #0]
 8006d64:	4603      	mov	r3, r0
 8006d66:	2280      	movs	r2, #128	; 0x80
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 ffcf 	bl	8007d0c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	7959      	ldrb	r1, [r3, #5]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d82:	b292      	uxth	r2, r2
 8006d84:	9202      	str	r2, [sp, #8]
 8006d86:	2200      	movs	r2, #0
 8006d88:	9201      	str	r2, [sp, #4]
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2200      	movs	r2, #0
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 ffbb 	bl	8007d0c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006d96:	e0e3      	b.n	8006f60 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d98:	7bbb      	ldrb	r3, [r7, #14]
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	f040 80e0 	bne.w	8006f60 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	220d      	movs	r2, #13
 8006da4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	705a      	strb	r2, [r3, #1]
      break;
 8006dac:	e0d8      	b.n	8006f60 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006dae:	2109      	movs	r1, #9
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 f99d 	bl	80070f0 <USBH_Get_CfgDesc>
 8006db6:	4603      	mov	r3, r0
 8006db8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006dba:	7bbb      	ldrb	r3, [r7, #14]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d103      	bne.n	8006dc8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2204      	movs	r2, #4
 8006dc4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006dc6:	e0cd      	b.n	8006f64 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006dc8:	7bbb      	ldrb	r3, [r7, #14]
 8006dca:	2b03      	cmp	r3, #3
 8006dcc:	f040 80ca 	bne.w	8006f64 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006de6:	2b03      	cmp	r3, #3
 8006de8:	d903      	bls.n	8006df2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	220d      	movs	r2, #13
 8006dee:	701a      	strb	r2, [r3, #0]
      break;
 8006df0:	e0b8      	b.n	8006f64 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	795b      	ldrb	r3, [r3, #5]
 8006df6:	4619      	mov	r1, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 ffd7 	bl	8007dac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	791b      	ldrb	r3, [r3, #4]
 8006e02:	4619      	mov	r1, r3
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 ffd1 	bl	8007dac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	701a      	strb	r2, [r3, #0]
      break;
 8006e16:	e0a5      	b.n	8006f64 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f965 	bl	80070f0 <USBH_Get_CfgDesc>
 8006e26:	4603      	mov	r3, r0
 8006e28:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e2a:	7bbb      	ldrb	r3, [r7, #14]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d103      	bne.n	8006e38 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2205      	movs	r2, #5
 8006e34:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006e36:	e097      	b.n	8006f68 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e38:	7bbb      	ldrb	r3, [r7, #14]
 8006e3a:	2b03      	cmp	r3, #3
 8006e3c:	f040 8094 	bne.w	8006f68 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e46:	3301      	adds	r3, #1
 8006e48:	b2da      	uxtb	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e56:	2b03      	cmp	r3, #3
 8006e58:	d903      	bls.n	8006e62 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	220d      	movs	r2, #13
 8006e5e:	701a      	strb	r2, [r3, #0]
      break;
 8006e60:	e082      	b.n	8006f68 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	795b      	ldrb	r3, [r3, #5]
 8006e66:	4619      	mov	r1, r3
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 ff9f 	bl	8007dac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	791b      	ldrb	r3, [r3, #4]
 8006e72:	4619      	mov	r1, r3
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 ff99 	bl	8007dac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	701a      	strb	r2, [r3, #0]
      break;
 8006e86:	e06f      	b.n	8006f68 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d019      	beq.n	8006ec6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e9e:	23ff      	movs	r3, #255	; 0xff
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 f949 	bl	8007138 <USBH_Get_StringDesc>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006eaa:	7bbb      	ldrb	r3, [r7, #14]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d103      	bne.n	8006eb8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2206      	movs	r2, #6
 8006eb4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006eb6:	e059      	b.n	8006f6c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006eb8:	7bbb      	ldrb	r3, [r7, #14]
 8006eba:	2b03      	cmp	r3, #3
 8006ebc:	d156      	bne.n	8006f6c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2206      	movs	r2, #6
 8006ec2:	705a      	strb	r2, [r3, #1]
      break;
 8006ec4:	e052      	b.n	8006f6c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2206      	movs	r2, #6
 8006eca:	705a      	strb	r2, [r3, #1]
      break;
 8006ecc:	e04e      	b.n	8006f6c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d019      	beq.n	8006f0c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006ee4:	23ff      	movs	r3, #255	; 0xff
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f926 	bl	8007138 <USBH_Get_StringDesc>
 8006eec:	4603      	mov	r3, r0
 8006eee:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006ef0:	7bbb      	ldrb	r3, [r7, #14]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d103      	bne.n	8006efe <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2207      	movs	r2, #7
 8006efa:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006efc:	e038      	b.n	8006f70 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006efe:	7bbb      	ldrb	r3, [r7, #14]
 8006f00:	2b03      	cmp	r3, #3
 8006f02:	d135      	bne.n	8006f70 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2207      	movs	r2, #7
 8006f08:	705a      	strb	r2, [r3, #1]
      break;
 8006f0a:	e031      	b.n	8006f70 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2207      	movs	r2, #7
 8006f10:	705a      	strb	r2, [r3, #1]
      break;
 8006f12:	e02d      	b.n	8006f70 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d017      	beq.n	8006f4e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006f2a:	23ff      	movs	r3, #255	; 0xff
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f903 	bl	8007138 <USBH_Get_StringDesc>
 8006f32:	4603      	mov	r3, r0
 8006f34:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006f36:	7bbb      	ldrb	r3, [r7, #14]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d102      	bne.n	8006f42 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006f40:	e018      	b.n	8006f74 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f42:	7bbb      	ldrb	r3, [r7, #14]
 8006f44:	2b03      	cmp	r3, #3
 8006f46:	d115      	bne.n	8006f74 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f4c:	e012      	b.n	8006f74 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	73fb      	strb	r3, [r7, #15]
      break;
 8006f52:	e00f      	b.n	8006f74 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006f54:	bf00      	nop
 8006f56:	e00e      	b.n	8006f76 <USBH_HandleEnum+0x3be>
      break;
 8006f58:	bf00      	nop
 8006f5a:	e00c      	b.n	8006f76 <USBH_HandleEnum+0x3be>
      break;
 8006f5c:	bf00      	nop
 8006f5e:	e00a      	b.n	8006f76 <USBH_HandleEnum+0x3be>
      break;
 8006f60:	bf00      	nop
 8006f62:	e008      	b.n	8006f76 <USBH_HandleEnum+0x3be>
      break;
 8006f64:	bf00      	nop
 8006f66:	e006      	b.n	8006f76 <USBH_HandleEnum+0x3be>
      break;
 8006f68:	bf00      	nop
 8006f6a:	e004      	b.n	8006f76 <USBH_HandleEnum+0x3be>
      break;
 8006f6c:	bf00      	nop
 8006f6e:	e002      	b.n	8006f76 <USBH_HandleEnum+0x3be>
      break;
 8006f70:	bf00      	nop
 8006f72:	e000      	b.n	8006f76 <USBH_HandleEnum+0x3be>
      break;
 8006f74:	bf00      	nop
  }
  return Status;
 8006f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006f92:	bf00      	nop
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b082      	sub	sp, #8
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006fac:	1c5a      	adds	r2, r3, #1
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f804 	bl	8006fc2 <USBH_HandleSof>
}
 8006fba:	bf00      	nop
 8006fbc:	3708      	adds	r7, #8
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b082      	sub	sp, #8
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	2b0b      	cmp	r3, #11
 8006fd2:	d10a      	bne.n	8006fea <USBH_HandleSof+0x28>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d005      	beq.n	8006fea <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	4798      	blx	r3
  }
}
 8006fea:	bf00      	nop
 8006fec:	3708      	adds	r7, #8
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006ff2:	b480      	push	{r7}
 8006ff4:	b083      	sub	sp, #12
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007002:	bf00      	nop
}
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800700e:	b480      	push	{r7}
 8007010:	b083      	sub	sp, #12
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800701e:	bf00      	nop
}
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr

0800702a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800702a:	b480      	push	{r7}
 800702c:	b083      	sub	sp, #12
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2201      	movs	r2, #1
 8007036:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f001 f836 	bl	80080ea <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	791b      	ldrb	r3, [r3, #4]
 8007082:	4619      	mov	r1, r3
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 fe91 	bl	8007dac <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	795b      	ldrb	r3, [r3, #5]
 800708e:	4619      	mov	r1, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fe8b 	bl	8007dac <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af02      	add	r7, sp, #8
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80070b2:	78fb      	ldrb	r3, [r7, #3]
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	4613      	mov	r3, r2
 80070ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070be:	2100      	movs	r1, #0
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f864 	bl	800718e <USBH_GetDescriptor>
 80070c6:	4603      	mov	r3, r0
 80070c8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80070ca:	7bfb      	ldrb	r3, [r7, #15]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10a      	bne.n	80070e6 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f203 3026 	addw	r0, r3, #806	; 0x326
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80070dc:	78fa      	ldrb	r2, [r7, #3]
 80070de:	b292      	uxth	r2, r2
 80070e0:	4619      	mov	r1, r3
 80070e2:	f000 f918 	bl	8007316 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80070e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af02      	add	r7, sp, #8
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	460b      	mov	r3, r1
 80070fa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	331c      	adds	r3, #28
 8007100:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007102:	887b      	ldrh	r3, [r7, #2]
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	f44f 7200 	mov.w	r2, #512	; 0x200
 800710c:	2100      	movs	r1, #0
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f83d 	bl	800718e <USBH_GetDescriptor>
 8007114:	4603      	mov	r3, r0
 8007116:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007118:	7bfb      	ldrb	r3, [r7, #15]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d107      	bne.n	800712e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800711e:	887b      	ldrh	r3, [r7, #2]
 8007120:	461a      	mov	r2, r3
 8007122:	68b9      	ldr	r1, [r7, #8]
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f987 	bl	8007438 <USBH_ParseCfgDesc>
 800712a:	4603      	mov	r3, r0
 800712c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800712e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007130:	4618      	mov	r0, r3
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b088      	sub	sp, #32
 800713c:	af02      	add	r7, sp, #8
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	607a      	str	r2, [r7, #4]
 8007142:	461a      	mov	r2, r3
 8007144:	460b      	mov	r3, r1
 8007146:	72fb      	strb	r3, [r7, #11]
 8007148:	4613      	mov	r3, r2
 800714a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800714c:	7afb      	ldrb	r3, [r7, #11]
 800714e:	b29b      	uxth	r3, r3
 8007150:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007154:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800715c:	893b      	ldrh	r3, [r7, #8]
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	460b      	mov	r3, r1
 8007162:	2100      	movs	r1, #0
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f000 f812 	bl	800718e <USBH_GetDescriptor>
 800716a:	4603      	mov	r3, r0
 800716c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800716e:	7dfb      	ldrb	r3, [r7, #23]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d107      	bne.n	8007184 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800717a:	893a      	ldrh	r2, [r7, #8]
 800717c:	6879      	ldr	r1, [r7, #4]
 800717e:	4618      	mov	r0, r3
 8007180:	f000 fb24 	bl	80077cc <USBH_ParseStringDesc>
  }

  return status;
 8007184:	7dfb      	ldrb	r3, [r7, #23]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3718      	adds	r7, #24
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b084      	sub	sp, #16
 8007192:	af00      	add	r7, sp, #0
 8007194:	60f8      	str	r0, [r7, #12]
 8007196:	607b      	str	r3, [r7, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	72fb      	strb	r3, [r7, #11]
 800719c:	4613      	mov	r3, r2
 800719e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	789b      	ldrb	r3, [r3, #2]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d11c      	bne.n	80071e2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80071a8:	7afb      	ldrb	r3, [r7, #11]
 80071aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80071ae:	b2da      	uxtb	r2, r3
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2206      	movs	r2, #6
 80071b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	893a      	ldrh	r2, [r7, #8]
 80071be:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80071c0:	893b      	ldrh	r3, [r7, #8]
 80071c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80071c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071ca:	d104      	bne.n	80071d6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f240 4209 	movw	r2, #1033	; 0x409
 80071d2:	829a      	strh	r2, [r3, #20]
 80071d4:	e002      	b.n	80071dc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	8b3a      	ldrh	r2, [r7, #24]
 80071e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80071e2:	8b3b      	ldrh	r3, [r7, #24]
 80071e4:	461a      	mov	r2, r3
 80071e6:	6879      	ldr	r1, [r7, #4]
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f000 fb3d 	bl	8007868 <USBH_CtlReq>
 80071ee:	4603      	mov	r3, r0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	460b      	mov	r3, r1
 8007202:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	789b      	ldrb	r3, [r3, #2]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d10f      	bne.n	800722c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2205      	movs	r2, #5
 8007216:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007218:	78fb      	ldrb	r3, [r7, #3]
 800721a:	b29a      	uxth	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800722c:	2200      	movs	r2, #0
 800722e:	2100      	movs	r1, #0
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fb19 	bl	8007868 <USBH_CtlReq>
 8007236:	4603      	mov	r3, r0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3708      	adds	r7, #8
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	460b      	mov	r3, r1
 800724a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	789b      	ldrb	r3, [r3, #2]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d10e      	bne.n	8007272 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2209      	movs	r2, #9
 800725e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	887a      	ldrh	r2, [r7, #2]
 8007264:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007272:	2200      	movs	r2, #0
 8007274:	2100      	movs	r1, #0
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 faf6 	bl	8007868 <USBH_CtlReq>
 800727c:	4603      	mov	r3, r0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b082      	sub	sp, #8
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
 800728e:	460b      	mov	r3, r1
 8007290:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	789b      	ldrb	r3, [r3, #2]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d10f      	bne.n	80072ba <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2203      	movs	r2, #3
 80072a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80072a6:	78fb      	ldrb	r3, [r7, #3]
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80072ba:	2200      	movs	r2, #0
 80072bc:	2100      	movs	r1, #0
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fad2 	bl	8007868 <USBH_CtlReq>
 80072c4:	4603      	mov	r3, r0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b082      	sub	sp, #8
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
 80072d6:	460b      	mov	r3, r1
 80072d8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	789b      	ldrb	r3, [r3, #2]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d10f      	bne.n	8007302 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2202      	movs	r2, #2
 80072e6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80072f4:	78fb      	ldrb	r3, [r7, #3]
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007302:	2200      	movs	r2, #0
 8007304:	2100      	movs	r1, #0
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 faae 	bl	8007868 <USBH_CtlReq>
 800730c:	4603      	mov	r3, r0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007316:	b480      	push	{r7}
 8007318:	b085      	sub	sp, #20
 800731a:	af00      	add	r7, sp, #0
 800731c:	60f8      	str	r0, [r7, #12]
 800731e:	60b9      	str	r1, [r7, #8]
 8007320:	4613      	mov	r3, r2
 8007322:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	781a      	ldrb	r2, [r3, #0]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	785a      	ldrb	r2, [r3, #1]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	3302      	adds	r3, #2
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	b29a      	uxth	r2, r3
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	3303      	adds	r3, #3
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	b29b      	uxth	r3, r3
 8007344:	021b      	lsls	r3, r3, #8
 8007346:	b29b      	uxth	r3, r3
 8007348:	4313      	orrs	r3, r2
 800734a:	b29a      	uxth	r2, r3
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	791a      	ldrb	r2, [r3, #4]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	795a      	ldrb	r2, [r3, #5]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	799a      	ldrb	r2, [r3, #6]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	79da      	ldrb	r2, [r3, #7]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	79db      	ldrb	r3, [r3, #7]
 8007374:	2b20      	cmp	r3, #32
 8007376:	dc11      	bgt.n	800739c <USBH_ParseDevDesc+0x86>
 8007378:	2b08      	cmp	r3, #8
 800737a:	db16      	blt.n	80073aa <USBH_ParseDevDesc+0x94>
 800737c:	3b08      	subs	r3, #8
 800737e:	2201      	movs	r2, #1
 8007380:	fa02 f303 	lsl.w	r3, r2, r3
 8007384:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800738c:	2b00      	cmp	r3, #0
 800738e:	bf14      	ite	ne
 8007390:	2301      	movne	r3, #1
 8007392:	2300      	moveq	r3, #0
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d102      	bne.n	80073a0 <USBH_ParseDevDesc+0x8a>
 800739a:	e006      	b.n	80073aa <USBH_ParseDevDesc+0x94>
 800739c:	2b40      	cmp	r3, #64	; 0x40
 800739e:	d104      	bne.n	80073aa <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	79da      	ldrb	r2, [r3, #7]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	71da      	strb	r2, [r3, #7]
      break;
 80073a8:	e003      	b.n	80073b2 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2240      	movs	r2, #64	; 0x40
 80073ae:	71da      	strb	r2, [r3, #7]
      break;
 80073b0:	bf00      	nop
  }

  if (length > 8U)
 80073b2:	88fb      	ldrh	r3, [r7, #6]
 80073b4:	2b08      	cmp	r3, #8
 80073b6:	d939      	bls.n	800742c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	3308      	adds	r3, #8
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	b29a      	uxth	r2, r3
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	3309      	adds	r3, #9
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	021b      	lsls	r3, r3, #8
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	4313      	orrs	r3, r2
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	330a      	adds	r3, #10
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	b29a      	uxth	r2, r3
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	330b      	adds	r3, #11
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	021b      	lsls	r3, r3, #8
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	4313      	orrs	r3, r2
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	330c      	adds	r3, #12
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	330d      	adds	r3, #13
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	b29b      	uxth	r3, r3
 8007400:	021b      	lsls	r3, r3, #8
 8007402:	b29b      	uxth	r3, r3
 8007404:	4313      	orrs	r3, r2
 8007406:	b29a      	uxth	r2, r3
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	7b9a      	ldrb	r2, [r3, #14]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	7bda      	ldrb	r2, [r3, #15]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	7c1a      	ldrb	r2, [r3, #16]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	7c5a      	ldrb	r2, [r3, #17]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	745a      	strb	r2, [r3, #17]
  }
}
 800742c:	bf00      	nop
 800742e:	3714      	adds	r7, #20
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b08c      	sub	sp, #48	; 0x30
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	4613      	mov	r3, r2
 8007444:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800744c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800744e:	2300      	movs	r3, #0
 8007450:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007458:	2300      	movs	r3, #0
 800745a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800745e:	2300      	movs	r3, #0
 8007460:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	781a      	ldrb	r2, [r3, #0]
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	785a      	ldrb	r2, [r3, #1]
 8007474:	6a3b      	ldr	r3, [r7, #32]
 8007476:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	3302      	adds	r3, #2
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	b29a      	uxth	r2, r3
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	3303      	adds	r3, #3
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	b29b      	uxth	r3, r3
 8007488:	021b      	lsls	r3, r3, #8
 800748a:	b29b      	uxth	r3, r3
 800748c:	4313      	orrs	r3, r2
 800748e:	b29b      	uxth	r3, r3
 8007490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007494:	bf28      	it	cs
 8007496:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800749a:	b29a      	uxth	r2, r3
 800749c:	6a3b      	ldr	r3, [r7, #32]
 800749e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	791a      	ldrb	r2, [r3, #4]
 80074a4:	6a3b      	ldr	r3, [r7, #32]
 80074a6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	795a      	ldrb	r2, [r3, #5]
 80074ac:	6a3b      	ldr	r3, [r7, #32]
 80074ae:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	799a      	ldrb	r2, [r3, #6]
 80074b4:	6a3b      	ldr	r3, [r7, #32]
 80074b6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	79da      	ldrb	r2, [r3, #7]
 80074bc:	6a3b      	ldr	r3, [r7, #32]
 80074be:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	7a1a      	ldrb	r2, [r3, #8]
 80074c4:	6a3b      	ldr	r3, [r7, #32]
 80074c6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80074c8:	6a3b      	ldr	r3, [r7, #32]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	2b09      	cmp	r3, #9
 80074ce:	d002      	beq.n	80074d6 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80074d0:	6a3b      	ldr	r3, [r7, #32]
 80074d2:	2209      	movs	r2, #9
 80074d4:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80074d6:	88fb      	ldrh	r3, [r7, #6]
 80074d8:	2b09      	cmp	r3, #9
 80074da:	f240 809d 	bls.w	8007618 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80074de:	2309      	movs	r3, #9
 80074e0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80074e2:	2300      	movs	r3, #0
 80074e4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80074e6:	e081      	b.n	80075ec <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80074e8:	f107 0316 	add.w	r3, r7, #22
 80074ec:	4619      	mov	r1, r3
 80074ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074f0:	f000 f99f 	bl	8007832 <USBH_GetNextDesc>
 80074f4:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80074f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f8:	785b      	ldrb	r3, [r3, #1]
 80074fa:	2b04      	cmp	r3, #4
 80074fc:	d176      	bne.n	80075ec <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80074fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	2b09      	cmp	r3, #9
 8007504:	d002      	beq.n	800750c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007508:	2209      	movs	r2, #9
 800750a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800750c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007510:	221a      	movs	r2, #26
 8007512:	fb02 f303 	mul.w	r3, r2, r3
 8007516:	3308      	adds	r3, #8
 8007518:	6a3a      	ldr	r2, [r7, #32]
 800751a:	4413      	add	r3, r2
 800751c:	3302      	adds	r3, #2
 800751e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007520:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007522:	69f8      	ldr	r0, [r7, #28]
 8007524:	f000 f87e 	bl	8007624 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007528:	2300      	movs	r3, #0
 800752a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800752e:	2300      	movs	r3, #0
 8007530:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007532:	e043      	b.n	80075bc <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007534:	f107 0316 	add.w	r3, r7, #22
 8007538:	4619      	mov	r1, r3
 800753a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800753c:	f000 f979 	bl	8007832 <USBH_GetNextDesc>
 8007540:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007544:	785b      	ldrb	r3, [r3, #1]
 8007546:	2b05      	cmp	r3, #5
 8007548:	d138      	bne.n	80075bc <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	795b      	ldrb	r3, [r3, #5]
 800754e:	2b01      	cmp	r3, #1
 8007550:	d10f      	bne.n	8007572 <USBH_ParseCfgDesc+0x13a>
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	799b      	ldrb	r3, [r3, #6]
 8007556:	2b02      	cmp	r3, #2
 8007558:	d10b      	bne.n	8007572 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	79db      	ldrb	r3, [r3, #7]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10f      	bne.n	8007582 <USBH_ParseCfgDesc+0x14a>
 8007562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	2b09      	cmp	r3, #9
 8007568:	d00b      	beq.n	8007582 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800756a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756c:	2209      	movs	r2, #9
 800756e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007570:	e007      	b.n	8007582 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	2b07      	cmp	r3, #7
 8007578:	d004      	beq.n	8007584 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800757a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757c:	2207      	movs	r2, #7
 800757e:	701a      	strb	r2, [r3, #0]
 8007580:	e000      	b.n	8007584 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007582:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007588:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800758c:	3201      	adds	r2, #1
 800758e:	00d2      	lsls	r2, r2, #3
 8007590:	211a      	movs	r1, #26
 8007592:	fb01 f303 	mul.w	r3, r1, r3
 8007596:	4413      	add	r3, r2
 8007598:	3308      	adds	r3, #8
 800759a:	6a3a      	ldr	r2, [r7, #32]
 800759c:	4413      	add	r3, r2
 800759e:	3304      	adds	r3, #4
 80075a0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80075a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075a4:	69b9      	ldr	r1, [r7, #24]
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f000 f86b 	bl	8007682 <USBH_ParseEPDesc>
 80075ac:	4603      	mov	r3, r0
 80075ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80075b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80075b6:	3301      	adds	r3, #1
 80075b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	791b      	ldrb	r3, [r3, #4]
 80075c0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d204      	bcs.n	80075d2 <USBH_ParseCfgDesc+0x19a>
 80075c8:	6a3b      	ldr	r3, [r7, #32]
 80075ca:	885a      	ldrh	r2, [r3, #2]
 80075cc:	8afb      	ldrh	r3, [r7, #22]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d8b0      	bhi.n	8007534 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	791b      	ldrb	r3, [r3, #4]
 80075d6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80075da:	429a      	cmp	r2, r3
 80075dc:	d201      	bcs.n	80075e2 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80075de:	2303      	movs	r3, #3
 80075e0:	e01c      	b.n	800761c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80075e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075e6:	3301      	adds	r3, #1
 80075e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80075ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d805      	bhi.n	8007600 <USBH_ParseCfgDesc+0x1c8>
 80075f4:	6a3b      	ldr	r3, [r7, #32]
 80075f6:	885a      	ldrh	r2, [r3, #2]
 80075f8:	8afb      	ldrh	r3, [r7, #22]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	f63f af74 	bhi.w	80074e8 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007600:	6a3b      	ldr	r3, [r7, #32]
 8007602:	791b      	ldrb	r3, [r3, #4]
 8007604:	2b02      	cmp	r3, #2
 8007606:	bf28      	it	cs
 8007608:	2302      	movcs	r3, #2
 800760a:	b2db      	uxtb	r3, r3
 800760c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007610:	429a      	cmp	r2, r3
 8007612:	d201      	bcs.n	8007618 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007614:	2303      	movs	r3, #3
 8007616:	e001      	b.n	800761c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007618:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800761c:	4618      	mov	r0, r3
 800761e:	3730      	adds	r7, #48	; 0x30
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	781a      	ldrb	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	785a      	ldrb	r2, [r3, #1]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	789a      	ldrb	r2, [r3, #2]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	78da      	ldrb	r2, [r3, #3]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	791a      	ldrb	r2, [r3, #4]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	795a      	ldrb	r2, [r3, #5]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	799a      	ldrb	r2, [r3, #6]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	79da      	ldrb	r2, [r3, #7]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	7a1a      	ldrb	r2, [r3, #8]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	721a      	strb	r2, [r3, #8]
}
 8007676:	bf00      	nop
 8007678:	370c      	adds	r7, #12
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007682:	b480      	push	{r7}
 8007684:	b087      	sub	sp, #28
 8007686:	af00      	add	r7, sp, #0
 8007688:	60f8      	str	r0, [r7, #12]
 800768a:	60b9      	str	r1, [r7, #8]
 800768c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800768e:	2300      	movs	r3, #0
 8007690:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	781a      	ldrb	r2, [r3, #0]
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	785a      	ldrb	r2, [r3, #1]
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	789a      	ldrb	r2, [r3, #2]
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	78da      	ldrb	r2, [r3, #3]
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	3304      	adds	r3, #4
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	b29a      	uxth	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	3305      	adds	r3, #5
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	021b      	lsls	r3, r3, #8
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	4313      	orrs	r3, r2
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	799a      	ldrb	r2, [r3, #6]
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	889b      	ldrh	r3, [r3, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d102      	bne.n	80076e4 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80076de:	2303      	movs	r3, #3
 80076e0:	75fb      	strb	r3, [r7, #23]
 80076e2:	e033      	b.n	800774c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	889b      	ldrh	r3, [r3, #4]
 80076e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80076ec:	f023 0307 	bic.w	r3, r3, #7
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	889b      	ldrh	r3, [r3, #4]
 80076fa:	b21a      	sxth	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	3304      	adds	r3, #4
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	b299      	uxth	r1, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	3305      	adds	r3, #5
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	b29b      	uxth	r3, r3
 800770c:	021b      	lsls	r3, r3, #8
 800770e:	b29b      	uxth	r3, r3
 8007710:	430b      	orrs	r3, r1
 8007712:	b29b      	uxth	r3, r3
 8007714:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007718:	2b00      	cmp	r3, #0
 800771a:	d110      	bne.n	800773e <USBH_ParseEPDesc+0xbc>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	3304      	adds	r3, #4
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	b299      	uxth	r1, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	3305      	adds	r3, #5
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	b29b      	uxth	r3, r3
 800772c:	021b      	lsls	r3, r3, #8
 800772e:	b29b      	uxth	r3, r3
 8007730:	430b      	orrs	r3, r1
 8007732:	b29b      	uxth	r3, r3
 8007734:	b21b      	sxth	r3, r3
 8007736:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800773a:	b21b      	sxth	r3, r3
 800773c:	e001      	b.n	8007742 <USBH_ParseEPDesc+0xc0>
 800773e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007742:	4313      	orrs	r3, r2
 8007744:	b21b      	sxth	r3, r3
 8007746:	b29a      	uxth	r2, r3
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007752:	2b00      	cmp	r3, #0
 8007754:	d116      	bne.n	8007784 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	78db      	ldrb	r3, [r3, #3]
 800775a:	f003 0303 	and.w	r3, r3, #3
 800775e:	2b01      	cmp	r3, #1
 8007760:	d005      	beq.n	800776e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	78db      	ldrb	r3, [r3, #3]
 8007766:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800776a:	2b03      	cmp	r3, #3
 800776c:	d127      	bne.n	80077be <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	799b      	ldrb	r3, [r3, #6]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d003      	beq.n	800777e <USBH_ParseEPDesc+0xfc>
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	799b      	ldrb	r3, [r3, #6]
 800777a:	2b10      	cmp	r3, #16
 800777c:	d91f      	bls.n	80077be <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800777e:	2303      	movs	r3, #3
 8007780:	75fb      	strb	r3, [r7, #23]
 8007782:	e01c      	b.n	80077be <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	78db      	ldrb	r3, [r3, #3]
 8007788:	f003 0303 	and.w	r3, r3, #3
 800778c:	2b01      	cmp	r3, #1
 800778e:	d10a      	bne.n	80077a6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	799b      	ldrb	r3, [r3, #6]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d003      	beq.n	80077a0 <USBH_ParseEPDesc+0x11e>
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	799b      	ldrb	r3, [r3, #6]
 800779c:	2b10      	cmp	r3, #16
 800779e:	d90e      	bls.n	80077be <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80077a0:	2303      	movs	r3, #3
 80077a2:	75fb      	strb	r3, [r7, #23]
 80077a4:	e00b      	b.n	80077be <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	78db      	ldrb	r3, [r3, #3]
 80077aa:	f003 0303 	and.w	r3, r3, #3
 80077ae:	2b03      	cmp	r3, #3
 80077b0:	d105      	bne.n	80077be <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	799b      	ldrb	r3, [r3, #6]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d101      	bne.n	80077be <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80077ba:	2303      	movs	r3, #3
 80077bc:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80077be:	7dfb      	ldrb	r3, [r7, #23]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	371c      	adds	r7, #28
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b087      	sub	sp, #28
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	4613      	mov	r3, r2
 80077d8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	3301      	adds	r3, #1
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	2b03      	cmp	r3, #3
 80077e2:	d120      	bne.n	8007826 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	1e9a      	subs	r2, r3, #2
 80077ea:	88fb      	ldrh	r3, [r7, #6]
 80077ec:	4293      	cmp	r3, r2
 80077ee:	bf28      	it	cs
 80077f0:	4613      	movcs	r3, r2
 80077f2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	3302      	adds	r3, #2
 80077f8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80077fa:	2300      	movs	r3, #0
 80077fc:	82fb      	strh	r3, [r7, #22]
 80077fe:	e00b      	b.n	8007818 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007800:	8afb      	ldrh	r3, [r7, #22]
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	4413      	add	r3, r2
 8007806:	781a      	ldrb	r2, [r3, #0]
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	3301      	adds	r3, #1
 8007810:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007812:	8afb      	ldrh	r3, [r7, #22]
 8007814:	3302      	adds	r3, #2
 8007816:	82fb      	strh	r3, [r7, #22]
 8007818:	8afa      	ldrh	r2, [r7, #22]
 800781a:	8abb      	ldrh	r3, [r7, #20]
 800781c:	429a      	cmp	r2, r3
 800781e:	d3ef      	bcc.n	8007800 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	2200      	movs	r2, #0
 8007824:	701a      	strb	r2, [r3, #0]
  }
}
 8007826:	bf00      	nop
 8007828:	371c      	adds	r7, #28
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr

08007832 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007832:	b480      	push	{r7}
 8007834:	b085      	sub	sp, #20
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	881a      	ldrh	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	b29b      	uxth	r3, r3
 8007846:	4413      	add	r3, r2
 8007848:	b29a      	uxth	r2, r3
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4413      	add	r3, r2
 8007858:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800785a:	68fb      	ldr	r3, [r7, #12]
}
 800785c:	4618      	mov	r0, r3
 800785e:	3714      	adds	r7, #20
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b086      	sub	sp, #24
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	4613      	mov	r3, r2
 8007874:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007876:	2301      	movs	r3, #1
 8007878:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	789b      	ldrb	r3, [r3, #2]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d002      	beq.n	8007888 <USBH_CtlReq+0x20>
 8007882:	2b02      	cmp	r3, #2
 8007884:	d00f      	beq.n	80078a6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007886:	e027      	b.n	80078d8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	68ba      	ldr	r2, [r7, #8]
 800788c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	88fa      	ldrh	r2, [r7, #6]
 8007892:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2201      	movs	r2, #1
 8007898:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2202      	movs	r2, #2
 800789e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80078a0:	2301      	movs	r3, #1
 80078a2:	75fb      	strb	r3, [r7, #23]
      break;
 80078a4:	e018      	b.n	80078d8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f000 f81c 	bl	80078e4 <USBH_HandleControl>
 80078ac:	4603      	mov	r3, r0
 80078ae:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80078b0:	7dfb      	ldrb	r3, [r7, #23]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d002      	beq.n	80078bc <USBH_CtlReq+0x54>
 80078b6:	7dfb      	ldrb	r3, [r7, #23]
 80078b8:	2b03      	cmp	r3, #3
 80078ba:	d106      	bne.n	80078ca <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2201      	movs	r2, #1
 80078c0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	761a      	strb	r2, [r3, #24]
      break;
 80078c8:	e005      	b.n	80078d6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80078ca:	7dfb      	ldrb	r3, [r7, #23]
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d102      	bne.n	80078d6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2201      	movs	r2, #1
 80078d4:	709a      	strb	r2, [r3, #2]
      break;
 80078d6:	bf00      	nop
  }
  return status;
 80078d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3718      	adds	r7, #24
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
	...

080078e4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b086      	sub	sp, #24
 80078e8:	af02      	add	r7, sp, #8
 80078ea:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80078ec:	2301      	movs	r3, #1
 80078ee:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80078f0:	2300      	movs	r3, #0
 80078f2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	7e1b      	ldrb	r3, [r3, #24]
 80078f8:	3b01      	subs	r3, #1
 80078fa:	2b0a      	cmp	r3, #10
 80078fc:	f200 8156 	bhi.w	8007bac <USBH_HandleControl+0x2c8>
 8007900:	a201      	add	r2, pc, #4	; (adr r2, 8007908 <USBH_HandleControl+0x24>)
 8007902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007906:	bf00      	nop
 8007908:	08007935 	.word	0x08007935
 800790c:	0800794f 	.word	0x0800794f
 8007910:	080079b9 	.word	0x080079b9
 8007914:	080079df 	.word	0x080079df
 8007918:	08007a17 	.word	0x08007a17
 800791c:	08007a41 	.word	0x08007a41
 8007920:	08007a93 	.word	0x08007a93
 8007924:	08007ab5 	.word	0x08007ab5
 8007928:	08007af1 	.word	0x08007af1
 800792c:	08007b17 	.word	0x08007b17
 8007930:	08007b55 	.word	0x08007b55
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f103 0110 	add.w	r1, r3, #16
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	795b      	ldrb	r3, [r3, #5]
 800793e:	461a      	mov	r2, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f943 	bl	8007bcc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2202      	movs	r2, #2
 800794a:	761a      	strb	r2, [r3, #24]
      break;
 800794c:	e139      	b.n	8007bc2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	795b      	ldrb	r3, [r3, #5]
 8007952:	4619      	mov	r1, r3
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fcb7 	bl	80082c8 <USBH_LL_GetURBState>
 800795a:	4603      	mov	r3, r0
 800795c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800795e:	7bbb      	ldrb	r3, [r7, #14]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d11e      	bne.n	80079a2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	7c1b      	ldrb	r3, [r3, #16]
 8007968:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800796c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	8adb      	ldrh	r3, [r3, #22]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00a      	beq.n	800798c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007976:	7b7b      	ldrb	r3, [r7, #13]
 8007978:	2b80      	cmp	r3, #128	; 0x80
 800797a:	d103      	bne.n	8007984 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2203      	movs	r2, #3
 8007980:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007982:	e115      	b.n	8007bb0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2205      	movs	r2, #5
 8007988:	761a      	strb	r2, [r3, #24]
      break;
 800798a:	e111      	b.n	8007bb0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800798c:	7b7b      	ldrb	r3, [r7, #13]
 800798e:	2b80      	cmp	r3, #128	; 0x80
 8007990:	d103      	bne.n	800799a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2209      	movs	r2, #9
 8007996:	761a      	strb	r2, [r3, #24]
      break;
 8007998:	e10a      	b.n	8007bb0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2207      	movs	r2, #7
 800799e:	761a      	strb	r2, [r3, #24]
      break;
 80079a0:	e106      	b.n	8007bb0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80079a2:	7bbb      	ldrb	r3, [r7, #14]
 80079a4:	2b04      	cmp	r3, #4
 80079a6:	d003      	beq.n	80079b0 <USBH_HandleControl+0xcc>
 80079a8:	7bbb      	ldrb	r3, [r7, #14]
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	f040 8100 	bne.w	8007bb0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	220b      	movs	r2, #11
 80079b4:	761a      	strb	r2, [r3, #24]
      break;
 80079b6:	e0fb      	b.n	8007bb0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079be:	b29a      	uxth	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6899      	ldr	r1, [r3, #8]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	899a      	ldrh	r2, [r3, #12]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	791b      	ldrb	r3, [r3, #4]
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 f93a 	bl	8007c4a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2204      	movs	r2, #4
 80079da:	761a      	strb	r2, [r3, #24]
      break;
 80079dc:	e0f1      	b.n	8007bc2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	791b      	ldrb	r3, [r3, #4]
 80079e2:	4619      	mov	r1, r3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 fc6f 	bl	80082c8 <USBH_LL_GetURBState>
 80079ea:	4603      	mov	r3, r0
 80079ec:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80079ee:	7bbb      	ldrb	r3, [r7, #14]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d102      	bne.n	80079fa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2209      	movs	r2, #9
 80079f8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80079fa:	7bbb      	ldrb	r3, [r7, #14]
 80079fc:	2b05      	cmp	r3, #5
 80079fe:	d102      	bne.n	8007a06 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007a00:	2303      	movs	r3, #3
 8007a02:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a04:	e0d6      	b.n	8007bb4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007a06:	7bbb      	ldrb	r3, [r7, #14]
 8007a08:	2b04      	cmp	r3, #4
 8007a0a:	f040 80d3 	bne.w	8007bb4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	220b      	movs	r2, #11
 8007a12:	761a      	strb	r2, [r3, #24]
      break;
 8007a14:	e0ce      	b.n	8007bb4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6899      	ldr	r1, [r3, #8]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	899a      	ldrh	r2, [r3, #12]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	795b      	ldrb	r3, [r3, #5]
 8007a22:	2001      	movs	r0, #1
 8007a24:	9000      	str	r0, [sp, #0]
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f8ea 	bl	8007c00 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2206      	movs	r2, #6
 8007a3c:	761a      	strb	r2, [r3, #24]
      break;
 8007a3e:	e0c0      	b.n	8007bc2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	795b      	ldrb	r3, [r3, #5]
 8007a44:	4619      	mov	r1, r3
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fc3e 	bl	80082c8 <USBH_LL_GetURBState>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007a50:	7bbb      	ldrb	r3, [r7, #14]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d103      	bne.n	8007a5e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2207      	movs	r2, #7
 8007a5a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a5c:	e0ac      	b.n	8007bb8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007a5e:	7bbb      	ldrb	r3, [r7, #14]
 8007a60:	2b05      	cmp	r3, #5
 8007a62:	d105      	bne.n	8007a70 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	220c      	movs	r2, #12
 8007a68:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a6e:	e0a3      	b.n	8007bb8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a70:	7bbb      	ldrb	r3, [r7, #14]
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d103      	bne.n	8007a7e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2205      	movs	r2, #5
 8007a7a:	761a      	strb	r2, [r3, #24]
      break;
 8007a7c:	e09c      	b.n	8007bb8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
 8007a80:	2b04      	cmp	r3, #4
 8007a82:	f040 8099 	bne.w	8007bb8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	220b      	movs	r2, #11
 8007a8a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a90:	e092      	b.n	8007bb8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	791b      	ldrb	r3, [r3, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	2100      	movs	r1, #0
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 f8d5 	bl	8007c4a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2208      	movs	r2, #8
 8007ab0:	761a      	strb	r2, [r3, #24]

      break;
 8007ab2:	e086      	b.n	8007bc2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	791b      	ldrb	r3, [r3, #4]
 8007ab8:	4619      	mov	r1, r3
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 fc04 	bl	80082c8 <USBH_LL_GetURBState>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ac4:	7bbb      	ldrb	r3, [r7, #14]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d105      	bne.n	8007ad6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	220d      	movs	r2, #13
 8007ace:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ad4:	e072      	b.n	8007bbc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007ad6:	7bbb      	ldrb	r3, [r7, #14]
 8007ad8:	2b04      	cmp	r3, #4
 8007ada:	d103      	bne.n	8007ae4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	220b      	movs	r2, #11
 8007ae0:	761a      	strb	r2, [r3, #24]
      break;
 8007ae2:	e06b      	b.n	8007bbc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007ae4:	7bbb      	ldrb	r3, [r7, #14]
 8007ae6:	2b05      	cmp	r3, #5
 8007ae8:	d168      	bne.n	8007bbc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007aea:	2303      	movs	r3, #3
 8007aec:	73fb      	strb	r3, [r7, #15]
      break;
 8007aee:	e065      	b.n	8007bbc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	795b      	ldrb	r3, [r3, #5]
 8007af4:	2201      	movs	r2, #1
 8007af6:	9200      	str	r2, [sp, #0]
 8007af8:	2200      	movs	r2, #0
 8007afa:	2100      	movs	r1, #0
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f87f 	bl	8007c00 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	220a      	movs	r2, #10
 8007b12:	761a      	strb	r2, [r3, #24]
      break;
 8007b14:	e055      	b.n	8007bc2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	795b      	ldrb	r3, [r3, #5]
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 fbd3 	bl	80082c8 <USBH_LL_GetURBState>
 8007b22:	4603      	mov	r3, r0
 8007b24:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007b26:	7bbb      	ldrb	r3, [r7, #14]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d105      	bne.n	8007b38 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	220d      	movs	r2, #13
 8007b34:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007b36:	e043      	b.n	8007bc0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007b38:	7bbb      	ldrb	r3, [r7, #14]
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	d103      	bne.n	8007b46 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2209      	movs	r2, #9
 8007b42:	761a      	strb	r2, [r3, #24]
      break;
 8007b44:	e03c      	b.n	8007bc0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007b46:	7bbb      	ldrb	r3, [r7, #14]
 8007b48:	2b04      	cmp	r3, #4
 8007b4a:	d139      	bne.n	8007bc0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	220b      	movs	r2, #11
 8007b50:	761a      	strb	r2, [r3, #24]
      break;
 8007b52:	e035      	b.n	8007bc0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	7e5b      	ldrb	r3, [r3, #25]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	b2da      	uxtb	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	765a      	strb	r2, [r3, #25]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	7e5b      	ldrb	r3, [r3, #25]
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d806      	bhi.n	8007b76 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007b74:	e025      	b.n	8007bc2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b7c:	2106      	movs	r1, #6
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	795b      	ldrb	r3, [r3, #5]
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f90c 	bl	8007dac <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	791b      	ldrb	r3, [r3, #4]
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f906 	bl	8007dac <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007ba6:	2302      	movs	r3, #2
 8007ba8:	73fb      	strb	r3, [r7, #15]
      break;
 8007baa:	e00a      	b.n	8007bc2 <USBH_HandleControl+0x2de>

    default:
      break;
 8007bac:	bf00      	nop
 8007bae:	e008      	b.n	8007bc2 <USBH_HandleControl+0x2de>
      break;
 8007bb0:	bf00      	nop
 8007bb2:	e006      	b.n	8007bc2 <USBH_HandleControl+0x2de>
      break;
 8007bb4:	bf00      	nop
 8007bb6:	e004      	b.n	8007bc2 <USBH_HandleControl+0x2de>
      break;
 8007bb8:	bf00      	nop
 8007bba:	e002      	b.n	8007bc2 <USBH_HandleControl+0x2de>
      break;
 8007bbc:	bf00      	nop
 8007bbe:	e000      	b.n	8007bc2 <USBH_HandleControl+0x2de>
      break;
 8007bc0:	bf00      	nop
  }

  return status;
 8007bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b088      	sub	sp, #32
 8007bd0:	af04      	add	r7, sp, #16
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007bda:	79f9      	ldrb	r1, [r7, #7]
 8007bdc:	2300      	movs	r3, #0
 8007bde:	9303      	str	r3, [sp, #12]
 8007be0:	2308      	movs	r3, #8
 8007be2:	9302      	str	r3, [sp, #8]
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	9301      	str	r3, [sp, #4]
 8007be8:	2300      	movs	r3, #0
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	2300      	movs	r3, #0
 8007bee:	2200      	movs	r2, #0
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f000 fb38 	bl	8008266 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b088      	sub	sp, #32
 8007c04:	af04      	add	r7, sp, #16
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	4611      	mov	r1, r2
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	460b      	mov	r3, r1
 8007c10:	80fb      	strh	r3, [r7, #6]
 8007c12:	4613      	mov	r3, r2
 8007c14:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d001      	beq.n	8007c24 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007c20:	2300      	movs	r3, #0
 8007c22:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c24:	7979      	ldrb	r1, [r7, #5]
 8007c26:	7e3b      	ldrb	r3, [r7, #24]
 8007c28:	9303      	str	r3, [sp, #12]
 8007c2a:	88fb      	ldrh	r3, [r7, #6]
 8007c2c:	9302      	str	r3, [sp, #8]
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	9301      	str	r3, [sp, #4]
 8007c32:	2301      	movs	r3, #1
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	2300      	movs	r3, #0
 8007c38:	2200      	movs	r2, #0
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f000 fb13 	bl	8008266 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b088      	sub	sp, #32
 8007c4e:	af04      	add	r7, sp, #16
 8007c50:	60f8      	str	r0, [r7, #12]
 8007c52:	60b9      	str	r1, [r7, #8]
 8007c54:	4611      	mov	r1, r2
 8007c56:	461a      	mov	r2, r3
 8007c58:	460b      	mov	r3, r1
 8007c5a:	80fb      	strh	r3, [r7, #6]
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c60:	7979      	ldrb	r1, [r7, #5]
 8007c62:	2300      	movs	r3, #0
 8007c64:	9303      	str	r3, [sp, #12]
 8007c66:	88fb      	ldrh	r3, [r7, #6]
 8007c68:	9302      	str	r3, [sp, #8]
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	9301      	str	r3, [sp, #4]
 8007c6e:	2301      	movs	r3, #1
 8007c70:	9300      	str	r3, [sp, #0]
 8007c72:	2300      	movs	r3, #0
 8007c74:	2201      	movs	r2, #1
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f000 faf5 	bl	8008266 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007c7c:	2300      	movs	r3, #0

}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b088      	sub	sp, #32
 8007c8a:	af04      	add	r7, sp, #16
 8007c8c:	60f8      	str	r0, [r7, #12]
 8007c8e:	60b9      	str	r1, [r7, #8]
 8007c90:	4611      	mov	r1, r2
 8007c92:	461a      	mov	r2, r3
 8007c94:	460b      	mov	r3, r1
 8007c96:	80fb      	strh	r3, [r7, #6]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d001      	beq.n	8007caa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007caa:	7979      	ldrb	r1, [r7, #5]
 8007cac:	7e3b      	ldrb	r3, [r7, #24]
 8007cae:	9303      	str	r3, [sp, #12]
 8007cb0:	88fb      	ldrh	r3, [r7, #6]
 8007cb2:	9302      	str	r3, [sp, #8]
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	9301      	str	r3, [sp, #4]
 8007cb8:	2301      	movs	r3, #1
 8007cba:	9300      	str	r3, [sp, #0]
 8007cbc:	2302      	movs	r3, #2
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f000 fad0 	bl	8008266 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b088      	sub	sp, #32
 8007cd4:	af04      	add	r7, sp, #16
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	4611      	mov	r1, r2
 8007cdc:	461a      	mov	r2, r3
 8007cde:	460b      	mov	r3, r1
 8007ce0:	80fb      	strh	r3, [r7, #6]
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007ce6:	7979      	ldrb	r1, [r7, #5]
 8007ce8:	2300      	movs	r3, #0
 8007cea:	9303      	str	r3, [sp, #12]
 8007cec:	88fb      	ldrh	r3, [r7, #6]
 8007cee:	9302      	str	r3, [sp, #8]
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	9301      	str	r3, [sp, #4]
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f000 fab2 	bl	8008266 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af04      	add	r7, sp, #16
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	4608      	mov	r0, r1
 8007d16:	4611      	mov	r1, r2
 8007d18:	461a      	mov	r2, r3
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	70fb      	strb	r3, [r7, #3]
 8007d1e:	460b      	mov	r3, r1
 8007d20:	70bb      	strb	r3, [r7, #2]
 8007d22:	4613      	mov	r3, r2
 8007d24:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007d26:	7878      	ldrb	r0, [r7, #1]
 8007d28:	78ba      	ldrb	r2, [r7, #2]
 8007d2a:	78f9      	ldrb	r1, [r7, #3]
 8007d2c:	8b3b      	ldrh	r3, [r7, #24]
 8007d2e:	9302      	str	r3, [sp, #8]
 8007d30:	7d3b      	ldrb	r3, [r7, #20]
 8007d32:	9301      	str	r3, [sp, #4]
 8007d34:	7c3b      	ldrb	r3, [r7, #16]
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	4603      	mov	r3, r0
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fa45 	bl	80081ca <USBH_LL_OpenPipe>

  return USBH_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3708      	adds	r7, #8
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b082      	sub	sp, #8
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
 8007d52:	460b      	mov	r3, r1
 8007d54:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007d56:	78fb      	ldrb	r3, [r7, #3]
 8007d58:	4619      	mov	r1, r3
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 fa64 	bl	8008228 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b084      	sub	sp, #16
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	460b      	mov	r3, r1
 8007d74:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 f836 	bl	8007de8 <USBH_GetFreePipe>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007d80:	89fb      	ldrh	r3, [r7, #14]
 8007d82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d00a      	beq.n	8007da0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007d8a:	78fa      	ldrb	r2, [r7, #3]
 8007d8c:	89fb      	ldrh	r3, [r7, #14]
 8007d8e:	f003 030f 	and.w	r3, r3, #15
 8007d92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d96:	6879      	ldr	r1, [r7, #4]
 8007d98:	33e0      	adds	r3, #224	; 0xe0
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	440b      	add	r3, r1
 8007d9e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007da0:	89fb      	ldrh	r3, [r7, #14]
 8007da2:	b2db      	uxtb	r3, r3
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3710      	adds	r7, #16
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	460b      	mov	r3, r1
 8007db6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007db8:	78fb      	ldrb	r3, [r7, #3]
 8007dba:	2b0f      	cmp	r3, #15
 8007dbc:	d80d      	bhi.n	8007dda <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007dbe:	78fb      	ldrb	r3, [r7, #3]
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	33e0      	adds	r3, #224	; 0xe0
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	4413      	add	r3, r2
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	78fb      	ldrb	r3, [r7, #3]
 8007dcc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007dd0:	6879      	ldr	r1, [r7, #4]
 8007dd2:	33e0      	adds	r3, #224	; 0xe0
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	440b      	add	r3, r1
 8007dd8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007df0:	2300      	movs	r3, #0
 8007df2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007df4:	2300      	movs	r3, #0
 8007df6:	73fb      	strb	r3, [r7, #15]
 8007df8:	e00f      	b.n	8007e1a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007dfa:	7bfb      	ldrb	r3, [r7, #15]
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	33e0      	adds	r3, #224	; 0xe0
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	4413      	add	r3, r2
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d102      	bne.n	8007e14 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007e0e:	7bfb      	ldrb	r3, [r7, #15]
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	e007      	b.n	8007e24 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007e14:	7bfb      	ldrb	r3, [r7, #15]
 8007e16:	3301      	adds	r3, #1
 8007e18:	73fb      	strb	r3, [r7, #15]
 8007e1a:	7bfb      	ldrb	r3, [r7, #15]
 8007e1c:	2b0f      	cmp	r3, #15
 8007e1e:	d9ec      	bls.n	8007dfa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007e20:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007e34:	2201      	movs	r2, #1
 8007e36:	490e      	ldr	r1, [pc, #56]	; (8007e70 <MX_USB_HOST_Init+0x40>)
 8007e38:	480e      	ldr	r0, [pc, #56]	; (8007e74 <MX_USB_HOST_Init+0x44>)
 8007e3a:	f7fe fba7 	bl	800658c <USBH_Init>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d001      	beq.n	8007e48 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007e44:	f7f8 fcb4 	bl	80007b0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007e48:	490b      	ldr	r1, [pc, #44]	; (8007e78 <MX_USB_HOST_Init+0x48>)
 8007e4a:	480a      	ldr	r0, [pc, #40]	; (8007e74 <MX_USB_HOST_Init+0x44>)
 8007e4c:	f7fe fc2c 	bl	80066a8 <USBH_RegisterClass>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d001      	beq.n	8007e5a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007e56:	f7f8 fcab 	bl	80007b0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007e5a:	4806      	ldr	r0, [pc, #24]	; (8007e74 <MX_USB_HOST_Init+0x44>)
 8007e5c:	f7fe fcb0 	bl	80067c0 <USBH_Start>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d001      	beq.n	8007e6a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007e66:	f7f8 fca3 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007e6a:	bf00      	nop
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	08007e91 	.word	0x08007e91
 8007e74:	200001dc 	.word	0x200001dc
 8007e78:	2000000c 	.word	0x2000000c

08007e7c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007e80:	4802      	ldr	r0, [pc, #8]	; (8007e8c <MX_USB_HOST_Process+0x10>)
 8007e82:	f7fe fcad 	bl	80067e0 <USBH_Process>
}
 8007e86:	bf00      	nop
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	200001dc 	.word	0x200001dc

08007e90 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007e9c:	78fb      	ldrb	r3, [r7, #3]
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	2b04      	cmp	r3, #4
 8007ea2:	d819      	bhi.n	8007ed8 <USBH_UserProcess+0x48>
 8007ea4:	a201      	add	r2, pc, #4	; (adr r2, 8007eac <USBH_UserProcess+0x1c>)
 8007ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eaa:	bf00      	nop
 8007eac:	08007ed9 	.word	0x08007ed9
 8007eb0:	08007ec9 	.word	0x08007ec9
 8007eb4:	08007ed9 	.word	0x08007ed9
 8007eb8:	08007ed1 	.word	0x08007ed1
 8007ebc:	08007ec1 	.word	0x08007ec1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007ec0:	4b09      	ldr	r3, [pc, #36]	; (8007ee8 <USBH_UserProcess+0x58>)
 8007ec2:	2203      	movs	r2, #3
 8007ec4:	701a      	strb	r2, [r3, #0]
  break;
 8007ec6:	e008      	b.n	8007eda <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007ec8:	4b07      	ldr	r3, [pc, #28]	; (8007ee8 <USBH_UserProcess+0x58>)
 8007eca:	2202      	movs	r2, #2
 8007ecc:	701a      	strb	r2, [r3, #0]
  break;
 8007ece:	e004      	b.n	8007eda <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007ed0:	4b05      	ldr	r3, [pc, #20]	; (8007ee8 <USBH_UserProcess+0x58>)
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	701a      	strb	r2, [r3, #0]
  break;
 8007ed6:	e000      	b.n	8007eda <USBH_UserProcess+0x4a>

  default:
  break;
 8007ed8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007eda:	bf00      	nop
 8007edc:	370c      	adds	r7, #12
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	200005b4 	.word	0x200005b4

08007eec <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b08a      	sub	sp, #40	; 0x28
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ef4:	f107 0314 	add.w	r3, r7, #20
 8007ef8:	2200      	movs	r2, #0
 8007efa:	601a      	str	r2, [r3, #0]
 8007efc:	605a      	str	r2, [r3, #4]
 8007efe:	609a      	str	r2, [r3, #8]
 8007f00:	60da      	str	r2, [r3, #12]
 8007f02:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f0c:	d13a      	bne.n	8007f84 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f0e:	2300      	movs	r3, #0
 8007f10:	613b      	str	r3, [r7, #16]
 8007f12:	4b1e      	ldr	r3, [pc, #120]	; (8007f8c <HAL_HCD_MspInit+0xa0>)
 8007f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f16:	4a1d      	ldr	r2, [pc, #116]	; (8007f8c <HAL_HCD_MspInit+0xa0>)
 8007f18:	f043 0301 	orr.w	r3, r3, #1
 8007f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8007f1e:	4b1b      	ldr	r3, [pc, #108]	; (8007f8c <HAL_HCD_MspInit+0xa0>)
 8007f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f22:	f003 0301 	and.w	r3, r3, #1
 8007f26:	613b      	str	r3, [r7, #16]
 8007f28:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007f2a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f30:	2302      	movs	r3, #2
 8007f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f34:	2300      	movs	r3, #0
 8007f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007f3c:	230a      	movs	r3, #10
 8007f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f40:	f107 0314 	add.w	r3, r7, #20
 8007f44:	4619      	mov	r1, r3
 8007f46:	4812      	ldr	r0, [pc, #72]	; (8007f90 <HAL_HCD_MspInit+0xa4>)
 8007f48:	f7f9 fb84 	bl	8001654 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007f4c:	4b0f      	ldr	r3, [pc, #60]	; (8007f8c <HAL_HCD_MspInit+0xa0>)
 8007f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f50:	4a0e      	ldr	r2, [pc, #56]	; (8007f8c <HAL_HCD_MspInit+0xa0>)
 8007f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f56:	6353      	str	r3, [r2, #52]	; 0x34
 8007f58:	2300      	movs	r3, #0
 8007f5a:	60fb      	str	r3, [r7, #12]
 8007f5c:	4b0b      	ldr	r3, [pc, #44]	; (8007f8c <HAL_HCD_MspInit+0xa0>)
 8007f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f60:	4a0a      	ldr	r2, [pc, #40]	; (8007f8c <HAL_HCD_MspInit+0xa0>)
 8007f62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f66:	6453      	str	r3, [r2, #68]	; 0x44
 8007f68:	4b08      	ldr	r3, [pc, #32]	; (8007f8c <HAL_HCD_MspInit+0xa0>)
 8007f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f70:	60fb      	str	r3, [r7, #12]
 8007f72:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007f74:	2200      	movs	r2, #0
 8007f76:	2100      	movs	r1, #0
 8007f78:	2043      	movs	r0, #67	; 0x43
 8007f7a:	f7f8 ff32 	bl	8000de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007f7e:	2043      	movs	r0, #67	; 0x43
 8007f80:	f7f8 ff4b 	bl	8000e1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007f84:	bf00      	nop
 8007f86:	3728      	adds	r7, #40	; 0x28
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	40023800 	.word	0x40023800
 8007f90:	40020000 	.word	0x40020000

08007f94 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7fe fffb 	bl	8006f9e <USBH_LL_IncTimer>
}
 8007fa8:	bf00      	nop
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7ff f833 	bl	800702a <USBH_LL_Connect>
}
 8007fc4:	bf00      	nop
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7ff f83c 	bl	8007058 <USBH_LL_Disconnect>
}
 8007fe0:	bf00      	nop
 8007fe2:	3708      	adds	r7, #8
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	70fb      	strb	r3, [r7, #3]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007ff8:	bf00      	nop
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008012:	4618      	mov	r0, r3
 8008014:	f7fe ffed 	bl	8006ff2 <USBH_LL_PortEnabled>
}
 8008018:	bf00      	nop
 800801a:	3708      	adds	r7, #8
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800802e:	4618      	mov	r0, r3
 8008030:	f7fe ffed 	bl	800700e <USBH_LL_PortDisabled>
}
 8008034:	bf00      	nop
 8008036:	3708      	adds	r7, #8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800804a:	2b01      	cmp	r3, #1
 800804c:	d12a      	bne.n	80080a4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800804e:	4a18      	ldr	r2, [pc, #96]	; (80080b0 <USBH_LL_Init+0x74>)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a15      	ldr	r2, [pc, #84]	; (80080b0 <USBH_LL_Init+0x74>)
 800805a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800805e:	4b14      	ldr	r3, [pc, #80]	; (80080b0 <USBH_LL_Init+0x74>)
 8008060:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008064:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008066:	4b12      	ldr	r3, [pc, #72]	; (80080b0 <USBH_LL_Init+0x74>)
 8008068:	2208      	movs	r2, #8
 800806a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800806c:	4b10      	ldr	r3, [pc, #64]	; (80080b0 <USBH_LL_Init+0x74>)
 800806e:	2201      	movs	r2, #1
 8008070:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008072:	4b0f      	ldr	r3, [pc, #60]	; (80080b0 <USBH_LL_Init+0x74>)
 8008074:	2200      	movs	r2, #0
 8008076:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008078:	4b0d      	ldr	r3, [pc, #52]	; (80080b0 <USBH_LL_Init+0x74>)
 800807a:	2202      	movs	r2, #2
 800807c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800807e:	4b0c      	ldr	r3, [pc, #48]	; (80080b0 <USBH_LL_Init+0x74>)
 8008080:	2200      	movs	r2, #0
 8008082:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008084:	480a      	ldr	r0, [pc, #40]	; (80080b0 <USBH_LL_Init+0x74>)
 8008086:	f7f9 fc82 	bl	800198e <HAL_HCD_Init>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d001      	beq.n	8008094 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008090:	f7f8 fb8e 	bl	80007b0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008094:	4806      	ldr	r0, [pc, #24]	; (80080b0 <USBH_LL_Init+0x74>)
 8008096:	f7fa f866 	bl	8002166 <HAL_HCD_GetCurrentFrame>
 800809a:	4603      	mov	r3, r0
 800809c:	4619      	mov	r1, r3
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7fe ff6e 	bl	8006f80 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3708      	adds	r7, #8
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	200005b8 	.word	0x200005b8

080080b4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080bc:	2300      	movs	r3, #0
 80080be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080c0:	2300      	movs	r3, #0
 80080c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7f9 ffd5 	bl	800207a <HAL_HCD_Start>
 80080d0:	4603      	mov	r3, r0
 80080d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
 80080d6:	4618      	mov	r0, r3
 80080d8:	f000 f952 	bl	8008380 <USBH_Get_USB_Status>
 80080dc:	4603      	mov	r3, r0
 80080de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b084      	sub	sp, #16
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080f2:	2300      	movs	r3, #0
 80080f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008100:	4618      	mov	r0, r3
 8008102:	f7f9 ffdd 	bl	80020c0 <HAL_HCD_Stop>
 8008106:	4603      	mov	r3, r0
 8008108:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800810a:	7bfb      	ldrb	r3, [r7, #15]
 800810c:	4618      	mov	r0, r3
 800810e:	f000 f937 	bl	8008380 <USBH_Get_USB_Status>
 8008112:	4603      	mov	r3, r0
 8008114:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008116:	7bbb      	ldrb	r3, [r7, #14]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008128:	2301      	movs	r3, #1
 800812a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008132:	4618      	mov	r0, r3
 8008134:	f7fa f825 	bl	8002182 <HAL_HCD_GetCurrentSpeed>
 8008138:	4603      	mov	r3, r0
 800813a:	2b02      	cmp	r3, #2
 800813c:	d00c      	beq.n	8008158 <USBH_LL_GetSpeed+0x38>
 800813e:	2b02      	cmp	r3, #2
 8008140:	d80d      	bhi.n	800815e <USBH_LL_GetSpeed+0x3e>
 8008142:	2b00      	cmp	r3, #0
 8008144:	d002      	beq.n	800814c <USBH_LL_GetSpeed+0x2c>
 8008146:	2b01      	cmp	r3, #1
 8008148:	d003      	beq.n	8008152 <USBH_LL_GetSpeed+0x32>
 800814a:	e008      	b.n	800815e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800814c:	2300      	movs	r3, #0
 800814e:	73fb      	strb	r3, [r7, #15]
    break;
 8008150:	e008      	b.n	8008164 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008152:	2301      	movs	r3, #1
 8008154:	73fb      	strb	r3, [r7, #15]
    break;
 8008156:	e005      	b.n	8008164 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008158:	2302      	movs	r3, #2
 800815a:	73fb      	strb	r3, [r7, #15]
    break;
 800815c:	e002      	b.n	8008164 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800815e:	2301      	movs	r3, #1
 8008160:	73fb      	strb	r3, [r7, #15]
    break;
 8008162:	bf00      	nop
  }
  return  speed;
 8008164:	7bfb      	ldrb	r3, [r7, #15]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b084      	sub	sp, #16
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800817a:	2300      	movs	r3, #0
 800817c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008184:	4618      	mov	r0, r3
 8008186:	f7f9 ffb8 	bl	80020fa <HAL_HCD_ResetPort>
 800818a:	4603      	mov	r3, r0
 800818c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800818e:	7bfb      	ldrb	r3, [r7, #15]
 8008190:	4618      	mov	r0, r3
 8008192:	f000 f8f5 	bl	8008380 <USBH_Get_USB_Status>
 8008196:	4603      	mov	r3, r0
 8008198:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800819a:	7bbb      	ldrb	r3, [r7, #14]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	460b      	mov	r3, r1
 80081ae:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081b6:	78fa      	ldrb	r2, [r7, #3]
 80081b8:	4611      	mov	r1, r2
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7f9 ffbf 	bl	800213e <HAL_HCD_HC_GetXferCount>
 80081c0:	4603      	mov	r3, r0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80081ca:	b590      	push	{r4, r7, lr}
 80081cc:	b089      	sub	sp, #36	; 0x24
 80081ce:	af04      	add	r7, sp, #16
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	4608      	mov	r0, r1
 80081d4:	4611      	mov	r1, r2
 80081d6:	461a      	mov	r2, r3
 80081d8:	4603      	mov	r3, r0
 80081da:	70fb      	strb	r3, [r7, #3]
 80081dc:	460b      	mov	r3, r1
 80081de:	70bb      	strb	r3, [r7, #2]
 80081e0:	4613      	mov	r3, r2
 80081e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081e4:	2300      	movs	r3, #0
 80081e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081e8:	2300      	movs	r3, #0
 80081ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80081f2:	787c      	ldrb	r4, [r7, #1]
 80081f4:	78ba      	ldrb	r2, [r7, #2]
 80081f6:	78f9      	ldrb	r1, [r7, #3]
 80081f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081fa:	9302      	str	r3, [sp, #8]
 80081fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008200:	9301      	str	r3, [sp, #4]
 8008202:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	4623      	mov	r3, r4
 800820a:	f7f9 fc22 	bl	8001a52 <HAL_HCD_HC_Init>
 800820e:	4603      	mov	r3, r0
 8008210:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008212:	7bfb      	ldrb	r3, [r7, #15]
 8008214:	4618      	mov	r0, r3
 8008216:	f000 f8b3 	bl	8008380 <USBH_Get_USB_Status>
 800821a:	4603      	mov	r3, r0
 800821c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800821e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3714      	adds	r7, #20
 8008224:	46bd      	mov	sp, r7
 8008226:	bd90      	pop	{r4, r7, pc}

08008228 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	460b      	mov	r3, r1
 8008232:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008234:	2300      	movs	r3, #0
 8008236:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008242:	78fa      	ldrb	r2, [r7, #3]
 8008244:	4611      	mov	r1, r2
 8008246:	4618      	mov	r0, r3
 8008248:	f7f9 fc92 	bl	8001b70 <HAL_HCD_HC_Halt>
 800824c:	4603      	mov	r3, r0
 800824e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008250:	7bfb      	ldrb	r3, [r7, #15]
 8008252:	4618      	mov	r0, r3
 8008254:	f000 f894 	bl	8008380 <USBH_Get_USB_Status>
 8008258:	4603      	mov	r3, r0
 800825a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800825c:	7bbb      	ldrb	r3, [r7, #14]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008266:	b590      	push	{r4, r7, lr}
 8008268:	b089      	sub	sp, #36	; 0x24
 800826a:	af04      	add	r7, sp, #16
 800826c:	6078      	str	r0, [r7, #4]
 800826e:	4608      	mov	r0, r1
 8008270:	4611      	mov	r1, r2
 8008272:	461a      	mov	r2, r3
 8008274:	4603      	mov	r3, r0
 8008276:	70fb      	strb	r3, [r7, #3]
 8008278:	460b      	mov	r3, r1
 800827a:	70bb      	strb	r3, [r7, #2]
 800827c:	4613      	mov	r3, r2
 800827e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008280:	2300      	movs	r3, #0
 8008282:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008284:	2300      	movs	r3, #0
 8008286:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800828e:	787c      	ldrb	r4, [r7, #1]
 8008290:	78ba      	ldrb	r2, [r7, #2]
 8008292:	78f9      	ldrb	r1, [r7, #3]
 8008294:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008298:	9303      	str	r3, [sp, #12]
 800829a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800829c:	9302      	str	r3, [sp, #8]
 800829e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a0:	9301      	str	r3, [sp, #4]
 80082a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80082a6:	9300      	str	r3, [sp, #0]
 80082a8:	4623      	mov	r3, r4
 80082aa:	f7f9 fc85 	bl	8001bb8 <HAL_HCD_HC_SubmitRequest>
 80082ae:	4603      	mov	r3, r0
 80082b0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80082b2:	7bfb      	ldrb	r3, [r7, #15]
 80082b4:	4618      	mov	r0, r3
 80082b6:	f000 f863 	bl	8008380 <USBH_Get_USB_Status>
 80082ba:	4603      	mov	r3, r0
 80082bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082be:	7bbb      	ldrb	r3, [r7, #14]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3714      	adds	r7, #20
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd90      	pop	{r4, r7, pc}

080082c8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	460b      	mov	r3, r1
 80082d2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082da:	78fa      	ldrb	r2, [r7, #3]
 80082dc:	4611      	mov	r1, r2
 80082de:	4618      	mov	r0, r3
 80082e0:	f7f9 ff19 	bl	8002116 <HAL_HCD_HC_GetURBState>
 80082e4:	4603      	mov	r3, r0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b082      	sub	sp, #8
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	460b      	mov	r3, r1
 80082f8:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 80082fa:	20c8      	movs	r0, #200	; 0xc8
 80082fc:	f7f8 fc72 	bl	8000be4 <HAL_Delay>
  return USBH_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3708      	adds	r7, #8
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800830a:	b480      	push	{r7}
 800830c:	b085      	sub	sp, #20
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
 8008312:	460b      	mov	r3, r1
 8008314:	70fb      	strb	r3, [r7, #3]
 8008316:	4613      	mov	r3, r2
 8008318:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008320:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008322:	78fb      	ldrb	r3, [r7, #3]
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	212c      	movs	r1, #44	; 0x2c
 8008328:	fb01 f303 	mul.w	r3, r1, r3
 800832c:	4413      	add	r3, r2
 800832e:	333b      	adds	r3, #59	; 0x3b
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d009      	beq.n	800834a <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008336:	78fb      	ldrb	r3, [r7, #3]
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	212c      	movs	r1, #44	; 0x2c
 800833c:	fb01 f303 	mul.w	r3, r1, r3
 8008340:	4413      	add	r3, r2
 8008342:	3354      	adds	r3, #84	; 0x54
 8008344:	78ba      	ldrb	r2, [r7, #2]
 8008346:	701a      	strb	r2, [r3, #0]
 8008348:	e008      	b.n	800835c <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800834a:	78fb      	ldrb	r3, [r7, #3]
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	212c      	movs	r1, #44	; 0x2c
 8008350:	fb01 f303 	mul.w	r3, r1, r3
 8008354:	4413      	add	r3, r2
 8008356:	3355      	adds	r3, #85	; 0x55
 8008358:	78ba      	ldrb	r2, [r7, #2]
 800835a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3714      	adds	r7, #20
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b082      	sub	sp, #8
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f7f8 fc36 	bl	8000be4 <HAL_Delay>
}
 8008378:	bf00      	nop
 800837a:	3708      	adds	r7, #8
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	4603      	mov	r3, r0
 8008388:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800838a:	2300      	movs	r3, #0
 800838c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800838e:	79fb      	ldrb	r3, [r7, #7]
 8008390:	2b03      	cmp	r3, #3
 8008392:	d817      	bhi.n	80083c4 <USBH_Get_USB_Status+0x44>
 8008394:	a201      	add	r2, pc, #4	; (adr r2, 800839c <USBH_Get_USB_Status+0x1c>)
 8008396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800839a:	bf00      	nop
 800839c:	080083ad 	.word	0x080083ad
 80083a0:	080083b3 	.word	0x080083b3
 80083a4:	080083b9 	.word	0x080083b9
 80083a8:	080083bf 	.word	0x080083bf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80083ac:	2300      	movs	r3, #0
 80083ae:	73fb      	strb	r3, [r7, #15]
    break;
 80083b0:	e00b      	b.n	80083ca <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80083b2:	2302      	movs	r3, #2
 80083b4:	73fb      	strb	r3, [r7, #15]
    break;
 80083b6:	e008      	b.n	80083ca <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80083b8:	2301      	movs	r3, #1
 80083ba:	73fb      	strb	r3, [r7, #15]
    break;
 80083bc:	e005      	b.n	80083ca <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80083be:	2302      	movs	r3, #2
 80083c0:	73fb      	strb	r3, [r7, #15]
    break;
 80083c2:	e002      	b.n	80083ca <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80083c4:	2302      	movs	r3, #2
 80083c6:	73fb      	strb	r3, [r7, #15]
    break;
 80083c8:	bf00      	nop
  }
  return usb_status;
 80083ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3714      	adds	r7, #20
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <__errno>:
 80083d8:	4b01      	ldr	r3, [pc, #4]	; (80083e0 <__errno+0x8>)
 80083da:	6818      	ldr	r0, [r3, #0]
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	2000002c 	.word	0x2000002c

080083e4 <__libc_init_array>:
 80083e4:	b570      	push	{r4, r5, r6, lr}
 80083e6:	4d0d      	ldr	r5, [pc, #52]	; (800841c <__libc_init_array+0x38>)
 80083e8:	4c0d      	ldr	r4, [pc, #52]	; (8008420 <__libc_init_array+0x3c>)
 80083ea:	1b64      	subs	r4, r4, r5
 80083ec:	10a4      	asrs	r4, r4, #2
 80083ee:	2600      	movs	r6, #0
 80083f0:	42a6      	cmp	r6, r4
 80083f2:	d109      	bne.n	8008408 <__libc_init_array+0x24>
 80083f4:	4d0b      	ldr	r5, [pc, #44]	; (8008424 <__libc_init_array+0x40>)
 80083f6:	4c0c      	ldr	r4, [pc, #48]	; (8008428 <__libc_init_array+0x44>)
 80083f8:	f000 f93e 	bl	8008678 <_init>
 80083fc:	1b64      	subs	r4, r4, r5
 80083fe:	10a4      	asrs	r4, r4, #2
 8008400:	2600      	movs	r6, #0
 8008402:	42a6      	cmp	r6, r4
 8008404:	d105      	bne.n	8008412 <__libc_init_array+0x2e>
 8008406:	bd70      	pop	{r4, r5, r6, pc}
 8008408:	f855 3b04 	ldr.w	r3, [r5], #4
 800840c:	4798      	blx	r3
 800840e:	3601      	adds	r6, #1
 8008410:	e7ee      	b.n	80083f0 <__libc_init_array+0xc>
 8008412:	f855 3b04 	ldr.w	r3, [r5], #4
 8008416:	4798      	blx	r3
 8008418:	3601      	adds	r6, #1
 800841a:	e7f2      	b.n	8008402 <__libc_init_array+0x1e>
 800841c:	080086bc 	.word	0x080086bc
 8008420:	080086bc 	.word	0x080086bc
 8008424:	080086bc 	.word	0x080086bc
 8008428:	080086c0 	.word	0x080086c0

0800842c <malloc>:
 800842c:	4b02      	ldr	r3, [pc, #8]	; (8008438 <malloc+0xc>)
 800842e:	4601      	mov	r1, r0
 8008430:	6818      	ldr	r0, [r3, #0]
 8008432:	f000 b88f 	b.w	8008554 <_malloc_r>
 8008436:	bf00      	nop
 8008438:	2000002c 	.word	0x2000002c

0800843c <free>:
 800843c:	4b02      	ldr	r3, [pc, #8]	; (8008448 <free+0xc>)
 800843e:	4601      	mov	r1, r0
 8008440:	6818      	ldr	r0, [r3, #0]
 8008442:	f000 b81b 	b.w	800847c <_free_r>
 8008446:	bf00      	nop
 8008448:	2000002c 	.word	0x2000002c

0800844c <memccpy>:
 800844c:	b510      	push	{r4, lr}
 800844e:	b2d2      	uxtb	r2, r2
 8008450:	3901      	subs	r1, #1
 8008452:	4403      	add	r3, r0
 8008454:	4298      	cmp	r0, r3
 8008456:	d101      	bne.n	800845c <memccpy+0x10>
 8008458:	2000      	movs	r0, #0
 800845a:	e005      	b.n	8008468 <memccpy+0x1c>
 800845c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008460:	f800 4b01 	strb.w	r4, [r0], #1
 8008464:	4294      	cmp	r4, r2
 8008466:	d1f5      	bne.n	8008454 <memccpy+0x8>
 8008468:	bd10      	pop	{r4, pc}

0800846a <memset>:
 800846a:	4402      	add	r2, r0
 800846c:	4603      	mov	r3, r0
 800846e:	4293      	cmp	r3, r2
 8008470:	d100      	bne.n	8008474 <memset+0xa>
 8008472:	4770      	bx	lr
 8008474:	f803 1b01 	strb.w	r1, [r3], #1
 8008478:	e7f9      	b.n	800846e <memset+0x4>
	...

0800847c <_free_r>:
 800847c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800847e:	2900      	cmp	r1, #0
 8008480:	d044      	beq.n	800850c <_free_r+0x90>
 8008482:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008486:	9001      	str	r0, [sp, #4]
 8008488:	2b00      	cmp	r3, #0
 800848a:	f1a1 0404 	sub.w	r4, r1, #4
 800848e:	bfb8      	it	lt
 8008490:	18e4      	addlt	r4, r4, r3
 8008492:	f000 f8e3 	bl	800865c <__malloc_lock>
 8008496:	4a1e      	ldr	r2, [pc, #120]	; (8008510 <_free_r+0x94>)
 8008498:	9801      	ldr	r0, [sp, #4]
 800849a:	6813      	ldr	r3, [r2, #0]
 800849c:	b933      	cbnz	r3, 80084ac <_free_r+0x30>
 800849e:	6063      	str	r3, [r4, #4]
 80084a0:	6014      	str	r4, [r2, #0]
 80084a2:	b003      	add	sp, #12
 80084a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084a8:	f000 b8de 	b.w	8008668 <__malloc_unlock>
 80084ac:	42a3      	cmp	r3, r4
 80084ae:	d908      	bls.n	80084c2 <_free_r+0x46>
 80084b0:	6825      	ldr	r5, [r4, #0]
 80084b2:	1961      	adds	r1, r4, r5
 80084b4:	428b      	cmp	r3, r1
 80084b6:	bf01      	itttt	eq
 80084b8:	6819      	ldreq	r1, [r3, #0]
 80084ba:	685b      	ldreq	r3, [r3, #4]
 80084bc:	1949      	addeq	r1, r1, r5
 80084be:	6021      	streq	r1, [r4, #0]
 80084c0:	e7ed      	b.n	800849e <_free_r+0x22>
 80084c2:	461a      	mov	r2, r3
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	b10b      	cbz	r3, 80084cc <_free_r+0x50>
 80084c8:	42a3      	cmp	r3, r4
 80084ca:	d9fa      	bls.n	80084c2 <_free_r+0x46>
 80084cc:	6811      	ldr	r1, [r2, #0]
 80084ce:	1855      	adds	r5, r2, r1
 80084d0:	42a5      	cmp	r5, r4
 80084d2:	d10b      	bne.n	80084ec <_free_r+0x70>
 80084d4:	6824      	ldr	r4, [r4, #0]
 80084d6:	4421      	add	r1, r4
 80084d8:	1854      	adds	r4, r2, r1
 80084da:	42a3      	cmp	r3, r4
 80084dc:	6011      	str	r1, [r2, #0]
 80084de:	d1e0      	bne.n	80084a2 <_free_r+0x26>
 80084e0:	681c      	ldr	r4, [r3, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	6053      	str	r3, [r2, #4]
 80084e6:	4421      	add	r1, r4
 80084e8:	6011      	str	r1, [r2, #0]
 80084ea:	e7da      	b.n	80084a2 <_free_r+0x26>
 80084ec:	d902      	bls.n	80084f4 <_free_r+0x78>
 80084ee:	230c      	movs	r3, #12
 80084f0:	6003      	str	r3, [r0, #0]
 80084f2:	e7d6      	b.n	80084a2 <_free_r+0x26>
 80084f4:	6825      	ldr	r5, [r4, #0]
 80084f6:	1961      	adds	r1, r4, r5
 80084f8:	428b      	cmp	r3, r1
 80084fa:	bf04      	itt	eq
 80084fc:	6819      	ldreq	r1, [r3, #0]
 80084fe:	685b      	ldreq	r3, [r3, #4]
 8008500:	6063      	str	r3, [r4, #4]
 8008502:	bf04      	itt	eq
 8008504:	1949      	addeq	r1, r1, r5
 8008506:	6021      	streq	r1, [r4, #0]
 8008508:	6054      	str	r4, [r2, #4]
 800850a:	e7ca      	b.n	80084a2 <_free_r+0x26>
 800850c:	b003      	add	sp, #12
 800850e:	bd30      	pop	{r4, r5, pc}
 8008510:	200008bc 	.word	0x200008bc

08008514 <sbrk_aligned>:
 8008514:	b570      	push	{r4, r5, r6, lr}
 8008516:	4e0e      	ldr	r6, [pc, #56]	; (8008550 <sbrk_aligned+0x3c>)
 8008518:	460c      	mov	r4, r1
 800851a:	6831      	ldr	r1, [r6, #0]
 800851c:	4605      	mov	r5, r0
 800851e:	b911      	cbnz	r1, 8008526 <sbrk_aligned+0x12>
 8008520:	f000 f88c 	bl	800863c <_sbrk_r>
 8008524:	6030      	str	r0, [r6, #0]
 8008526:	4621      	mov	r1, r4
 8008528:	4628      	mov	r0, r5
 800852a:	f000 f887 	bl	800863c <_sbrk_r>
 800852e:	1c43      	adds	r3, r0, #1
 8008530:	d00a      	beq.n	8008548 <sbrk_aligned+0x34>
 8008532:	1cc4      	adds	r4, r0, #3
 8008534:	f024 0403 	bic.w	r4, r4, #3
 8008538:	42a0      	cmp	r0, r4
 800853a:	d007      	beq.n	800854c <sbrk_aligned+0x38>
 800853c:	1a21      	subs	r1, r4, r0
 800853e:	4628      	mov	r0, r5
 8008540:	f000 f87c 	bl	800863c <_sbrk_r>
 8008544:	3001      	adds	r0, #1
 8008546:	d101      	bne.n	800854c <sbrk_aligned+0x38>
 8008548:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800854c:	4620      	mov	r0, r4
 800854e:	bd70      	pop	{r4, r5, r6, pc}
 8008550:	200008c0 	.word	0x200008c0

08008554 <_malloc_r>:
 8008554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008558:	1ccd      	adds	r5, r1, #3
 800855a:	f025 0503 	bic.w	r5, r5, #3
 800855e:	3508      	adds	r5, #8
 8008560:	2d0c      	cmp	r5, #12
 8008562:	bf38      	it	cc
 8008564:	250c      	movcc	r5, #12
 8008566:	2d00      	cmp	r5, #0
 8008568:	4607      	mov	r7, r0
 800856a:	db01      	blt.n	8008570 <_malloc_r+0x1c>
 800856c:	42a9      	cmp	r1, r5
 800856e:	d905      	bls.n	800857c <_malloc_r+0x28>
 8008570:	230c      	movs	r3, #12
 8008572:	603b      	str	r3, [r7, #0]
 8008574:	2600      	movs	r6, #0
 8008576:	4630      	mov	r0, r6
 8008578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800857c:	4e2e      	ldr	r6, [pc, #184]	; (8008638 <_malloc_r+0xe4>)
 800857e:	f000 f86d 	bl	800865c <__malloc_lock>
 8008582:	6833      	ldr	r3, [r6, #0]
 8008584:	461c      	mov	r4, r3
 8008586:	bb34      	cbnz	r4, 80085d6 <_malloc_r+0x82>
 8008588:	4629      	mov	r1, r5
 800858a:	4638      	mov	r0, r7
 800858c:	f7ff ffc2 	bl	8008514 <sbrk_aligned>
 8008590:	1c43      	adds	r3, r0, #1
 8008592:	4604      	mov	r4, r0
 8008594:	d14d      	bne.n	8008632 <_malloc_r+0xde>
 8008596:	6834      	ldr	r4, [r6, #0]
 8008598:	4626      	mov	r6, r4
 800859a:	2e00      	cmp	r6, #0
 800859c:	d140      	bne.n	8008620 <_malloc_r+0xcc>
 800859e:	6823      	ldr	r3, [r4, #0]
 80085a0:	4631      	mov	r1, r6
 80085a2:	4638      	mov	r0, r7
 80085a4:	eb04 0803 	add.w	r8, r4, r3
 80085a8:	f000 f848 	bl	800863c <_sbrk_r>
 80085ac:	4580      	cmp	r8, r0
 80085ae:	d13a      	bne.n	8008626 <_malloc_r+0xd2>
 80085b0:	6821      	ldr	r1, [r4, #0]
 80085b2:	3503      	adds	r5, #3
 80085b4:	1a6d      	subs	r5, r5, r1
 80085b6:	f025 0503 	bic.w	r5, r5, #3
 80085ba:	3508      	adds	r5, #8
 80085bc:	2d0c      	cmp	r5, #12
 80085be:	bf38      	it	cc
 80085c0:	250c      	movcc	r5, #12
 80085c2:	4629      	mov	r1, r5
 80085c4:	4638      	mov	r0, r7
 80085c6:	f7ff ffa5 	bl	8008514 <sbrk_aligned>
 80085ca:	3001      	adds	r0, #1
 80085cc:	d02b      	beq.n	8008626 <_malloc_r+0xd2>
 80085ce:	6823      	ldr	r3, [r4, #0]
 80085d0:	442b      	add	r3, r5
 80085d2:	6023      	str	r3, [r4, #0]
 80085d4:	e00e      	b.n	80085f4 <_malloc_r+0xa0>
 80085d6:	6822      	ldr	r2, [r4, #0]
 80085d8:	1b52      	subs	r2, r2, r5
 80085da:	d41e      	bmi.n	800861a <_malloc_r+0xc6>
 80085dc:	2a0b      	cmp	r2, #11
 80085de:	d916      	bls.n	800860e <_malloc_r+0xba>
 80085e0:	1961      	adds	r1, r4, r5
 80085e2:	42a3      	cmp	r3, r4
 80085e4:	6025      	str	r5, [r4, #0]
 80085e6:	bf18      	it	ne
 80085e8:	6059      	strne	r1, [r3, #4]
 80085ea:	6863      	ldr	r3, [r4, #4]
 80085ec:	bf08      	it	eq
 80085ee:	6031      	streq	r1, [r6, #0]
 80085f0:	5162      	str	r2, [r4, r5]
 80085f2:	604b      	str	r3, [r1, #4]
 80085f4:	4638      	mov	r0, r7
 80085f6:	f104 060b 	add.w	r6, r4, #11
 80085fa:	f000 f835 	bl	8008668 <__malloc_unlock>
 80085fe:	f026 0607 	bic.w	r6, r6, #7
 8008602:	1d23      	adds	r3, r4, #4
 8008604:	1af2      	subs	r2, r6, r3
 8008606:	d0b6      	beq.n	8008576 <_malloc_r+0x22>
 8008608:	1b9b      	subs	r3, r3, r6
 800860a:	50a3      	str	r3, [r4, r2]
 800860c:	e7b3      	b.n	8008576 <_malloc_r+0x22>
 800860e:	6862      	ldr	r2, [r4, #4]
 8008610:	42a3      	cmp	r3, r4
 8008612:	bf0c      	ite	eq
 8008614:	6032      	streq	r2, [r6, #0]
 8008616:	605a      	strne	r2, [r3, #4]
 8008618:	e7ec      	b.n	80085f4 <_malloc_r+0xa0>
 800861a:	4623      	mov	r3, r4
 800861c:	6864      	ldr	r4, [r4, #4]
 800861e:	e7b2      	b.n	8008586 <_malloc_r+0x32>
 8008620:	4634      	mov	r4, r6
 8008622:	6876      	ldr	r6, [r6, #4]
 8008624:	e7b9      	b.n	800859a <_malloc_r+0x46>
 8008626:	230c      	movs	r3, #12
 8008628:	603b      	str	r3, [r7, #0]
 800862a:	4638      	mov	r0, r7
 800862c:	f000 f81c 	bl	8008668 <__malloc_unlock>
 8008630:	e7a1      	b.n	8008576 <_malloc_r+0x22>
 8008632:	6025      	str	r5, [r4, #0]
 8008634:	e7de      	b.n	80085f4 <_malloc_r+0xa0>
 8008636:	bf00      	nop
 8008638:	200008bc 	.word	0x200008bc

0800863c <_sbrk_r>:
 800863c:	b538      	push	{r3, r4, r5, lr}
 800863e:	4d06      	ldr	r5, [pc, #24]	; (8008658 <_sbrk_r+0x1c>)
 8008640:	2300      	movs	r3, #0
 8008642:	4604      	mov	r4, r0
 8008644:	4608      	mov	r0, r1
 8008646:	602b      	str	r3, [r5, #0]
 8008648:	f7f8 f9e8 	bl	8000a1c <_sbrk>
 800864c:	1c43      	adds	r3, r0, #1
 800864e:	d102      	bne.n	8008656 <_sbrk_r+0x1a>
 8008650:	682b      	ldr	r3, [r5, #0]
 8008652:	b103      	cbz	r3, 8008656 <_sbrk_r+0x1a>
 8008654:	6023      	str	r3, [r4, #0]
 8008656:	bd38      	pop	{r3, r4, r5, pc}
 8008658:	200008c4 	.word	0x200008c4

0800865c <__malloc_lock>:
 800865c:	4801      	ldr	r0, [pc, #4]	; (8008664 <__malloc_lock+0x8>)
 800865e:	f000 b809 	b.w	8008674 <__retarget_lock_acquire_recursive>
 8008662:	bf00      	nop
 8008664:	200008c8 	.word	0x200008c8

08008668 <__malloc_unlock>:
 8008668:	4801      	ldr	r0, [pc, #4]	; (8008670 <__malloc_unlock+0x8>)
 800866a:	f000 b804 	b.w	8008676 <__retarget_lock_release_recursive>
 800866e:	bf00      	nop
 8008670:	200008c8 	.word	0x200008c8

08008674 <__retarget_lock_acquire_recursive>:
 8008674:	4770      	bx	lr

08008676 <__retarget_lock_release_recursive>:
 8008676:	4770      	bx	lr

08008678 <_init>:
 8008678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800867a:	bf00      	nop
 800867c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800867e:	bc08      	pop	{r3}
 8008680:	469e      	mov	lr, r3
 8008682:	4770      	bx	lr

08008684 <_fini>:
 8008684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008686:	bf00      	nop
 8008688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800868a:	bc08      	pop	{r3}
 800868c:	469e      	mov	lr, r3
 800868e:	4770      	bx	lr
