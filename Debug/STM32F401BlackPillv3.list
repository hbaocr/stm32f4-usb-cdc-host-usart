
STM32F401BlackPillv3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a84  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08009c24  08009c24  00019c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d94  08009d94  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009d94  08009d94  00019d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d9c  08009d9c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d9c  08009d9c  00019d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009da0  08009da0  00019da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009da4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c34  20000090  08009e34  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cc4  08009e34  00020cc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000141a6  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d4  00000000  00000000  00034266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00037740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d28  00000000  00000000  000385b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019850  00000000  00000000  000392d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013322  00000000  00000000  00052b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c154  00000000  00000000  00065e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1f9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004554  00000000  00000000  000f1ff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009c0c 	.word	0x08009c0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08009c0c 	.word	0x08009c0c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	2b00      	cmp	r3, #0
 800059a:	d013      	beq.n	80005c4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800059c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005a4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d00b      	beq.n	80005c4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005ac:	e000      	b.n	80005b0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0f9      	beq.n	80005ae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	b2d2      	uxtb	r2, r2
 80005c2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c4:	687b      	ldr	r3, [r7, #4]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr

080005d2 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b082      	sub	sp, #8
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */

  ITM_SendChar((uint8_t *)&ch);
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff ffd1 	bl	8000584 <ITM_SendChar>

  return ch;
 80005e2:	687b      	ldr	r3, [r7, #4]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <uart1_tx_poll>:
/* USER CODE BEGIN 0 */

//https://controllerstech.com/uart-transmit-in-stm32/
char tmpbuf[512];

void uart1_tx_poll(uint8_t *data, uint16_t sz ){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	460b      	mov	r3, r1
 80005f6:	807b      	strh	r3, [r7, #2]
	uint32_t timeout_ms=10;
 80005f8:	230a      	movs	r3, #10
 80005fa:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit (&huart1, data, sz, timeout_ms);
 80005fc:	887a      	ldrh	r2, [r7, #2]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	6879      	ldr	r1, [r7, #4]
 8000602:	4803      	ldr	r0, [pc, #12]	; (8000610 <uart1_tx_poll+0x24>)
 8000604:	f003 fc65 	bl	8003ed2 <HAL_UART_Transmit>
}
 8000608:	bf00      	nop
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	200002c4 	.word	0x200002c4

08000614 <HAL_UARTEx_RxEventCallback>:
  * @brief  The application entry point.
  * @retval int
  */

// call back when uart irq
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	807b      	strh	r3, [r7, #2]
	if(huart->Instance==USART1){
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a0d      	ldr	r2, [pc, #52]	; (800065c <HAL_UARTEx_RxEventCallback+0x48>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d113      	bne.n	8000652 <HAL_UARTEx_RxEventCallback+0x3e>
//		rxUartSize=Size;

		//HAL_UART_Transmit_DMA(&huart1, rxUartBuff, rxUartSize);

		 /* Add array to ring */
		 ring_buffer_queue_arr(&uart_rx_ringbuff_hdl,dma_uart_rx_buff,Size);
 800062a:	887b      	ldrh	r3, [r7, #2]
 800062c:	461a      	mov	r2, r3
 800062e:	490c      	ldr	r1, [pc, #48]	; (8000660 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000630:	480c      	ldr	r0, [pc, #48]	; (8000664 <HAL_UARTEx_RxEventCallback+0x50>)
 8000632:	f000 fa08 	bl	8000a46 <ring_buffer_queue_arr>

		//enable again

		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, dma_uart_rx_buff, sizeof(dma_uart_rx_buff));// enable all irq related to
 8000636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800063a:	4909      	ldr	r1, [pc, #36]	; (8000660 <HAL_UARTEx_RxEventCallback+0x4c>)
 800063c:	480a      	ldr	r0, [pc, #40]	; (8000668 <HAL_UARTEx_RxEventCallback+0x54>)
 800063e:	f003 fcda 	bl	8003ff6 <HAL_UARTEx_ReceiveToIdle_DMA>
		  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);// dsiable half buffer dma irq
 8000642:	4b0a      	ldr	r3, [pc, #40]	; (800066c <HAL_UARTEx_RxEventCallback+0x58>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <HAL_UARTEx_RxEventCallback+0x58>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f022 0208 	bic.w	r2, r2, #8
 8000650:	601a      	str	r2, [r3, #0]


	}

}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40011000 	.word	0x40011000
 8000660:	200000c4 	.word	0x200000c4
 8000664:	200000ac 	.word	0x200000ac
 8000668:	200002c4 	.word	0x200002c4
 800066c:	20000308 	.word	0x20000308

08000670 <CDC_HANDLER>:

void CDC_HANDLER(){
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
	static ApplicationTypeDef old;
	if(old != Appli_state){
 8000676:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <CDC_HANDLER+0x44>)
 8000678:	781a      	ldrb	r2, [r3, #0]
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <CDC_HANDLER+0x48>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	429a      	cmp	r2, r3
 8000680:	d013      	beq.n	80006aa <CDC_HANDLER+0x3a>

		int n= sprintf(tmpbuf,"Change state from %d to %d \n",old,Appli_state);
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <CDC_HANDLER+0x44>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	461a      	mov	r2, r3
 8000688:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <CDC_HANDLER+0x48>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	490b      	ldr	r1, [pc, #44]	; (80006bc <CDC_HANDLER+0x4c>)
 800068e:	480c      	ldr	r0, [pc, #48]	; (80006c0 <CDC_HANDLER+0x50>)
 8000690:	f008 fcfe 	bl	8009090 <siprintf>
 8000694:	6078      	str	r0, [r7, #4]
		old=Appli_state;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <CDC_HANDLER+0x48>)
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <CDC_HANDLER+0x44>)
 800069c:	701a      	strb	r2, [r3, #0]
		uart1_tx_poll(tmpbuf,n);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	4619      	mov	r1, r3
 80006a4:	4806      	ldr	r0, [pc, #24]	; (80006c0 <CDC_HANDLER+0x50>)
 80006a6:	f7ff ffa1 	bl	80005ec <uart1_tx_poll>
	}

}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200005c8 	.word	0x200005c8
 80006b8:	200009ac 	.word	0x200009ac
 80006bc:	08009c24 	.word	0x08009c24
 80006c0:	200003c8 	.word	0x200003c8

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c8:	f000 fc0c 	bl	8000ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006cc:	f000 f82e 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d0:	f000 f8ea 	bl	80008a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80006d4:	f000 f8c0 	bl	8000858 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80006d8:	f000 f894 	bl	8000804 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80006dc:	f007 fdb4 	bl	8008248 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  ring_buffer_init(&uart_rx_ringbuff_hdl, uart_rx_ringbuff_memory, sizeof(uart_rx_ringbuff_memory));
 80006e0:	2208      	movs	r2, #8
 80006e2:	490d      	ldr	r1, [pc, #52]	; (8000718 <main+0x54>)
 80006e4:	480d      	ldr	r0, [pc, #52]	; (800071c <main+0x58>)
 80006e6:	f000 f95d 	bl	80009a4 <ring_buffer_init>

  //whenever the dma buffer is full or the tx line is idle for one frame time ( 1 byte time) --> the uart irq will be call
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, dma_uart_rx_buff, sizeof(dma_uart_rx_buff));// enable all irq related to
 80006ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ee:	490c      	ldr	r1, [pc, #48]	; (8000720 <main+0x5c>)
 80006f0:	480c      	ldr	r0, [pc, #48]	; (8000724 <main+0x60>)
 80006f2:	f003 fc80 	bl	8003ff6 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);// dsiable half buffer dma irq
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <main+0x64>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <main+0x64>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f022 0208 	bic.w	r2, r2, #8
 8000704:	601a      	str	r2, [r3, #0]

  HAL_Delay(1000);
 8000706:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800070a:	f000 fc5d 	bl	8000fc8 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//printf("Debug print form SWO");
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800070e:	f007 fdc1 	bl	8008294 <MX_USB_HOST_Process>
    CDC_HANDLER();
 8000712:	f7ff ffad 	bl	8000670 <CDC_HANDLER>
    MX_USB_HOST_Process();
 8000716:	e7fa      	b.n	800070e <main+0x4a>
 8000718:	200000bc 	.word	0x200000bc
 800071c:	200000ac 	.word	0x200000ac
 8000720:	200000c4 	.word	0x200000c4
 8000724:	200002c4 	.word	0x200002c4
 8000728:	20000308 	.word	0x20000308

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b094      	sub	sp, #80	; 0x50
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 0320 	add.w	r3, r7, #32
 8000736:	2230      	movs	r2, #48	; 0x30
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f008 f8c2 	bl	80088c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	4b29      	ldr	r3, [pc, #164]	; (80007fc <SystemClock_Config+0xd0>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	4a28      	ldr	r2, [pc, #160]	; (80007fc <SystemClock_Config+0xd0>)
 800075a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075e:	6413      	str	r3, [r2, #64]	; 0x40
 8000760:	4b26      	ldr	r3, [pc, #152]	; (80007fc <SystemClock_Config+0xd0>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	4b23      	ldr	r3, [pc, #140]	; (8000800 <SystemClock_Config+0xd4>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000778:	4a21      	ldr	r2, [pc, #132]	; (8000800 <SystemClock_Config+0xd4>)
 800077a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <SystemClock_Config+0xd4>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800078c:	2301      	movs	r3, #1
 800078e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000790:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	2302      	movs	r3, #2
 8000798:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800079e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007a0:	2319      	movs	r3, #25
 80007a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007aa:	2304      	movs	r3, #4
 80007ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007ae:	2307      	movs	r3, #7
 80007b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b2:	f107 0320 	add.w	r3, r7, #32
 80007b6:	4618      	mov	r0, r3
 80007b8:	f002 fee6 	bl	8003588 <HAL_RCC_OscConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007c2:	f000 f8d1 	bl	8000968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c6:	230f      	movs	r3, #15
 80007c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ca:	2302      	movs	r3, #2
 80007cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	2102      	movs	r1, #2
 80007e2:	4618      	mov	r0, r3
 80007e4:	f003 f948 	bl	8003a78 <HAL_RCC_ClockConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007ee:	f000 f8bb 	bl	8000968 <Error_Handler>
  }
}
 80007f2:	bf00      	nop
 80007f4:	3750      	adds	r7, #80	; 0x50
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800
 8000800:	40007000 	.word	0x40007000

08000804 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 800080a:	4a12      	ldr	r2, [pc, #72]	; (8000854 <MX_USART1_UART_Init+0x50>)
 800080c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 8000810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000814:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 800083c:	f003 fafc 	bl	8003e38 <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000846:	f000 f88f 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200002c4 	.word	0x200002c4
 8000854:	40011000 	.word	0x40011000

08000858 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <MX_DMA_Init+0x4c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a0f      	ldr	r2, [pc, #60]	; (80008a4 <MX_DMA_Init+0x4c>)
 8000868:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <MX_DMA_Init+0x4c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	2100      	movs	r1, #0
 800087e:	203a      	movs	r0, #58	; 0x3a
 8000880:	f000 fca1 	bl	80011c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000884:	203a      	movs	r0, #58	; 0x3a
 8000886:	f000 fcba 	bl	80011fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2100      	movs	r1, #0
 800088e:	2046      	movs	r0, #70	; 0x46
 8000890:	f000 fc99 	bl	80011c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000894:	2046      	movs	r0, #70	; 0x46
 8000896:	f000 fcb2 	bl	80011fe <HAL_NVIC_EnableIRQ>

}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b27      	ldr	r3, [pc, #156]	; (8000960 <MX_GPIO_Init+0xb8>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a26      	ldr	r2, [pc, #152]	; (8000960 <MX_GPIO_Init+0xb8>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b24      	ldr	r3, [pc, #144]	; (8000960 <MX_GPIO_Init+0xb8>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b20      	ldr	r3, [pc, #128]	; (8000960 <MX_GPIO_Init+0xb8>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a1f      	ldr	r2, [pc, #124]	; (8000960 <MX_GPIO_Init+0xb8>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <MX_GPIO_Init+0xb8>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <MX_GPIO_Init+0xb8>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a18      	ldr	r2, [pc, #96]	; (8000960 <MX_GPIO_Init+0xb8>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b16      	ldr	r3, [pc, #88]	; (8000960 <MX_GPIO_Init+0xb8>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_GPIO_Init+0xb8>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a11      	ldr	r2, [pc, #68]	; (8000960 <MX_GPIO_Init+0xb8>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_GPIO_Init+0xb8>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000934:	480b      	ldr	r0, [pc, #44]	; (8000964 <MX_GPIO_Init+0xbc>)
 8000936:	f001 fa03 	bl	8001d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800093a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800093e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000940:	2301      	movs	r3, #1
 8000942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	4619      	mov	r1, r3
 8000952:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_GPIO_Init+0xbc>)
 8000954:	f001 f870 	bl	8001a38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000958:	bf00      	nop
 800095a:	3728      	adds	r7, #40	; 0x28
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40023800 	.word	0x40023800
 8000964:	40020800 	.word	0x40020800

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	e7fe      	b.n	8000970 <Error_Handler+0x8>

08000972 <ring_buffer_is_full>:
/**
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
 8000972:	b480      	push	{r7}
 8000974:	b083      	sub	sp, #12
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK(buffer)) == RING_BUFFER_MASK(buffer);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	68da      	ldr	r2, [r3, #12]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	1ad2      	subs	r2, r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	401a      	ands	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	429a      	cmp	r2, r3
 8000990:	bf0c      	ite	eq
 8000992:	2301      	moveq	r3, #1
 8000994:	2300      	movne	r3, #0
 8000996:	b2db      	uxtb	r3, r3
}
 8000998:	4618      	mov	r0, r3
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <ring_buffer_init>:
/**
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer, uint8_t *buf, size_t buf_size) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
  RING_BUFFER_ASSERT(RING_BUFFER_IS_POWER_OF_TWO(buf_size) == 1);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	1e5a      	subs	r2, r3, #1
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4013      	ands	r3, r2
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d005      	beq.n	80009c8 <ring_buffer_init+0x24>
 80009bc:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <ring_buffer_init+0x48>)
 80009be:	4a0c      	ldr	r2, [pc, #48]	; (80009f0 <ring_buffer_init+0x4c>)
 80009c0:	2111      	movs	r1, #17
 80009c2:	480c      	ldr	r0, [pc, #48]	; (80009f4 <ring_buffer_init+0x50>)
 80009c4:	f007 ff14 	bl	80087f0 <__assert_func>
  buffer->buffer = buf;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	601a      	str	r2, [r3, #0]
  buffer->buffer_mask = buf_size - 1;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	1e5a      	subs	r2, r3, #1
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	605a      	str	r2, [r3, #4]
  buffer->tail_index = 0;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  buffer->head_index = 0;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
}
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	08009c44 	.word	0x08009c44
 80009f0:	08009c8c 	.word	0x08009c8c
 80009f4:	08009c6c 	.word	0x08009c6c

080009f8 <ring_buffer_queue>:

void ring_buffer_queue(ring_buffer_t *buffer, uint8_t data) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	460b      	mov	r3, r1
 8000a02:	70fb      	strb	r3, [r7, #3]
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer)) {
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f7ff ffb4 	bl	8000972 <ring_buffer_is_full>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d007      	beq.n	8000a20 <ring_buffer_queue+0x28>
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK(buffer));
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	1c5a      	adds	r2, r3, #1
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	401a      	ands	r2, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	4413      	add	r3, r2
 8000a2a:	78fa      	ldrb	r2, [r7, #3]
 8000a2c:	701a      	strb	r2, [r3, #0]
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK(buffer));
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	1c5a      	adds	r2, r3, #1
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	401a      	ands	r2, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	60da      	str	r2, [r3, #12]
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <ring_buffer_queue_arr>:

void ring_buffer_queue_arr(ring_buffer_t *buffer, const uint8_t *data, ring_buffer_size_t size) {
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b086      	sub	sp, #24
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	60f8      	str	r0, [r7, #12]
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
  /* Add bytes; one by one */
  ring_buffer_size_t i;
  for(i = 0; i < size; i++) {
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
 8000a56:	e00a      	b.n	8000a6e <ring_buffer_queue_arr+0x28>
    ring_buffer_queue(buffer, data[i]);
 8000a58:	68ba      	ldr	r2, [r7, #8]
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4619      	mov	r1, r3
 8000a62:	68f8      	ldr	r0, [r7, #12]
 8000a64:	f7ff ffc8 	bl	80009f8 <ring_buffer_queue>
  for(i = 0; i < size; i++) {
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	617b      	str	r3, [r7, #20]
 8000a6e:	697a      	ldr	r2, [r7, #20]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d3f0      	bcc.n	8000a58 <ring_buffer_queue_arr+0x12>
  }
}
 8000a76:	bf00      	nop
 8000a78:	bf00      	nop
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <HAL_MspInit+0x4c>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	4a0f      	ldr	r2, [pc, #60]	; (8000acc <HAL_MspInit+0x4c>)
 8000a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a94:	6453      	str	r3, [r2, #68]	; 0x44
 8000a96:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <HAL_MspInit+0x4c>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_MspInit+0x4c>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a08      	ldr	r2, [pc, #32]	; (8000acc <HAL_MspInit+0x4c>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_MspInit+0x4c>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800

08000ad0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a4c      	ldr	r2, [pc, #304]	; (8000c20 <HAL_UART_MspInit+0x150>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	f040 8091 	bne.w	8000c16 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000af4:	2300      	movs	r3, #0
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	4b4a      	ldr	r3, [pc, #296]	; (8000c24 <HAL_UART_MspInit+0x154>)
 8000afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afc:	4a49      	ldr	r2, [pc, #292]	; (8000c24 <HAL_UART_MspInit+0x154>)
 8000afe:	f043 0310 	orr.w	r3, r3, #16
 8000b02:	6453      	str	r3, [r2, #68]	; 0x44
 8000b04:	4b47      	ldr	r3, [pc, #284]	; (8000c24 <HAL_UART_MspInit+0x154>)
 8000b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b08:	f003 0310 	and.w	r3, r3, #16
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	4b43      	ldr	r3, [pc, #268]	; (8000c24 <HAL_UART_MspInit+0x154>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b18:	4a42      	ldr	r2, [pc, #264]	; (8000c24 <HAL_UART_MspInit+0x154>)
 8000b1a:	f043 0301 	orr.w	r3, r3, #1
 8000b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b20:	4b40      	ldr	r3, [pc, #256]	; (8000c24 <HAL_UART_MspInit+0x154>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b24:	f003 0301 	and.w	r3, r3, #1
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b2c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b3e:	2307      	movs	r3, #7
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	4837      	ldr	r0, [pc, #220]	; (8000c28 <HAL_UART_MspInit+0x158>)
 8000b4a:	f000 ff75 	bl	8001a38 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000b4e:	4b37      	ldr	r3, [pc, #220]	; (8000c2c <HAL_UART_MspInit+0x15c>)
 8000b50:	4a37      	ldr	r2, [pc, #220]	; (8000c30 <HAL_UART_MspInit+0x160>)
 8000b52:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000b54:	4b35      	ldr	r3, [pc, #212]	; (8000c2c <HAL_UART_MspInit+0x15c>)
 8000b56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b5a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b5c:	4b33      	ldr	r3, [pc, #204]	; (8000c2c <HAL_UART_MspInit+0x15c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b62:	4b32      	ldr	r3, [pc, #200]	; (8000c2c <HAL_UART_MspInit+0x15c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b68:	4b30      	ldr	r3, [pc, #192]	; (8000c2c <HAL_UART_MspInit+0x15c>)
 8000b6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b6e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b70:	4b2e      	ldr	r3, [pc, #184]	; (8000c2c <HAL_UART_MspInit+0x15c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b76:	4b2d      	ldr	r3, [pc, #180]	; (8000c2c <HAL_UART_MspInit+0x15c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000b7c:	4b2b      	ldr	r3, [pc, #172]	; (8000c2c <HAL_UART_MspInit+0x15c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b82:	4b2a      	ldr	r3, [pc, #168]	; (8000c2c <HAL_UART_MspInit+0x15c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b88:	4b28      	ldr	r3, [pc, #160]	; (8000c2c <HAL_UART_MspInit+0x15c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000b8e:	4827      	ldr	r0, [pc, #156]	; (8000c2c <HAL_UART_MspInit+0x15c>)
 8000b90:	f000 fb50 	bl	8001234 <HAL_DMA_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000b9a:	f7ff fee5 	bl	8000968 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a22      	ldr	r2, [pc, #136]	; (8000c2c <HAL_UART_MspInit+0x15c>)
 8000ba2:	639a      	str	r2, [r3, #56]	; 0x38
 8000ba4:	4a21      	ldr	r2, [pc, #132]	; (8000c2c <HAL_UART_MspInit+0x15c>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000baa:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <HAL_UART_MspInit+0x164>)
 8000bac:	4a22      	ldr	r2, [pc, #136]	; (8000c38 <HAL_UART_MspInit+0x168>)
 8000bae:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000bb0:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <HAL_UART_MspInit+0x164>)
 8000bb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bb6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bb8:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <HAL_UART_MspInit+0x164>)
 8000bba:	2240      	movs	r2, #64	; 0x40
 8000bbc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bbe:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <HAL_UART_MspInit+0x164>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <HAL_UART_MspInit+0x164>)
 8000bc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bca:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bcc:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <HAL_UART_MspInit+0x164>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <HAL_UART_MspInit+0x164>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000bd8:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <HAL_UART_MspInit+0x164>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <HAL_UART_MspInit+0x164>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <HAL_UART_MspInit+0x164>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000bea:	4812      	ldr	r0, [pc, #72]	; (8000c34 <HAL_UART_MspInit+0x164>)
 8000bec:	f000 fb22 	bl	8001234 <HAL_DMA_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000bf6:	f7ff feb7 	bl	8000968 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <HAL_UART_MspInit+0x164>)
 8000bfe:	635a      	str	r2, [r3, #52]	; 0x34
 8000c00:	4a0c      	ldr	r2, [pc, #48]	; (8000c34 <HAL_UART_MspInit+0x164>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2025      	movs	r0, #37	; 0x25
 8000c0c:	f000 fadb 	bl	80011c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c10:	2025      	movs	r0, #37	; 0x25
 8000c12:	f000 faf4 	bl	80011fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c16:	bf00      	nop
 8000c18:	3728      	adds	r7, #40	; 0x28
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40011000 	.word	0x40011000
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020000 	.word	0x40020000
 8000c2c:	20000308 	.word	0x20000308
 8000c30:	40026440 	.word	0x40026440
 8000c34:	20000368 	.word	0x20000368
 8000c38:	400264b8 	.word	0x400264b8

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <NMI_Handler+0x4>

08000c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <HardFault_Handler+0x4>

08000c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <MemManage_Handler+0x4>

08000c4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <BusFault_Handler+0x4>

08000c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <UsageFault_Handler+0x4>

08000c5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c88:	f000 f97e 	bl	8000f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <USART1_IRQHandler+0x10>)
 8000c96:	f003 fa13 	bl	80040c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	200002c4 	.word	0x200002c4

08000ca4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <DMA2_Stream2_IRQHandler+0x10>)
 8000caa:	f000 fc5b 	bl	8001564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000308 	.word	0x20000308

08000cb8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <OTG_FS_IRQHandler+0x10>)
 8000cbe:	f001 fac3 	bl	8002248 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200009b0 	.word	0x200009b0

08000ccc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000cd0:	4802      	ldr	r0, [pc, #8]	; (8000cdc <DMA2_Stream7_IRQHandler+0x10>)
 8000cd2:	f000 fc47 	bl	8001564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000368 	.word	0x20000368

08000ce0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return 1;
 8000ce4:	2301      	movs	r3, #1
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <_kill>:

int _kill(int pid, int sig)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000cfa:	f007 fd97 	bl	800882c <__errno>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2216      	movs	r2, #22
 8000d02:	601a      	str	r2, [r3, #0]
  return -1;
 8000d04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <_exit>:

void _exit (int status)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff ffe7 	bl	8000cf0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d22:	e7fe      	b.n	8000d22 <_exit+0x12>

08000d24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	e00a      	b.n	8000d4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d36:	f3af 8000 	nop.w
 8000d3a:	4601      	mov	r1, r0
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	1c5a      	adds	r2, r3, #1
 8000d40:	60ba      	str	r2, [r7, #8]
 8000d42:	b2ca      	uxtb	r2, r1
 8000d44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	dbf0      	blt.n	8000d36 <_read+0x12>
  }

  return len;
 8000d54:	687b      	ldr	r3, [r7, #4]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b086      	sub	sp, #24
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	60f8      	str	r0, [r7, #12]
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	e009      	b.n	8000d84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	1c5a      	adds	r2, r3, #1
 8000d74:	60ba      	str	r2, [r7, #8]
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fc2a 	bl	80005d2 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	3301      	adds	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	697a      	ldr	r2, [r7, #20]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	dbf1      	blt.n	8000d70 <_write+0x12>
  }
  return len;
 8000d8c:	687b      	ldr	r3, [r7, #4]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <_close>:

int _close(int file)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
 8000db6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dbe:	605a      	str	r2, [r3, #4]
  return 0;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <_isatty>:

int _isatty(int file)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3714      	adds	r7, #20
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
	...

08000e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e08:	4a14      	ldr	r2, [pc, #80]	; (8000e5c <_sbrk+0x5c>)
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <_sbrk+0x60>)
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d102      	bne.n	8000e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <_sbrk+0x64>)
 8000e1e:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <_sbrk+0x68>)
 8000e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d207      	bcs.n	8000e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e30:	f007 fcfc 	bl	800882c <__errno>
 8000e34:	4603      	mov	r3, r0
 8000e36:	220c      	movs	r2, #12
 8000e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e3e:	e009      	b.n	8000e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <_sbrk+0x64>)
 8000e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e52:	68fb      	ldr	r3, [r7, #12]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20010000 	.word	0x20010000
 8000e60:	00000400 	.word	0x00000400
 8000e64:	200005cc 	.word	0x200005cc
 8000e68:	20000cc8 	.word	0x20000cc8

08000e6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <SystemInit+0x20>)
 8000e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <SystemInit+0x20>)
 8000e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e94:	480d      	ldr	r0, [pc, #52]	; (8000ecc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e96:	490e      	ldr	r1, [pc, #56]	; (8000ed0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e98:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000eac:	4c0b      	ldr	r4, [pc, #44]	; (8000edc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eba:	f7ff ffd7 	bl	8000e6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f007 fccd 	bl	800885c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ec2:	f7ff fbff 	bl	80006c4 <main>
  bx  lr    
 8000ec6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ec8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000ed4:	08009da4 	.word	0x08009da4
  ldr r2, =_sbss
 8000ed8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000edc:	20000cc4 	.word	0x20000cc4

08000ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC_IRQHandler>
	...

08000ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <HAL_Init+0x40>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0d      	ldr	r2, [pc, #52]	; (8000f24 <HAL_Init+0x40>)
 8000eee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ef2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <HAL_Init+0x40>)
 8000efa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a07      	ldr	r2, [pc, #28]	; (8000f24 <HAL_Init+0x40>)
 8000f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	f000 f94f 	bl	80011b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f12:	200f      	movs	r0, #15
 8000f14:	f000 f808 	bl	8000f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f18:	f7ff fdb2 	bl	8000a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40023c00 	.word	0x40023c00

08000f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_InitTick+0x54>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_InitTick+0x58>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f967 	bl	800121a <HAL_SYSTICK_Config>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00e      	b.n	8000f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b0f      	cmp	r3, #15
 8000f5a:	d80a      	bhi.n	8000f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f64:	f000 f92f 	bl	80011c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f68:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <HAL_InitTick+0x5c>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e000      	b.n	8000f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	20000008 	.word	0x20000008
 8000f84:	20000004 	.word	0x20000004

08000f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x20>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x24>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <HAL_IncTick+0x24>)
 8000f9a:	6013      	str	r3, [r2, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	200005d0 	.word	0x200005d0

08000fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <HAL_GetTick+0x14>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	200005d0 	.word	0x200005d0

08000fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd0:	f7ff ffee 	bl	8000fb0 <HAL_GetTick>
 8000fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fe0:	d005      	beq.n	8000fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <HAL_Delay+0x44>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4413      	add	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fee:	bf00      	nop
 8000ff0:	f7ff ffde 	bl	8000fb0 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d8f7      	bhi.n	8000ff0 <HAL_Delay+0x28>
  {
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000008 	.word	0x20000008

08001010 <__NVIC_SetPriorityGrouping>:
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800102c:	4013      	ands	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800103c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001042:	4a04      	ldr	r2, [pc, #16]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	60d3      	str	r3, [r2, #12]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_GetPriorityGrouping>:
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <__NVIC_GetPriorityGrouping+0x18>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	f003 0307 	and.w	r3, r3, #7
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_EnableIRQ>:
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	2b00      	cmp	r3, #0
 8001084:	db0b      	blt.n	800109e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	f003 021f 	and.w	r2, r3, #31
 800108c:	4907      	ldr	r1, [pc, #28]	; (80010ac <__NVIC_EnableIRQ+0x38>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	095b      	lsrs	r3, r3, #5
 8001094:	2001      	movs	r0, #1
 8001096:	fa00 f202 	lsl.w	r2, r0, r2
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000e100 	.word	0xe000e100

080010b0 <__NVIC_SetPriority>:
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	6039      	str	r1, [r7, #0]
 80010ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	db0a      	blt.n	80010da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	490c      	ldr	r1, [pc, #48]	; (80010fc <__NVIC_SetPriority+0x4c>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	0112      	lsls	r2, r2, #4
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	440b      	add	r3, r1
 80010d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010d8:	e00a      	b.n	80010f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4908      	ldr	r1, [pc, #32]	; (8001100 <__NVIC_SetPriority+0x50>)
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	3b04      	subs	r3, #4
 80010e8:	0112      	lsls	r2, r2, #4
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	440b      	add	r3, r1
 80010ee:	761a      	strb	r2, [r3, #24]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000e100 	.word	0xe000e100
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <NVIC_EncodePriority>:
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	; 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f1c3 0307 	rsb	r3, r3, #7
 800111e:	2b04      	cmp	r3, #4
 8001120:	bf28      	it	cs
 8001122:	2304      	movcs	r3, #4
 8001124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3304      	adds	r3, #4
 800112a:	2b06      	cmp	r3, #6
 800112c:	d902      	bls.n	8001134 <NVIC_EncodePriority+0x30>
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3b03      	subs	r3, #3
 8001132:	e000      	b.n	8001136 <NVIC_EncodePriority+0x32>
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43da      	mvns	r2, r3
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	401a      	ands	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800114c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	fa01 f303 	lsl.w	r3, r1, r3
 8001156:	43d9      	mvns	r1, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115c:	4313      	orrs	r3, r2
}
 800115e:	4618      	mov	r0, r3
 8001160:	3724      	adds	r7, #36	; 0x24
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <SysTick_Config>:
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800117c:	d301      	bcc.n	8001182 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800117e:	2301      	movs	r3, #1
 8001180:	e00f      	b.n	80011a2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <SysTick_Config+0x40>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800118a:	210f      	movs	r1, #15
 800118c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001190:	f7ff ff8e 	bl	80010b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <SysTick_Config+0x40>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <SysTick_Config+0x40>)
 800119c:	2207      	movs	r2, #7
 800119e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	e000e010 	.word	0xe000e010

080011b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff29 	bl	8001010 <__NVIC_SetPriorityGrouping>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d8:	f7ff ff3e 	bl	8001058 <__NVIC_GetPriorityGrouping>
 80011dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	6978      	ldr	r0, [r7, #20]
 80011e4:	f7ff ff8e 	bl	8001104 <NVIC_EncodePriority>
 80011e8:	4602      	mov	r2, r0
 80011ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff5d 	bl	80010b0 <__NVIC_SetPriority>
}
 80011f6:	bf00      	nop
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff31 	bl	8001074 <__NVIC_EnableIRQ>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffa2 	bl	800116c <SysTick_Config>
 8001228:	4603      	mov	r3, r0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001240:	f7ff feb6 	bl	8000fb0 <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d101      	bne.n	8001250 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e099      	b.n	8001384 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2202      	movs	r2, #2
 8001254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 0201 	bic.w	r2, r2, #1
 800126e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001270:	e00f      	b.n	8001292 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001272:	f7ff fe9d 	bl	8000fb0 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b05      	cmp	r3, #5
 800127e:	d908      	bls.n	8001292 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2220      	movs	r2, #32
 8001284:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2203      	movs	r2, #3
 800128a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e078      	b.n	8001384 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1e8      	bne.n	8001272 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	4b38      	ldr	r3, [pc, #224]	; (800138c <HAL_DMA_Init+0x158>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a1b      	ldr	r3, [r3, #32]
 80012dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e8:	2b04      	cmp	r3, #4
 80012ea:	d107      	bne.n	80012fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	4313      	orrs	r3, r2
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	f023 0307 	bic.w	r3, r3, #7
 8001312:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	4313      	orrs	r3, r2
 800131c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001322:	2b04      	cmp	r3, #4
 8001324:	d117      	bne.n	8001356 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	4313      	orrs	r3, r2
 800132e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00e      	beq.n	8001356 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f000 fb01 	bl	8001940 <DMA_CheckFifoParam>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d008      	beq.n	8001356 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2240      	movs	r2, #64	; 0x40
 8001348:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2201      	movs	r2, #1
 800134e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001352:	2301      	movs	r3, #1
 8001354:	e016      	b.n	8001384 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 fab8 	bl	80018d4 <DMA_CalcBaseAndBitshift>
 8001364:	4603      	mov	r3, r0
 8001366:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800136c:	223f      	movs	r2, #63	; 0x3f
 800136e:	409a      	lsls	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	f010803f 	.word	0xf010803f

08001390 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
 800139c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d101      	bne.n	80013b6 <HAL_DMA_Start_IT+0x26>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e040      	b.n	8001438 <HAL_DMA_Start_IT+0xa8>
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d12f      	bne.n	800142a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2202      	movs	r2, #2
 80013ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2200      	movs	r2, #0
 80013d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	68b9      	ldr	r1, [r7, #8]
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	f000 fa4a 	bl	8001878 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e8:	223f      	movs	r2, #63	; 0x3f
 80013ea:	409a      	lsls	r2, r3
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f042 0216 	orr.w	r2, r2, #22
 80013fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	2b00      	cmp	r3, #0
 8001406:	d007      	beq.n	8001418 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 0208 	orr.w	r2, r2, #8
 8001416:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f042 0201 	orr.w	r2, r2, #1
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	e005      	b.n	8001436 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001432:	2302      	movs	r3, #2
 8001434:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001436:	7dfb      	ldrb	r3, [r7, #23]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800144e:	f7ff fdaf 	bl	8000fb0 <HAL_GetTick>
 8001452:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d008      	beq.n	8001472 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2280      	movs	r2, #128	; 0x80
 8001464:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e052      	b.n	8001518 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 0216 	bic.w	r2, r2, #22
 8001480:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	695a      	ldr	r2, [r3, #20]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001490:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	2b00      	cmp	r3, #0
 8001498:	d103      	bne.n	80014a2 <HAL_DMA_Abort+0x62>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d007      	beq.n	80014b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f022 0208 	bic.w	r2, r2, #8
 80014b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 0201 	bic.w	r2, r2, #1
 80014c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014c2:	e013      	b.n	80014ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014c4:	f7ff fd74 	bl	8000fb0 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b05      	cmp	r3, #5
 80014d0:	d90c      	bls.n	80014ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2220      	movs	r2, #32
 80014d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2203      	movs	r2, #3
 80014dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e015      	b.n	8001518 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1e4      	bne.n	80014c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fe:	223f      	movs	r2, #63	; 0x3f
 8001500:	409a      	lsls	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d004      	beq.n	800153e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2280      	movs	r2, #128	; 0x80
 8001538:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e00c      	b.n	8001558 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2205      	movs	r2, #5
 8001542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0201 	bic.w	r2, r2, #1
 8001554:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800156c:	2300      	movs	r3, #0
 800156e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001570:	4b8e      	ldr	r3, [pc, #568]	; (80017ac <HAL_DMA_IRQHandler+0x248>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a8e      	ldr	r2, [pc, #568]	; (80017b0 <HAL_DMA_IRQHandler+0x24c>)
 8001576:	fba2 2303 	umull	r2, r3, r2, r3
 800157a:	0a9b      	lsrs	r3, r3, #10
 800157c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001582:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158e:	2208      	movs	r2, #8
 8001590:	409a      	lsls	r2, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4013      	ands	r3, r2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d01a      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d013      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0204 	bic.w	r2, r2, #4
 80015b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015bc:	2208      	movs	r2, #8
 80015be:	409a      	lsls	r2, r3
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c8:	f043 0201 	orr.w	r2, r3, #1
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d4:	2201      	movs	r2, #1
 80015d6:	409a      	lsls	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4013      	ands	r3, r2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d012      	beq.n	8001606 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00b      	beq.n	8001606 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f2:	2201      	movs	r2, #1
 80015f4:	409a      	lsls	r2, r3
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015fe:	f043 0202 	orr.w	r2, r3, #2
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160a:	2204      	movs	r2, #4
 800160c:	409a      	lsls	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4013      	ands	r3, r2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d012      	beq.n	800163c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00b      	beq.n	800163c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001628:	2204      	movs	r2, #4
 800162a:	409a      	lsls	r2, r3
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001634:	f043 0204 	orr.w	r2, r3, #4
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001640:	2210      	movs	r2, #16
 8001642:	409a      	lsls	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4013      	ands	r3, r2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d043      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d03c      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165e:	2210      	movs	r2, #16
 8001660:	409a      	lsls	r2, r3
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d018      	beq.n	80016a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d108      	bne.n	8001694 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	2b00      	cmp	r3, #0
 8001688:	d024      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	4798      	blx	r3
 8001692:	e01f      	b.n	80016d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001698:	2b00      	cmp	r3, #0
 800169a:	d01b      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	4798      	blx	r3
 80016a4:	e016      	b.n	80016d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d107      	bne.n	80016c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 0208 	bic.w	r2, r2, #8
 80016c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d8:	2220      	movs	r2, #32
 80016da:	409a      	lsls	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4013      	ands	r3, r2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 808f 	beq.w	8001804 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0310 	and.w	r3, r3, #16
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 8087 	beq.w	8001804 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fa:	2220      	movs	r2, #32
 80016fc:	409a      	lsls	r2, r3
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b05      	cmp	r3, #5
 800170c:	d136      	bne.n	800177c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 0216 	bic.w	r2, r2, #22
 800171c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	695a      	ldr	r2, [r3, #20]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800172c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	2b00      	cmp	r3, #0
 8001734:	d103      	bne.n	800173e <HAL_DMA_IRQHandler+0x1da>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800173a:	2b00      	cmp	r3, #0
 800173c:	d007      	beq.n	800174e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0208 	bic.w	r2, r2, #8
 800174c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001752:	223f      	movs	r2, #63	; 0x3f
 8001754:	409a      	lsls	r2, r3
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800176e:	2b00      	cmp	r3, #0
 8001770:	d07e      	beq.n	8001870 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	4798      	blx	r3
        }
        return;
 800177a:	e079      	b.n	8001870 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d01d      	beq.n	80017c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d10d      	bne.n	80017b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179c:	2b00      	cmp	r3, #0
 800179e:	d031      	beq.n	8001804 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	4798      	blx	r3
 80017a8:	e02c      	b.n	8001804 <HAL_DMA_IRQHandler+0x2a0>
 80017aa:	bf00      	nop
 80017ac:	20000000 	.word	0x20000000
 80017b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d023      	beq.n	8001804 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	4798      	blx	r3
 80017c4:	e01e      	b.n	8001804 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d10f      	bne.n	80017f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0210 	bic.w	r2, r2, #16
 80017e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001808:	2b00      	cmp	r3, #0
 800180a:	d032      	beq.n	8001872 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d022      	beq.n	800185e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2205      	movs	r2, #5
 800181c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0201 	bic.w	r2, r2, #1
 800182e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	3301      	adds	r3, #1
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	429a      	cmp	r2, r3
 800183a:	d307      	bcc.n	800184c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f2      	bne.n	8001830 <HAL_DMA_IRQHandler+0x2cc>
 800184a:	e000      	b.n	800184e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800184c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	2b00      	cmp	r3, #0
 8001864:	d005      	beq.n	8001872 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	4798      	blx	r3
 800186e:	e000      	b.n	8001872 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001870:	bf00      	nop
    }
  }
}
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001894:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b40      	cmp	r3, #64	; 0x40
 80018a4:	d108      	bne.n	80018b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018b6:	e007      	b.n	80018c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68ba      	ldr	r2, [r7, #8]
 80018be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	60da      	str	r2, [r3, #12]
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	3b10      	subs	r3, #16
 80018e4:	4a14      	ldr	r2, [pc, #80]	; (8001938 <DMA_CalcBaseAndBitshift+0x64>)
 80018e6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ea:	091b      	lsrs	r3, r3, #4
 80018ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018ee:	4a13      	ldr	r2, [pc, #76]	; (800193c <DMA_CalcBaseAndBitshift+0x68>)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4413      	add	r3, r2
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d909      	bls.n	8001916 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800190a:	f023 0303 	bic.w	r3, r3, #3
 800190e:	1d1a      	adds	r2, r3, #4
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	659a      	str	r2, [r3, #88]	; 0x58
 8001914:	e007      	b.n	8001926 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800191e:	f023 0303 	bic.w	r3, r3, #3
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800192a:	4618      	mov	r0, r3
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	aaaaaaab 	.word	0xaaaaaaab
 800193c:	08009cb8 	.word	0x08009cb8

08001940 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001950:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d11f      	bne.n	800199a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	2b03      	cmp	r3, #3
 800195e:	d856      	bhi.n	8001a0e <DMA_CheckFifoParam+0xce>
 8001960:	a201      	add	r2, pc, #4	; (adr r2, 8001968 <DMA_CheckFifoParam+0x28>)
 8001962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001966:	bf00      	nop
 8001968:	08001979 	.word	0x08001979
 800196c:	0800198b 	.word	0x0800198b
 8001970:	08001979 	.word	0x08001979
 8001974:	08001a0f 	.word	0x08001a0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d046      	beq.n	8001a12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001988:	e043      	b.n	8001a12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001992:	d140      	bne.n	8001a16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001998:	e03d      	b.n	8001a16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019a2:	d121      	bne.n	80019e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d837      	bhi.n	8001a1a <DMA_CheckFifoParam+0xda>
 80019aa:	a201      	add	r2, pc, #4	; (adr r2, 80019b0 <DMA_CheckFifoParam+0x70>)
 80019ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b0:	080019c1 	.word	0x080019c1
 80019b4:	080019c7 	.word	0x080019c7
 80019b8:	080019c1 	.word	0x080019c1
 80019bc:	080019d9 	.word	0x080019d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	73fb      	strb	r3, [r7, #15]
      break;
 80019c4:	e030      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d025      	beq.n	8001a1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019d6:	e022      	b.n	8001a1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019e0:	d11f      	bne.n	8001a22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019e6:	e01c      	b.n	8001a22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d903      	bls.n	80019f6 <DMA_CheckFifoParam+0xb6>
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	d003      	beq.n	80019fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019f4:	e018      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	73fb      	strb	r3, [r7, #15]
      break;
 80019fa:	e015      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00e      	beq.n	8001a26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a0c:	e00b      	b.n	8001a26 <DMA_CheckFifoParam+0xe6>
      break;
 8001a0e:	bf00      	nop
 8001a10:	e00a      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      break;
 8001a12:	bf00      	nop
 8001a14:	e008      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      break;
 8001a16:	bf00      	nop
 8001a18:	e006      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      break;
 8001a1a:	bf00      	nop
 8001a1c:	e004      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      break;
 8001a1e:	bf00      	nop
 8001a20:	e002      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a22:	bf00      	nop
 8001a24:	e000      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      break;
 8001a26:	bf00      	nop
    }
  } 
  
  return status; 
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop

08001a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
 8001a52:	e159      	b.n	8001d08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a54:	2201      	movs	r2, #1
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	f040 8148 	bne.w	8001d02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d005      	beq.n	8001a8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d130      	bne.n	8001aec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	2203      	movs	r2, #3
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	68da      	ldr	r2, [r3, #12]
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	091b      	lsrs	r3, r3, #4
 8001ad6:	f003 0201 	and.w	r2, r3, #1
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	2b03      	cmp	r3, #3
 8001af6:	d017      	beq.n	8001b28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	2203      	movs	r2, #3
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d123      	bne.n	8001b7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	08da      	lsrs	r2, r3, #3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3208      	adds	r2, #8
 8001b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	220f      	movs	r2, #15
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	08da      	lsrs	r2, r3, #3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3208      	adds	r2, #8
 8001b76:	69b9      	ldr	r1, [r7, #24]
 8001b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	2203      	movs	r2, #3
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0203 	and.w	r2, r3, #3
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 80a2 	beq.w	8001d02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	4b57      	ldr	r3, [pc, #348]	; (8001d20 <HAL_GPIO_Init+0x2e8>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	4a56      	ldr	r2, [pc, #344]	; (8001d20 <HAL_GPIO_Init+0x2e8>)
 8001bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bce:	4b54      	ldr	r3, [pc, #336]	; (8001d20 <HAL_GPIO_Init+0x2e8>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bda:	4a52      	ldr	r2, [pc, #328]	; (8001d24 <HAL_GPIO_Init+0x2ec>)
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	089b      	lsrs	r3, r3, #2
 8001be0:	3302      	adds	r3, #2
 8001be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	220f      	movs	r2, #15
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a49      	ldr	r2, [pc, #292]	; (8001d28 <HAL_GPIO_Init+0x2f0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d019      	beq.n	8001c3a <HAL_GPIO_Init+0x202>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a48      	ldr	r2, [pc, #288]	; (8001d2c <HAL_GPIO_Init+0x2f4>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d013      	beq.n	8001c36 <HAL_GPIO_Init+0x1fe>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a47      	ldr	r2, [pc, #284]	; (8001d30 <HAL_GPIO_Init+0x2f8>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d00d      	beq.n	8001c32 <HAL_GPIO_Init+0x1fa>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a46      	ldr	r2, [pc, #280]	; (8001d34 <HAL_GPIO_Init+0x2fc>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d007      	beq.n	8001c2e <HAL_GPIO_Init+0x1f6>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a45      	ldr	r2, [pc, #276]	; (8001d38 <HAL_GPIO_Init+0x300>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d101      	bne.n	8001c2a <HAL_GPIO_Init+0x1f2>
 8001c26:	2304      	movs	r3, #4
 8001c28:	e008      	b.n	8001c3c <HAL_GPIO_Init+0x204>
 8001c2a:	2307      	movs	r3, #7
 8001c2c:	e006      	b.n	8001c3c <HAL_GPIO_Init+0x204>
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e004      	b.n	8001c3c <HAL_GPIO_Init+0x204>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e002      	b.n	8001c3c <HAL_GPIO_Init+0x204>
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <HAL_GPIO_Init+0x204>
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	69fa      	ldr	r2, [r7, #28]
 8001c3e:	f002 0203 	and.w	r2, r2, #3
 8001c42:	0092      	lsls	r2, r2, #2
 8001c44:	4093      	lsls	r3, r2
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c4c:	4935      	ldr	r1, [pc, #212]	; (8001d24 <HAL_GPIO_Init+0x2ec>)
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	089b      	lsrs	r3, r3, #2
 8001c52:	3302      	adds	r3, #2
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c5a:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c7e:	4a2f      	ldr	r2, [pc, #188]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c84:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ca8:	4a24      	ldr	r2, [pc, #144]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cae:	4b23      	ldr	r3, [pc, #140]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cd2:	4a1a      	ldr	r2, [pc, #104]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cd8:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cfc:	4a0f      	ldr	r2, [pc, #60]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3301      	adds	r3, #1
 8001d06:	61fb      	str	r3, [r7, #28]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	2b0f      	cmp	r3, #15
 8001d0c:	f67f aea2 	bls.w	8001a54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	3724      	adds	r7, #36	; 0x24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40013800 	.word	0x40013800
 8001d28:	40020000 	.word	0x40020000
 8001d2c:	40020400 	.word	0x40020400
 8001d30:	40020800 	.word	0x40020800
 8001d34:	40020c00 	.word	0x40020c00
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40013c00 	.word	0x40013c00

08001d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	807b      	strh	r3, [r7, #2]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d50:	787b      	ldrb	r3, [r7, #1]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d56:	887a      	ldrh	r2, [r7, #2]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d5c:	e003      	b.n	8001d66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d5e:	887b      	ldrh	r3, [r7, #2]
 8001d60:	041a      	lsls	r2, r3, #16
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	619a      	str	r2, [r3, #24]
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001d72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d74:	b08f      	sub	sp, #60	; 0x3c
 8001d76:	af0a      	add	r7, sp, #40	; 0x28
 8001d78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e054      	b.n	8001e2e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d106      	bne.n	8001da4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f006 fab0 	bl	8008304 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2203      	movs	r2, #3
 8001da8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d102      	bne.n	8001dbe <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f003 fade 	bl	8005384 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	603b      	str	r3, [r7, #0]
 8001dce:	687e      	ldr	r6, [r7, #4]
 8001dd0:	466d      	mov	r5, sp
 8001dd2:	f106 0410 	add.w	r4, r6, #16
 8001dd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ddc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001de2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001de6:	1d33      	adds	r3, r6, #4
 8001de8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dea:	6838      	ldr	r0, [r7, #0]
 8001dec:	f003 fa58 	bl	80052a0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2101      	movs	r1, #1
 8001df6:	4618      	mov	r0, r3
 8001df8:	f003 fad5 	bl	80053a6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	603b      	str	r3, [r7, #0]
 8001e02:	687e      	ldr	r6, [r7, #4]
 8001e04:	466d      	mov	r5, sp
 8001e06:	f106 0410 	add.w	r4, r6, #16
 8001e0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e16:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e1a:	1d33      	adds	r3, r6, #4
 8001e1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e1e:	6838      	ldr	r0, [r7, #0]
 8001e20:	f003 fc5e 	bl	80056e0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e36 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001e36:	b590      	push	{r4, r7, lr}
 8001e38:	b089      	sub	sp, #36	; 0x24
 8001e3a:	af04      	add	r7, sp, #16
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	4608      	mov	r0, r1
 8001e40:	4611      	mov	r1, r2
 8001e42:	461a      	mov	r2, r3
 8001e44:	4603      	mov	r3, r0
 8001e46:	70fb      	strb	r3, [r7, #3]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	70bb      	strb	r3, [r7, #2]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <HAL_HCD_HC_Init+0x28>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e076      	b.n	8001f4c <HAL_HCD_HC_Init+0x116>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001e66:	78fb      	ldrb	r3, [r7, #3]
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	212c      	movs	r1, #44	; 0x2c
 8001e6c:	fb01 f303 	mul.w	r3, r1, r3
 8001e70:	4413      	add	r3, r2
 8001e72:	333d      	adds	r3, #61	; 0x3d
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	212c      	movs	r1, #44	; 0x2c
 8001e7e:	fb01 f303 	mul.w	r3, r1, r3
 8001e82:	4413      	add	r3, r2
 8001e84:	3338      	adds	r3, #56	; 0x38
 8001e86:	787a      	ldrb	r2, [r7, #1]
 8001e88:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001e8a:	78fb      	ldrb	r3, [r7, #3]
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	212c      	movs	r1, #44	; 0x2c
 8001e90:	fb01 f303 	mul.w	r3, r1, r3
 8001e94:	4413      	add	r3, r2
 8001e96:	3340      	adds	r3, #64	; 0x40
 8001e98:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e9a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e9c:	78fb      	ldrb	r3, [r7, #3]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	212c      	movs	r1, #44	; 0x2c
 8001ea2:	fb01 f303 	mul.w	r3, r1, r3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3339      	adds	r3, #57	; 0x39
 8001eaa:	78fa      	ldrb	r2, [r7, #3]
 8001eac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	212c      	movs	r1, #44	; 0x2c
 8001eb4:	fb01 f303 	mul.w	r3, r1, r3
 8001eb8:	4413      	add	r3, r2
 8001eba:	333f      	adds	r3, #63	; 0x3f
 8001ebc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001ec0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001ec2:	78fb      	ldrb	r3, [r7, #3]
 8001ec4:	78ba      	ldrb	r2, [r7, #2]
 8001ec6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001eca:	b2d0      	uxtb	r0, r2
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	212c      	movs	r1, #44	; 0x2c
 8001ed0:	fb01 f303 	mul.w	r3, r1, r3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	333a      	adds	r3, #58	; 0x3a
 8001ed8:	4602      	mov	r2, r0
 8001eda:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001edc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	da09      	bge.n	8001ef8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001ee4:	78fb      	ldrb	r3, [r7, #3]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	212c      	movs	r1, #44	; 0x2c
 8001eea:	fb01 f303 	mul.w	r3, r1, r3
 8001eee:	4413      	add	r3, r2
 8001ef0:	333b      	adds	r3, #59	; 0x3b
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]
 8001ef6:	e008      	b.n	8001f0a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	212c      	movs	r1, #44	; 0x2c
 8001efe:	fb01 f303 	mul.w	r3, r1, r3
 8001f02:	4413      	add	r3, r2
 8001f04:	333b      	adds	r3, #59	; 0x3b
 8001f06:	2200      	movs	r2, #0
 8001f08:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001f0a:	78fb      	ldrb	r3, [r7, #3]
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	212c      	movs	r1, #44	; 0x2c
 8001f10:	fb01 f303 	mul.w	r3, r1, r3
 8001f14:	4413      	add	r3, r2
 8001f16:	333c      	adds	r3, #60	; 0x3c
 8001f18:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001f1c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	787c      	ldrb	r4, [r7, #1]
 8001f24:	78ba      	ldrb	r2, [r7, #2]
 8001f26:	78f9      	ldrb	r1, [r7, #3]
 8001f28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f2a:	9302      	str	r3, [sp, #8]
 8001f2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f30:	9301      	str	r3, [sp, #4]
 8001f32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	4623      	mov	r3, r4
 8001f3a:	f003 fd57 	bl	80059ec <USB_HC_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd90      	pop	{r4, r7, pc}

08001f54 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001f60:	2300      	movs	r3, #0
 8001f62:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_HCD_HC_Halt+0x1e>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e00f      	b.n	8001f92 <HAL_HCD_HC_Halt+0x3e>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	78fa      	ldrb	r2, [r7, #3]
 8001f80:	4611      	mov	r1, r2
 8001f82:	4618      	mov	r0, r3
 8001f84:	f003 ffa7 	bl	8005ed6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	4608      	mov	r0, r1
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4603      	mov	r3, r0
 8001fac:	70fb      	strb	r3, [r7, #3]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	70bb      	strb	r3, [r7, #2]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	212c      	movs	r1, #44	; 0x2c
 8001fbc:	fb01 f303 	mul.w	r3, r1, r3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	333b      	adds	r3, #59	; 0x3b
 8001fc4:	78ba      	ldrb	r2, [r7, #2]
 8001fc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	212c      	movs	r1, #44	; 0x2c
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	333f      	adds	r3, #63	; 0x3f
 8001fd6:	787a      	ldrb	r2, [r7, #1]
 8001fd8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001fda:	7c3b      	ldrb	r3, [r7, #16]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d112      	bne.n	8002006 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	212c      	movs	r1, #44	; 0x2c
 8001fe6:	fb01 f303 	mul.w	r3, r1, r3
 8001fea:	4413      	add	r3, r2
 8001fec:	3342      	adds	r3, #66	; 0x42
 8001fee:	2203      	movs	r2, #3
 8001ff0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001ff2:	78fb      	ldrb	r3, [r7, #3]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	212c      	movs	r1, #44	; 0x2c
 8001ff8:	fb01 f303 	mul.w	r3, r1, r3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	333d      	adds	r3, #61	; 0x3d
 8002000:	7f3a      	ldrb	r2, [r7, #28]
 8002002:	701a      	strb	r2, [r3, #0]
 8002004:	e008      	b.n	8002018 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002006:	78fb      	ldrb	r3, [r7, #3]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	212c      	movs	r1, #44	; 0x2c
 800200c:	fb01 f303 	mul.w	r3, r1, r3
 8002010:	4413      	add	r3, r2
 8002012:	3342      	adds	r3, #66	; 0x42
 8002014:	2202      	movs	r2, #2
 8002016:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002018:	787b      	ldrb	r3, [r7, #1]
 800201a:	2b03      	cmp	r3, #3
 800201c:	f200 80c6 	bhi.w	80021ac <HAL_HCD_HC_SubmitRequest+0x210>
 8002020:	a201      	add	r2, pc, #4	; (adr r2, 8002028 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002026:	bf00      	nop
 8002028:	08002039 	.word	0x08002039
 800202c:	08002199 	.word	0x08002199
 8002030:	0800209d 	.word	0x0800209d
 8002034:	0800211b 	.word	0x0800211b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002038:	7c3b      	ldrb	r3, [r7, #16]
 800203a:	2b01      	cmp	r3, #1
 800203c:	f040 80b8 	bne.w	80021b0 <HAL_HCD_HC_SubmitRequest+0x214>
 8002040:	78bb      	ldrb	r3, [r7, #2]
 8002042:	2b00      	cmp	r3, #0
 8002044:	f040 80b4 	bne.w	80021b0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002048:	8b3b      	ldrh	r3, [r7, #24]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d108      	bne.n	8002060 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800204e:	78fb      	ldrb	r3, [r7, #3]
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	212c      	movs	r1, #44	; 0x2c
 8002054:	fb01 f303 	mul.w	r3, r1, r3
 8002058:	4413      	add	r3, r2
 800205a:	3355      	adds	r3, #85	; 0x55
 800205c:	2201      	movs	r2, #1
 800205e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	212c      	movs	r1, #44	; 0x2c
 8002066:	fb01 f303 	mul.w	r3, r1, r3
 800206a:	4413      	add	r3, r2
 800206c:	3355      	adds	r3, #85	; 0x55
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d109      	bne.n	8002088 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	212c      	movs	r1, #44	; 0x2c
 800207a:	fb01 f303 	mul.w	r3, r1, r3
 800207e:	4413      	add	r3, r2
 8002080:	3342      	adds	r3, #66	; 0x42
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002086:	e093      	b.n	80021b0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	212c      	movs	r1, #44	; 0x2c
 800208e:	fb01 f303 	mul.w	r3, r1, r3
 8002092:	4413      	add	r3, r2
 8002094:	3342      	adds	r3, #66	; 0x42
 8002096:	2202      	movs	r2, #2
 8002098:	701a      	strb	r2, [r3, #0]
      break;
 800209a:	e089      	b.n	80021b0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800209c:	78bb      	ldrb	r3, [r7, #2]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d11d      	bne.n	80020de <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020a2:	78fb      	ldrb	r3, [r7, #3]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	212c      	movs	r1, #44	; 0x2c
 80020a8:	fb01 f303 	mul.w	r3, r1, r3
 80020ac:	4413      	add	r3, r2
 80020ae:	3355      	adds	r3, #85	; 0x55
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d109      	bne.n	80020ca <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	212c      	movs	r1, #44	; 0x2c
 80020bc:	fb01 f303 	mul.w	r3, r1, r3
 80020c0:	4413      	add	r3, r2
 80020c2:	3342      	adds	r3, #66	; 0x42
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80020c8:	e073      	b.n	80021b2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020ca:	78fb      	ldrb	r3, [r7, #3]
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	212c      	movs	r1, #44	; 0x2c
 80020d0:	fb01 f303 	mul.w	r3, r1, r3
 80020d4:	4413      	add	r3, r2
 80020d6:	3342      	adds	r3, #66	; 0x42
 80020d8:	2202      	movs	r2, #2
 80020da:	701a      	strb	r2, [r3, #0]
      break;
 80020dc:	e069      	b.n	80021b2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80020de:	78fb      	ldrb	r3, [r7, #3]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	212c      	movs	r1, #44	; 0x2c
 80020e4:	fb01 f303 	mul.w	r3, r1, r3
 80020e8:	4413      	add	r3, r2
 80020ea:	3354      	adds	r3, #84	; 0x54
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d109      	bne.n	8002106 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	212c      	movs	r1, #44	; 0x2c
 80020f8:	fb01 f303 	mul.w	r3, r1, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	3342      	adds	r3, #66	; 0x42
 8002100:	2200      	movs	r2, #0
 8002102:	701a      	strb	r2, [r3, #0]
      break;
 8002104:	e055      	b.n	80021b2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002106:	78fb      	ldrb	r3, [r7, #3]
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	212c      	movs	r1, #44	; 0x2c
 800210c:	fb01 f303 	mul.w	r3, r1, r3
 8002110:	4413      	add	r3, r2
 8002112:	3342      	adds	r3, #66	; 0x42
 8002114:	2202      	movs	r2, #2
 8002116:	701a      	strb	r2, [r3, #0]
      break;
 8002118:	e04b      	b.n	80021b2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800211a:	78bb      	ldrb	r3, [r7, #2]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d11d      	bne.n	800215c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	212c      	movs	r1, #44	; 0x2c
 8002126:	fb01 f303 	mul.w	r3, r1, r3
 800212a:	4413      	add	r3, r2
 800212c:	3355      	adds	r3, #85	; 0x55
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d109      	bne.n	8002148 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	212c      	movs	r1, #44	; 0x2c
 800213a:	fb01 f303 	mul.w	r3, r1, r3
 800213e:	4413      	add	r3, r2
 8002140:	3342      	adds	r3, #66	; 0x42
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002146:	e034      	b.n	80021b2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	212c      	movs	r1, #44	; 0x2c
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	4413      	add	r3, r2
 8002154:	3342      	adds	r3, #66	; 0x42
 8002156:	2202      	movs	r2, #2
 8002158:	701a      	strb	r2, [r3, #0]
      break;
 800215a:	e02a      	b.n	80021b2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800215c:	78fb      	ldrb	r3, [r7, #3]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	212c      	movs	r1, #44	; 0x2c
 8002162:	fb01 f303 	mul.w	r3, r1, r3
 8002166:	4413      	add	r3, r2
 8002168:	3354      	adds	r3, #84	; 0x54
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d109      	bne.n	8002184 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	212c      	movs	r1, #44	; 0x2c
 8002176:	fb01 f303 	mul.w	r3, r1, r3
 800217a:	4413      	add	r3, r2
 800217c:	3342      	adds	r3, #66	; 0x42
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]
      break;
 8002182:	e016      	b.n	80021b2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	212c      	movs	r1, #44	; 0x2c
 800218a:	fb01 f303 	mul.w	r3, r1, r3
 800218e:	4413      	add	r3, r2
 8002190:	3342      	adds	r3, #66	; 0x42
 8002192:	2202      	movs	r2, #2
 8002194:	701a      	strb	r2, [r3, #0]
      break;
 8002196:	e00c      	b.n	80021b2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	212c      	movs	r1, #44	; 0x2c
 800219e:	fb01 f303 	mul.w	r3, r1, r3
 80021a2:	4413      	add	r3, r2
 80021a4:	3342      	adds	r3, #66	; 0x42
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]
      break;
 80021aa:	e002      	b.n	80021b2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80021ac:	bf00      	nop
 80021ae:	e000      	b.n	80021b2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80021b0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80021b2:	78fb      	ldrb	r3, [r7, #3]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	212c      	movs	r1, #44	; 0x2c
 80021b8:	fb01 f303 	mul.w	r3, r1, r3
 80021bc:	4413      	add	r3, r2
 80021be:	3344      	adds	r3, #68	; 0x44
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	8b3a      	ldrh	r2, [r7, #24]
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	202c      	movs	r0, #44	; 0x2c
 80021cc:	fb00 f303 	mul.w	r3, r0, r3
 80021d0:	440b      	add	r3, r1
 80021d2:	334c      	adds	r3, #76	; 0x4c
 80021d4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	212c      	movs	r1, #44	; 0x2c
 80021dc:	fb01 f303 	mul.w	r3, r1, r3
 80021e0:	4413      	add	r3, r2
 80021e2:	3360      	adds	r3, #96	; 0x60
 80021e4:	2200      	movs	r2, #0
 80021e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	212c      	movs	r1, #44	; 0x2c
 80021ee:	fb01 f303 	mul.w	r3, r1, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	3350      	adds	r3, #80	; 0x50
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021fa:	78fb      	ldrb	r3, [r7, #3]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	212c      	movs	r1, #44	; 0x2c
 8002200:	fb01 f303 	mul.w	r3, r1, r3
 8002204:	4413      	add	r3, r2
 8002206:	3339      	adds	r3, #57	; 0x39
 8002208:	78fa      	ldrb	r2, [r7, #3]
 800220a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800220c:	78fb      	ldrb	r3, [r7, #3]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	212c      	movs	r1, #44	; 0x2c
 8002212:	fb01 f303 	mul.w	r3, r1, r3
 8002216:	4413      	add	r3, r2
 8002218:	3361      	adds	r3, #97	; 0x61
 800221a:	2200      	movs	r2, #0
 800221c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	78fb      	ldrb	r3, [r7, #3]
 8002224:	222c      	movs	r2, #44	; 0x2c
 8002226:	fb02 f303 	mul.w	r3, r2, r3
 800222a:	3338      	adds	r3, #56	; 0x38
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	18d1      	adds	r1, r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	461a      	mov	r2, r3
 8002238:	f003 fcfa 	bl	8005c30 <USB_HC_StartXfer>
 800223c:	4603      	mov	r3, r0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop

08002248 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f003 f9fb 	bl	800565a <USB_GetMode>
 8002264:	4603      	mov	r3, r0
 8002266:	2b01      	cmp	r3, #1
 8002268:	f040 80f6 	bne.w	8002458 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f003 f9df 	bl	8005634 <USB_ReadInterrupts>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 80ec 	beq.w	8002456 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f003 f9d6 	bl	8005634 <USB_ReadInterrupts>
 8002288:	4603      	mov	r3, r0
 800228a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800228e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002292:	d104      	bne.n	800229e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800229c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f003 f9c6 	bl	8005634 <USB_ReadInterrupts>
 80022a8:	4603      	mov	r3, r0
 80022aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022b2:	d104      	bne.n	80022be <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80022bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f003 f9b6 	bl	8005634 <USB_ReadInterrupts>
 80022c8:	4603      	mov	r3, r0
 80022ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022d2:	d104      	bne.n	80022de <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f003 f9a6 	bl	8005634 <USB_ReadInterrupts>
 80022e8:	4603      	mov	r3, r0
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d103      	bne.n	80022fa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2202      	movs	r2, #2
 80022f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f003 f998 	bl	8005634 <USB_ReadInterrupts>
 8002304:	4603      	mov	r3, r0
 8002306:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800230a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800230e:	d11c      	bne.n	800234a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002318:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10f      	bne.n	800234a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800232a:	2110      	movs	r1, #16
 800232c:	6938      	ldr	r0, [r7, #16]
 800232e:	f003 f887 	bl	8005440 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002332:	6938      	ldr	r0, [r7, #16]
 8002334:	f003 f8b8 	bl	80054a8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2101      	movs	r1, #1
 800233e:	4618      	mov	r0, r3
 8002340:	f003 fa8e 	bl	8005860 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f006 f84d 	bl	80083e4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f003 f970 	bl	8005634 <USB_ReadInterrupts>
 8002354:	4603      	mov	r3, r0
 8002356:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800235a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800235e:	d102      	bne.n	8002366 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f001 f89e 	bl	80034a2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f003 f962 	bl	8005634 <USB_ReadInterrupts>
 8002370:	4603      	mov	r3, r0
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b08      	cmp	r3, #8
 8002378:	d106      	bne.n	8002388 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f006 f816 	bl	80083ac <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2208      	movs	r2, #8
 8002386:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f003 f951 	bl	8005634 <USB_ReadInterrupts>
 8002392:	4603      	mov	r3, r0
 8002394:	f003 0310 	and.w	r3, r3, #16
 8002398:	2b10      	cmp	r3, #16
 800239a:	d101      	bne.n	80023a0 <HAL_HCD_IRQHandler+0x158>
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <HAL_HCD_IRQHandler+0x15a>
 80023a0:	2300      	movs	r3, #0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d012      	beq.n	80023cc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	699a      	ldr	r2, [r3, #24]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0210 	bic.w	r2, r2, #16
 80023b4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 ffa1 	bl	80032fe <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699a      	ldr	r2, [r3, #24]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0210 	orr.w	r2, r2, #16
 80023ca:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f003 f92f 	bl	8005634 <USB_ReadInterrupts>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023e0:	d13a      	bne.n	8002458 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f003 fd64 	bl	8005eb4 <USB_HC_ReadInterrupt>
 80023ec:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	e025      	b.n	8002440 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	d018      	beq.n	800243a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	015a      	lsls	r2, r3, #5
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4413      	add	r3, r2
 8002410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800241a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800241e:	d106      	bne.n	800242e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	b2db      	uxtb	r3, r3
 8002424:	4619      	mov	r1, r3
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f8ab 	bl	8002582 <HCD_HC_IN_IRQHandler>
 800242c:	e005      	b.n	800243a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	4619      	mov	r1, r3
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 fbf9 	bl	8002c2c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	3301      	adds	r3, #1
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	429a      	cmp	r2, r3
 8002448:	d3d4      	bcc.n	80023f4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002452:	615a      	str	r2, [r3, #20]
 8002454:	e000      	b.n	8002458 <HAL_HCD_IRQHandler+0x210>
      return;
 8002456:	bf00      	nop
    }
  }
}
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_HCD_Start+0x16>
 8002470:	2302      	movs	r3, #2
 8002472:	e013      	b.n	800249c <HAL_HCD_Start+0x3e>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2101      	movs	r1, #1
 8002482:	4618      	mov	r0, r3
 8002484:	f003 fa50 	bl	8005928 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f002 ff68 	bl	8005362 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_HCD_Stop+0x16>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e00d      	b.n	80024d6 <HAL_HCD_Stop+0x32>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f003 fe3e 	bl	8006148 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f003 f9f2 	bl	80058d4 <USB_ResetPort>
 80024f0:	4603      	mov	r3, r0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	460b      	mov	r3, r1
 8002504:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002506:	78fb      	ldrb	r3, [r7, #3]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	212c      	movs	r1, #44	; 0x2c
 800250c:	fb01 f303 	mul.w	r3, r1, r3
 8002510:	4413      	add	r3, r2
 8002512:	3360      	adds	r3, #96	; 0x60
 8002514:	781b      	ldrb	r3, [r3, #0]
}
 8002516:	4618      	mov	r0, r3
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	460b      	mov	r3, r1
 800252c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800252e:	78fb      	ldrb	r3, [r7, #3]
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	212c      	movs	r1, #44	; 0x2c
 8002534:	fb01 f303 	mul.w	r3, r1, r3
 8002538:	4413      	add	r3, r2
 800253a:	3350      	adds	r3, #80	; 0x50
 800253c:	681b      	ldr	r3, [r3, #0]
}
 800253e:	4618      	mov	r0, r3
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f003 fa36 	bl	80059c8 <USB_GetCurrentFrame>
 800255c:	4603      	mov	r3, r0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f003 fa11 	bl	800599a <USB_GetHostSpeed>
 8002578:	4603      	mov	r3, r0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b086      	sub	sp, #24
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	460b      	mov	r3, r1
 800258c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002598:	78fb      	ldrb	r3, [r7, #3]
 800259a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	015a      	lsls	r2, r3, #5
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d11a      	bne.n	80025e8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	015a      	lsls	r2, r3, #5
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4413      	add	r3, r2
 80025ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025be:	461a      	mov	r2, r3
 80025c0:	2304      	movs	r3, #4
 80025c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	212c      	movs	r1, #44	; 0x2c
 80025ca:	fb01 f303 	mul.w	r3, r1, r3
 80025ce:	4413      	add	r3, r2
 80025d0:	3361      	adds	r3, #97	; 0x61
 80025d2:	2206      	movs	r2, #6
 80025d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	4611      	mov	r1, r2
 80025e0:	4618      	mov	r0, r3
 80025e2:	f003 fc78 	bl	8005ed6 <USB_HC_Halt>
 80025e6:	e0af      	b.n	8002748 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	015a      	lsls	r2, r3, #5
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025fe:	d11b      	bne.n	8002638 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	015a      	lsls	r2, r3, #5
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4413      	add	r3, r2
 8002608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260c:	461a      	mov	r2, r3
 800260e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002612:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	212c      	movs	r1, #44	; 0x2c
 800261a:	fb01 f303 	mul.w	r3, r1, r3
 800261e:	4413      	add	r3, r2
 8002620:	3361      	adds	r3, #97	; 0x61
 8002622:	2207      	movs	r2, #7
 8002624:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f003 fc50 	bl	8005ed6 <USB_HC_Halt>
 8002636:	e087      	b.n	8002748 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4413      	add	r3, r2
 8002640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 0320 	and.w	r3, r3, #32
 800264a:	2b20      	cmp	r3, #32
 800264c:	d109      	bne.n	8002662 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4413      	add	r3, r2
 8002656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265a:	461a      	mov	r2, r3
 800265c:	2320      	movs	r3, #32
 800265e:	6093      	str	r3, [r2, #8]
 8002660:	e072      	b.n	8002748 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	015a      	lsls	r2, r3, #5
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4413      	add	r3, r2
 800266a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b08      	cmp	r3, #8
 8002676:	d11a      	bne.n	80026ae <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	015a      	lsls	r2, r3, #5
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4413      	add	r3, r2
 8002680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002684:	461a      	mov	r2, r3
 8002686:	2308      	movs	r3, #8
 8002688:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	212c      	movs	r1, #44	; 0x2c
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	4413      	add	r3, r2
 8002696:	3361      	adds	r3, #97	; 0x61
 8002698:	2205      	movs	r2, #5
 800269a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	4611      	mov	r1, r2
 80026a6:	4618      	mov	r0, r3
 80026a8:	f003 fc15 	bl	8005ed6 <USB_HC_Halt>
 80026ac:	e04c      	b.n	8002748 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026c4:	d11b      	bne.n	80026fe <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	015a      	lsls	r2, r3, #5
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d2:	461a      	mov	r2, r3
 80026d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	212c      	movs	r1, #44	; 0x2c
 80026e0:	fb01 f303 	mul.w	r3, r1, r3
 80026e4:	4413      	add	r3, r2
 80026e6:	3361      	adds	r3, #97	; 0x61
 80026e8:	2208      	movs	r2, #8
 80026ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	4611      	mov	r1, r2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f003 fbed 	bl	8005ed6 <USB_HC_Halt>
 80026fc:	e024      	b.n	8002748 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	015a      	lsls	r2, r3, #5
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4413      	add	r3, r2
 8002706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002710:	2b80      	cmp	r3, #128	; 0x80
 8002712:	d119      	bne.n	8002748 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4413      	add	r3, r2
 800271c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002720:	461a      	mov	r2, r3
 8002722:	2380      	movs	r3, #128	; 0x80
 8002724:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	212c      	movs	r1, #44	; 0x2c
 800272c:	fb01 f303 	mul.w	r3, r1, r3
 8002730:	4413      	add	r3, r2
 8002732:	3361      	adds	r3, #97	; 0x61
 8002734:	2206      	movs	r2, #6
 8002736:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	4611      	mov	r1, r2
 8002742:	4618      	mov	r0, r3
 8002744:	f003 fbc7 	bl	8005ed6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4413      	add	r3, r2
 8002750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800275a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800275e:	d112      	bne.n	8002786 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	4611      	mov	r1, r2
 800276a:	4618      	mov	r0, r3
 800276c:	f003 fbb3 	bl	8005ed6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4413      	add	r3, r2
 8002778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277c:	461a      	mov	r2, r3
 800277e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002782:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002784:	e24e      	b.n	8002c24 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4413      	add	r3, r2
 800278e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b01      	cmp	r3, #1
 800279a:	f040 80df 	bne.w	800295c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d019      	beq.n	80027da <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	212c      	movs	r1, #44	; 0x2c
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	3348      	adds	r3, #72	; 0x48
 80027b4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	0159      	lsls	r1, r3, #5
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	440b      	add	r3, r1
 80027be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80027c8:	1ad2      	subs	r2, r2, r3
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	202c      	movs	r0, #44	; 0x2c
 80027d0:	fb00 f303 	mul.w	r3, r0, r3
 80027d4:	440b      	add	r3, r1
 80027d6:	3350      	adds	r3, #80	; 0x50
 80027d8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	212c      	movs	r1, #44	; 0x2c
 80027e0:	fb01 f303 	mul.w	r3, r1, r3
 80027e4:	4413      	add	r3, r2
 80027e6:	3361      	adds	r3, #97	; 0x61
 80027e8:	2201      	movs	r2, #1
 80027ea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	212c      	movs	r1, #44	; 0x2c
 80027f2:	fb01 f303 	mul.w	r3, r1, r3
 80027f6:	4413      	add	r3, r2
 80027f8:	335c      	adds	r3, #92	; 0x5c
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4413      	add	r3, r2
 8002806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280a:	461a      	mov	r2, r3
 800280c:	2301      	movs	r3, #1
 800280e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	212c      	movs	r1, #44	; 0x2c
 8002816:	fb01 f303 	mul.w	r3, r1, r3
 800281a:	4413      	add	r3, r2
 800281c:	333f      	adds	r3, #63	; 0x3f
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d009      	beq.n	8002838 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	212c      	movs	r1, #44	; 0x2c
 800282a:	fb01 f303 	mul.w	r3, r1, r3
 800282e:	4413      	add	r3, r2
 8002830:	333f      	adds	r3, #63	; 0x3f
 8002832:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002834:	2b02      	cmp	r3, #2
 8002836:	d111      	bne.n	800285c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	4611      	mov	r1, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f003 fb47 	bl	8005ed6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4413      	add	r3, r2
 8002850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002854:	461a      	mov	r2, r3
 8002856:	2310      	movs	r3, #16
 8002858:	6093      	str	r3, [r2, #8]
 800285a:	e03a      	b.n	80028d2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	212c      	movs	r1, #44	; 0x2c
 8002862:	fb01 f303 	mul.w	r3, r1, r3
 8002866:	4413      	add	r3, r2
 8002868:	333f      	adds	r3, #63	; 0x3f
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b03      	cmp	r3, #3
 800286e:	d009      	beq.n	8002884 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	212c      	movs	r1, #44	; 0x2c
 8002876:	fb01 f303 	mul.w	r3, r1, r3
 800287a:	4413      	add	r3, r2
 800287c:	333f      	adds	r3, #63	; 0x3f
 800287e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002880:	2b01      	cmp	r3, #1
 8002882:	d126      	bne.n	80028d2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4413      	add	r3, r2
 800288c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	0151      	lsls	r1, r2, #5
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	440a      	add	r2, r1
 800289a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800289e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028a2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	212c      	movs	r1, #44	; 0x2c
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
 80028ae:	4413      	add	r3, r2
 80028b0:	3360      	adds	r3, #96	; 0x60
 80028b2:	2201      	movs	r2, #1
 80028b4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	b2d9      	uxtb	r1, r3
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	202c      	movs	r0, #44	; 0x2c
 80028c0:	fb00 f303 	mul.w	r3, r0, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	3360      	adds	r3, #96	; 0x60
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f005 fd97 	bl	8008400 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d12b      	bne.n	8002932 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	212c      	movs	r1, #44	; 0x2c
 80028e0:	fb01 f303 	mul.w	r3, r1, r3
 80028e4:	4413      	add	r3, r2
 80028e6:	3348      	adds	r3, #72	; 0x48
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	202c      	movs	r0, #44	; 0x2c
 80028f0:	fb00 f202 	mul.w	r2, r0, r2
 80028f4:	440a      	add	r2, r1
 80028f6:	3240      	adds	r2, #64	; 0x40
 80028f8:	8812      	ldrh	r2, [r2, #0]
 80028fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	f000 818e 	beq.w	8002c24 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	212c      	movs	r1, #44	; 0x2c
 800290e:	fb01 f303 	mul.w	r3, r1, r3
 8002912:	4413      	add	r3, r2
 8002914:	3354      	adds	r3, #84	; 0x54
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	f083 0301 	eor.w	r3, r3, #1
 800291c:	b2d8      	uxtb	r0, r3
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	212c      	movs	r1, #44	; 0x2c
 8002924:	fb01 f303 	mul.w	r3, r1, r3
 8002928:	4413      	add	r3, r2
 800292a:	3354      	adds	r3, #84	; 0x54
 800292c:	4602      	mov	r2, r0
 800292e:	701a      	strb	r2, [r3, #0]
}
 8002930:	e178      	b.n	8002c24 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	212c      	movs	r1, #44	; 0x2c
 8002938:	fb01 f303 	mul.w	r3, r1, r3
 800293c:	4413      	add	r3, r2
 800293e:	3354      	adds	r3, #84	; 0x54
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	f083 0301 	eor.w	r3, r3, #1
 8002946:	b2d8      	uxtb	r0, r3
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	212c      	movs	r1, #44	; 0x2c
 800294e:	fb01 f303 	mul.w	r3, r1, r3
 8002952:	4413      	add	r3, r2
 8002954:	3354      	adds	r3, #84	; 0x54
 8002956:	4602      	mov	r2, r0
 8002958:	701a      	strb	r2, [r3, #0]
}
 800295a:	e163      	b.n	8002c24 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4413      	add	r3, r2
 8002964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b02      	cmp	r3, #2
 8002970:	f040 80f6 	bne.w	8002b60 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	212c      	movs	r1, #44	; 0x2c
 800297a:	fb01 f303 	mul.w	r3, r1, r3
 800297e:	4413      	add	r3, r2
 8002980:	3361      	adds	r3, #97	; 0x61
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d109      	bne.n	800299c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	212c      	movs	r1, #44	; 0x2c
 800298e:	fb01 f303 	mul.w	r3, r1, r3
 8002992:	4413      	add	r3, r2
 8002994:	3360      	adds	r3, #96	; 0x60
 8002996:	2201      	movs	r2, #1
 8002998:	701a      	strb	r2, [r3, #0]
 800299a:	e0c9      	b.n	8002b30 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	212c      	movs	r1, #44	; 0x2c
 80029a2:	fb01 f303 	mul.w	r3, r1, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	3361      	adds	r3, #97	; 0x61
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b05      	cmp	r3, #5
 80029ae:	d109      	bne.n	80029c4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	212c      	movs	r1, #44	; 0x2c
 80029b6:	fb01 f303 	mul.w	r3, r1, r3
 80029ba:	4413      	add	r3, r2
 80029bc:	3360      	adds	r3, #96	; 0x60
 80029be:	2205      	movs	r2, #5
 80029c0:	701a      	strb	r2, [r3, #0]
 80029c2:	e0b5      	b.n	8002b30 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	212c      	movs	r1, #44	; 0x2c
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	3361      	adds	r3, #97	; 0x61
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b06      	cmp	r3, #6
 80029d6:	d009      	beq.n	80029ec <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	212c      	movs	r1, #44	; 0x2c
 80029de:	fb01 f303 	mul.w	r3, r1, r3
 80029e2:	4413      	add	r3, r2
 80029e4:	3361      	adds	r3, #97	; 0x61
 80029e6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d150      	bne.n	8002a8e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	212c      	movs	r1, #44	; 0x2c
 80029f2:	fb01 f303 	mul.w	r3, r1, r3
 80029f6:	4413      	add	r3, r2
 80029f8:	335c      	adds	r3, #92	; 0x5c
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	1c5a      	adds	r2, r3, #1
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	202c      	movs	r0, #44	; 0x2c
 8002a04:	fb00 f303 	mul.w	r3, r0, r3
 8002a08:	440b      	add	r3, r1
 8002a0a:	335c      	adds	r3, #92	; 0x5c
 8002a0c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	212c      	movs	r1, #44	; 0x2c
 8002a14:	fb01 f303 	mul.w	r3, r1, r3
 8002a18:	4413      	add	r3, r2
 8002a1a:	335c      	adds	r3, #92	; 0x5c
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d912      	bls.n	8002a48 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	212c      	movs	r1, #44	; 0x2c
 8002a28:	fb01 f303 	mul.w	r3, r1, r3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	335c      	adds	r3, #92	; 0x5c
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	212c      	movs	r1, #44	; 0x2c
 8002a3a:	fb01 f303 	mul.w	r3, r1, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	3360      	adds	r3, #96	; 0x60
 8002a42:	2204      	movs	r2, #4
 8002a44:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a46:	e073      	b.n	8002b30 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	212c      	movs	r1, #44	; 0x2c
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	3360      	adds	r3, #96	; 0x60
 8002a56:	2202      	movs	r2, #2
 8002a58:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a70:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a78:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	015a      	lsls	r2, r3, #5
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4413      	add	r3, r2
 8002a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a86:	461a      	mov	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a8c:	e050      	b.n	8002b30 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	212c      	movs	r1, #44	; 0x2c
 8002a94:	fb01 f303 	mul.w	r3, r1, r3
 8002a98:	4413      	add	r3, r2
 8002a9a:	3361      	adds	r3, #97	; 0x61
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d122      	bne.n	8002ae8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	212c      	movs	r1, #44	; 0x2c
 8002aa8:	fb01 f303 	mul.w	r3, r1, r3
 8002aac:	4413      	add	r3, r2
 8002aae:	3360      	adds	r3, #96	; 0x60
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002aca:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ad2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	015a      	lsls	r2, r3, #5
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4413      	add	r3, r2
 8002adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	e023      	b.n	8002b30 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	212c      	movs	r1, #44	; 0x2c
 8002aee:	fb01 f303 	mul.w	r3, r1, r3
 8002af2:	4413      	add	r3, r2
 8002af4:	3361      	adds	r3, #97	; 0x61
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b07      	cmp	r3, #7
 8002afa:	d119      	bne.n	8002b30 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	212c      	movs	r1, #44	; 0x2c
 8002b02:	fb01 f303 	mul.w	r3, r1, r3
 8002b06:	4413      	add	r3, r2
 8002b08:	335c      	adds	r3, #92	; 0x5c
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	202c      	movs	r0, #44	; 0x2c
 8002b14:	fb00 f303 	mul.w	r3, r0, r3
 8002b18:	440b      	add	r3, r1
 8002b1a:	335c      	adds	r3, #92	; 0x5c
 8002b1c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	212c      	movs	r1, #44	; 0x2c
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	4413      	add	r3, r2
 8002b2a:	3360      	adds	r3, #96	; 0x60
 8002b2c:	2204      	movs	r2, #4
 8002b2e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	015a      	lsls	r2, r3, #5
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	2302      	movs	r3, #2
 8002b40:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	b2d9      	uxtb	r1, r3
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	202c      	movs	r0, #44	; 0x2c
 8002b4c:	fb00 f303 	mul.w	r3, r0, r3
 8002b50:	4413      	add	r3, r2
 8002b52:	3360      	adds	r3, #96	; 0x60
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f005 fc51 	bl	8008400 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b5e:	e061      	b.n	8002c24 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 0310 	and.w	r3, r3, #16
 8002b72:	2b10      	cmp	r3, #16
 8002b74:	d156      	bne.n	8002c24 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	212c      	movs	r1, #44	; 0x2c
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	4413      	add	r3, r2
 8002b82:	333f      	adds	r3, #63	; 0x3f
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d111      	bne.n	8002bae <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	212c      	movs	r1, #44	; 0x2c
 8002b90:	fb01 f303 	mul.w	r3, r1, r3
 8002b94:	4413      	add	r3, r2
 8002b96:	335c      	adds	r3, #92	; 0x5c
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	4611      	mov	r1, r2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f003 f995 	bl	8005ed6 <USB_HC_Halt>
 8002bac:	e031      	b.n	8002c12 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	212c      	movs	r1, #44	; 0x2c
 8002bb4:	fb01 f303 	mul.w	r3, r1, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	333f      	adds	r3, #63	; 0x3f
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d009      	beq.n	8002bd6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	212c      	movs	r1, #44	; 0x2c
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	333f      	adds	r3, #63	; 0x3f
 8002bd0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d11d      	bne.n	8002c12 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	212c      	movs	r1, #44	; 0x2c
 8002bdc:	fb01 f303 	mul.w	r3, r1, r3
 8002be0:	4413      	add	r3, r2
 8002be2:	335c      	adds	r3, #92	; 0x5c
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d110      	bne.n	8002c12 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	212c      	movs	r1, #44	; 0x2c
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3361      	adds	r3, #97	; 0x61
 8002bfe:	2203      	movs	r2, #3
 8002c00:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f003 f962 	bl	8005ed6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	015a      	lsls	r2, r3, #5
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1e:	461a      	mov	r2, r3
 8002c20:	2310      	movs	r3, #16
 8002c22:	6093      	str	r3, [r2, #8]
}
 8002c24:	bf00      	nop
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002c42:	78fb      	ldrb	r3, [r7, #3]
 8002c44:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d11a      	bne.n	8002c92 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c68:	461a      	mov	r2, r3
 8002c6a:	2304      	movs	r3, #4
 8002c6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	212c      	movs	r1, #44	; 0x2c
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	3361      	adds	r3, #97	; 0x61
 8002c7c:	2206      	movs	r2, #6
 8002c7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	4611      	mov	r1, r2
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f003 f923 	bl	8005ed6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002c90:	e331      	b.n	80032f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	015a      	lsls	r2, r3, #5
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 0320 	and.w	r3, r3, #32
 8002ca4:	2b20      	cmp	r3, #32
 8002ca6:	d12e      	bne.n	8002d06 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	2320      	movs	r3, #32
 8002cb8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	212c      	movs	r1, #44	; 0x2c
 8002cc0:	fb01 f303 	mul.w	r3, r1, r3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	333d      	adds	r3, #61	; 0x3d
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	f040 8313 	bne.w	80032f6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	212c      	movs	r1, #44	; 0x2c
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
 8002cda:	4413      	add	r3, r2
 8002cdc:	333d      	adds	r3, #61	; 0x3d
 8002cde:	2200      	movs	r2, #0
 8002ce0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	212c      	movs	r1, #44	; 0x2c
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	4413      	add	r3, r2
 8002cee:	3360      	adds	r3, #96	; 0x60
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f003 f8e9 	bl	8005ed6 <USB_HC_Halt>
}
 8002d04:	e2f7      	b.n	80032f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	015a      	lsls	r2, r3, #5
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d1c:	d112      	bne.n	8002d44 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	015a      	lsls	r2, r3, #5
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	4413      	add	r3, r2
 8002d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d30:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f003 f8ca 	bl	8005ed6 <USB_HC_Halt>
}
 8002d42:	e2d8      	b.n	80032f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	015a      	lsls	r2, r3, #5
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d140      	bne.n	8002ddc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	212c      	movs	r1, #44	; 0x2c
 8002d60:	fb01 f303 	mul.w	r3, r1, r3
 8002d64:	4413      	add	r3, r2
 8002d66:	335c      	adds	r3, #92	; 0x5c
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7e:	2b40      	cmp	r3, #64	; 0x40
 8002d80:	d111      	bne.n	8002da6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	212c      	movs	r1, #44	; 0x2c
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	333d      	adds	r3, #61	; 0x3d
 8002d90:	2201      	movs	r2, #1
 8002d92:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	015a      	lsls	r2, r3, #5
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da0:	461a      	mov	r2, r3
 8002da2:	2340      	movs	r3, #64	; 0x40
 8002da4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db2:	461a      	mov	r2, r3
 8002db4:	2301      	movs	r3, #1
 8002db6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	212c      	movs	r1, #44	; 0x2c
 8002dbe:	fb01 f303 	mul.w	r3, r1, r3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3361      	adds	r3, #97	; 0x61
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f003 f87e 	bl	8005ed6 <USB_HC_Halt>
}
 8002dda:	e28c      	b.n	80032f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dee:	2b40      	cmp	r3, #64	; 0x40
 8002df0:	d12c      	bne.n	8002e4c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	212c      	movs	r1, #44	; 0x2c
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3361      	adds	r3, #97	; 0x61
 8002e00:	2204      	movs	r2, #4
 8002e02:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	212c      	movs	r1, #44	; 0x2c
 8002e0a:	fb01 f303 	mul.w	r3, r1, r3
 8002e0e:	4413      	add	r3, r2
 8002e10:	333d      	adds	r3, #61	; 0x3d
 8002e12:	2201      	movs	r2, #1
 8002e14:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	212c      	movs	r1, #44	; 0x2c
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	4413      	add	r3, r2
 8002e22:	335c      	adds	r3, #92	; 0x5c
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	4611      	mov	r1, r2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f003 f84f 	bl	8005ed6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	015a      	lsls	r2, r3, #5
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e44:	461a      	mov	r2, r3
 8002e46:	2340      	movs	r3, #64	; 0x40
 8002e48:	6093      	str	r3, [r2, #8]
}
 8002e4a:	e254      	b.n	80032f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	d11a      	bne.n	8002e98 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	015a      	lsls	r2, r3, #5
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	4413      	add	r3, r2
 8002e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6e:	461a      	mov	r2, r3
 8002e70:	2308      	movs	r3, #8
 8002e72:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	212c      	movs	r1, #44	; 0x2c
 8002e7a:	fb01 f303 	mul.w	r3, r1, r3
 8002e7e:	4413      	add	r3, r2
 8002e80:	3361      	adds	r3, #97	; 0x61
 8002e82:	2205      	movs	r2, #5
 8002e84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f003 f820 	bl	8005ed6 <USB_HC_Halt>
}
 8002e96:	e22e      	b.n	80032f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 0310 	and.w	r3, r3, #16
 8002eaa:	2b10      	cmp	r3, #16
 8002eac:	d140      	bne.n	8002f30 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	212c      	movs	r1, #44	; 0x2c
 8002eb4:	fb01 f303 	mul.w	r3, r1, r3
 8002eb8:	4413      	add	r3, r2
 8002eba:	335c      	adds	r3, #92	; 0x5c
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	212c      	movs	r1, #44	; 0x2c
 8002ec6:	fb01 f303 	mul.w	r3, r1, r3
 8002eca:	4413      	add	r3, r2
 8002ecc:	3361      	adds	r3, #97	; 0x61
 8002ece:	2203      	movs	r2, #3
 8002ed0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	212c      	movs	r1, #44	; 0x2c
 8002ed8:	fb01 f303 	mul.w	r3, r1, r3
 8002edc:	4413      	add	r3, r2
 8002ede:	333d      	adds	r3, #61	; 0x3d
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d112      	bne.n	8002f0c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	212c      	movs	r1, #44	; 0x2c
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	333c      	adds	r3, #60	; 0x3c
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d108      	bne.n	8002f0c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	212c      	movs	r1, #44	; 0x2c
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	4413      	add	r3, r2
 8002f06:	333d      	adds	r3, #61	; 0x3d
 8002f08:	2201      	movs	r2, #1
 8002f0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f002 ffdd 	bl	8005ed6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f28:	461a      	mov	r2, r3
 8002f2a:	2310      	movs	r3, #16
 8002f2c:	6093      	str	r3, [r2, #8]
}
 8002f2e:	e1e2      	b.n	80032f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f42:	2b80      	cmp	r3, #128	; 0x80
 8002f44:	d164      	bne.n	8003010 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d111      	bne.n	8002f72 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	212c      	movs	r1, #44	; 0x2c
 8002f54:	fb01 f303 	mul.w	r3, r1, r3
 8002f58:	4413      	add	r3, r2
 8002f5a:	3361      	adds	r3, #97	; 0x61
 8002f5c:	2206      	movs	r2, #6
 8002f5e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	4611      	mov	r1, r2
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f002 ffb3 	bl	8005ed6 <USB_HC_Halt>
 8002f70:	e044      	b.n	8002ffc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	212c      	movs	r1, #44	; 0x2c
 8002f78:	fb01 f303 	mul.w	r3, r1, r3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	335c      	adds	r3, #92	; 0x5c
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	202c      	movs	r0, #44	; 0x2c
 8002f8a:	fb00 f303 	mul.w	r3, r0, r3
 8002f8e:	440b      	add	r3, r1
 8002f90:	335c      	adds	r3, #92	; 0x5c
 8002f92:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	212c      	movs	r1, #44	; 0x2c
 8002f9a:	fb01 f303 	mul.w	r3, r1, r3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	335c      	adds	r3, #92	; 0x5c
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d920      	bls.n	8002fea <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	212c      	movs	r1, #44	; 0x2c
 8002fae:	fb01 f303 	mul.w	r3, r1, r3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	335c      	adds	r3, #92	; 0x5c
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	212c      	movs	r1, #44	; 0x2c
 8002fc0:	fb01 f303 	mul.w	r3, r1, r3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3360      	adds	r3, #96	; 0x60
 8002fc8:	2204      	movs	r2, #4
 8002fca:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	b2d9      	uxtb	r1, r3
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	202c      	movs	r0, #44	; 0x2c
 8002fd6:	fb00 f303 	mul.w	r3, r0, r3
 8002fda:	4413      	add	r3, r2
 8002fdc:	3360      	adds	r3, #96	; 0x60
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f005 fa0c 	bl	8008400 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002fe8:	e008      	b.n	8002ffc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	212c      	movs	r1, #44	; 0x2c
 8002ff0:	fb01 f303 	mul.w	r3, r1, r3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3360      	adds	r3, #96	; 0x60
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	015a      	lsls	r2, r3, #5
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	4413      	add	r3, r2
 8003004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003008:	461a      	mov	r2, r3
 800300a:	2380      	movs	r3, #128	; 0x80
 800300c:	6093      	str	r3, [r2, #8]
}
 800300e:	e172      	b.n	80032f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	015a      	lsls	r2, r3, #5
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	4413      	add	r3, r2
 8003018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003026:	d11b      	bne.n	8003060 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	212c      	movs	r1, #44	; 0x2c
 800302e:	fb01 f303 	mul.w	r3, r1, r3
 8003032:	4413      	add	r3, r2
 8003034:	3361      	adds	r3, #97	; 0x61
 8003036:	2208      	movs	r2, #8
 8003038:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	4611      	mov	r1, r2
 8003044:	4618      	mov	r0, r3
 8003046:	f002 ff46 	bl	8005ed6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	015a      	lsls	r2, r3, #5
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	4413      	add	r3, r2
 8003052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003056:	461a      	mov	r2, r3
 8003058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800305c:	6093      	str	r3, [r2, #8]
}
 800305e:	e14a      	b.n	80032f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	4413      	add	r3, r2
 8003068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b02      	cmp	r3, #2
 8003074:	f040 813f 	bne.w	80032f6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	212c      	movs	r1, #44	; 0x2c
 800307e:	fb01 f303 	mul.w	r3, r1, r3
 8003082:	4413      	add	r3, r2
 8003084:	3361      	adds	r3, #97	; 0x61
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d17d      	bne.n	8003188 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	212c      	movs	r1, #44	; 0x2c
 8003092:	fb01 f303 	mul.w	r3, r1, r3
 8003096:	4413      	add	r3, r2
 8003098:	3360      	adds	r3, #96	; 0x60
 800309a:	2201      	movs	r2, #1
 800309c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	212c      	movs	r1, #44	; 0x2c
 80030a4:	fb01 f303 	mul.w	r3, r1, r3
 80030a8:	4413      	add	r3, r2
 80030aa:	333f      	adds	r3, #63	; 0x3f
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d00a      	beq.n	80030c8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	212c      	movs	r1, #44	; 0x2c
 80030b8:	fb01 f303 	mul.w	r3, r1, r3
 80030bc:	4413      	add	r3, r2
 80030be:	333f      	adds	r3, #63	; 0x3f
 80030c0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	f040 8100 	bne.w	80032c8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d113      	bne.n	80030f8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	212c      	movs	r1, #44	; 0x2c
 80030d6:	fb01 f303 	mul.w	r3, r1, r3
 80030da:	4413      	add	r3, r2
 80030dc:	3355      	adds	r3, #85	; 0x55
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	f083 0301 	eor.w	r3, r3, #1
 80030e4:	b2d8      	uxtb	r0, r3
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	212c      	movs	r1, #44	; 0x2c
 80030ec:	fb01 f303 	mul.w	r3, r1, r3
 80030f0:	4413      	add	r3, r2
 80030f2:	3355      	adds	r3, #85	; 0x55
 80030f4:	4602      	mov	r2, r0
 80030f6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	f040 80e3 	bne.w	80032c8 <HCD_HC_OUT_IRQHandler+0x69c>
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	212c      	movs	r1, #44	; 0x2c
 8003108:	fb01 f303 	mul.w	r3, r1, r3
 800310c:	4413      	add	r3, r2
 800310e:	334c      	adds	r3, #76	; 0x4c
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 80d8 	beq.w	80032c8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	212c      	movs	r1, #44	; 0x2c
 800311e:	fb01 f303 	mul.w	r3, r1, r3
 8003122:	4413      	add	r3, r2
 8003124:	334c      	adds	r3, #76	; 0x4c
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	202c      	movs	r0, #44	; 0x2c
 800312e:	fb00 f202 	mul.w	r2, r0, r2
 8003132:	440a      	add	r2, r1
 8003134:	3240      	adds	r2, #64	; 0x40
 8003136:	8812      	ldrh	r2, [r2, #0]
 8003138:	4413      	add	r3, r2
 800313a:	3b01      	subs	r3, #1
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	202c      	movs	r0, #44	; 0x2c
 8003142:	fb00 f202 	mul.w	r2, r0, r2
 8003146:	440a      	add	r2, r1
 8003148:	3240      	adds	r2, #64	; 0x40
 800314a:	8812      	ldrh	r2, [r2, #0]
 800314c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003150:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80b5 	beq.w	80032c8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	212c      	movs	r1, #44	; 0x2c
 8003164:	fb01 f303 	mul.w	r3, r1, r3
 8003168:	4413      	add	r3, r2
 800316a:	3355      	adds	r3, #85	; 0x55
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	f083 0301 	eor.w	r3, r3, #1
 8003172:	b2d8      	uxtb	r0, r3
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	212c      	movs	r1, #44	; 0x2c
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	4413      	add	r3, r2
 8003180:	3355      	adds	r3, #85	; 0x55
 8003182:	4602      	mov	r2, r0
 8003184:	701a      	strb	r2, [r3, #0]
 8003186:	e09f      	b.n	80032c8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	212c      	movs	r1, #44	; 0x2c
 800318e:	fb01 f303 	mul.w	r3, r1, r3
 8003192:	4413      	add	r3, r2
 8003194:	3361      	adds	r3, #97	; 0x61
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b03      	cmp	r3, #3
 800319a:	d109      	bne.n	80031b0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	212c      	movs	r1, #44	; 0x2c
 80031a2:	fb01 f303 	mul.w	r3, r1, r3
 80031a6:	4413      	add	r3, r2
 80031a8:	3360      	adds	r3, #96	; 0x60
 80031aa:	2202      	movs	r2, #2
 80031ac:	701a      	strb	r2, [r3, #0]
 80031ae:	e08b      	b.n	80032c8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	212c      	movs	r1, #44	; 0x2c
 80031b6:	fb01 f303 	mul.w	r3, r1, r3
 80031ba:	4413      	add	r3, r2
 80031bc:	3361      	adds	r3, #97	; 0x61
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d109      	bne.n	80031d8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	212c      	movs	r1, #44	; 0x2c
 80031ca:	fb01 f303 	mul.w	r3, r1, r3
 80031ce:	4413      	add	r3, r2
 80031d0:	3360      	adds	r3, #96	; 0x60
 80031d2:	2202      	movs	r2, #2
 80031d4:	701a      	strb	r2, [r3, #0]
 80031d6:	e077      	b.n	80032c8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	212c      	movs	r1, #44	; 0x2c
 80031de:	fb01 f303 	mul.w	r3, r1, r3
 80031e2:	4413      	add	r3, r2
 80031e4:	3361      	adds	r3, #97	; 0x61
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b05      	cmp	r3, #5
 80031ea:	d109      	bne.n	8003200 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	212c      	movs	r1, #44	; 0x2c
 80031f2:	fb01 f303 	mul.w	r3, r1, r3
 80031f6:	4413      	add	r3, r2
 80031f8:	3360      	adds	r3, #96	; 0x60
 80031fa:	2205      	movs	r2, #5
 80031fc:	701a      	strb	r2, [r3, #0]
 80031fe:	e063      	b.n	80032c8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	212c      	movs	r1, #44	; 0x2c
 8003206:	fb01 f303 	mul.w	r3, r1, r3
 800320a:	4413      	add	r3, r2
 800320c:	3361      	adds	r3, #97	; 0x61
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b06      	cmp	r3, #6
 8003212:	d009      	beq.n	8003228 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	212c      	movs	r1, #44	; 0x2c
 800321a:	fb01 f303 	mul.w	r3, r1, r3
 800321e:	4413      	add	r3, r2
 8003220:	3361      	adds	r3, #97	; 0x61
 8003222:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003224:	2b08      	cmp	r3, #8
 8003226:	d14f      	bne.n	80032c8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	212c      	movs	r1, #44	; 0x2c
 800322e:	fb01 f303 	mul.w	r3, r1, r3
 8003232:	4413      	add	r3, r2
 8003234:	335c      	adds	r3, #92	; 0x5c
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	1c5a      	adds	r2, r3, #1
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	202c      	movs	r0, #44	; 0x2c
 8003240:	fb00 f303 	mul.w	r3, r0, r3
 8003244:	440b      	add	r3, r1
 8003246:	335c      	adds	r3, #92	; 0x5c
 8003248:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	212c      	movs	r1, #44	; 0x2c
 8003250:	fb01 f303 	mul.w	r3, r1, r3
 8003254:	4413      	add	r3, r2
 8003256:	335c      	adds	r3, #92	; 0x5c
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d912      	bls.n	8003284 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	212c      	movs	r1, #44	; 0x2c
 8003264:	fb01 f303 	mul.w	r3, r1, r3
 8003268:	4413      	add	r3, r2
 800326a:	335c      	adds	r3, #92	; 0x5c
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	212c      	movs	r1, #44	; 0x2c
 8003276:	fb01 f303 	mul.w	r3, r1, r3
 800327a:	4413      	add	r3, r2
 800327c:	3360      	adds	r3, #96	; 0x60
 800327e:	2204      	movs	r2, #4
 8003280:	701a      	strb	r2, [r3, #0]
 8003282:	e021      	b.n	80032c8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	212c      	movs	r1, #44	; 0x2c
 800328a:	fb01 f303 	mul.w	r3, r1, r3
 800328e:	4413      	add	r3, r2
 8003290:	3360      	adds	r3, #96	; 0x60
 8003292:	2202      	movs	r2, #2
 8003294:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	4413      	add	r3, r2
 800329e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032ac:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032b4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c2:	461a      	mov	r2, r3
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d4:	461a      	mov	r2, r3
 80032d6:	2302      	movs	r3, #2
 80032d8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	b2d9      	uxtb	r1, r3
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	202c      	movs	r0, #44	; 0x2c
 80032e4:	fb00 f303 	mul.w	r3, r0, r3
 80032e8:	4413      	add	r3, r2
 80032ea:	3360      	adds	r3, #96	; 0x60
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f005 f885 	bl	8008400 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80032f6:	bf00      	nop
 80032f8:	3720      	adds	r7, #32
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b08a      	sub	sp, #40	; 0x28
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	0c5b      	lsrs	r3, r3, #17
 8003324:	f003 030f 	and.w	r3, r3, #15
 8003328:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	091b      	lsrs	r3, r3, #4
 800332e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003332:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d004      	beq.n	8003344 <HCD_RXQLVL_IRQHandler+0x46>
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2b05      	cmp	r3, #5
 800333e:	f000 80a9 	beq.w	8003494 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003342:	e0aa      	b.n	800349a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 80a6 	beq.w	8003498 <HCD_RXQLVL_IRQHandler+0x19a>
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	212c      	movs	r1, #44	; 0x2c
 8003352:	fb01 f303 	mul.w	r3, r1, r3
 8003356:	4413      	add	r3, r2
 8003358:	3344      	adds	r3, #68	; 0x44
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 809b 	beq.w	8003498 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	212c      	movs	r1, #44	; 0x2c
 8003368:	fb01 f303 	mul.w	r3, r1, r3
 800336c:	4413      	add	r3, r2
 800336e:	3350      	adds	r3, #80	; 0x50
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	441a      	add	r2, r3
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	202c      	movs	r0, #44	; 0x2c
 800337c:	fb00 f303 	mul.w	r3, r0, r3
 8003380:	440b      	add	r3, r1
 8003382:	334c      	adds	r3, #76	; 0x4c
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d87a      	bhi.n	8003480 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6818      	ldr	r0, [r3, #0]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	212c      	movs	r1, #44	; 0x2c
 8003394:	fb01 f303 	mul.w	r3, r1, r3
 8003398:	4413      	add	r3, r2
 800339a:	3344      	adds	r3, #68	; 0x44
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	b292      	uxth	r2, r2
 80033a2:	4619      	mov	r1, r3
 80033a4:	f002 f8ee 	bl	8005584 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	212c      	movs	r1, #44	; 0x2c
 80033ae:	fb01 f303 	mul.w	r3, r1, r3
 80033b2:	4413      	add	r3, r2
 80033b4:	3344      	adds	r3, #68	; 0x44
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	441a      	add	r2, r3
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	202c      	movs	r0, #44	; 0x2c
 80033c2:	fb00 f303 	mul.w	r3, r0, r3
 80033c6:	440b      	add	r3, r1
 80033c8:	3344      	adds	r3, #68	; 0x44
 80033ca:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	212c      	movs	r1, #44	; 0x2c
 80033d2:	fb01 f303 	mul.w	r3, r1, r3
 80033d6:	4413      	add	r3, r2
 80033d8:	3350      	adds	r3, #80	; 0x50
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	441a      	add	r2, r3
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	202c      	movs	r0, #44	; 0x2c
 80033e6:	fb00 f303 	mul.w	r3, r0, r3
 80033ea:	440b      	add	r3, r1
 80033ec:	3350      	adds	r3, #80	; 0x50
 80033ee:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	0cdb      	lsrs	r3, r3, #19
 8003400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003404:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	212c      	movs	r1, #44	; 0x2c
 800340c:	fb01 f303 	mul.w	r3, r1, r3
 8003410:	4413      	add	r3, r2
 8003412:	3340      	adds	r3, #64	; 0x40
 8003414:	881b      	ldrh	r3, [r3, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4293      	cmp	r3, r2
 800341c:	d13c      	bne.n	8003498 <HCD_RXQLVL_IRQHandler+0x19a>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d039      	beq.n	8003498 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	015a      	lsls	r2, r3, #5
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	4413      	add	r3, r2
 800342c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800343a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003442:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	015a      	lsls	r2, r3, #5
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	4413      	add	r3, r2
 800344c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003450:	461a      	mov	r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	212c      	movs	r1, #44	; 0x2c
 800345c:	fb01 f303 	mul.w	r3, r1, r3
 8003460:	4413      	add	r3, r2
 8003462:	3354      	adds	r3, #84	; 0x54
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	f083 0301 	eor.w	r3, r3, #1
 800346a:	b2d8      	uxtb	r0, r3
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	212c      	movs	r1, #44	; 0x2c
 8003472:	fb01 f303 	mul.w	r3, r1, r3
 8003476:	4413      	add	r3, r2
 8003478:	3354      	adds	r3, #84	; 0x54
 800347a:	4602      	mov	r2, r0
 800347c:	701a      	strb	r2, [r3, #0]
      break;
 800347e:	e00b      	b.n	8003498 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	212c      	movs	r1, #44	; 0x2c
 8003486:	fb01 f303 	mul.w	r3, r1, r3
 800348a:	4413      	add	r3, r2
 800348c:	3360      	adds	r3, #96	; 0x60
 800348e:	2204      	movs	r2, #4
 8003490:	701a      	strb	r2, [r3, #0]
      break;
 8003492:	e001      	b.n	8003498 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003494:	bf00      	nop
 8003496:	e000      	b.n	800349a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003498:	bf00      	nop
  }
}
 800349a:	bf00      	nop
 800349c:	3728      	adds	r7, #40	; 0x28
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b086      	sub	sp, #24
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80034ce:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d10b      	bne.n	80034f2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d102      	bne.n	80034ea <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f004 ff6f 	bl	80083c8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	f043 0302 	orr.w	r3, r3, #2
 80034f0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f003 0308 	and.w	r3, r3, #8
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d132      	bne.n	8003562 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f043 0308 	orr.w	r3, r3, #8
 8003502:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f003 0304 	and.w	r3, r3, #4
 800350a:	2b04      	cmp	r3, #4
 800350c:	d126      	bne.n	800355c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	2b02      	cmp	r3, #2
 8003514:	d113      	bne.n	800353e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800351c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003520:	d106      	bne.n	8003530 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2102      	movs	r1, #2
 8003528:	4618      	mov	r0, r3
 800352a:	f002 f999 	bl	8005860 <USB_InitFSLSPClkSel>
 800352e:	e011      	b.n	8003554 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2101      	movs	r1, #1
 8003536:	4618      	mov	r0, r3
 8003538:	f002 f992 	bl	8005860 <USB_InitFSLSPClkSel>
 800353c:	e00a      	b.n	8003554 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d106      	bne.n	8003554 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800354c:	461a      	mov	r2, r3
 800354e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003552:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f004 ff61 	bl	800841c <HAL_HCD_PortEnabled_Callback>
 800355a:	e002      	b.n	8003562 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f004 ff6b 	bl	8008438 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f003 0320 	and.w	r3, r3, #32
 8003568:	2b20      	cmp	r3, #32
 800356a:	d103      	bne.n	8003574 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	f043 0320 	orr.w	r3, r3, #32
 8003572:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800357a:	461a      	mov	r2, r3
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	6013      	str	r3, [r2, #0]
}
 8003580:	bf00      	nop
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e267      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d075      	beq.n	8003692 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035a6:	4b88      	ldr	r3, [pc, #544]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 030c 	and.w	r3, r3, #12
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d00c      	beq.n	80035cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035b2:	4b85      	ldr	r3, [pc, #532]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d112      	bne.n	80035e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035be:	4b82      	ldr	r3, [pc, #520]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ca:	d10b      	bne.n	80035e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035cc:	4b7e      	ldr	r3, [pc, #504]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d05b      	beq.n	8003690 <HAL_RCC_OscConfig+0x108>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d157      	bne.n	8003690 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e242      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ec:	d106      	bne.n	80035fc <HAL_RCC_OscConfig+0x74>
 80035ee:	4b76      	ldr	r3, [pc, #472]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a75      	ldr	r2, [pc, #468]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80035f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	e01d      	b.n	8003638 <HAL_RCC_OscConfig+0xb0>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003604:	d10c      	bne.n	8003620 <HAL_RCC_OscConfig+0x98>
 8003606:	4b70      	ldr	r3, [pc, #448]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a6f      	ldr	r2, [pc, #444]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 800360c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	4b6d      	ldr	r3, [pc, #436]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a6c      	ldr	r2, [pc, #432]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	e00b      	b.n	8003638 <HAL_RCC_OscConfig+0xb0>
 8003620:	4b69      	ldr	r3, [pc, #420]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a68      	ldr	r2, [pc, #416]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800362a:	6013      	str	r3, [r2, #0]
 800362c:	4b66      	ldr	r3, [pc, #408]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a65      	ldr	r2, [pc, #404]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d013      	beq.n	8003668 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003640:	f7fd fcb6 	bl	8000fb0 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003648:	f7fd fcb2 	bl	8000fb0 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b64      	cmp	r3, #100	; 0x64
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e207      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365a:	4b5b      	ldr	r3, [pc, #364]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0f0      	beq.n	8003648 <HAL_RCC_OscConfig+0xc0>
 8003666:	e014      	b.n	8003692 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003668:	f7fd fca2 	bl	8000fb0 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003670:	f7fd fc9e 	bl	8000fb0 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b64      	cmp	r3, #100	; 0x64
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e1f3      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003682:	4b51      	ldr	r3, [pc, #324]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f0      	bne.n	8003670 <HAL_RCC_OscConfig+0xe8>
 800368e:	e000      	b.n	8003692 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d063      	beq.n	8003766 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800369e:	4b4a      	ldr	r3, [pc, #296]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 030c 	and.w	r3, r3, #12
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00b      	beq.n	80036c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036aa:	4b47      	ldr	r3, [pc, #284]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d11c      	bne.n	80036f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036b6:	4b44      	ldr	r3, [pc, #272]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d116      	bne.n	80036f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036c2:	4b41      	ldr	r3, [pc, #260]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d005      	beq.n	80036da <HAL_RCC_OscConfig+0x152>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d001      	beq.n	80036da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e1c7      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036da:	4b3b      	ldr	r3, [pc, #236]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	4937      	ldr	r1, [pc, #220]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ee:	e03a      	b.n	8003766 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d020      	beq.n	800373a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036f8:	4b34      	ldr	r3, [pc, #208]	; (80037cc <HAL_RCC_OscConfig+0x244>)
 80036fa:	2201      	movs	r2, #1
 80036fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fe:	f7fd fc57 	bl	8000fb0 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003706:	f7fd fc53 	bl	8000fb0 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e1a8      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003718:	4b2b      	ldr	r3, [pc, #172]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0f0      	beq.n	8003706 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003724:	4b28      	ldr	r3, [pc, #160]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	4925      	ldr	r1, [pc, #148]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003734:	4313      	orrs	r3, r2
 8003736:	600b      	str	r3, [r1, #0]
 8003738:	e015      	b.n	8003766 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800373a:	4b24      	ldr	r3, [pc, #144]	; (80037cc <HAL_RCC_OscConfig+0x244>)
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7fd fc36 	bl	8000fb0 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003748:	f7fd fc32 	bl	8000fb0 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e187      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800375a:	4b1b      	ldr	r3, [pc, #108]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f0      	bne.n	8003748 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b00      	cmp	r3, #0
 8003770:	d036      	beq.n	80037e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d016      	beq.n	80037a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800377a:	4b15      	ldr	r3, [pc, #84]	; (80037d0 <HAL_RCC_OscConfig+0x248>)
 800377c:	2201      	movs	r2, #1
 800377e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003780:	f7fd fc16 	bl	8000fb0 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003788:	f7fd fc12 	bl	8000fb0 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e167      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800379a:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 800379c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0f0      	beq.n	8003788 <HAL_RCC_OscConfig+0x200>
 80037a6:	e01b      	b.n	80037e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037a8:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <HAL_RCC_OscConfig+0x248>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ae:	f7fd fbff 	bl	8000fb0 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b4:	e00e      	b.n	80037d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037b6:	f7fd fbfb 	bl	8000fb0 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d907      	bls.n	80037d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e150      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
 80037c8:	40023800 	.word	0x40023800
 80037cc:	42470000 	.word	0x42470000
 80037d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d4:	4b88      	ldr	r3, [pc, #544]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 80037d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1ea      	bne.n	80037b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 8097 	beq.w	800391c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ee:	2300      	movs	r3, #0
 80037f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037f2:	4b81      	ldr	r3, [pc, #516]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10f      	bne.n	800381e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037fe:	2300      	movs	r3, #0
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	4b7d      	ldr	r3, [pc, #500]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	4a7c      	ldr	r2, [pc, #496]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800380c:	6413      	str	r3, [r2, #64]	; 0x40
 800380e:	4b7a      	ldr	r3, [pc, #488]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003816:	60bb      	str	r3, [r7, #8]
 8003818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800381a:	2301      	movs	r3, #1
 800381c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381e:	4b77      	ldr	r3, [pc, #476]	; (80039fc <HAL_RCC_OscConfig+0x474>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003826:	2b00      	cmp	r3, #0
 8003828:	d118      	bne.n	800385c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800382a:	4b74      	ldr	r3, [pc, #464]	; (80039fc <HAL_RCC_OscConfig+0x474>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a73      	ldr	r2, [pc, #460]	; (80039fc <HAL_RCC_OscConfig+0x474>)
 8003830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003836:	f7fd fbbb 	bl	8000fb0 <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800383e:	f7fd fbb7 	bl	8000fb0 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e10c      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003850:	4b6a      	ldr	r3, [pc, #424]	; (80039fc <HAL_RCC_OscConfig+0x474>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0f0      	beq.n	800383e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d106      	bne.n	8003872 <HAL_RCC_OscConfig+0x2ea>
 8003864:	4b64      	ldr	r3, [pc, #400]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003868:	4a63      	ldr	r2, [pc, #396]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	6713      	str	r3, [r2, #112]	; 0x70
 8003870:	e01c      	b.n	80038ac <HAL_RCC_OscConfig+0x324>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2b05      	cmp	r3, #5
 8003878:	d10c      	bne.n	8003894 <HAL_RCC_OscConfig+0x30c>
 800387a:	4b5f      	ldr	r3, [pc, #380]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 800387c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387e:	4a5e      	ldr	r2, [pc, #376]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003880:	f043 0304 	orr.w	r3, r3, #4
 8003884:	6713      	str	r3, [r2, #112]	; 0x70
 8003886:	4b5c      	ldr	r3, [pc, #368]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388a:	4a5b      	ldr	r2, [pc, #364]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 800388c:	f043 0301 	orr.w	r3, r3, #1
 8003890:	6713      	str	r3, [r2, #112]	; 0x70
 8003892:	e00b      	b.n	80038ac <HAL_RCC_OscConfig+0x324>
 8003894:	4b58      	ldr	r3, [pc, #352]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003898:	4a57      	ldr	r2, [pc, #348]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 800389a:	f023 0301 	bic.w	r3, r3, #1
 800389e:	6713      	str	r3, [r2, #112]	; 0x70
 80038a0:	4b55      	ldr	r3, [pc, #340]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 80038a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a4:	4a54      	ldr	r2, [pc, #336]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 80038a6:	f023 0304 	bic.w	r3, r3, #4
 80038aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d015      	beq.n	80038e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b4:	f7fd fb7c 	bl	8000fb0 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ba:	e00a      	b.n	80038d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038bc:	f7fd fb78 	bl	8000fb0 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e0cb      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d2:	4b49      	ldr	r3, [pc, #292]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 80038d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0ee      	beq.n	80038bc <HAL_RCC_OscConfig+0x334>
 80038de:	e014      	b.n	800390a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e0:	f7fd fb66 	bl	8000fb0 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e6:	e00a      	b.n	80038fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038e8:	f7fd fb62 	bl	8000fb0 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e0b5      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038fe:	4b3e      	ldr	r3, [pc, #248]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1ee      	bne.n	80038e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800390a:	7dfb      	ldrb	r3, [r7, #23]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d105      	bne.n	800391c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003910:	4b39      	ldr	r3, [pc, #228]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	4a38      	ldr	r2, [pc, #224]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800391a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80a1 	beq.w	8003a68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003926:	4b34      	ldr	r3, [pc, #208]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 030c 	and.w	r3, r3, #12
 800392e:	2b08      	cmp	r3, #8
 8003930:	d05c      	beq.n	80039ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	2b02      	cmp	r3, #2
 8003938:	d141      	bne.n	80039be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393a:	4b31      	ldr	r3, [pc, #196]	; (8003a00 <HAL_RCC_OscConfig+0x478>)
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003940:	f7fd fb36 	bl	8000fb0 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003948:	f7fd fb32 	bl	8000fb0 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e087      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395a:	4b27      	ldr	r3, [pc, #156]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69da      	ldr	r2, [r3, #28]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	019b      	lsls	r3, r3, #6
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397c:	085b      	lsrs	r3, r3, #1
 800397e:	3b01      	subs	r3, #1
 8003980:	041b      	lsls	r3, r3, #16
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003988:	061b      	lsls	r3, r3, #24
 800398a:	491b      	ldr	r1, [pc, #108]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 800398c:	4313      	orrs	r3, r2
 800398e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003990:	4b1b      	ldr	r3, [pc, #108]	; (8003a00 <HAL_RCC_OscConfig+0x478>)
 8003992:	2201      	movs	r2, #1
 8003994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003996:	f7fd fb0b 	bl	8000fb0 <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800399c:	e008      	b.n	80039b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800399e:	f7fd fb07 	bl	8000fb0 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e05c      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b0:	4b11      	ldr	r3, [pc, #68]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0f0      	beq.n	800399e <HAL_RCC_OscConfig+0x416>
 80039bc:	e054      	b.n	8003a68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039be:	4b10      	ldr	r3, [pc, #64]	; (8003a00 <HAL_RCC_OscConfig+0x478>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c4:	f7fd faf4 	bl	8000fb0 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039cc:	f7fd faf0 	bl	8000fb0 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e045      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039de:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0x444>
 80039ea:	e03d      	b.n	8003a68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d107      	bne.n	8003a04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e038      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
 80039f8:	40023800 	.word	0x40023800
 80039fc:	40007000 	.word	0x40007000
 8003a00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a04:	4b1b      	ldr	r3, [pc, #108]	; (8003a74 <HAL_RCC_OscConfig+0x4ec>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d028      	beq.n	8003a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d121      	bne.n	8003a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d11a      	bne.n	8003a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a34:	4013      	ands	r3, r2
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d111      	bne.n	8003a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4a:	085b      	lsrs	r3, r3, #1
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d107      	bne.n	8003a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d001      	beq.n	8003a68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3718      	adds	r7, #24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40023800 	.word	0x40023800

08003a78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e0cc      	b.n	8003c26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a8c:	4b68      	ldr	r3, [pc, #416]	; (8003c30 <HAL_RCC_ClockConfig+0x1b8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d90c      	bls.n	8003ab4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9a:	4b65      	ldr	r3, [pc, #404]	; (8003c30 <HAL_RCC_ClockConfig+0x1b8>)
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa2:	4b63      	ldr	r3, [pc, #396]	; (8003c30 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d001      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e0b8      	b.n	8003c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d020      	beq.n	8003b02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003acc:	4b59      	ldr	r3, [pc, #356]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	4a58      	ldr	r2, [pc, #352]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ad6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ae4:	4b53      	ldr	r3, [pc, #332]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	4a52      	ldr	r2, [pc, #328]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003aee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003af0:	4b50      	ldr	r3, [pc, #320]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	494d      	ldr	r1, [pc, #308]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d044      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d107      	bne.n	8003b26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b16:	4b47      	ldr	r3, [pc, #284]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d119      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e07f      	b.n	8003c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d003      	beq.n	8003b36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b32:	2b03      	cmp	r3, #3
 8003b34:	d107      	bne.n	8003b46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b36:	4b3f      	ldr	r3, [pc, #252]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d109      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e06f      	b.n	8003c26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b46:	4b3b      	ldr	r3, [pc, #236]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e067      	b.n	8003c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b56:	4b37      	ldr	r3, [pc, #220]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f023 0203 	bic.w	r2, r3, #3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	4934      	ldr	r1, [pc, #208]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b68:	f7fd fa22 	bl	8000fb0 <HAL_GetTick>
 8003b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6e:	e00a      	b.n	8003b86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b70:	f7fd fa1e 	bl	8000fb0 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e04f      	b.n	8003c26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b86:	4b2b      	ldr	r3, [pc, #172]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 020c 	and.w	r2, r3, #12
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d1eb      	bne.n	8003b70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b98:	4b25      	ldr	r3, [pc, #148]	; (8003c30 <HAL_RCC_ClockConfig+0x1b8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d20c      	bcs.n	8003bc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba6:	4b22      	ldr	r3, [pc, #136]	; (8003c30 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bae:	4b20      	ldr	r3, [pc, #128]	; (8003c30 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d001      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e032      	b.n	8003c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d008      	beq.n	8003bde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bcc:	4b19      	ldr	r3, [pc, #100]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	4916      	ldr	r1, [pc, #88]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d009      	beq.n	8003bfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bea:	4b12      	ldr	r3, [pc, #72]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	490e      	ldr	r1, [pc, #56]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bfe:	f000 f821 	bl	8003c44 <HAL_RCC_GetSysClockFreq>
 8003c02:	4602      	mov	r2, r0
 8003c04:	4b0b      	ldr	r3, [pc, #44]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	091b      	lsrs	r3, r3, #4
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	490a      	ldr	r1, [pc, #40]	; (8003c38 <HAL_RCC_ClockConfig+0x1c0>)
 8003c10:	5ccb      	ldrb	r3, [r1, r3]
 8003c12:	fa22 f303 	lsr.w	r3, r2, r3
 8003c16:	4a09      	ldr	r2, [pc, #36]	; (8003c3c <HAL_RCC_ClockConfig+0x1c4>)
 8003c18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c1a:	4b09      	ldr	r3, [pc, #36]	; (8003c40 <HAL_RCC_ClockConfig+0x1c8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fd f982 	bl	8000f28 <HAL_InitTick>

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	40023c00 	.word	0x40023c00
 8003c34:	40023800 	.word	0x40023800
 8003c38:	08009ca0 	.word	0x08009ca0
 8003c3c:	20000000 	.word	0x20000000
 8003c40:	20000004 	.word	0x20000004

08003c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c48:	b090      	sub	sp, #64	; 0x40
 8003c4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c50:	2300      	movs	r3, #0
 8003c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c54:	2300      	movs	r3, #0
 8003c56:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c5c:	4b59      	ldr	r3, [pc, #356]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 030c 	and.w	r3, r3, #12
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d00d      	beq.n	8003c84 <HAL_RCC_GetSysClockFreq+0x40>
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	f200 80a1 	bhi.w	8003db0 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <HAL_RCC_GetSysClockFreq+0x34>
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d003      	beq.n	8003c7e <HAL_RCC_GetSysClockFreq+0x3a>
 8003c76:	e09b      	b.n	8003db0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c78:	4b53      	ldr	r3, [pc, #332]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c7a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c7c:	e09b      	b.n	8003db6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c7e:	4b53      	ldr	r3, [pc, #332]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x188>)
 8003c80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c82:	e098      	b.n	8003db6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c84:	4b4f      	ldr	r3, [pc, #316]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c8c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c8e:	4b4d      	ldr	r3, [pc, #308]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d028      	beq.n	8003cec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c9a:	4b4a      	ldr	r3, [pc, #296]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	099b      	lsrs	r3, r3, #6
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	623b      	str	r3, [r7, #32]
 8003ca4:	627a      	str	r2, [r7, #36]	; 0x24
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003cac:	2100      	movs	r1, #0
 8003cae:	4b47      	ldr	r3, [pc, #284]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x188>)
 8003cb0:	fb03 f201 	mul.w	r2, r3, r1
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	fb00 f303 	mul.w	r3, r0, r3
 8003cba:	4413      	add	r3, r2
 8003cbc:	4a43      	ldr	r2, [pc, #268]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x188>)
 8003cbe:	fba0 1202 	umull	r1, r2, r0, r2
 8003cc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cc4:	460a      	mov	r2, r1
 8003cc6:	62ba      	str	r2, [r7, #40]	; 0x28
 8003cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cca:	4413      	add	r3, r2
 8003ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	61bb      	str	r3, [r7, #24]
 8003cd4:	61fa      	str	r2, [r7, #28]
 8003cd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003cde:	f7fc facf 	bl	8000280 <__aeabi_uldivmod>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cea:	e053      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cec:	4b35      	ldr	r3, [pc, #212]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	099b      	lsrs	r3, r3, #6
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	613b      	str	r3, [r7, #16]
 8003cf6:	617a      	str	r2, [r7, #20]
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003cfe:	f04f 0b00 	mov.w	fp, #0
 8003d02:	4652      	mov	r2, sl
 8003d04:	465b      	mov	r3, fp
 8003d06:	f04f 0000 	mov.w	r0, #0
 8003d0a:	f04f 0100 	mov.w	r1, #0
 8003d0e:	0159      	lsls	r1, r3, #5
 8003d10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d14:	0150      	lsls	r0, r2, #5
 8003d16:	4602      	mov	r2, r0
 8003d18:	460b      	mov	r3, r1
 8003d1a:	ebb2 080a 	subs.w	r8, r2, sl
 8003d1e:	eb63 090b 	sbc.w	r9, r3, fp
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	f04f 0300 	mov.w	r3, #0
 8003d2a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d2e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d32:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d36:	ebb2 0408 	subs.w	r4, r2, r8
 8003d3a:	eb63 0509 	sbc.w	r5, r3, r9
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	f04f 0300 	mov.w	r3, #0
 8003d46:	00eb      	lsls	r3, r5, #3
 8003d48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d4c:	00e2      	lsls	r2, r4, #3
 8003d4e:	4614      	mov	r4, r2
 8003d50:	461d      	mov	r5, r3
 8003d52:	eb14 030a 	adds.w	r3, r4, sl
 8003d56:	603b      	str	r3, [r7, #0]
 8003d58:	eb45 030b 	adc.w	r3, r5, fp
 8003d5c:	607b      	str	r3, [r7, #4]
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	f04f 0300 	mov.w	r3, #0
 8003d66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d6a:	4629      	mov	r1, r5
 8003d6c:	028b      	lsls	r3, r1, #10
 8003d6e:	4621      	mov	r1, r4
 8003d70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d74:	4621      	mov	r1, r4
 8003d76:	028a      	lsls	r2, r1, #10
 8003d78:	4610      	mov	r0, r2
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d7e:	2200      	movs	r2, #0
 8003d80:	60bb      	str	r3, [r7, #8]
 8003d82:	60fa      	str	r2, [r7, #12]
 8003d84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d88:	f7fc fa7a 	bl	8000280 <__aeabi_uldivmod>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4613      	mov	r3, r2
 8003d92:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d94:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	0c1b      	lsrs	r3, r3, #16
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	3301      	adds	r3, #1
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003da4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003dae:	e002      	b.n	8003db6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003db0:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003db2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003db4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3740      	adds	r7, #64	; 0x40
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dc2:	bf00      	nop
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	00f42400 	.word	0x00f42400
 8003dcc:	017d7840 	.word	0x017d7840

08003dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dd4:	4b03      	ldr	r3, [pc, #12]	; (8003de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	20000000 	.word	0x20000000

08003de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dec:	f7ff fff0 	bl	8003dd0 <HAL_RCC_GetHCLKFreq>
 8003df0:	4602      	mov	r2, r0
 8003df2:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	0a9b      	lsrs	r3, r3, #10
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	4903      	ldr	r1, [pc, #12]	; (8003e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dfe:	5ccb      	ldrb	r3, [r1, r3]
 8003e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	08009cb0 	.word	0x08009cb0

08003e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e14:	f7ff ffdc 	bl	8003dd0 <HAL_RCC_GetHCLKFreq>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	0b5b      	lsrs	r3, r3, #13
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	4903      	ldr	r1, [pc, #12]	; (8003e34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e26:	5ccb      	ldrb	r3, [r1, r3]
 8003e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40023800 	.word	0x40023800
 8003e34:	08009cb0 	.word	0x08009cb0

08003e38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e03f      	b.n	8003eca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d106      	bne.n	8003e64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7fc fe36 	bl	8000ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2224      	movs	r2, #36	; 0x24
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 ff9b 	bl	8004db8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695a      	ldr	r2, [r3, #20]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ea0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003eb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b08a      	sub	sp, #40	; 0x28
 8003ed6:	af02      	add	r7, sp, #8
 8003ed8:	60f8      	str	r0, [r7, #12]
 8003eda:	60b9      	str	r1, [r7, #8]
 8003edc:	603b      	str	r3, [r7, #0]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b20      	cmp	r3, #32
 8003ef0:	d17c      	bne.n	8003fec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d002      	beq.n	8003efe <HAL_UART_Transmit+0x2c>
 8003ef8:	88fb      	ldrh	r3, [r7, #6]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e075      	b.n	8003fee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_UART_Transmit+0x3e>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e06e      	b.n	8003fee <HAL_UART_Transmit+0x11c>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2221      	movs	r2, #33	; 0x21
 8003f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f26:	f7fd f843 	bl	8000fb0 <HAL_GetTick>
 8003f2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	88fa      	ldrh	r2, [r7, #6]
 8003f30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	88fa      	ldrh	r2, [r7, #6]
 8003f36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f40:	d108      	bne.n	8003f54 <HAL_UART_Transmit+0x82>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d104      	bne.n	8003f54 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	61bb      	str	r3, [r7, #24]
 8003f52:	e003      	b.n	8003f5c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f64:	e02a      	b.n	8003fbc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	2180      	movs	r1, #128	; 0x80
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 fc53 	bl	800481c <UART_WaitOnFlagUntilTimeout>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e036      	b.n	8003fee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10b      	bne.n	8003f9e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	3302      	adds	r3, #2
 8003f9a:	61bb      	str	r3, [r7, #24]
 8003f9c:	e007      	b.n	8003fae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	781a      	ldrb	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	3301      	adds	r3, #1
 8003fac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1cf      	bne.n	8003f66 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	2140      	movs	r1, #64	; 0x40
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 fc23 	bl	800481c <UART_WaitOnFlagUntilTimeout>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e006      	b.n	8003fee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	e000      	b.n	8003fee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003fec:	2302      	movs	r3, #2
  }
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3720      	adds	r7, #32
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b08c      	sub	sp, #48	; 0x30
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	60f8      	str	r0, [r7, #12]
 8003ffe:	60b9      	str	r1, [r7, #8]
 8004000:	4613      	mov	r3, r2
 8004002:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b20      	cmp	r3, #32
 800400e:	d152      	bne.n	80040b6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004016:	88fb      	ldrh	r3, [r7, #6]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e04b      	b.n	80040b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004026:	2b01      	cmp	r3, #1
 8004028:	d101      	bne.n	800402e <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800402a:	2302      	movs	r3, #2
 800402c:	e044      	b.n	80040b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2201      	movs	r2, #1
 800403a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800403c:	88fb      	ldrh	r3, [r7, #6]
 800403e:	461a      	mov	r2, r3
 8004040:	68b9      	ldr	r1, [r7, #8]
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 fc58 	bl	80048f8 <UART_Start_Receive_DMA>
 8004048:	4603      	mov	r3, r0
 800404a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800404e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004052:	2b00      	cmp	r3, #0
 8004054:	d12c      	bne.n	80040b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405a:	2b01      	cmp	r3, #1
 800405c:	d125      	bne.n	80040aa <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800405e:	2300      	movs	r3, #0
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	613b      	str	r3, [r7, #16]
 8004072:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	330c      	adds	r3, #12
 800407a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	e853 3f00 	ldrex	r3, [r3]
 8004082:	617b      	str	r3, [r7, #20]
   return(result);
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f043 0310 	orr.w	r3, r3, #16
 800408a:	62bb      	str	r3, [r7, #40]	; 0x28
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	330c      	adds	r3, #12
 8004092:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004094:	627a      	str	r2, [r7, #36]	; 0x24
 8004096:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004098:	6a39      	ldr	r1, [r7, #32]
 800409a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800409c:	e841 2300 	strex	r3, r2, [r1]
 80040a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1e5      	bne.n	8004074 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80040a8:	e002      	b.n	80040b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80040b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80040b4:	e000      	b.n	80040b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80040b6:	2302      	movs	r3, #2
  }
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3730      	adds	r7, #48	; 0x30
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b0ba      	sub	sp, #232	; 0xe8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80040fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10f      	bne.n	8004126 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800410a:	f003 0320 	and.w	r3, r3, #32
 800410e:	2b00      	cmp	r3, #0
 8004110:	d009      	beq.n	8004126 <HAL_UART_IRQHandler+0x66>
 8004112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fd8f 	bl	8004c42 <UART_Receive_IT>
      return;
 8004124:	e256      	b.n	80045d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004126:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 80de 	beq.w	80042ec <HAL_UART_IRQHandler+0x22c>
 8004130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d106      	bne.n	800414a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800413c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004140:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 80d1 	beq.w	80042ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800414a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00b      	beq.n	800416e <HAL_UART_IRQHandler+0xae>
 8004156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800415a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415e:	2b00      	cmp	r3, #0
 8004160:	d005      	beq.n	800416e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	f043 0201 	orr.w	r2, r3, #1
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800416e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00b      	beq.n	8004192 <HAL_UART_IRQHandler+0xd2>
 800417a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d005      	beq.n	8004192 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	f043 0202 	orr.w	r2, r3, #2
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00b      	beq.n	80041b6 <HAL_UART_IRQHandler+0xf6>
 800419e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d005      	beq.n	80041b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	f043 0204 	orr.w	r2, r3, #4
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d011      	beq.n	80041e6 <HAL_UART_IRQHandler+0x126>
 80041c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d105      	bne.n	80041da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80041ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d005      	beq.n	80041e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	f043 0208 	orr.w	r2, r3, #8
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 81ed 	beq.w	80045ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <HAL_UART_IRQHandler+0x14e>
 80041fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b00      	cmp	r3, #0
 8004206:	d002      	beq.n	800420e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 fd1a 	bl	8004c42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004218:	2b40      	cmp	r3, #64	; 0x40
 800421a:	bf0c      	ite	eq
 800421c:	2301      	moveq	r3, #1
 800421e:	2300      	movne	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d103      	bne.n	800423a <HAL_UART_IRQHandler+0x17a>
 8004232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004236:	2b00      	cmp	r3, #0
 8004238:	d04f      	beq.n	80042da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 fc22 	bl	8004a84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424a:	2b40      	cmp	r3, #64	; 0x40
 800424c:	d141      	bne.n	80042d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3314      	adds	r3, #20
 8004254:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004258:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800425c:	e853 3f00 	ldrex	r3, [r3]
 8004260:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004264:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800426c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	3314      	adds	r3, #20
 8004276:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800427a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800427e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004282:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004286:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800428a:	e841 2300 	strex	r3, r2, [r1]
 800428e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004292:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1d9      	bne.n	800424e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d013      	beq.n	80042ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a6:	4a7d      	ldr	r2, [pc, #500]	; (800449c <HAL_UART_IRQHandler+0x3dc>)
 80042a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fd f936 	bl	8001520 <HAL_DMA_Abort_IT>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d016      	beq.n	80042e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042c4:	4610      	mov	r0, r2
 80042c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c8:	e00e      	b.n	80042e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f9a4 	bl	8004618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d0:	e00a      	b.n	80042e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f9a0 	bl	8004618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d8:	e006      	b.n	80042e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f99c 	bl	8004618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80042e6:	e170      	b.n	80045ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e8:	bf00      	nop
    return;
 80042ea:	e16e      	b.n	80045ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	f040 814a 	bne.w	800458a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80042f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042fa:	f003 0310 	and.w	r3, r3, #16
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 8143 	beq.w	800458a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004308:	f003 0310 	and.w	r3, r3, #16
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 813c 	beq.w	800458a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004312:	2300      	movs	r3, #0
 8004314:	60bb      	str	r3, [r7, #8]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	60bb      	str	r3, [r7, #8]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	60bb      	str	r3, [r7, #8]
 8004326:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004332:	2b40      	cmp	r3, #64	; 0x40
 8004334:	f040 80b4 	bne.w	80044a0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004344:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 8140 	beq.w	80045ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004352:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004356:	429a      	cmp	r2, r3
 8004358:	f080 8139 	bcs.w	80045ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004362:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800436e:	f000 8088 	beq.w	8004482 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	330c      	adds	r3, #12
 8004378:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004380:	e853 3f00 	ldrex	r3, [r3]
 8004384:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004388:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800438c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004390:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	330c      	adds	r3, #12
 800439a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800439e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80043a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80043aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80043ae:	e841 2300 	strex	r3, r2, [r1]
 80043b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80043b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1d9      	bne.n	8004372 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3314      	adds	r3, #20
 80043c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043c8:	e853 3f00 	ldrex	r3, [r3]
 80043cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80043ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043d0:	f023 0301 	bic.w	r3, r3, #1
 80043d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3314      	adds	r3, #20
 80043de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80043e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80043ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80043ee:	e841 2300 	strex	r3, r2, [r1]
 80043f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80043f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1e1      	bne.n	80043be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3314      	adds	r3, #20
 8004400:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004402:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004404:	e853 3f00 	ldrex	r3, [r3]
 8004408:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800440a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800440c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004410:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	3314      	adds	r3, #20
 800441a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800441e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004420:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004422:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004424:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004426:	e841 2300 	strex	r3, r2, [r1]
 800442a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800442c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e3      	bne.n	80043fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2220      	movs	r2, #32
 8004436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	330c      	adds	r3, #12
 8004446:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800444a:	e853 3f00 	ldrex	r3, [r3]
 800444e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004452:	f023 0310 	bic.w	r3, r3, #16
 8004456:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	330c      	adds	r3, #12
 8004460:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004464:	65ba      	str	r2, [r7, #88]	; 0x58
 8004466:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004468:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800446a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800446c:	e841 2300 	strex	r3, r2, [r1]
 8004470:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e3      	bne.n	8004440 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447c:	4618      	mov	r0, r3
 800447e:	f7fc ffdf 	bl	8001440 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800448a:	b29b      	uxth	r3, r3
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	b29b      	uxth	r3, r3
 8004490:	4619      	mov	r1, r3
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7fc f8be 	bl	8000614 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004498:	e099      	b.n	80045ce <HAL_UART_IRQHandler+0x50e>
 800449a:	bf00      	nop
 800449c:	08004b4b 	.word	0x08004b4b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 808b 	beq.w	80045d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80044bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 8086 	beq.w	80045d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	330c      	adds	r3, #12
 80044cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d0:	e853 3f00 	ldrex	r3, [r3]
 80044d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	330c      	adds	r3, #12
 80044e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80044ea:	647a      	str	r2, [r7, #68]	; 0x44
 80044ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044f2:	e841 2300 	strex	r3, r2, [r1]
 80044f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1e3      	bne.n	80044c6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	3314      	adds	r3, #20
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	e853 3f00 	ldrex	r3, [r3]
 800450c:	623b      	str	r3, [r7, #32]
   return(result);
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	f023 0301 	bic.w	r3, r3, #1
 8004514:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3314      	adds	r3, #20
 800451e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004522:	633a      	str	r2, [r7, #48]	; 0x30
 8004524:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004526:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800452a:	e841 2300 	strex	r3, r2, [r1]
 800452e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1e3      	bne.n	80044fe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2220      	movs	r2, #32
 800453a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	330c      	adds	r3, #12
 800454a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	e853 3f00 	ldrex	r3, [r3]
 8004552:	60fb      	str	r3, [r7, #12]
   return(result);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0310 	bic.w	r3, r3, #16
 800455a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	330c      	adds	r3, #12
 8004564:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004568:	61fa      	str	r2, [r7, #28]
 800456a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456c:	69b9      	ldr	r1, [r7, #24]
 800456e:	69fa      	ldr	r2, [r7, #28]
 8004570:	e841 2300 	strex	r3, r2, [r1]
 8004574:	617b      	str	r3, [r7, #20]
   return(result);
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1e3      	bne.n	8004544 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800457c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004580:	4619      	mov	r1, r3
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7fc f846 	bl	8000614 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004588:	e023      	b.n	80045d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800458a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800458e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004592:	2b00      	cmp	r3, #0
 8004594:	d009      	beq.n	80045aa <HAL_UART_IRQHandler+0x4ea>
 8004596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800459a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fae5 	bl	8004b72 <UART_Transmit_IT>
    return;
 80045a8:	e014      	b.n	80045d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00e      	beq.n	80045d4 <HAL_UART_IRQHandler+0x514>
 80045b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d008      	beq.n	80045d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 fb25 	bl	8004c12 <UART_EndTransmit_IT>
    return;
 80045c8:	e004      	b.n	80045d4 <HAL_UART_IRQHandler+0x514>
    return;
 80045ca:	bf00      	nop
 80045cc:	e002      	b.n	80045d4 <HAL_UART_IRQHandler+0x514>
      return;
 80045ce:	bf00      	nop
 80045d0:	e000      	b.n	80045d4 <HAL_UART_IRQHandler+0x514>
      return;
 80045d2:	bf00      	nop
  }
}
 80045d4:	37e8      	adds	r7, #232	; 0xe8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop

080045dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b09c      	sub	sp, #112	; 0x70
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004638:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004644:	2b00      	cmp	r3, #0
 8004646:	d172      	bne.n	800472e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800464a:	2200      	movs	r2, #0
 800464c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800464e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	330c      	adds	r3, #12
 8004654:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004658:	e853 3f00 	ldrex	r3, [r3]
 800465c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800465e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004664:	66bb      	str	r3, [r7, #104]	; 0x68
 8004666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	330c      	adds	r3, #12
 800466c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800466e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004670:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004672:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004674:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004676:	e841 2300 	strex	r3, r2, [r1]
 800467a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800467c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1e5      	bne.n	800464e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3314      	adds	r3, #20
 8004688:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468c:	e853 3f00 	ldrex	r3, [r3]
 8004690:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004694:	f023 0301 	bic.w	r3, r3, #1
 8004698:	667b      	str	r3, [r7, #100]	; 0x64
 800469a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	3314      	adds	r3, #20
 80046a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80046a2:	647a      	str	r2, [r7, #68]	; 0x44
 80046a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046aa:	e841 2300 	strex	r3, r2, [r1]
 80046ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e5      	bne.n	8004682 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3314      	adds	r3, #20
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	e853 3f00 	ldrex	r3, [r3]
 80046c4:	623b      	str	r3, [r7, #32]
   return(result);
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046cc:	663b      	str	r3, [r7, #96]	; 0x60
 80046ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3314      	adds	r3, #20
 80046d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046d6:	633a      	str	r2, [r7, #48]	; 0x30
 80046d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046de:	e841 2300 	strex	r3, r2, [r1]
 80046e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1e5      	bne.n	80046b6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ec:	2220      	movs	r2, #32
 80046ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d119      	bne.n	800472e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	330c      	adds	r3, #12
 8004700:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	e853 3f00 	ldrex	r3, [r3]
 8004708:	60fb      	str	r3, [r7, #12]
   return(result);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f023 0310 	bic.w	r3, r3, #16
 8004710:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	330c      	adds	r3, #12
 8004718:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800471a:	61fa      	str	r2, [r7, #28]
 800471c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471e:	69b9      	ldr	r1, [r7, #24]
 8004720:	69fa      	ldr	r2, [r7, #28]
 8004722:	e841 2300 	strex	r3, r2, [r1]
 8004726:	617b      	str	r3, [r7, #20]
   return(result);
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1e5      	bne.n	80046fa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800472e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	2b01      	cmp	r3, #1
 8004734:	d106      	bne.n	8004744 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004738:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800473a:	4619      	mov	r1, r3
 800473c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800473e:	f7fb ff69 	bl	8000614 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004742:	e002      	b.n	800474a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004744:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004746:	f7ff ff53 	bl	80045f0 <HAL_UART_RxCpltCallback>
}
 800474a:	bf00      	nop
 800474c:	3770      	adds	r7, #112	; 0x70
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b084      	sub	sp, #16
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004764:	2b01      	cmp	r3, #1
 8004766:	d108      	bne.n	800477a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800476c:	085b      	lsrs	r3, r3, #1
 800476e:	b29b      	uxth	r3, r3
 8004770:	4619      	mov	r1, r3
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f7fb ff4e 	bl	8000614 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004778:	e002      	b.n	8004780 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f7ff ff42 	bl	8004604 <HAL_UART_RxHalfCpltCallback>
}
 8004780:	bf00      	nop
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004790:	2300      	movs	r3, #0
 8004792:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004798:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a4:	2b80      	cmp	r3, #128	; 0x80
 80047a6:	bf0c      	ite	eq
 80047a8:	2301      	moveq	r3, #1
 80047aa:	2300      	movne	r3, #0
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b21      	cmp	r3, #33	; 0x21
 80047ba:	d108      	bne.n	80047ce <UART_DMAError+0x46>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d005      	beq.n	80047ce <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	2200      	movs	r2, #0
 80047c6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80047c8:	68b8      	ldr	r0, [r7, #8]
 80047ca:	f000 f933 	bl	8004a34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d8:	2b40      	cmp	r3, #64	; 0x40
 80047da:	bf0c      	ite	eq
 80047dc:	2301      	moveq	r3, #1
 80047de:	2300      	movne	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b22      	cmp	r3, #34	; 0x22
 80047ee:	d108      	bne.n	8004802 <UART_DMAError+0x7a>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d005      	beq.n	8004802 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2200      	movs	r2, #0
 80047fa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80047fc:	68b8      	ldr	r0, [r7, #8]
 80047fe:	f000 f941 	bl	8004a84 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	f043 0210 	orr.w	r2, r3, #16
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800480e:	68b8      	ldr	r0, [r7, #8]
 8004810:	f7ff ff02 	bl	8004618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004814:	bf00      	nop
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b090      	sub	sp, #64	; 0x40
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	603b      	str	r3, [r7, #0]
 8004828:	4613      	mov	r3, r2
 800482a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800482c:	e050      	b.n	80048d0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800482e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004830:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004834:	d04c      	beq.n	80048d0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004838:	2b00      	cmp	r3, #0
 800483a:	d007      	beq.n	800484c <UART_WaitOnFlagUntilTimeout+0x30>
 800483c:	f7fc fbb8 	bl	8000fb0 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004848:	429a      	cmp	r2, r3
 800484a:	d241      	bcs.n	80048d0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	330c      	adds	r3, #12
 8004852:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004856:	e853 3f00 	ldrex	r3, [r3]
 800485a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004862:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	330c      	adds	r3, #12
 800486a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800486c:	637a      	str	r2, [r7, #52]	; 0x34
 800486e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004870:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004872:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004874:	e841 2300 	strex	r3, r2, [r1]
 8004878:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800487a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1e5      	bne.n	800484c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3314      	adds	r3, #20
 8004886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	e853 3f00 	ldrex	r3, [r3]
 800488e:	613b      	str	r3, [r7, #16]
   return(result);
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f023 0301 	bic.w	r3, r3, #1
 8004896:	63bb      	str	r3, [r7, #56]	; 0x38
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3314      	adds	r3, #20
 800489e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048a0:	623a      	str	r2, [r7, #32]
 80048a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a4:	69f9      	ldr	r1, [r7, #28]
 80048a6:	6a3a      	ldr	r2, [r7, #32]
 80048a8:	e841 2300 	strex	r3, r2, [r1]
 80048ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1e5      	bne.n	8004880 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2220      	movs	r2, #32
 80048c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e00f      	b.n	80048f0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	4013      	ands	r3, r2
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	429a      	cmp	r2, r3
 80048de:	bf0c      	ite	eq
 80048e0:	2301      	moveq	r3, #1
 80048e2:	2300      	movne	r3, #0
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	461a      	mov	r2, r3
 80048e8:	79fb      	ldrb	r3, [r7, #7]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d09f      	beq.n	800482e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3740      	adds	r7, #64	; 0x40
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b098      	sub	sp, #96	; 0x60
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	4613      	mov	r3, r2
 8004904:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	88fa      	ldrh	r2, [r7, #6]
 8004910:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2222      	movs	r2, #34	; 0x22
 800491c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004924:	4a40      	ldr	r2, [pc, #256]	; (8004a28 <UART_Start_Receive_DMA+0x130>)
 8004926:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492c:	4a3f      	ldr	r2, [pc, #252]	; (8004a2c <UART_Start_Receive_DMA+0x134>)
 800492e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004934:	4a3e      	ldr	r2, [pc, #248]	; (8004a30 <UART_Start_Receive_DMA+0x138>)
 8004936:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493c:	2200      	movs	r2, #0
 800493e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004940:	f107 0308 	add.w	r3, r7, #8
 8004944:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3304      	adds	r3, #4
 8004950:	4619      	mov	r1, r3
 8004952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	88fb      	ldrh	r3, [r7, #6]
 8004958:	f7fc fd1a 	bl	8001390 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800495c:	2300      	movs	r3, #0
 800495e:	613b      	str	r3, [r7, #16]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	613b      	str	r3, [r7, #16]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	613b      	str	r3, [r7, #16]
 8004970:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d019      	beq.n	80049b6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	330c      	adds	r3, #12
 8004988:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800498c:	e853 3f00 	ldrex	r3, [r3]
 8004990:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004998:	65bb      	str	r3, [r7, #88]	; 0x58
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	330c      	adds	r3, #12
 80049a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049a2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80049a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80049a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049aa:	e841 2300 	strex	r3, r2, [r1]
 80049ae:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80049b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1e5      	bne.n	8004982 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3314      	adds	r3, #20
 80049bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c0:	e853 3f00 	ldrex	r3, [r3]
 80049c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c8:	f043 0301 	orr.w	r3, r3, #1
 80049cc:	657b      	str	r3, [r7, #84]	; 0x54
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	3314      	adds	r3, #20
 80049d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80049d6:	63ba      	str	r2, [r7, #56]	; 0x38
 80049d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80049dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049de:	e841 2300 	strex	r3, r2, [r1]
 80049e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1e5      	bne.n	80049b6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	3314      	adds	r3, #20
 80049f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	e853 3f00 	ldrex	r3, [r3]
 80049f8:	617b      	str	r3, [r7, #20]
   return(result);
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a00:	653b      	str	r3, [r7, #80]	; 0x50
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3314      	adds	r3, #20
 8004a08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004a0a:	627a      	str	r2, [r7, #36]	; 0x24
 8004a0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0e:	6a39      	ldr	r1, [r7, #32]
 8004a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a12:	e841 2300 	strex	r3, r2, [r1]
 8004a16:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1e5      	bne.n	80049ea <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3760      	adds	r7, #96	; 0x60
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	0800462d 	.word	0x0800462d
 8004a2c:	08004753 	.word	0x08004753
 8004a30:	08004789 	.word	0x08004789

08004a34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b089      	sub	sp, #36	; 0x24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	330c      	adds	r3, #12
 8004a42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	e853 3f00 	ldrex	r3, [r3]
 8004a4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004a52:	61fb      	str	r3, [r7, #28]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	330c      	adds	r3, #12
 8004a5a:	69fa      	ldr	r2, [r7, #28]
 8004a5c:	61ba      	str	r2, [r7, #24]
 8004a5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a60:	6979      	ldr	r1, [r7, #20]
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	e841 2300 	strex	r3, r2, [r1]
 8004a68:	613b      	str	r3, [r7, #16]
   return(result);
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1e5      	bne.n	8004a3c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004a78:	bf00      	nop
 8004a7a:	3724      	adds	r7, #36	; 0x24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b095      	sub	sp, #84	; 0x54
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	330c      	adds	r3, #12
 8004a92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a96:	e853 3f00 	ldrex	r3, [r3]
 8004a9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	330c      	adds	r3, #12
 8004aaa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004aac:	643a      	str	r2, [r7, #64]	; 0x40
 8004aae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ab2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ab4:	e841 2300 	strex	r3, r2, [r1]
 8004ab8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1e5      	bne.n	8004a8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3314      	adds	r3, #20
 8004ac6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	e853 3f00 	ldrex	r3, [r3]
 8004ace:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	f023 0301 	bic.w	r3, r3, #1
 8004ad6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	3314      	adds	r3, #20
 8004ade:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ae0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ae2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ae8:	e841 2300 	strex	r3, r2, [r1]
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1e5      	bne.n	8004ac0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d119      	bne.n	8004b30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	330c      	adds	r3, #12
 8004b02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	e853 3f00 	ldrex	r3, [r3]
 8004b0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f023 0310 	bic.w	r3, r3, #16
 8004b12:	647b      	str	r3, [r7, #68]	; 0x44
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	330c      	adds	r3, #12
 8004b1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b1c:	61ba      	str	r2, [r7, #24]
 8004b1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b20:	6979      	ldr	r1, [r7, #20]
 8004b22:	69ba      	ldr	r2, [r7, #24]
 8004b24:	e841 2300 	strex	r3, r2, [r1]
 8004b28:	613b      	str	r3, [r7, #16]
   return(result);
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1e5      	bne.n	8004afc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2220      	movs	r2, #32
 8004b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b3e:	bf00      	nop
 8004b40:	3754      	adds	r7, #84	; 0x54
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b084      	sub	sp, #16
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f7ff fd57 	bl	8004618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b6a:	bf00      	nop
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b085      	sub	sp, #20
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b21      	cmp	r3, #33	; 0x21
 8004b84:	d13e      	bne.n	8004c04 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b8e:	d114      	bne.n	8004bba <UART_Transmit_IT+0x48>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d110      	bne.n	8004bba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	1c9a      	adds	r2, r3, #2
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	621a      	str	r2, [r3, #32]
 8004bb8:	e008      	b.n	8004bcc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	1c59      	adds	r1, r3, #1
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6211      	str	r1, [r2, #32]
 8004bc4:	781a      	ldrb	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	4619      	mov	r1, r3
 8004bda:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10f      	bne.n	8004c00 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68da      	ldr	r2, [r3, #12]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68da      	ldr	r2, [r3, #12]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bfe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	e000      	b.n	8004c06 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c04:	2302      	movs	r3, #2
  }
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b082      	sub	sp, #8
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68da      	ldr	r2, [r3, #12]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7ff fcd2 	bl	80045dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b08c      	sub	sp, #48	; 0x30
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b22      	cmp	r3, #34	; 0x22
 8004c54:	f040 80ab 	bne.w	8004dae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c60:	d117      	bne.n	8004c92 <UART_Receive_IT+0x50>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d113      	bne.n	8004c92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c72:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8a:	1c9a      	adds	r2, r3, #2
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	629a      	str	r2, [r3, #40]	; 0x28
 8004c90:	e026      	b.n	8004ce0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c96:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca4:	d007      	beq.n	8004cb6 <UART_Receive_IT+0x74>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10a      	bne.n	8004cc4 <UART_Receive_IT+0x82>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d106      	bne.n	8004cc4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc0:	701a      	strb	r2, [r3, #0]
 8004cc2:	e008      	b.n	8004cd6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	4619      	mov	r1, r3
 8004cee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d15a      	bne.n	8004daa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 0220 	bic.w	r2, r2, #32
 8004d02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68da      	ldr	r2, [r3, #12]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	695a      	ldr	r2, [r3, #20]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0201 	bic.w	r2, r2, #1
 8004d22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2220      	movs	r2, #32
 8004d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d135      	bne.n	8004da0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	330c      	adds	r3, #12
 8004d40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	e853 3f00 	ldrex	r3, [r3]
 8004d48:	613b      	str	r3, [r7, #16]
   return(result);
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	f023 0310 	bic.w	r3, r3, #16
 8004d50:	627b      	str	r3, [r7, #36]	; 0x24
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	330c      	adds	r3, #12
 8004d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d5a:	623a      	str	r2, [r7, #32]
 8004d5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5e:	69f9      	ldr	r1, [r7, #28]
 8004d60:	6a3a      	ldr	r2, [r7, #32]
 8004d62:	e841 2300 	strex	r3, r2, [r1]
 8004d66:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1e5      	bne.n	8004d3a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0310 	and.w	r3, r3, #16
 8004d78:	2b10      	cmp	r3, #16
 8004d7a:	d10a      	bne.n	8004d92 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60fb      	str	r3, [r7, #12]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d96:	4619      	mov	r1, r3
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7fb fc3b 	bl	8000614 <HAL_UARTEx_RxEventCallback>
 8004d9e:	e002      	b.n	8004da6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f7ff fc25 	bl	80045f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004da6:	2300      	movs	r3, #0
 8004da8:	e002      	b.n	8004db0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	e000      	b.n	8004db0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004dae:	2302      	movs	r3, #2
  }
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3730      	adds	r7, #48	; 0x30
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dbc:	b0c0      	sub	sp, #256	; 0x100
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd4:	68d9      	ldr	r1, [r3, #12]
 8004dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	ea40 0301 	orr.w	r3, r0, r1
 8004de0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	431a      	orrs	r2, r3
 8004df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	431a      	orrs	r2, r3
 8004df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e10:	f021 010c 	bic.w	r1, r1, #12
 8004e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e1e:	430b      	orrs	r3, r1
 8004e20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e32:	6999      	ldr	r1, [r3, #24]
 8004e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	ea40 0301 	orr.w	r3, r0, r1
 8004e3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	4b8f      	ldr	r3, [pc, #572]	; (8005084 <UART_SetConfig+0x2cc>)
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d005      	beq.n	8004e58 <UART_SetConfig+0xa0>
 8004e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	4b8d      	ldr	r3, [pc, #564]	; (8005088 <UART_SetConfig+0x2d0>)
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d104      	bne.n	8004e62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e58:	f7fe ffda 	bl	8003e10 <HAL_RCC_GetPCLK2Freq>
 8004e5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e60:	e003      	b.n	8004e6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e62:	f7fe ffc1 	bl	8003de8 <HAL_RCC_GetPCLK1Freq>
 8004e66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e74:	f040 810c 	bne.w	8005090 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e8a:	4622      	mov	r2, r4
 8004e8c:	462b      	mov	r3, r5
 8004e8e:	1891      	adds	r1, r2, r2
 8004e90:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e92:	415b      	adcs	r3, r3
 8004e94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e9a:	4621      	mov	r1, r4
 8004e9c:	eb12 0801 	adds.w	r8, r2, r1
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	eb43 0901 	adc.w	r9, r3, r1
 8004ea6:	f04f 0200 	mov.w	r2, #0
 8004eaa:	f04f 0300 	mov.w	r3, #0
 8004eae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004eb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eba:	4690      	mov	r8, r2
 8004ebc:	4699      	mov	r9, r3
 8004ebe:	4623      	mov	r3, r4
 8004ec0:	eb18 0303 	adds.w	r3, r8, r3
 8004ec4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ec8:	462b      	mov	r3, r5
 8004eca:	eb49 0303 	adc.w	r3, r9, r3
 8004ece:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ede:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ee2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	18db      	adds	r3, r3, r3
 8004eea:	653b      	str	r3, [r7, #80]	; 0x50
 8004eec:	4613      	mov	r3, r2
 8004eee:	eb42 0303 	adc.w	r3, r2, r3
 8004ef2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ef4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ef8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004efc:	f7fb f9c0 	bl	8000280 <__aeabi_uldivmod>
 8004f00:	4602      	mov	r2, r0
 8004f02:	460b      	mov	r3, r1
 8004f04:	4b61      	ldr	r3, [pc, #388]	; (800508c <UART_SetConfig+0x2d4>)
 8004f06:	fba3 2302 	umull	r2, r3, r3, r2
 8004f0a:	095b      	lsrs	r3, r3, #5
 8004f0c:	011c      	lsls	r4, r3, #4
 8004f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f12:	2200      	movs	r2, #0
 8004f14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f20:	4642      	mov	r2, r8
 8004f22:	464b      	mov	r3, r9
 8004f24:	1891      	adds	r1, r2, r2
 8004f26:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f28:	415b      	adcs	r3, r3
 8004f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f30:	4641      	mov	r1, r8
 8004f32:	eb12 0a01 	adds.w	sl, r2, r1
 8004f36:	4649      	mov	r1, r9
 8004f38:	eb43 0b01 	adc.w	fp, r3, r1
 8004f3c:	f04f 0200 	mov.w	r2, #0
 8004f40:	f04f 0300 	mov.w	r3, #0
 8004f44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f50:	4692      	mov	sl, r2
 8004f52:	469b      	mov	fp, r3
 8004f54:	4643      	mov	r3, r8
 8004f56:	eb1a 0303 	adds.w	r3, sl, r3
 8004f5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f5e:	464b      	mov	r3, r9
 8004f60:	eb4b 0303 	adc.w	r3, fp, r3
 8004f64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	18db      	adds	r3, r3, r3
 8004f80:	643b      	str	r3, [r7, #64]	; 0x40
 8004f82:	4613      	mov	r3, r2
 8004f84:	eb42 0303 	adc.w	r3, r2, r3
 8004f88:	647b      	str	r3, [r7, #68]	; 0x44
 8004f8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f92:	f7fb f975 	bl	8000280 <__aeabi_uldivmod>
 8004f96:	4602      	mov	r2, r0
 8004f98:	460b      	mov	r3, r1
 8004f9a:	4611      	mov	r1, r2
 8004f9c:	4b3b      	ldr	r3, [pc, #236]	; (800508c <UART_SetConfig+0x2d4>)
 8004f9e:	fba3 2301 	umull	r2, r3, r3, r1
 8004fa2:	095b      	lsrs	r3, r3, #5
 8004fa4:	2264      	movs	r2, #100	; 0x64
 8004fa6:	fb02 f303 	mul.w	r3, r2, r3
 8004faa:	1acb      	subs	r3, r1, r3
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004fb2:	4b36      	ldr	r3, [pc, #216]	; (800508c <UART_SetConfig+0x2d4>)
 8004fb4:	fba3 2302 	umull	r2, r3, r3, r2
 8004fb8:	095b      	lsrs	r3, r3, #5
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fc0:	441c      	add	r4, r3
 8004fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fcc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004fd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004fd4:	4642      	mov	r2, r8
 8004fd6:	464b      	mov	r3, r9
 8004fd8:	1891      	adds	r1, r2, r2
 8004fda:	63b9      	str	r1, [r7, #56]	; 0x38
 8004fdc:	415b      	adcs	r3, r3
 8004fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fe0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004fe4:	4641      	mov	r1, r8
 8004fe6:	1851      	adds	r1, r2, r1
 8004fe8:	6339      	str	r1, [r7, #48]	; 0x30
 8004fea:	4649      	mov	r1, r9
 8004fec:	414b      	adcs	r3, r1
 8004fee:	637b      	str	r3, [r7, #52]	; 0x34
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	f04f 0300 	mov.w	r3, #0
 8004ff8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ffc:	4659      	mov	r1, fp
 8004ffe:	00cb      	lsls	r3, r1, #3
 8005000:	4651      	mov	r1, sl
 8005002:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005006:	4651      	mov	r1, sl
 8005008:	00ca      	lsls	r2, r1, #3
 800500a:	4610      	mov	r0, r2
 800500c:	4619      	mov	r1, r3
 800500e:	4603      	mov	r3, r0
 8005010:	4642      	mov	r2, r8
 8005012:	189b      	adds	r3, r3, r2
 8005014:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005018:	464b      	mov	r3, r9
 800501a:	460a      	mov	r2, r1
 800501c:	eb42 0303 	adc.w	r3, r2, r3
 8005020:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005030:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005034:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005038:	460b      	mov	r3, r1
 800503a:	18db      	adds	r3, r3, r3
 800503c:	62bb      	str	r3, [r7, #40]	; 0x28
 800503e:	4613      	mov	r3, r2
 8005040:	eb42 0303 	adc.w	r3, r2, r3
 8005044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005046:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800504a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800504e:	f7fb f917 	bl	8000280 <__aeabi_uldivmod>
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	4b0d      	ldr	r3, [pc, #52]	; (800508c <UART_SetConfig+0x2d4>)
 8005058:	fba3 1302 	umull	r1, r3, r3, r2
 800505c:	095b      	lsrs	r3, r3, #5
 800505e:	2164      	movs	r1, #100	; 0x64
 8005060:	fb01 f303 	mul.w	r3, r1, r3
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	3332      	adds	r3, #50	; 0x32
 800506a:	4a08      	ldr	r2, [pc, #32]	; (800508c <UART_SetConfig+0x2d4>)
 800506c:	fba2 2303 	umull	r2, r3, r2, r3
 8005070:	095b      	lsrs	r3, r3, #5
 8005072:	f003 0207 	and.w	r2, r3, #7
 8005076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4422      	add	r2, r4
 800507e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005080:	e105      	b.n	800528e <UART_SetConfig+0x4d6>
 8005082:	bf00      	nop
 8005084:	40011000 	.word	0x40011000
 8005088:	40011400 	.word	0x40011400
 800508c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005090:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005094:	2200      	movs	r2, #0
 8005096:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800509a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800509e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80050a2:	4642      	mov	r2, r8
 80050a4:	464b      	mov	r3, r9
 80050a6:	1891      	adds	r1, r2, r2
 80050a8:	6239      	str	r1, [r7, #32]
 80050aa:	415b      	adcs	r3, r3
 80050ac:	627b      	str	r3, [r7, #36]	; 0x24
 80050ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050b2:	4641      	mov	r1, r8
 80050b4:	1854      	adds	r4, r2, r1
 80050b6:	4649      	mov	r1, r9
 80050b8:	eb43 0501 	adc.w	r5, r3, r1
 80050bc:	f04f 0200 	mov.w	r2, #0
 80050c0:	f04f 0300 	mov.w	r3, #0
 80050c4:	00eb      	lsls	r3, r5, #3
 80050c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050ca:	00e2      	lsls	r2, r4, #3
 80050cc:	4614      	mov	r4, r2
 80050ce:	461d      	mov	r5, r3
 80050d0:	4643      	mov	r3, r8
 80050d2:	18e3      	adds	r3, r4, r3
 80050d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050d8:	464b      	mov	r3, r9
 80050da:	eb45 0303 	adc.w	r3, r5, r3
 80050de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050f2:	f04f 0200 	mov.w	r2, #0
 80050f6:	f04f 0300 	mov.w	r3, #0
 80050fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80050fe:	4629      	mov	r1, r5
 8005100:	008b      	lsls	r3, r1, #2
 8005102:	4621      	mov	r1, r4
 8005104:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005108:	4621      	mov	r1, r4
 800510a:	008a      	lsls	r2, r1, #2
 800510c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005110:	f7fb f8b6 	bl	8000280 <__aeabi_uldivmod>
 8005114:	4602      	mov	r2, r0
 8005116:	460b      	mov	r3, r1
 8005118:	4b60      	ldr	r3, [pc, #384]	; (800529c <UART_SetConfig+0x4e4>)
 800511a:	fba3 2302 	umull	r2, r3, r3, r2
 800511e:	095b      	lsrs	r3, r3, #5
 8005120:	011c      	lsls	r4, r3, #4
 8005122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005126:	2200      	movs	r2, #0
 8005128:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800512c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005130:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005134:	4642      	mov	r2, r8
 8005136:	464b      	mov	r3, r9
 8005138:	1891      	adds	r1, r2, r2
 800513a:	61b9      	str	r1, [r7, #24]
 800513c:	415b      	adcs	r3, r3
 800513e:	61fb      	str	r3, [r7, #28]
 8005140:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005144:	4641      	mov	r1, r8
 8005146:	1851      	adds	r1, r2, r1
 8005148:	6139      	str	r1, [r7, #16]
 800514a:	4649      	mov	r1, r9
 800514c:	414b      	adcs	r3, r1
 800514e:	617b      	str	r3, [r7, #20]
 8005150:	f04f 0200 	mov.w	r2, #0
 8005154:	f04f 0300 	mov.w	r3, #0
 8005158:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800515c:	4659      	mov	r1, fp
 800515e:	00cb      	lsls	r3, r1, #3
 8005160:	4651      	mov	r1, sl
 8005162:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005166:	4651      	mov	r1, sl
 8005168:	00ca      	lsls	r2, r1, #3
 800516a:	4610      	mov	r0, r2
 800516c:	4619      	mov	r1, r3
 800516e:	4603      	mov	r3, r0
 8005170:	4642      	mov	r2, r8
 8005172:	189b      	adds	r3, r3, r2
 8005174:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005178:	464b      	mov	r3, r9
 800517a:	460a      	mov	r2, r1
 800517c:	eb42 0303 	adc.w	r3, r2, r3
 8005180:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	67bb      	str	r3, [r7, #120]	; 0x78
 800518e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005190:	f04f 0200 	mov.w	r2, #0
 8005194:	f04f 0300 	mov.w	r3, #0
 8005198:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800519c:	4649      	mov	r1, r9
 800519e:	008b      	lsls	r3, r1, #2
 80051a0:	4641      	mov	r1, r8
 80051a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051a6:	4641      	mov	r1, r8
 80051a8:	008a      	lsls	r2, r1, #2
 80051aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80051ae:	f7fb f867 	bl	8000280 <__aeabi_uldivmod>
 80051b2:	4602      	mov	r2, r0
 80051b4:	460b      	mov	r3, r1
 80051b6:	4b39      	ldr	r3, [pc, #228]	; (800529c <UART_SetConfig+0x4e4>)
 80051b8:	fba3 1302 	umull	r1, r3, r3, r2
 80051bc:	095b      	lsrs	r3, r3, #5
 80051be:	2164      	movs	r1, #100	; 0x64
 80051c0:	fb01 f303 	mul.w	r3, r1, r3
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	3332      	adds	r3, #50	; 0x32
 80051ca:	4a34      	ldr	r2, [pc, #208]	; (800529c <UART_SetConfig+0x4e4>)
 80051cc:	fba2 2303 	umull	r2, r3, r2, r3
 80051d0:	095b      	lsrs	r3, r3, #5
 80051d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051d6:	441c      	add	r4, r3
 80051d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051dc:	2200      	movs	r2, #0
 80051de:	673b      	str	r3, [r7, #112]	; 0x70
 80051e0:	677a      	str	r2, [r7, #116]	; 0x74
 80051e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80051e6:	4642      	mov	r2, r8
 80051e8:	464b      	mov	r3, r9
 80051ea:	1891      	adds	r1, r2, r2
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	415b      	adcs	r3, r3
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051f6:	4641      	mov	r1, r8
 80051f8:	1851      	adds	r1, r2, r1
 80051fa:	6039      	str	r1, [r7, #0]
 80051fc:	4649      	mov	r1, r9
 80051fe:	414b      	adcs	r3, r1
 8005200:	607b      	str	r3, [r7, #4]
 8005202:	f04f 0200 	mov.w	r2, #0
 8005206:	f04f 0300 	mov.w	r3, #0
 800520a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800520e:	4659      	mov	r1, fp
 8005210:	00cb      	lsls	r3, r1, #3
 8005212:	4651      	mov	r1, sl
 8005214:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005218:	4651      	mov	r1, sl
 800521a:	00ca      	lsls	r2, r1, #3
 800521c:	4610      	mov	r0, r2
 800521e:	4619      	mov	r1, r3
 8005220:	4603      	mov	r3, r0
 8005222:	4642      	mov	r2, r8
 8005224:	189b      	adds	r3, r3, r2
 8005226:	66bb      	str	r3, [r7, #104]	; 0x68
 8005228:	464b      	mov	r3, r9
 800522a:	460a      	mov	r2, r1
 800522c:	eb42 0303 	adc.w	r3, r2, r3
 8005230:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	663b      	str	r3, [r7, #96]	; 0x60
 800523c:	667a      	str	r2, [r7, #100]	; 0x64
 800523e:	f04f 0200 	mov.w	r2, #0
 8005242:	f04f 0300 	mov.w	r3, #0
 8005246:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800524a:	4649      	mov	r1, r9
 800524c:	008b      	lsls	r3, r1, #2
 800524e:	4641      	mov	r1, r8
 8005250:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005254:	4641      	mov	r1, r8
 8005256:	008a      	lsls	r2, r1, #2
 8005258:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800525c:	f7fb f810 	bl	8000280 <__aeabi_uldivmod>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4b0d      	ldr	r3, [pc, #52]	; (800529c <UART_SetConfig+0x4e4>)
 8005266:	fba3 1302 	umull	r1, r3, r3, r2
 800526a:	095b      	lsrs	r3, r3, #5
 800526c:	2164      	movs	r1, #100	; 0x64
 800526e:	fb01 f303 	mul.w	r3, r1, r3
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	011b      	lsls	r3, r3, #4
 8005276:	3332      	adds	r3, #50	; 0x32
 8005278:	4a08      	ldr	r2, [pc, #32]	; (800529c <UART_SetConfig+0x4e4>)
 800527a:	fba2 2303 	umull	r2, r3, r2, r3
 800527e:	095b      	lsrs	r3, r3, #5
 8005280:	f003 020f 	and.w	r2, r3, #15
 8005284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4422      	add	r2, r4
 800528c:	609a      	str	r2, [r3, #8]
}
 800528e:	bf00      	nop
 8005290:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005294:	46bd      	mov	sp, r7
 8005296:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800529a:	bf00      	nop
 800529c:	51eb851f 	.word	0x51eb851f

080052a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052a0:	b084      	sub	sp, #16
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b084      	sub	sp, #16
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
 80052aa:	f107 001c 	add.w	r0, r7, #28
 80052ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d122      	bne.n	80052fe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80052cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d105      	bne.n	80052f2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f9c0 	bl	8005678 <USB_CoreReset>
 80052f8:	4603      	mov	r3, r0
 80052fa:	73fb      	strb	r3, [r7, #15]
 80052fc:	e01a      	b.n	8005334 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f9b4 	bl	8005678 <USB_CoreReset>
 8005310:	4603      	mov	r3, r0
 8005312:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005316:	2b00      	cmp	r3, #0
 8005318:	d106      	bne.n	8005328 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	639a      	str	r2, [r3, #56]	; 0x38
 8005326:	e005      	b.n	8005334 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005336:	2b01      	cmp	r3, #1
 8005338:	d10b      	bne.n	8005352 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f043 0206 	orr.w	r2, r3, #6
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f043 0220 	orr.w	r2, r3, #32
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005352:	7bfb      	ldrb	r3, [r7, #15]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800535e:	b004      	add	sp, #16
 8005360:	4770      	bx	lr

08005362 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005362:	b480      	push	{r7}
 8005364:	b083      	sub	sp, #12
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f043 0201 	orr.w	r2, r3, #1
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f023 0201 	bic.w	r2, r3, #1
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b084      	sub	sp, #16
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
 80053ae:	460b      	mov	r3, r1
 80053b0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80053c2:	78fb      	ldrb	r3, [r7, #3]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d115      	bne.n	80053f4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053d4:	2001      	movs	r0, #1
 80053d6:	f7fb fdf7 	bl	8000fc8 <HAL_Delay>
      ms++;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	3301      	adds	r3, #1
 80053de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f93a 	bl	800565a <USB_GetMode>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d01e      	beq.n	800542a <USB_SetCurrentMode+0x84>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2b31      	cmp	r3, #49	; 0x31
 80053f0:	d9f0      	bls.n	80053d4 <USB_SetCurrentMode+0x2e>
 80053f2:	e01a      	b.n	800542a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80053f4:	78fb      	ldrb	r3, [r7, #3]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d115      	bne.n	8005426 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005406:	2001      	movs	r0, #1
 8005408:	f7fb fdde 	bl	8000fc8 <HAL_Delay>
      ms++;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	3301      	adds	r3, #1
 8005410:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f921 	bl	800565a <USB_GetMode>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d005      	beq.n	800542a <USB_SetCurrentMode+0x84>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2b31      	cmp	r3, #49	; 0x31
 8005422:	d9f0      	bls.n	8005406 <USB_SetCurrentMode+0x60>
 8005424:	e001      	b.n	800542a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e005      	b.n	8005436 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2b32      	cmp	r3, #50	; 0x32
 800542e:	d101      	bne.n	8005434 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e000      	b.n	8005436 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
	...

08005440 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800544a:	2300      	movs	r3, #0
 800544c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	3301      	adds	r3, #1
 8005452:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4a13      	ldr	r2, [pc, #76]	; (80054a4 <USB_FlushTxFifo+0x64>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d901      	bls.n	8005460 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e01b      	b.n	8005498 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	2b00      	cmp	r3, #0
 8005466:	daf2      	bge.n	800544e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	019b      	lsls	r3, r3, #6
 8005470:	f043 0220 	orr.w	r2, r3, #32
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	3301      	adds	r3, #1
 800547c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4a08      	ldr	r2, [pc, #32]	; (80054a4 <USB_FlushTxFifo+0x64>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d901      	bls.n	800548a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e006      	b.n	8005498 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	f003 0320 	and.w	r3, r3, #32
 8005492:	2b20      	cmp	r3, #32
 8005494:	d0f0      	beq.n	8005478 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr
 80054a4:	00030d40 	.word	0x00030d40

080054a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	3301      	adds	r3, #1
 80054b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4a11      	ldr	r2, [pc, #68]	; (8005504 <USB_FlushRxFifo+0x5c>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d901      	bls.n	80054c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e018      	b.n	80054f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	daf2      	bge.n	80054b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2210      	movs	r2, #16
 80054d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	3301      	adds	r3, #1
 80054dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	4a08      	ldr	r2, [pc, #32]	; (8005504 <USB_FlushRxFifo+0x5c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d901      	bls.n	80054ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e006      	b.n	80054f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	f003 0310 	and.w	r3, r3, #16
 80054f2:	2b10      	cmp	r3, #16
 80054f4:	d0f0      	beq.n	80054d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	00030d40 	.word	0x00030d40

08005508 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005508:	b480      	push	{r7}
 800550a:	b089      	sub	sp, #36	; 0x24
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	4611      	mov	r1, r2
 8005514:	461a      	mov	r2, r3
 8005516:	460b      	mov	r3, r1
 8005518:	71fb      	strb	r3, [r7, #7]
 800551a:	4613      	mov	r3, r2
 800551c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005526:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800552a:	2b00      	cmp	r3, #0
 800552c:	d123      	bne.n	8005576 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800552e:	88bb      	ldrh	r3, [r7, #4]
 8005530:	3303      	adds	r3, #3
 8005532:	089b      	lsrs	r3, r3, #2
 8005534:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005536:	2300      	movs	r3, #0
 8005538:	61bb      	str	r3, [r7, #24]
 800553a:	e018      	b.n	800556e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800553c:	79fb      	ldrb	r3, [r7, #7]
 800553e:	031a      	lsls	r2, r3, #12
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	4413      	add	r3, r2
 8005544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005548:	461a      	mov	r2, r3
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	3301      	adds	r3, #1
 8005554:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	3301      	adds	r3, #1
 800555a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	3301      	adds	r3, #1
 8005560:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	3301      	adds	r3, #1
 8005566:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	3301      	adds	r3, #1
 800556c:	61bb      	str	r3, [r7, #24]
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	429a      	cmp	r2, r3
 8005574:	d3e2      	bcc.n	800553c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3724      	adds	r7, #36	; 0x24
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005584:	b480      	push	{r7}
 8005586:	b08b      	sub	sp, #44	; 0x2c
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	4613      	mov	r3, r2
 8005590:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800559a:	88fb      	ldrh	r3, [r7, #6]
 800559c:	089b      	lsrs	r3, r3, #2
 800559e:	b29b      	uxth	r3, r3
 80055a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80055a2:	88fb      	ldrh	r3, [r7, #6]
 80055a4:	f003 0303 	and.w	r3, r3, #3
 80055a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80055aa:	2300      	movs	r3, #0
 80055ac:	623b      	str	r3, [r7, #32]
 80055ae:	e014      	b.n	80055da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	3301      	adds	r3, #1
 80055c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	3301      	adds	r3, #1
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	3301      	adds	r3, #1
 80055cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	3301      	adds	r3, #1
 80055d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	3301      	adds	r3, #1
 80055d8:	623b      	str	r3, [r7, #32]
 80055da:	6a3a      	ldr	r2, [r7, #32]
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d3e6      	bcc.n	80055b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80055e2:	8bfb      	ldrh	r3, [r7, #30]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d01e      	beq.n	8005626 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80055e8:	2300      	movs	r3, #0
 80055ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055f2:	461a      	mov	r2, r3
 80055f4:	f107 0310 	add.w	r3, r7, #16
 80055f8:	6812      	ldr	r2, [r2, #0]
 80055fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	b2db      	uxtb	r3, r3
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	fa22 f303 	lsr.w	r3, r2, r3
 8005608:	b2da      	uxtb	r2, r3
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	701a      	strb	r2, [r3, #0]
      i++;
 800560e:	6a3b      	ldr	r3, [r7, #32]
 8005610:	3301      	adds	r3, #1
 8005612:	623b      	str	r3, [r7, #32]
      pDest++;
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	3301      	adds	r3, #1
 8005618:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800561a:	8bfb      	ldrh	r3, [r7, #30]
 800561c:	3b01      	subs	r3, #1
 800561e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005620:	8bfb      	ldrh	r3, [r7, #30]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1ea      	bne.n	80055fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005628:	4618      	mov	r0, r3
 800562a:	372c      	adds	r7, #44	; 0x2c
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	4013      	ands	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800564c:	68fb      	ldr	r3, [r7, #12]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	f003 0301 	and.w	r3, r3, #1
}
 800566a:	4618      	mov	r0, r3
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
	...

08005678 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005680:	2300      	movs	r3, #0
 8005682:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	3301      	adds	r3, #1
 8005688:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4a13      	ldr	r2, [pc, #76]	; (80056dc <USB_CoreReset+0x64>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d901      	bls.n	8005696 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e01b      	b.n	80056ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	2b00      	cmp	r3, #0
 800569c:	daf2      	bge.n	8005684 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	f043 0201 	orr.w	r2, r3, #1
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	3301      	adds	r3, #1
 80056b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4a09      	ldr	r2, [pc, #36]	; (80056dc <USB_CoreReset+0x64>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d901      	bls.n	80056c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e006      	b.n	80056ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d0f0      	beq.n	80056ae <USB_CoreReset+0x36>

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	00030d40 	.word	0x00030d40

080056e0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056e0:	b084      	sub	sp, #16
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b086      	sub	sp, #24
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80056ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005700:	461a      	mov	r2, r3
 8005702:	2300      	movs	r3, #0
 8005704:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005716:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005722:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005732:	2b00      	cmp	r3, #0
 8005734:	d018      	beq.n	8005768 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005738:	2b01      	cmp	r3, #1
 800573a:	d10a      	bne.n	8005752 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800574a:	f043 0304 	orr.w	r3, r3, #4
 800574e:	6013      	str	r3, [r2, #0]
 8005750:	e014      	b.n	800577c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005760:	f023 0304 	bic.w	r3, r3, #4
 8005764:	6013      	str	r3, [r2, #0]
 8005766:	e009      	b.n	800577c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005776:	f023 0304 	bic.w	r3, r3, #4
 800577a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800577c:	2110      	movs	r1, #16
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7ff fe5e 	bl	8005440 <USB_FlushTxFifo>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7ff fe8a 	bl	80054a8 <USB_FlushRxFifo>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d001      	beq.n	800579e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800579e:	2300      	movs	r3, #0
 80057a0:	613b      	str	r3, [r7, #16]
 80057a2:	e015      	b.n	80057d0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b0:	461a      	mov	r2, r3
 80057b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057b6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c4:	461a      	mov	r2, r3
 80057c6:	2300      	movs	r3, #0
 80057c8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	3301      	adds	r3, #1
 80057ce:	613b      	str	r3, [r7, #16]
 80057d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d3e5      	bcc.n	80057a4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057e4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00b      	beq.n	800580a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057f8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a13      	ldr	r2, [pc, #76]	; (800584c <USB_HostInit+0x16c>)
 80057fe:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a13      	ldr	r2, [pc, #76]	; (8005850 <USB_HostInit+0x170>)
 8005804:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005808:	e009      	b.n	800581e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2280      	movs	r2, #128	; 0x80
 800580e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a10      	ldr	r2, [pc, #64]	; (8005854 <USB_HostInit+0x174>)
 8005814:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a0f      	ldr	r2, [pc, #60]	; (8005858 <USB_HostInit+0x178>)
 800581a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800581e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005820:	2b00      	cmp	r3, #0
 8005822:	d105      	bne.n	8005830 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	f043 0210 	orr.w	r2, r3, #16
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	699a      	ldr	r2, [r3, #24]
 8005834:	4b09      	ldr	r3, [pc, #36]	; (800585c <USB_HostInit+0x17c>)
 8005836:	4313      	orrs	r3, r2
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800583c:	7dfb      	ldrb	r3, [r7, #23]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3718      	adds	r7, #24
 8005842:	46bd      	mov	sp, r7
 8005844:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005848:	b004      	add	sp, #16
 800584a:	4770      	bx	lr
 800584c:	01000200 	.word	0x01000200
 8005850:	00e00300 	.word	0x00e00300
 8005854:	00600080 	.word	0x00600080
 8005858:	004000e0 	.word	0x004000e0
 800585c:	a3200008 	.word	0xa3200008

08005860 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	460b      	mov	r3, r1
 800586a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800587e:	f023 0303 	bic.w	r3, r3, #3
 8005882:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	78fb      	ldrb	r3, [r7, #3]
 800588e:	f003 0303 	and.w	r3, r3, #3
 8005892:	68f9      	ldr	r1, [r7, #12]
 8005894:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005898:	4313      	orrs	r3, r2
 800589a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800589c:	78fb      	ldrb	r3, [r7, #3]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d107      	bne.n	80058b2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058a8:	461a      	mov	r2, r3
 80058aa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80058ae:	6053      	str	r3, [r2, #4]
 80058b0:	e009      	b.n	80058c6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80058b2:	78fb      	ldrb	r3, [r7, #3]
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d106      	bne.n	80058c6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058be:	461a      	mov	r2, r3
 80058c0:	f241 7370 	movw	r3, #6000	; 0x1770
 80058c4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80058e0:	2300      	movs	r3, #0
 80058e2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80058f4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80058fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005902:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005904:	2064      	movs	r0, #100	; 0x64
 8005906:	f7fb fb5f 	bl	8000fc8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005912:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005916:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005918:	200a      	movs	r0, #10
 800591a:	f7fb fb55 	bl	8000fc8 <HAL_Delay>

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	460b      	mov	r3, r1
 8005932:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800594c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d109      	bne.n	800596c <USB_DriveVbus+0x44>
 8005958:	78fb      	ldrb	r3, [r7, #3]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d106      	bne.n	800596c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005966:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800596a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005976:	d109      	bne.n	800598c <USB_DriveVbus+0x64>
 8005978:	78fb      	ldrb	r3, [r7, #3]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d106      	bne.n	800598c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005986:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800598a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800599a:	b480      	push	{r7}
 800599c:	b085      	sub	sp, #20
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	0c5b      	lsrs	r3, r3, #17
 80059b8:	f003 0303 	and.w	r3, r3, #3
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	b29b      	uxth	r3, r3
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
	...

080059ec <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b088      	sub	sp, #32
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	4608      	mov	r0, r1
 80059f6:	4611      	mov	r1, r2
 80059f8:	461a      	mov	r2, r3
 80059fa:	4603      	mov	r3, r0
 80059fc:	70fb      	strb	r3, [r7, #3]
 80059fe:	460b      	mov	r3, r1
 8005a00:	70bb      	strb	r3, [r7, #2]
 8005a02:	4613      	mov	r3, r2
 8005a04:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005a0e:	78fb      	ldrb	r3, [r7, #3]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a20:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005a22:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005a26:	2b03      	cmp	r3, #3
 8005a28:	d87e      	bhi.n	8005b28 <USB_HC_Init+0x13c>
 8005a2a:	a201      	add	r2, pc, #4	; (adr r2, 8005a30 <USB_HC_Init+0x44>)
 8005a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a30:	08005a41 	.word	0x08005a41
 8005a34:	08005aeb 	.word	0x08005aeb
 8005a38:	08005a41 	.word	0x08005a41
 8005a3c:	08005aad 	.word	0x08005aad
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005a52:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005a54:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	da10      	bge.n	8005a7e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005a5c:	78fb      	ldrb	r3, [r7, #3]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	78fa      	ldrb	r2, [r7, #3]
 8005a6c:	0151      	lsls	r1, r2, #5
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	440a      	add	r2, r1
 8005a72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a7a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005a7c:	e057      	b.n	8005b2e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d051      	beq.n	8005b2e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005a8a:	78fb      	ldrb	r3, [r7, #3]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	78fa      	ldrb	r2, [r7, #3]
 8005a9a:	0151      	lsls	r1, r2, #5
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	440a      	add	r2, r1
 8005aa0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aa4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005aa8:	60d3      	str	r3, [r2, #12]
      break;
 8005aaa:	e040      	b.n	8005b2e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005aac:	78fb      	ldrb	r3, [r7, #3]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab8:	461a      	mov	r2, r3
 8005aba:	f240 639d 	movw	r3, #1693	; 0x69d
 8005abe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005ac0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	da34      	bge.n	8005b32 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ac8:	78fb      	ldrb	r3, [r7, #3]
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	78fa      	ldrb	r2, [r7, #3]
 8005ad8:	0151      	lsls	r1, r2, #5
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	440a      	add	r2, r1
 8005ade:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ae6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005ae8:	e023      	b.n	8005b32 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005aea:	78fb      	ldrb	r3, [r7, #3]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af6:	461a      	mov	r2, r3
 8005af8:	f240 2325 	movw	r3, #549	; 0x225
 8005afc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005afe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	da17      	bge.n	8005b36 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005b06:	78fb      	ldrb	r3, [r7, #3]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	78fa      	ldrb	r2, [r7, #3]
 8005b16:	0151      	lsls	r1, r2, #5
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	440a      	add	r2, r1
 8005b1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b20:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005b24:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005b26:	e006      	b.n	8005b36 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	77fb      	strb	r3, [r7, #31]
      break;
 8005b2c:	e004      	b.n	8005b38 <USB_HC_Init+0x14c>
      break;
 8005b2e:	bf00      	nop
 8005b30:	e002      	b.n	8005b38 <USB_HC_Init+0x14c>
      break;
 8005b32:	bf00      	nop
 8005b34:	e000      	b.n	8005b38 <USB_HC_Init+0x14c>
      break;
 8005b36:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005b38:	78fb      	ldrb	r3, [r7, #3]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	78fa      	ldrb	r2, [r7, #3]
 8005b48:	0151      	lsls	r1, r2, #5
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	440a      	add	r2, r1
 8005b4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b52:	f043 0302 	orr.w	r3, r3, #2
 8005b56:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b5e:	699a      	ldr	r2, [r3, #24]
 8005b60:	78fb      	ldrb	r3, [r7, #3]
 8005b62:	f003 030f 	and.w	r3, r3, #15
 8005b66:	2101      	movs	r1, #1
 8005b68:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6c:	6939      	ldr	r1, [r7, #16]
 8005b6e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005b72:	4313      	orrs	r3, r2
 8005b74:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005b82:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	da03      	bge.n	8005b92 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b8e:	61bb      	str	r3, [r7, #24]
 8005b90:	e001      	b.n	8005b96 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f7ff feff 	bl	800599a <USB_GetHostSpeed>
 8005b9c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005b9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d106      	bne.n	8005bb4 <USB_HC_Init+0x1c8>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d003      	beq.n	8005bb4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005bac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005bb0:	617b      	str	r3, [r7, #20]
 8005bb2:	e001      	b.n	8005bb8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bb8:	787b      	ldrb	r3, [r7, #1]
 8005bba:	059b      	lsls	r3, r3, #22
 8005bbc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005bc0:	78bb      	ldrb	r3, [r7, #2]
 8005bc2:	02db      	lsls	r3, r3, #11
 8005bc4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bc8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005bca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005bce:	049b      	lsls	r3, r3, #18
 8005bd0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005bd4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005bd6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005bd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005bdc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005be2:	78fb      	ldrb	r3, [r7, #3]
 8005be4:	0159      	lsls	r1, r3, #5
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	440b      	add	r3, r1
 8005bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bee:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bf4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005bf6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005bfa:	2b03      	cmp	r3, #3
 8005bfc:	d003      	beq.n	8005c06 <USB_HC_Init+0x21a>
 8005bfe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d10f      	bne.n	8005c26 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005c06:	78fb      	ldrb	r3, [r7, #3]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	78fa      	ldrb	r2, [r7, #3]
 8005c16:	0151      	lsls	r1, r2, #5
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	440a      	add	r2, r1
 8005c1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c24:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005c26:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3720      	adds	r7, #32
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b08c      	sub	sp, #48	; 0x30
 8005c34:	af02      	add	r7, sp, #8
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	785b      	ldrb	r3, [r3, #1]
 8005c46:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c4c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d02d      	beq.n	8005cb6 <USB_HC_StartXfer+0x86>
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	791b      	ldrb	r3, [r3, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d129      	bne.n	8005cb6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005c62:	79fb      	ldrb	r3, [r7, #7]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d117      	bne.n	8005c98 <USB_HC_StartXfer+0x68>
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	79db      	ldrb	r3, [r3, #7]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d003      	beq.n	8005c78 <USB_HC_StartXfer+0x48>
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	79db      	ldrb	r3, [r3, #7]
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d10f      	bne.n	8005c98 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	69fa      	ldr	r2, [r7, #28]
 8005c88:	0151      	lsls	r1, r2, #5
 8005c8a:	6a3a      	ldr	r2, [r7, #32]
 8005c8c:	440a      	add	r2, r1
 8005c8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c96:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005c98:	79fb      	ldrb	r3, [r7, #7]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10b      	bne.n	8005cb6 <USB_HC_StartXfer+0x86>
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	795b      	ldrb	r3, [r3, #5]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d107      	bne.n	8005cb6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	785b      	ldrb	r3, [r3, #1]
 8005caa:	4619      	mov	r1, r3
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 fa0f 	bl	80060d0 <USB_DoPing>
      return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	e0f8      	b.n	8005ea8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d018      	beq.n	8005cf0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	8912      	ldrh	r2, [r2, #8]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	8912      	ldrh	r2, [r2, #8]
 8005cce:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cd2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005cd4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005cd6:	8b7b      	ldrh	r3, [r7, #26]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d90b      	bls.n	8005cf4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005cdc:	8b7b      	ldrh	r3, [r7, #26]
 8005cde:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ce0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	8912      	ldrh	r2, [r2, #8]
 8005ce6:	fb03 f202 	mul.w	r2, r3, r2
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	611a      	str	r2, [r3, #16]
 8005cee:	e001      	b.n	8005cf4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	78db      	ldrb	r3, [r3, #3]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d007      	beq.n	8005d0c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005cfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	8912      	ldrh	r2, [r2, #8]
 8005d02:	fb03 f202 	mul.w	r2, r3, r2
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	611a      	str	r2, [r3, #16]
 8005d0a:	e003      	b.n	8005d14 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	695a      	ldr	r2, [r3, #20]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005d1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d1e:	04d9      	lsls	r1, r3, #19
 8005d20:	4b63      	ldr	r3, [pc, #396]	; (8005eb0 <USB_HC_StartXfer+0x280>)
 8005d22:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d24:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	7a9b      	ldrb	r3, [r3, #10]
 8005d2a:	075b      	lsls	r3, r3, #29
 8005d2c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d30:	69f9      	ldr	r1, [r7, #28]
 8005d32:	0148      	lsls	r0, r1, #5
 8005d34:	6a39      	ldr	r1, [r7, #32]
 8005d36:	4401      	add	r1, r0
 8005d38:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005d3c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d3e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005d40:	79fb      	ldrb	r3, [r7, #7]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d009      	beq.n	8005d5a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	68d9      	ldr	r1, [r3, #12]
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	015a      	lsls	r2, r3, #5
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	4413      	add	r3, r2
 8005d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d56:	460a      	mov	r2, r1
 8005d58:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	bf0c      	ite	eq
 8005d6a:	2301      	moveq	r3, #1
 8005d6c:	2300      	movne	r3, #0
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	69fa      	ldr	r2, [r7, #28]
 8005d82:	0151      	lsls	r1, r2, #5
 8005d84:	6a3a      	ldr	r2, [r7, #32]
 8005d86:	440a      	add	r2, r1
 8005d88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d90:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	7e7b      	ldrb	r3, [r7, #25]
 8005da2:	075b      	lsls	r3, r3, #29
 8005da4:	69f9      	ldr	r1, [r7, #28]
 8005da6:	0148      	lsls	r0, r1, #5
 8005da8:	6a39      	ldr	r1, [r7, #32]
 8005daa:	4401      	add	r1, r0
 8005dac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005db0:	4313      	orrs	r3, r2
 8005db2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005dca:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	78db      	ldrb	r3, [r3, #3]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d004      	beq.n	8005dde <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dda:	613b      	str	r3, [r7, #16]
 8005ddc:	e003      	b.n	8005de6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005de4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dec:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	015a      	lsls	r2, r3, #5
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	4413      	add	r3, r2
 8005df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005e00:	79fb      	ldrb	r3, [r7, #7]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005e06:	2300      	movs	r3, #0
 8005e08:	e04e      	b.n	8005ea8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	78db      	ldrb	r3, [r3, #3]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d149      	bne.n	8005ea6 <USB_HC_StartXfer+0x276>
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d045      	beq.n	8005ea6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	79db      	ldrb	r3, [r3, #7]
 8005e1e:	2b03      	cmp	r3, #3
 8005e20:	d830      	bhi.n	8005e84 <USB_HC_StartXfer+0x254>
 8005e22:	a201      	add	r2, pc, #4	; (adr r2, 8005e28 <USB_HC_StartXfer+0x1f8>)
 8005e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e28:	08005e39 	.word	0x08005e39
 8005e2c:	08005e5d 	.word	0x08005e5d
 8005e30:	08005e39 	.word	0x08005e39
 8005e34:	08005e5d 	.word	0x08005e5d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	695b      	ldr	r3, [r3, #20]
 8005e3c:	3303      	adds	r3, #3
 8005e3e:	089b      	lsrs	r3, r3, #2
 8005e40:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005e42:	8afa      	ldrh	r2, [r7, #22]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d91c      	bls.n	8005e88 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	f043 0220 	orr.w	r2, r3, #32
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e5a:	e015      	b.n	8005e88 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	3303      	adds	r3, #3
 8005e62:	089b      	lsrs	r3, r3, #2
 8005e64:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005e66:	8afa      	ldrh	r2, [r7, #22]
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d90a      	bls.n	8005e8c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e82:	e003      	b.n	8005e8c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005e84:	bf00      	nop
 8005e86:	e002      	b.n	8005e8e <USB_HC_StartXfer+0x25e>
        break;
 8005e88:	bf00      	nop
 8005e8a:	e000      	b.n	8005e8e <USB_HC_StartXfer+0x25e>
        break;
 8005e8c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	68d9      	ldr	r1, [r3, #12]
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	785a      	ldrb	r2, [r3, #1]
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	9000      	str	r0, [sp, #0]
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f7ff fb31 	bl	8005508 <USB_WritePacket>
  }

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3728      	adds	r7, #40	; 0x28
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	1ff80000 	.word	0x1ff80000

08005eb4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	b29b      	uxth	r3, r3
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b089      	sub	sp, #36	; 0x24
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	460b      	mov	r3, r1
 8005ee0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005ee6:	78fb      	ldrb	r3, [r7, #3]
 8005ee8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	0c9b      	lsrs	r3, r3, #18
 8005efe:	f003 0303 	and.w	r3, r3, #3
 8005f02:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	0fdb      	lsrs	r3, r3, #31
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f003 0320 	and.w	r3, r3, #32
 8005f22:	2b20      	cmp	r3, #32
 8005f24:	d104      	bne.n	8005f30 <USB_HC_Halt+0x5a>
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	e0c8      	b.n	80060c2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <USB_HC_Halt+0x66>
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d163      	bne.n	8006004 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	69ba      	ldr	r2, [r7, #24]
 8005f4c:	0151      	lsls	r1, r2, #5
 8005f4e:	69fa      	ldr	r2, [r7, #28]
 8005f50:	440a      	add	r2, r1
 8005f52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f5a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f003 0320 	and.w	r3, r3, #32
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f040 80ab 	bne.w	80060c0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d133      	bne.n	8005fde <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	0151      	lsls	r1, r2, #5
 8005f88:	69fa      	ldr	r2, [r7, #28]
 8005f8a:	440a      	add	r2, r1
 8005f8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f94:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	0151      	lsls	r1, r2, #5
 8005fa8:	69fa      	ldr	r2, [r7, #28]
 8005faa:	440a      	add	r2, r1
 8005fac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fb4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fc2:	d81d      	bhi.n	8006000 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fda:	d0ec      	beq.n	8005fb6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fdc:	e070      	b.n	80060c0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	69ba      	ldr	r2, [r7, #24]
 8005fee:	0151      	lsls	r1, r2, #5
 8005ff0:	69fa      	ldr	r2, [r7, #28]
 8005ff2:	440a      	add	r2, r1
 8005ff4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ff8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ffc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ffe:	e05f      	b.n	80060c0 <USB_HC_Halt+0x1ea>
            break;
 8006000:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006002:	e05d      	b.n	80060c0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	4413      	add	r3, r2
 800600c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	69ba      	ldr	r2, [r7, #24]
 8006014:	0151      	lsls	r1, r2, #5
 8006016:	69fa      	ldr	r2, [r7, #28]
 8006018:	440a      	add	r2, r1
 800601a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800601e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006022:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d133      	bne.n	800609c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	4413      	add	r3, r2
 800603c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	0151      	lsls	r1, r2, #5
 8006046:	69fa      	ldr	r2, [r7, #28]
 8006048:	440a      	add	r2, r1
 800604a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800604e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006052:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	4413      	add	r3, r2
 800605c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	0151      	lsls	r1, r2, #5
 8006066:	69fa      	ldr	r2, [r7, #28]
 8006068:	440a      	add	r2, r1
 800606a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800606e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006072:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	3301      	adds	r3, #1
 8006078:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006080:	d81d      	bhi.n	80060be <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	015a      	lsls	r2, r3, #5
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	4413      	add	r3, r2
 800608a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006094:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006098:	d0ec      	beq.n	8006074 <USB_HC_Halt+0x19e>
 800609a:	e011      	b.n	80060c0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	0151      	lsls	r1, r2, #5
 80060ae:	69fa      	ldr	r2, [r7, #28]
 80060b0:	440a      	add	r2, r1
 80060b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060ba:	6013      	str	r3, [r2, #0]
 80060bc:	e000      	b.n	80060c0 <USB_HC_Halt+0x1ea>
          break;
 80060be:	bf00      	nop
    }
  }

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3724      	adds	r7, #36	; 0x24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
	...

080060d0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	460b      	mov	r3, r1
 80060da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80060e0:	78fb      	ldrb	r3, [r7, #3]
 80060e2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80060e4:	2301      	movs	r3, #1
 80060e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	04da      	lsls	r2, r3, #19
 80060ec:	4b15      	ldr	r3, [pc, #84]	; (8006144 <USB_DoPing+0x74>)
 80060ee:	4013      	ands	r3, r2
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	0151      	lsls	r1, r2, #5
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	440a      	add	r2, r1
 80060f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006100:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	4413      	add	r3, r2
 800610a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006118:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006120:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	4413      	add	r3, r2
 800612a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800612e:	461a      	mov	r2, r3
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	371c      	adds	r7, #28
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	1ff80000 	.word	0x1ff80000

08006148 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b088      	sub	sp, #32
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006150:	2300      	movs	r3, #0
 8006152:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006158:	2300      	movs	r3, #0
 800615a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7ff f911 	bl	8005384 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006162:	2110      	movs	r1, #16
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f7ff f96b 	bl	8005440 <USB_FlushTxFifo>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d001      	beq.n	8006174 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7ff f997 	bl	80054a8 <USB_FlushRxFifo>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d001      	beq.n	8006184 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006184:	2300      	movs	r3, #0
 8006186:	61bb      	str	r3, [r7, #24]
 8006188:	e01f      	b.n	80061ca <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	4413      	add	r3, r2
 8006192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061a0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061b0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061be:	461a      	mov	r2, r3
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	3301      	adds	r3, #1
 80061c8:	61bb      	str	r3, [r7, #24]
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	2b0f      	cmp	r3, #15
 80061ce:	d9dc      	bls.n	800618a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80061d0:	2300      	movs	r3, #0
 80061d2:	61bb      	str	r3, [r7, #24]
 80061d4:	e034      	b.n	8006240 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061ec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061f4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061fc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	4413      	add	r3, r2
 8006206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800620a:	461a      	mov	r2, r3
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	3301      	adds	r3, #1
 8006214:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800621c:	d80c      	bhi.n	8006238 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	4413      	add	r3, r2
 8006226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006230:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006234:	d0ec      	beq.n	8006210 <USB_StopHost+0xc8>
 8006236:	e000      	b.n	800623a <USB_StopHost+0xf2>
        break;
 8006238:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	3301      	adds	r3, #1
 800623e:	61bb      	str	r3, [r7, #24]
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	2b0f      	cmp	r3, #15
 8006244:	d9c7      	bls.n	80061d6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800624c:	461a      	mov	r2, r3
 800624e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006252:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800625a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f7ff f880 	bl	8005362 <USB_EnableGlobalInt>

  return ret;
 8006262:	7ffb      	ldrb	r3, [r7, #31]
}
 8006264:	4618      	mov	r0, r3
 8006266:	3720      	adds	r7, #32
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800626c:	b590      	push	{r4, r7, lr}
 800626e:	b089      	sub	sp, #36	; 0x24
 8006270:	af04      	add	r7, sp, #16
 8006272:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006274:	2301      	movs	r3, #1
 8006276:	2202      	movs	r2, #2
 8006278:	2102      	movs	r1, #2
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fc66 	bl	8006b4c <USBH_FindInterface>
 8006280:	4603      	mov	r3, r0
 8006282:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006284:	7bfb      	ldrb	r3, [r7, #15]
 8006286:	2bff      	cmp	r3, #255	; 0xff
 8006288:	d002      	beq.n	8006290 <USBH_CDC_InterfaceInit+0x24>
 800628a:	7bfb      	ldrb	r3, [r7, #15]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d901      	bls.n	8006294 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006290:	2302      	movs	r3, #2
 8006292:	e13d      	b.n	8006510 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006294:	7bfb      	ldrb	r3, [r7, #15]
 8006296:	4619      	mov	r1, r3
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fc3b 	bl	8006b14 <USBH_SelectInterface>
 800629e:	4603      	mov	r3, r0
 80062a0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80062a2:	7bbb      	ldrb	r3, [r7, #14]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d001      	beq.n	80062ac <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80062a8:	2302      	movs	r3, #2
 80062aa:	e131      	b.n	8006510 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80062b2:	2050      	movs	r0, #80	; 0x50
 80062b4:	f002 faf6 	bl	80088a4 <malloc>
 80062b8:	4603      	mov	r3, r0
 80062ba:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062c2:	69db      	ldr	r3, [r3, #28]
 80062c4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d101      	bne.n	80062d0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80062cc:	2302      	movs	r3, #2
 80062ce:	e11f      	b.n	8006510 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80062d0:	2250      	movs	r2, #80	; 0x50
 80062d2:	2100      	movs	r1, #0
 80062d4:	68b8      	ldr	r0, [r7, #8]
 80062d6:	f002 faf5 	bl	80088c4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80062da:	7bfb      	ldrb	r3, [r7, #15]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	211a      	movs	r1, #26
 80062e0:	fb01 f303 	mul.w	r3, r1, r3
 80062e4:	4413      	add	r3, r2
 80062e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	b25b      	sxtb	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	da15      	bge.n	800631e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80062f2:	7bfb      	ldrb	r3, [r7, #15]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	211a      	movs	r1, #26
 80062f8:	fb01 f303 	mul.w	r3, r1, r3
 80062fc:	4413      	add	r3, r2
 80062fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006302:	781a      	ldrb	r2, [r3, #0]
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006308:	7bfb      	ldrb	r3, [r7, #15]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	211a      	movs	r1, #26
 800630e:	fb01 f303 	mul.w	r3, r1, r3
 8006312:	4413      	add	r3, r2
 8006314:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006318:	881a      	ldrh	r2, [r3, #0]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	785b      	ldrb	r3, [r3, #1]
 8006322:	4619      	mov	r1, r3
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f001 ff2c 	bl	8008182 <USBH_AllocPipe>
 800632a:	4603      	mov	r3, r0
 800632c:	461a      	mov	r2, r3
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	7819      	ldrb	r1, [r3, #0]
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	7858      	ldrb	r0, [r3, #1]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	8952      	ldrh	r2, [r2, #10]
 800634a:	9202      	str	r2, [sp, #8]
 800634c:	2203      	movs	r2, #3
 800634e:	9201      	str	r2, [sp, #4]
 8006350:	9300      	str	r3, [sp, #0]
 8006352:	4623      	mov	r3, r4
 8006354:	4602      	mov	r2, r0
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f001 fee4 	bl	8008124 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	2200      	movs	r2, #0
 8006362:	4619      	mov	r1, r3
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f002 f9dc 	bl	8008722 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800636a:	2300      	movs	r3, #0
 800636c:	2200      	movs	r2, #0
 800636e:	210a      	movs	r1, #10
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 fbeb 	bl	8006b4c <USBH_FindInterface>
 8006376:	4603      	mov	r3, r0
 8006378:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800637a:	7bfb      	ldrb	r3, [r7, #15]
 800637c:	2bff      	cmp	r3, #255	; 0xff
 800637e:	d002      	beq.n	8006386 <USBH_CDC_InterfaceInit+0x11a>
 8006380:	7bfb      	ldrb	r3, [r7, #15]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d901      	bls.n	800638a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006386:	2302      	movs	r3, #2
 8006388:	e0c2      	b.n	8006510 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800638a:	7bfb      	ldrb	r3, [r7, #15]
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	211a      	movs	r1, #26
 8006390:	fb01 f303 	mul.w	r3, r1, r3
 8006394:	4413      	add	r3, r2
 8006396:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	b25b      	sxtb	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	da16      	bge.n	80063d0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	211a      	movs	r1, #26
 80063a8:	fb01 f303 	mul.w	r3, r1, r3
 80063ac:	4413      	add	r3, r2
 80063ae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063b2:	781a      	ldrb	r2, [r3, #0]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	211a      	movs	r1, #26
 80063be:	fb01 f303 	mul.w	r3, r1, r3
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80063c8:	881a      	ldrh	r2, [r3, #0]
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	835a      	strh	r2, [r3, #26]
 80063ce:	e015      	b.n	80063fc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	211a      	movs	r1, #26
 80063d6:	fb01 f303 	mul.w	r3, r1, r3
 80063da:	4413      	add	r3, r2
 80063dc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063e0:	781a      	ldrb	r2, [r3, #0]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063e6:	7bfb      	ldrb	r3, [r7, #15]
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	211a      	movs	r1, #26
 80063ec:	fb01 f303 	mul.w	r3, r1, r3
 80063f0:	4413      	add	r3, r2
 80063f2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80063f6:	881a      	ldrh	r2, [r3, #0]
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	211a      	movs	r1, #26
 8006402:	fb01 f303 	mul.w	r3, r1, r3
 8006406:	4413      	add	r3, r2
 8006408:	f203 3356 	addw	r3, r3, #854	; 0x356
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	b25b      	sxtb	r3, r3
 8006410:	2b00      	cmp	r3, #0
 8006412:	da16      	bge.n	8006442 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006414:	7bfb      	ldrb	r3, [r7, #15]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	211a      	movs	r1, #26
 800641a:	fb01 f303 	mul.w	r3, r1, r3
 800641e:	4413      	add	r3, r2
 8006420:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006424:	781a      	ldrb	r2, [r3, #0]
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800642a:	7bfb      	ldrb	r3, [r7, #15]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	211a      	movs	r1, #26
 8006430:	fb01 f303 	mul.w	r3, r1, r3
 8006434:	4413      	add	r3, r2
 8006436:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800643a:	881a      	ldrh	r2, [r3, #0]
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	835a      	strh	r2, [r3, #26]
 8006440:	e015      	b.n	800646e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006442:	7bfb      	ldrb	r3, [r7, #15]
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	211a      	movs	r1, #26
 8006448:	fb01 f303 	mul.w	r3, r1, r3
 800644c:	4413      	add	r3, r2
 800644e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006452:	781a      	ldrb	r2, [r3, #0]
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006458:	7bfb      	ldrb	r3, [r7, #15]
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	211a      	movs	r1, #26
 800645e:	fb01 f303 	mul.w	r3, r1, r3
 8006462:	4413      	add	r3, r2
 8006464:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006468:	881a      	ldrh	r2, [r3, #0]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	7b9b      	ldrb	r3, [r3, #14]
 8006472:	4619      	mov	r1, r3
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f001 fe84 	bl	8008182 <USBH_AllocPipe>
 800647a:	4603      	mov	r3, r0
 800647c:	461a      	mov	r2, r3
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	7bdb      	ldrb	r3, [r3, #15]
 8006486:	4619      	mov	r1, r3
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f001 fe7a 	bl	8008182 <USBH_AllocPipe>
 800648e:	4603      	mov	r3, r0
 8006490:	461a      	mov	r2, r3
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	7b59      	ldrb	r1, [r3, #13]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	7b98      	ldrb	r0, [r3, #14]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	8b12      	ldrh	r2, [r2, #24]
 80064ae:	9202      	str	r2, [sp, #8]
 80064b0:	2202      	movs	r2, #2
 80064b2:	9201      	str	r2, [sp, #4]
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	4623      	mov	r3, r4
 80064b8:	4602      	mov	r2, r0
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f001 fe32 	bl	8008124 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	7b19      	ldrb	r1, [r3, #12]
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	7bd8      	ldrb	r0, [r3, #15]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	8b52      	ldrh	r2, [r2, #26]
 80064d8:	9202      	str	r2, [sp, #8]
 80064da:	2202      	movs	r2, #2
 80064dc:	9201      	str	r2, [sp, #4]
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	4623      	mov	r3, r4
 80064e2:	4602      	mov	r2, r0
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f001 fe1d 	bl	8008124 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	7b5b      	ldrb	r3, [r3, #13]
 80064f6:	2200      	movs	r2, #0
 80064f8:	4619      	mov	r1, r3
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f002 f911 	bl	8008722 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	7b1b      	ldrb	r3, [r3, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	4619      	mov	r1, r3
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f002 f90a 	bl	8008722 <USBH_LL_SetToggle>

  return USBH_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	bd90      	pop	{r4, r7, pc}

08006518 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00e      	beq.n	8006550 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	4619      	mov	r1, r3
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f001 fe12 	bl	8008162 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	4619      	mov	r1, r3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f001 fe3d 	bl	80081c4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	7b1b      	ldrb	r3, [r3, #12]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00e      	beq.n	8006576 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	7b1b      	ldrb	r3, [r3, #12]
 800655c:	4619      	mov	r1, r3
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f001 fdff 	bl	8008162 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	7b1b      	ldrb	r3, [r3, #12]
 8006568:	4619      	mov	r1, r3
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f001 fe2a 	bl	80081c4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	7b5b      	ldrb	r3, [r3, #13]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00e      	beq.n	800659c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	7b5b      	ldrb	r3, [r3, #13]
 8006582:	4619      	mov	r1, r3
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f001 fdec 	bl	8008162 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	7b5b      	ldrb	r3, [r3, #13]
 800658e:	4619      	mov	r1, r3
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f001 fe17 	bl	80081c4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065a2:	69db      	ldr	r3, [r3, #28]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00b      	beq.n	80065c0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065ae:	69db      	ldr	r3, [r3, #28]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f002 f97f 	bl	80088b4 <free>
    phost->pActiveClass->pData = 0U;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065bc:	2200      	movs	r2, #0
 80065be:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b084      	sub	sp, #16
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065d8:	69db      	ldr	r3, [r3, #28]
 80065da:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	3340      	adds	r3, #64	; 0x40
 80065e0:	4619      	mov	r1, r3
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f8b1 	bl	800674a <GetLineCoding>
 80065e8:	4603      	mov	r3, r0
 80065ea:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80065ec:	7afb      	ldrb	r3, [r7, #11]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d105      	bne.n	80065fe <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80065f8:	2102      	movs	r1, #2
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80065fe:	7afb      	ldrb	r3, [r7, #11]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006610:	2301      	movs	r3, #1
 8006612:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006614:	2300      	movs	r3, #0
 8006616:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800661e:	69db      	ldr	r3, [r3, #28]
 8006620:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006628:	2b04      	cmp	r3, #4
 800662a:	d877      	bhi.n	800671c <USBH_CDC_Process+0x114>
 800662c:	a201      	add	r2, pc, #4	; (adr r2, 8006634 <USBH_CDC_Process+0x2c>)
 800662e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006632:	bf00      	nop
 8006634:	08006649 	.word	0x08006649
 8006638:	0800664f 	.word	0x0800664f
 800663c:	0800667f 	.word	0x0800667f
 8006640:	080066f3 	.word	0x080066f3
 8006644:	08006701 	.word	0x08006701
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006648:	2300      	movs	r3, #0
 800664a:	73fb      	strb	r3, [r7, #15]
      break;
 800664c:	e06d      	b.n	800672a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006652:	4619      	mov	r1, r3
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f897 	bl	8006788 <SetLineCoding>
 800665a:	4603      	mov	r3, r0
 800665c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800665e:	7bbb      	ldrb	r3, [r7, #14]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d104      	bne.n	800666e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2202      	movs	r2, #2
 8006668:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800666c:	e058      	b.n	8006720 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800666e:	7bbb      	ldrb	r3, [r7, #14]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d055      	beq.n	8006720 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2204      	movs	r2, #4
 8006678:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800667c:	e050      	b.n	8006720 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	3340      	adds	r3, #64	; 0x40
 8006682:	4619      	mov	r1, r3
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 f860 	bl	800674a <GetLineCoding>
 800668a:	4603      	mov	r3, r0
 800668c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800668e:	7bbb      	ldrb	r3, [r7, #14]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d126      	bne.n	80066e2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066a6:	791b      	ldrb	r3, [r3, #4]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d13b      	bne.n	8006724 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066b6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d133      	bne.n	8006724 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066c6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d12b      	bne.n	8006724 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066d4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d124      	bne.n	8006724 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f958 	bl	8006990 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80066e0:	e020      	b.n	8006724 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80066e2:	7bbb      	ldrb	r3, [r7, #14]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d01d      	beq.n	8006724 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2204      	movs	r2, #4
 80066ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80066f0:	e018      	b.n	8006724 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f867 	bl	80067c6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f8da 	bl	80068b2 <CDC_ProcessReception>
      break;
 80066fe:	e014      	b.n	800672a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006700:	2100      	movs	r1, #0
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 ffef 	bl	80076e6 <USBH_ClrFeature>
 8006708:	4603      	mov	r3, r0
 800670a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800670c:	7bbb      	ldrb	r3, [r7, #14]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10a      	bne.n	8006728 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800671a:	e005      	b.n	8006728 <USBH_CDC_Process+0x120>

    default:
      break;
 800671c:	bf00      	nop
 800671e:	e004      	b.n	800672a <USBH_CDC_Process+0x122>
      break;
 8006720:	bf00      	nop
 8006722:	e002      	b.n	800672a <USBH_CDC_Process+0x122>
      break;
 8006724:	bf00      	nop
 8006726:	e000      	b.n	800672a <USBH_CDC_Process+0x122>
      break;
 8006728:	bf00      	nop

  }

  return status;
 800672a:	7bfb      	ldrb	r3, [r7, #15]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	370c      	adds	r7, #12
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b082      	sub	sp, #8
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
 8006752:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	22a1      	movs	r2, #161	; 0xa1
 8006758:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2221      	movs	r2, #33	; 0x21
 800675e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2207      	movs	r2, #7
 8006770:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2207      	movs	r2, #7
 8006776:	4619      	mov	r1, r3
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f001 fa81 	bl	8007c80 <USBH_CtlReq>
 800677e:	4603      	mov	r3, r0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2221      	movs	r2, #33	; 0x21
 8006796:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2220      	movs	r2, #32
 800679c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2207      	movs	r2, #7
 80067ae:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	2207      	movs	r2, #7
 80067b4:	4619      	mov	r1, r3
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f001 fa62 	bl	8007c80 <USBH_CtlReq>
 80067bc:	4603      	mov	r3, r0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b086      	sub	sp, #24
 80067ca:	af02      	add	r7, sp, #8
 80067cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80067d8:	2300      	movs	r3, #0
 80067da:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d002      	beq.n	80067ec <CDC_ProcessTransmission+0x26>
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d023      	beq.n	8006832 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80067ea:	e05e      	b.n	80068aa <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	8b12      	ldrh	r2, [r2, #24]
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d90b      	bls.n	8006810 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	69d9      	ldr	r1, [r3, #28]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	8b1a      	ldrh	r2, [r3, #24]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	7b5b      	ldrb	r3, [r3, #13]
 8006804:	2001      	movs	r0, #1
 8006806:	9000      	str	r0, [sp, #0]
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f001 fc48 	bl	800809e <USBH_BulkSendData>
 800680e:	e00b      	b.n	8006828 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006818:	b29a      	uxth	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	7b5b      	ldrb	r3, [r3, #13]
 800681e:	2001      	movs	r0, #1
 8006820:	9000      	str	r0, [sp, #0]
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f001 fc3b 	bl	800809e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2202      	movs	r2, #2
 800682c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006830:	e03b      	b.n	80068aa <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	7b5b      	ldrb	r3, [r3, #13]
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f001 ff51 	bl	80086e0 <USBH_LL_GetURBState>
 800683e:	4603      	mov	r3, r0
 8006840:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006842:	7afb      	ldrb	r3, [r7, #11]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d128      	bne.n	800689a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	8b12      	ldrh	r2, [r2, #24]
 8006850:	4293      	cmp	r3, r2
 8006852:	d90e      	bls.n	8006872 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	8b12      	ldrh	r2, [r2, #24]
 800685c:	1a9a      	subs	r2, r3, r2
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	8b12      	ldrh	r2, [r2, #24]
 800686a:	441a      	add	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	61da      	str	r2, [r3, #28]
 8006870:	e002      	b.n	8006878 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687c:	2b00      	cmp	r3, #0
 800687e:	d004      	beq.n	800688a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006888:	e00e      	b.n	80068a8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f868 	bl	8006968 <USBH_CDC_TransmitCallback>
      break;
 8006898:	e006      	b.n	80068a8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800689a:	7afb      	ldrb	r3, [r7, #11]
 800689c:	2b02      	cmp	r3, #2
 800689e:	d103      	bne.n	80068a8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80068a8:	bf00      	nop
  }
}
 80068aa:	bf00      	nop
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b086      	sub	sp, #24
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80068c4:	2300      	movs	r3, #0
 80068c6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80068ce:	2b03      	cmp	r3, #3
 80068d0:	d002      	beq.n	80068d8 <CDC_ProcessReception+0x26>
 80068d2:	2b04      	cmp	r3, #4
 80068d4:	d00e      	beq.n	80068f4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80068d6:	e043      	b.n	8006960 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	6a19      	ldr	r1, [r3, #32]
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	8b5a      	ldrh	r2, [r3, #26]
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	7b1b      	ldrb	r3, [r3, #12]
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f001 fbff 	bl	80080e8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	2204      	movs	r2, #4
 80068ee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80068f2:	e035      	b.n	8006960 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	7b1b      	ldrb	r3, [r3, #12]
 80068f8:	4619      	mov	r1, r3
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f001 fef0 	bl	80086e0 <USBH_LL_GetURBState>
 8006900:	4603      	mov	r3, r0
 8006902:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006904:	7cfb      	ldrb	r3, [r7, #19]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d129      	bne.n	800695e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	7b1b      	ldrb	r3, [r3, #12]
 800690e:	4619      	mov	r1, r3
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f001 fe53 	bl	80085bc <USBH_LL_GetLastXferSize>
 8006916:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	429a      	cmp	r2, r3
 8006920:	d016      	beq.n	8006950 <CDC_ProcessReception+0x9e>
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	8b5b      	ldrh	r3, [r3, #26]
 8006926:	461a      	mov	r2, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	4293      	cmp	r3, r2
 800692c:	d910      	bls.n	8006950 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	1ad2      	subs	r2, r2, r3
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	6a1a      	ldr	r2, [r3, #32]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	441a      	add	r2, r3
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	2203      	movs	r2, #3
 800694a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800694e:	e006      	b.n	800695e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 f80f 	bl	800697c <USBH_CDC_ReceiveCallback>
      break;
 800695e:	bf00      	nop
  }
}
 8006960:	bf00      	nop
 8006962:	3718      	adds	r7, #24
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	4613      	mov	r3, r2
 80069b0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d101      	bne.n	80069bc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80069b8:	2302      	movs	r3, #2
 80069ba:	e029      	b.n	8006a10 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	79fa      	ldrb	r2, [r7, #7]
 80069c0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f000 f81f 	bl	8006a18 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d003      	beq.n	8006a08 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f001 fd23 	bl	8008454 <USBH_LL_Init>

  return USBH_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006a20:	2300      	movs	r3, #0
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006a24:	2300      	movs	r3, #0
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	e009      	b.n	8006a3e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	33e0      	adds	r3, #224	; 0xe0
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	2200      	movs	r2, #0
 8006a36:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	60fb      	str	r3, [r7, #12]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2b0f      	cmp	r3, #15
 8006a42:	d9f2      	bls.n	8006a2a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a44:	2300      	movs	r3, #0
 8006a46:	60fb      	str	r3, [r7, #12]
 8006a48:	e009      	b.n	8006a5e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	4413      	add	r3, r2
 8006a50:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006a54:	2200      	movs	r2, #0
 8006a56:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	60fb      	str	r3, [r7, #12]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a64:	d3f1      	bcc.n	8006a4a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2240      	movs	r2, #64	; 0x40
 8006a8a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006aca:	2300      	movs	r3, #0
 8006acc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d016      	beq.n	8006b02 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10e      	bne.n	8006afc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006ae4:	1c59      	adds	r1, r3, #1
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	33de      	adds	r3, #222	; 0xde
 8006af0:	6839      	ldr	r1, [r7, #0]
 8006af2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006af6:	2300      	movs	r3, #0
 8006af8:	73fb      	strb	r3, [r7, #15]
 8006afa:	e004      	b.n	8006b06 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006afc:	2302      	movs	r3, #2
 8006afe:	73fb      	strb	r3, [r7, #15]
 8006b00:	e001      	b.n	8006b06 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006b02:	2302      	movs	r3, #2
 8006b04:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3714      	adds	r7, #20
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006b20:	2300      	movs	r3, #0
 8006b22:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006b2a:	78fa      	ldrb	r2, [r7, #3]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d204      	bcs.n	8006b3a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	78fa      	ldrb	r2, [r7, #3]
 8006b34:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006b38:	e001      	b.n	8006b3e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3714      	adds	r7, #20
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b087      	sub	sp, #28
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	4608      	mov	r0, r1
 8006b56:	4611      	mov	r1, r2
 8006b58:	461a      	mov	r2, r3
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	70fb      	strb	r3, [r7, #3]
 8006b5e:	460b      	mov	r3, r1
 8006b60:	70bb      	strb	r3, [r7, #2]
 8006b62:	4613      	mov	r3, r2
 8006b64:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006b66:	2300      	movs	r3, #0
 8006b68:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006b74:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b76:	e025      	b.n	8006bc4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006b78:	7dfb      	ldrb	r3, [r7, #23]
 8006b7a:	221a      	movs	r2, #26
 8006b7c:	fb02 f303 	mul.w	r3, r2, r3
 8006b80:	3308      	adds	r3, #8
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	4413      	add	r3, r2
 8006b86:	3302      	adds	r3, #2
 8006b88:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	795b      	ldrb	r3, [r3, #5]
 8006b8e:	78fa      	ldrb	r2, [r7, #3]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d002      	beq.n	8006b9a <USBH_FindInterface+0x4e>
 8006b94:	78fb      	ldrb	r3, [r7, #3]
 8006b96:	2bff      	cmp	r3, #255	; 0xff
 8006b98:	d111      	bne.n	8006bbe <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b9e:	78ba      	ldrb	r2, [r7, #2]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d002      	beq.n	8006baa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ba4:	78bb      	ldrb	r3, [r7, #2]
 8006ba6:	2bff      	cmp	r3, #255	; 0xff
 8006ba8:	d109      	bne.n	8006bbe <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006bae:	787a      	ldrb	r2, [r7, #1]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d002      	beq.n	8006bba <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006bb4:	787b      	ldrb	r3, [r7, #1]
 8006bb6:	2bff      	cmp	r3, #255	; 0xff
 8006bb8:	d101      	bne.n	8006bbe <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006bba:	7dfb      	ldrb	r3, [r7, #23]
 8006bbc:	e006      	b.n	8006bcc <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006bbe:	7dfb      	ldrb	r3, [r7, #23]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006bc4:	7dfb      	ldrb	r3, [r7, #23]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d9d6      	bls.n	8006b78 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006bca:	23ff      	movs	r3, #255	; 0xff
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	371c      	adds	r7, #28
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f001 fc73 	bl	80084cc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006be6:	2101      	movs	r1, #1
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f001 fd8c 	bl	8008706 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3708      	adds	r7, #8
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b088      	sub	sp, #32
 8006bfc:	af04      	add	r7, sp, #16
 8006bfe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006c00:	2302      	movs	r3, #2
 8006c02:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d102      	bne.n	8006c1a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2203      	movs	r2, #3
 8006c18:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b0b      	cmp	r3, #11
 8006c22:	f200 81be 	bhi.w	8006fa2 <USBH_Process+0x3aa>
 8006c26:	a201      	add	r2, pc, #4	; (adr r2, 8006c2c <USBH_Process+0x34>)
 8006c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2c:	08006c5d 	.word	0x08006c5d
 8006c30:	08006c8f 	.word	0x08006c8f
 8006c34:	08006cf7 	.word	0x08006cf7
 8006c38:	08006f3d 	.word	0x08006f3d
 8006c3c:	08006fa3 	.word	0x08006fa3
 8006c40:	08006d9b 	.word	0x08006d9b
 8006c44:	08006ee3 	.word	0x08006ee3
 8006c48:	08006dd1 	.word	0x08006dd1
 8006c4c:	08006df1 	.word	0x08006df1
 8006c50:	08006e11 	.word	0x08006e11
 8006c54:	08006e55 	.word	0x08006e55
 8006c58:	08006f25 	.word	0x08006f25
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 819e 	beq.w	8006fa6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006c70:	20c8      	movs	r0, #200	; 0xc8
 8006c72:	f001 fd86 	bl	8008782 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f001 fc85 	bl	8008586 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006c8c:	e18b      	b.n	8006fa6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d107      	bne.n	8006ca8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ca6:	e18d      	b.n	8006fc4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006cae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cb2:	d914      	bls.n	8006cde <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006cba:	3301      	adds	r3, #1
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006cca:	2b03      	cmp	r3, #3
 8006ccc:	d903      	bls.n	8006cd6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	220d      	movs	r2, #13
 8006cd2:	701a      	strb	r2, [r3, #0]
      break;
 8006cd4:	e176      	b.n	8006fc4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	701a      	strb	r2, [r3, #0]
      break;
 8006cdc:	e172      	b.n	8006fc4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ce4:	f103 020a 	add.w	r2, r3, #10
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006cee:	200a      	movs	r0, #10
 8006cf0:	f001 fd47 	bl	8008782 <USBH_Delay>
      break;
 8006cf4:	e166      	b.n	8006fc4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d005      	beq.n	8006d0c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d06:	2104      	movs	r1, #4
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006d0c:	2064      	movs	r0, #100	; 0x64
 8006d0e:	f001 fd38 	bl	8008782 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f001 fc10 	bl	8008538 <USBH_LL_GetSpeed>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2205      	movs	r2, #5
 8006d26:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006d28:	2100      	movs	r1, #0
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f001 fa29 	bl	8008182 <USBH_AllocPipe>
 8006d30:	4603      	mov	r3, r0
 8006d32:	461a      	mov	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006d38:	2180      	movs	r1, #128	; 0x80
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f001 fa21 	bl	8008182 <USBH_AllocPipe>
 8006d40:	4603      	mov	r3, r0
 8006d42:	461a      	mov	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	7919      	ldrb	r1, [r3, #4]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d5c:	b292      	uxth	r2, r2
 8006d5e:	9202      	str	r2, [sp, #8]
 8006d60:	2200      	movs	r2, #0
 8006d62:	9201      	str	r2, [sp, #4]
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	4603      	mov	r3, r0
 8006d68:	2280      	movs	r2, #128	; 0x80
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f001 f9da 	bl	8008124 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	7959      	ldrb	r1, [r3, #5]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d84:	b292      	uxth	r2, r2
 8006d86:	9202      	str	r2, [sp, #8]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	9201      	str	r2, [sp, #4]
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2200      	movs	r2, #0
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f001 f9c6 	bl	8008124 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d98:	e114      	b.n	8006fc4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f918 	bl	8006fd0 <USBH_HandleEnum>
 8006da0:	4603      	mov	r3, r0
 8006da2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006da4:	7bbb      	ldrb	r3, [r7, #14]
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f040 80fe 	bne.w	8006faa <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d103      	bne.n	8006dc8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2208      	movs	r2, #8
 8006dc4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006dc6:	e0f0      	b.n	8006faa <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2207      	movs	r2, #7
 8006dcc:	701a      	strb	r2, [r3, #0]
      break;
 8006dce:	e0ec      	b.n	8006faa <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 80e9 	beq.w	8006fae <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006de2:	2101      	movs	r1, #1
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2208      	movs	r2, #8
 8006dec:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006dee:	e0de      	b.n	8006fae <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	4619      	mov	r1, r3
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fc2c 	bl	8007658 <USBH_SetCfg>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f040 80d5 	bne.w	8006fb2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2209      	movs	r2, #9
 8006e0c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e0e:	e0d0      	b.n	8006fb2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006e16:	f003 0320 	and.w	r3, r3, #32
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d016      	beq.n	8006e4c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006e1e:	2101      	movs	r1, #1
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fc3c 	bl	800769e <USBH_SetFeature>
 8006e26:	4603      	mov	r3, r0
 8006e28:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006e2a:	7bbb      	ldrb	r3, [r7, #14]
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d103      	bne.n	8006e3a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	220a      	movs	r2, #10
 8006e36:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e38:	e0bd      	b.n	8006fb6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006e3a:	7bbb      	ldrb	r3, [r7, #14]
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b03      	cmp	r3, #3
 8006e40:	f040 80b9 	bne.w	8006fb6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	220a      	movs	r2, #10
 8006e48:	701a      	strb	r2, [r3, #0]
      break;
 8006e4a:	e0b4      	b.n	8006fb6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	220a      	movs	r2, #10
 8006e50:	701a      	strb	r2, [r3, #0]
      break;
 8006e52:	e0b0      	b.n	8006fb6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 80ad 	beq.w	8006fba <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e68:	2300      	movs	r3, #0
 8006e6a:	73fb      	strb	r3, [r7, #15]
 8006e6c:	e016      	b.n	8006e9c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006e6e:	7bfa      	ldrb	r2, [r7, #15]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	32de      	adds	r2, #222	; 0xde
 8006e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e78:	791a      	ldrb	r2, [r3, #4]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d108      	bne.n	8006e96 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006e84:	7bfa      	ldrb	r2, [r7, #15]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	32de      	adds	r2, #222	; 0xde
 8006e8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006e94:	e005      	b.n	8006ea2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	73fb      	strb	r3, [r7, #15]
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d0e5      	beq.n	8006e6e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d016      	beq.n	8006eda <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	4798      	blx	r3
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d109      	bne.n	8006ed2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2206      	movs	r2, #6
 8006ec2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006eca:	2103      	movs	r1, #3
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ed0:	e073      	b.n	8006fba <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	220d      	movs	r2, #13
 8006ed6:	701a      	strb	r2, [r3, #0]
      break;
 8006ed8:	e06f      	b.n	8006fba <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	220d      	movs	r2, #13
 8006ede:	701a      	strb	r2, [r3, #0]
      break;
 8006ee0:	e06b      	b.n	8006fba <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d017      	beq.n	8006f1c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	4798      	blx	r3
 8006ef8:	4603      	mov	r3, r0
 8006efa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006efc:	7bbb      	ldrb	r3, [r7, #14]
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d103      	bne.n	8006f0c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	220b      	movs	r2, #11
 8006f08:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f0a:	e058      	b.n	8006fbe <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006f0c:	7bbb      	ldrb	r3, [r7, #14]
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d154      	bne.n	8006fbe <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	220d      	movs	r2, #13
 8006f18:	701a      	strb	r2, [r3, #0]
      break;
 8006f1a:	e050      	b.n	8006fbe <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	220d      	movs	r2, #13
 8006f20:	701a      	strb	r2, [r3, #0]
      break;
 8006f22:	e04c      	b.n	8006fbe <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d049      	beq.n	8006fc2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	4798      	blx	r3
      }
      break;
 8006f3a:	e042      	b.n	8006fc2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f7ff fd67 	bl	8006a18 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d009      	beq.n	8006f68 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d005      	beq.n	8006f7e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f78:	2105      	movs	r1, #5
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d107      	bne.n	8006f9a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f7ff fe20 	bl	8006bd8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f98:	e014      	b.n	8006fc4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f001 fa96 	bl	80084cc <USBH_LL_Start>
      break;
 8006fa0:	e010      	b.n	8006fc4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006fa2:	bf00      	nop
 8006fa4:	e00e      	b.n	8006fc4 <USBH_Process+0x3cc>
      break;
 8006fa6:	bf00      	nop
 8006fa8:	e00c      	b.n	8006fc4 <USBH_Process+0x3cc>
      break;
 8006faa:	bf00      	nop
 8006fac:	e00a      	b.n	8006fc4 <USBH_Process+0x3cc>
    break;
 8006fae:	bf00      	nop
 8006fb0:	e008      	b.n	8006fc4 <USBH_Process+0x3cc>
      break;
 8006fb2:	bf00      	nop
 8006fb4:	e006      	b.n	8006fc4 <USBH_Process+0x3cc>
      break;
 8006fb6:	bf00      	nop
 8006fb8:	e004      	b.n	8006fc4 <USBH_Process+0x3cc>
      break;
 8006fba:	bf00      	nop
 8006fbc:	e002      	b.n	8006fc4 <USBH_Process+0x3cc>
      break;
 8006fbe:	bf00      	nop
 8006fc0:	e000      	b.n	8006fc4 <USBH_Process+0x3cc>
      break;
 8006fc2:	bf00      	nop
  }
  return USBH_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop

08006fd0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b088      	sub	sp, #32
 8006fd4:	af04      	add	r7, sp, #16
 8006fd6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	785b      	ldrb	r3, [r3, #1]
 8006fe4:	2b07      	cmp	r3, #7
 8006fe6:	f200 81c1 	bhi.w	800736c <USBH_HandleEnum+0x39c>
 8006fea:	a201      	add	r2, pc, #4	; (adr r2, 8006ff0 <USBH_HandleEnum+0x20>)
 8006fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff0:	08007011 	.word	0x08007011
 8006ff4:	080070cf 	.word	0x080070cf
 8006ff8:	08007139 	.word	0x08007139
 8006ffc:	080071c7 	.word	0x080071c7
 8007000:	08007231 	.word	0x08007231
 8007004:	080072a1 	.word	0x080072a1
 8007008:	080072e7 	.word	0x080072e7
 800700c:	0800732d 	.word	0x0800732d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007010:	2108      	movs	r1, #8
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fa50 	bl	80074b8 <USBH_Get_DevDesc>
 8007018:	4603      	mov	r3, r0
 800701a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800701c:	7bbb      	ldrb	r3, [r7, #14]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d130      	bne.n	8007084 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	7919      	ldrb	r1, [r3, #4]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007046:	b292      	uxth	r2, r2
 8007048:	9202      	str	r2, [sp, #8]
 800704a:	2200      	movs	r2, #0
 800704c:	9201      	str	r2, [sp, #4]
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	4603      	mov	r3, r0
 8007052:	2280      	movs	r2, #128	; 0x80
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f001 f865 	bl	8008124 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	7959      	ldrb	r1, [r3, #5]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800706e:	b292      	uxth	r2, r2
 8007070:	9202      	str	r2, [sp, #8]
 8007072:	2200      	movs	r2, #0
 8007074:	9201      	str	r2, [sp, #4]
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	4603      	mov	r3, r0
 800707a:	2200      	movs	r2, #0
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f001 f851 	bl	8008124 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007082:	e175      	b.n	8007370 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007084:	7bbb      	ldrb	r3, [r7, #14]
 8007086:	2b03      	cmp	r3, #3
 8007088:	f040 8172 	bne.w	8007370 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007092:	3301      	adds	r3, #1
 8007094:	b2da      	uxtb	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070a2:	2b03      	cmp	r3, #3
 80070a4:	d903      	bls.n	80070ae <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	220d      	movs	r2, #13
 80070aa:	701a      	strb	r2, [r3, #0]
      break;
 80070ac:	e160      	b.n	8007370 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	795b      	ldrb	r3, [r3, #5]
 80070b2:	4619      	mov	r1, r3
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f001 f885 	bl	80081c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	791b      	ldrb	r3, [r3, #4]
 80070be:	4619      	mov	r1, r3
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f001 f87f 	bl	80081c4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	701a      	strb	r2, [r3, #0]
      break;
 80070cc:	e150      	b.n	8007370 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80070ce:	2112      	movs	r1, #18
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 f9f1 	bl	80074b8 <USBH_Get_DevDesc>
 80070d6:	4603      	mov	r3, r0
 80070d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070da:	7bbb      	ldrb	r3, [r7, #14]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d103      	bne.n	80070e8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2202      	movs	r2, #2
 80070e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80070e6:	e145      	b.n	8007374 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070e8:	7bbb      	ldrb	r3, [r7, #14]
 80070ea:	2b03      	cmp	r3, #3
 80070ec:	f040 8142 	bne.w	8007374 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070f6:	3301      	adds	r3, #1
 80070f8:	b2da      	uxtb	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007106:	2b03      	cmp	r3, #3
 8007108:	d903      	bls.n	8007112 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	220d      	movs	r2, #13
 800710e:	701a      	strb	r2, [r3, #0]
      break;
 8007110:	e130      	b.n	8007374 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	795b      	ldrb	r3, [r3, #5]
 8007116:	4619      	mov	r1, r3
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f001 f853 	bl	80081c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	791b      	ldrb	r3, [r3, #4]
 8007122:	4619      	mov	r1, r3
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f001 f84d 	bl	80081c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	701a      	strb	r2, [r3, #0]
      break;
 8007136:	e11d      	b.n	8007374 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007138:	2101      	movs	r1, #1
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fa68 	bl	8007610 <USBH_SetAddress>
 8007140:	4603      	mov	r3, r0
 8007142:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007144:	7bbb      	ldrb	r3, [r7, #14]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d132      	bne.n	80071b0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800714a:	2002      	movs	r0, #2
 800714c:	f001 fb19 	bl	8008782 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2203      	movs	r2, #3
 800715c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	7919      	ldrb	r1, [r3, #4]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007172:	b292      	uxth	r2, r2
 8007174:	9202      	str	r2, [sp, #8]
 8007176:	2200      	movs	r2, #0
 8007178:	9201      	str	r2, [sp, #4]
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	4603      	mov	r3, r0
 800717e:	2280      	movs	r2, #128	; 0x80
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 ffcf 	bl	8008124 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	7959      	ldrb	r1, [r3, #5]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800719a:	b292      	uxth	r2, r2
 800719c:	9202      	str	r2, [sp, #8]
 800719e:	2200      	movs	r2, #0
 80071a0:	9201      	str	r2, [sp, #4]
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	4603      	mov	r3, r0
 80071a6:	2200      	movs	r2, #0
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 ffbb 	bl	8008124 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80071ae:	e0e3      	b.n	8007378 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071b0:	7bbb      	ldrb	r3, [r7, #14]
 80071b2:	2b03      	cmp	r3, #3
 80071b4:	f040 80e0 	bne.w	8007378 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	220d      	movs	r2, #13
 80071bc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	705a      	strb	r2, [r3, #1]
      break;
 80071c4:	e0d8      	b.n	8007378 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80071c6:	2109      	movs	r1, #9
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f99d 	bl	8007508 <USBH_Get_CfgDesc>
 80071ce:	4603      	mov	r3, r0
 80071d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071d2:	7bbb      	ldrb	r3, [r7, #14]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d103      	bne.n	80071e0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2204      	movs	r2, #4
 80071dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80071de:	e0cd      	b.n	800737c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071e0:	7bbb      	ldrb	r3, [r7, #14]
 80071e2:	2b03      	cmp	r3, #3
 80071e4:	f040 80ca 	bne.w	800737c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071ee:	3301      	adds	r3, #1
 80071f0:	b2da      	uxtb	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071fe:	2b03      	cmp	r3, #3
 8007200:	d903      	bls.n	800720a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	220d      	movs	r2, #13
 8007206:	701a      	strb	r2, [r3, #0]
      break;
 8007208:	e0b8      	b.n	800737c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	795b      	ldrb	r3, [r3, #5]
 800720e:	4619      	mov	r1, r3
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 ffd7 	bl	80081c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	791b      	ldrb	r3, [r3, #4]
 800721a:	4619      	mov	r1, r3
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 ffd1 	bl	80081c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	701a      	strb	r2, [r3, #0]
      break;
 800722e:	e0a5      	b.n	800737c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007236:	4619      	mov	r1, r3
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f965 	bl	8007508 <USBH_Get_CfgDesc>
 800723e:	4603      	mov	r3, r0
 8007240:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007242:	7bbb      	ldrb	r3, [r7, #14]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d103      	bne.n	8007250 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2205      	movs	r2, #5
 800724c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800724e:	e097      	b.n	8007380 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007250:	7bbb      	ldrb	r3, [r7, #14]
 8007252:	2b03      	cmp	r3, #3
 8007254:	f040 8094 	bne.w	8007380 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800725e:	3301      	adds	r3, #1
 8007260:	b2da      	uxtb	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800726e:	2b03      	cmp	r3, #3
 8007270:	d903      	bls.n	800727a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	220d      	movs	r2, #13
 8007276:	701a      	strb	r2, [r3, #0]
      break;
 8007278:	e082      	b.n	8007380 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	795b      	ldrb	r3, [r3, #5]
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 ff9f 	bl	80081c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	791b      	ldrb	r3, [r3, #4]
 800728a:	4619      	mov	r1, r3
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 ff99 	bl	80081c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	701a      	strb	r2, [r3, #0]
      break;
 800729e:	e06f      	b.n	8007380 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d019      	beq.n	80072de <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80072b6:	23ff      	movs	r3, #255	; 0xff
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f949 	bl	8007550 <USBH_Get_StringDesc>
 80072be:	4603      	mov	r3, r0
 80072c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80072c2:	7bbb      	ldrb	r3, [r7, #14]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d103      	bne.n	80072d0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2206      	movs	r2, #6
 80072cc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80072ce:	e059      	b.n	8007384 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072d0:	7bbb      	ldrb	r3, [r7, #14]
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	d156      	bne.n	8007384 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2206      	movs	r2, #6
 80072da:	705a      	strb	r2, [r3, #1]
      break;
 80072dc:	e052      	b.n	8007384 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2206      	movs	r2, #6
 80072e2:	705a      	strb	r2, [r3, #1]
      break;
 80072e4:	e04e      	b.n	8007384 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d019      	beq.n	8007324 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072fc:	23ff      	movs	r3, #255	; 0xff
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f926 	bl	8007550 <USBH_Get_StringDesc>
 8007304:	4603      	mov	r3, r0
 8007306:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007308:	7bbb      	ldrb	r3, [r7, #14]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d103      	bne.n	8007316 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2207      	movs	r2, #7
 8007312:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007314:	e038      	b.n	8007388 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007316:	7bbb      	ldrb	r3, [r7, #14]
 8007318:	2b03      	cmp	r3, #3
 800731a:	d135      	bne.n	8007388 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2207      	movs	r2, #7
 8007320:	705a      	strb	r2, [r3, #1]
      break;
 8007322:	e031      	b.n	8007388 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2207      	movs	r2, #7
 8007328:	705a      	strb	r2, [r3, #1]
      break;
 800732a:	e02d      	b.n	8007388 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007332:	2b00      	cmp	r3, #0
 8007334:	d017      	beq.n	8007366 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007342:	23ff      	movs	r3, #255	; 0xff
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f903 	bl	8007550 <USBH_Get_StringDesc>
 800734a:	4603      	mov	r3, r0
 800734c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800734e:	7bbb      	ldrb	r3, [r7, #14]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d102      	bne.n	800735a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007354:	2300      	movs	r3, #0
 8007356:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007358:	e018      	b.n	800738c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800735a:	7bbb      	ldrb	r3, [r7, #14]
 800735c:	2b03      	cmp	r3, #3
 800735e:	d115      	bne.n	800738c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007360:	2300      	movs	r3, #0
 8007362:	73fb      	strb	r3, [r7, #15]
      break;
 8007364:	e012      	b.n	800738c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007366:	2300      	movs	r3, #0
 8007368:	73fb      	strb	r3, [r7, #15]
      break;
 800736a:	e00f      	b.n	800738c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800736c:	bf00      	nop
 800736e:	e00e      	b.n	800738e <USBH_HandleEnum+0x3be>
      break;
 8007370:	bf00      	nop
 8007372:	e00c      	b.n	800738e <USBH_HandleEnum+0x3be>
      break;
 8007374:	bf00      	nop
 8007376:	e00a      	b.n	800738e <USBH_HandleEnum+0x3be>
      break;
 8007378:	bf00      	nop
 800737a:	e008      	b.n	800738e <USBH_HandleEnum+0x3be>
      break;
 800737c:	bf00      	nop
 800737e:	e006      	b.n	800738e <USBH_HandleEnum+0x3be>
      break;
 8007380:	bf00      	nop
 8007382:	e004      	b.n	800738e <USBH_HandleEnum+0x3be>
      break;
 8007384:	bf00      	nop
 8007386:	e002      	b.n	800738e <USBH_HandleEnum+0x3be>
      break;
 8007388:	bf00      	nop
 800738a:	e000      	b.n	800738e <USBH_HandleEnum+0x3be>
      break;
 800738c:	bf00      	nop
  }
  return Status;
 800738e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007390:	4618      	mov	r0, r3
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80073aa:	bf00      	nop
 80073ac:	370c      	adds	r7, #12
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b082      	sub	sp, #8
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80073c4:	1c5a      	adds	r2, r3, #1
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 f804 	bl	80073da <USBH_HandleSof>
}
 80073d2:	bf00      	nop
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b082      	sub	sp, #8
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	2b0b      	cmp	r3, #11
 80073ea:	d10a      	bne.n	8007402 <USBH_HandleSof+0x28>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d005      	beq.n	8007402 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073fc:	699b      	ldr	r3, [r3, #24]
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	4798      	blx	r3
  }
}
 8007402:	bf00      	nop
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800740a:	b480      	push	{r7}
 800740c:	b083      	sub	sp, #12
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2201      	movs	r2, #1
 8007416:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800741a:	bf00      	nop
}
 800741c:	370c      	adds	r7, #12
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007426:	b480      	push	{r7}
 8007428:	b083      	sub	sp, #12
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007436:	bf00      	nop
}
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007442:	b480      	push	{r7}
 8007444:	b083      	sub	sp, #12
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f001 f836 	bl	8008502 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	791b      	ldrb	r3, [r3, #4]
 800749a:	4619      	mov	r1, r3
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fe91 	bl	80081c4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	795b      	ldrb	r3, [r3, #5]
 80074a6:	4619      	mov	r1, r3
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fe8b 	bl	80081c4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b086      	sub	sp, #24
 80074bc:	af02      	add	r7, sp, #8
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	460b      	mov	r3, r1
 80074c2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80074ca:	78fb      	ldrb	r3, [r7, #3]
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	4613      	mov	r3, r2
 80074d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074d6:	2100      	movs	r1, #0
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 f864 	bl	80075a6 <USBH_GetDescriptor>
 80074de:	4603      	mov	r3, r0
 80074e0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80074e2:	7bfb      	ldrb	r3, [r7, #15]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10a      	bne.n	80074fe <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f203 3026 	addw	r0, r3, #806	; 0x326
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80074f4:	78fa      	ldrb	r2, [r7, #3]
 80074f6:	b292      	uxth	r2, r2
 80074f8:	4619      	mov	r1, r3
 80074fa:	f000 f918 	bl	800772e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80074fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af02      	add	r7, sp, #8
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	460b      	mov	r3, r1
 8007512:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	331c      	adds	r3, #28
 8007518:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800751a:	887b      	ldrh	r3, [r7, #2]
 800751c:	9300      	str	r3, [sp, #0]
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007524:	2100      	movs	r1, #0
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f83d 	bl	80075a6 <USBH_GetDescriptor>
 800752c:	4603      	mov	r3, r0
 800752e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007530:	7bfb      	ldrb	r3, [r7, #15]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d107      	bne.n	8007546 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007536:	887b      	ldrh	r3, [r7, #2]
 8007538:	461a      	mov	r2, r3
 800753a:	68b9      	ldr	r1, [r7, #8]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f987 	bl	8007850 <USBH_ParseCfgDesc>
 8007542:	4603      	mov	r3, r0
 8007544:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007546:	7bfb      	ldrb	r3, [r7, #15]
}
 8007548:	4618      	mov	r0, r3
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b088      	sub	sp, #32
 8007554:	af02      	add	r7, sp, #8
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	607a      	str	r2, [r7, #4]
 800755a:	461a      	mov	r2, r3
 800755c:	460b      	mov	r3, r1
 800755e:	72fb      	strb	r3, [r7, #11]
 8007560:	4613      	mov	r3, r2
 8007562:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007564:	7afb      	ldrb	r3, [r7, #11]
 8007566:	b29b      	uxth	r3, r3
 8007568:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800756c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007574:	893b      	ldrh	r3, [r7, #8]
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	460b      	mov	r3, r1
 800757a:	2100      	movs	r1, #0
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f000 f812 	bl	80075a6 <USBH_GetDescriptor>
 8007582:	4603      	mov	r3, r0
 8007584:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007586:	7dfb      	ldrb	r3, [r7, #23]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d107      	bne.n	800759c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007592:	893a      	ldrh	r2, [r7, #8]
 8007594:	6879      	ldr	r1, [r7, #4]
 8007596:	4618      	mov	r0, r3
 8007598:	f000 fb24 	bl	8007be4 <USBH_ParseStringDesc>
  }

  return status;
 800759c:	7dfb      	ldrb	r3, [r7, #23]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3718      	adds	r7, #24
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b084      	sub	sp, #16
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	60f8      	str	r0, [r7, #12]
 80075ae:	607b      	str	r3, [r7, #4]
 80075b0:	460b      	mov	r3, r1
 80075b2:	72fb      	strb	r3, [r7, #11]
 80075b4:	4613      	mov	r3, r2
 80075b6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	789b      	ldrb	r3, [r3, #2]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d11c      	bne.n	80075fa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80075c0:	7afb      	ldrb	r3, [r7, #11]
 80075c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075c6:	b2da      	uxtb	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2206      	movs	r2, #6
 80075d0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	893a      	ldrh	r2, [r7, #8]
 80075d6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80075d8:	893b      	ldrh	r3, [r7, #8]
 80075da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80075de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075e2:	d104      	bne.n	80075ee <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f240 4209 	movw	r2, #1033	; 0x409
 80075ea:	829a      	strh	r2, [r3, #20]
 80075ec:	e002      	b.n	80075f4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	8b3a      	ldrh	r2, [r7, #24]
 80075f8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80075fa:	8b3b      	ldrh	r3, [r7, #24]
 80075fc:	461a      	mov	r2, r3
 80075fe:	6879      	ldr	r1, [r7, #4]
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f000 fb3d 	bl	8007c80 <USBH_CtlReq>
 8007606:	4603      	mov	r3, r0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	460b      	mov	r3, r1
 800761a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	789b      	ldrb	r3, [r3, #2]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d10f      	bne.n	8007644 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2205      	movs	r2, #5
 800762e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007630:	78fb      	ldrb	r3, [r7, #3]
 8007632:	b29a      	uxth	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007644:	2200      	movs	r2, #0
 8007646:	2100      	movs	r1, #0
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fb19 	bl	8007c80 <USBH_CtlReq>
 800764e:	4603      	mov	r3, r0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	460b      	mov	r3, r1
 8007662:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	789b      	ldrb	r3, [r3, #2]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d10e      	bne.n	800768a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2209      	movs	r2, #9
 8007676:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	887a      	ldrh	r2, [r7, #2]
 800767c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800768a:	2200      	movs	r2, #0
 800768c:	2100      	movs	r1, #0
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 faf6 	bl	8007c80 <USBH_CtlReq>
 8007694:	4603      	mov	r3, r0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b082      	sub	sp, #8
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	460b      	mov	r3, r1
 80076a8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	789b      	ldrb	r3, [r3, #2]
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d10f      	bne.n	80076d2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2203      	movs	r2, #3
 80076bc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80076be:	78fb      	ldrb	r3, [r7, #3]
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80076d2:	2200      	movs	r2, #0
 80076d4:	2100      	movs	r1, #0
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fad2 	bl	8007c80 <USBH_CtlReq>
 80076dc:	4603      	mov	r3, r0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b082      	sub	sp, #8
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
 80076ee:	460b      	mov	r3, r1
 80076f0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	789b      	ldrb	r3, [r3, #2]
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d10f      	bne.n	800771a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2202      	movs	r2, #2
 80076fe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800770c:	78fb      	ldrb	r3, [r7, #3]
 800770e:	b29a      	uxth	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800771a:	2200      	movs	r2, #0
 800771c:	2100      	movs	r1, #0
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 faae 	bl	8007c80 <USBH_CtlReq>
 8007724:	4603      	mov	r3, r0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800772e:	b480      	push	{r7}
 8007730:	b085      	sub	sp, #20
 8007732:	af00      	add	r7, sp, #0
 8007734:	60f8      	str	r0, [r7, #12]
 8007736:	60b9      	str	r1, [r7, #8]
 8007738:	4613      	mov	r3, r2
 800773a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	781a      	ldrb	r2, [r3, #0]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	785a      	ldrb	r2, [r3, #1]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	3302      	adds	r3, #2
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	b29a      	uxth	r2, r3
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	3303      	adds	r3, #3
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	b29b      	uxth	r3, r3
 800775c:	021b      	lsls	r3, r3, #8
 800775e:	b29b      	uxth	r3, r3
 8007760:	4313      	orrs	r3, r2
 8007762:	b29a      	uxth	r2, r3
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	791a      	ldrb	r2, [r3, #4]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	795a      	ldrb	r2, [r3, #5]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	799a      	ldrb	r2, [r3, #6]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	79da      	ldrb	r2, [r3, #7]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	79db      	ldrb	r3, [r3, #7]
 800778c:	2b20      	cmp	r3, #32
 800778e:	dc11      	bgt.n	80077b4 <USBH_ParseDevDesc+0x86>
 8007790:	2b08      	cmp	r3, #8
 8007792:	db16      	blt.n	80077c2 <USBH_ParseDevDesc+0x94>
 8007794:	3b08      	subs	r3, #8
 8007796:	2201      	movs	r2, #1
 8007798:	fa02 f303 	lsl.w	r3, r2, r3
 800779c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80077a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	bf14      	ite	ne
 80077a8:	2301      	movne	r3, #1
 80077aa:	2300      	moveq	r3, #0
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d102      	bne.n	80077b8 <USBH_ParseDevDesc+0x8a>
 80077b2:	e006      	b.n	80077c2 <USBH_ParseDevDesc+0x94>
 80077b4:	2b40      	cmp	r3, #64	; 0x40
 80077b6:	d104      	bne.n	80077c2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	79da      	ldrb	r2, [r3, #7]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	71da      	strb	r2, [r3, #7]
      break;
 80077c0:	e003      	b.n	80077ca <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2240      	movs	r2, #64	; 0x40
 80077c6:	71da      	strb	r2, [r3, #7]
      break;
 80077c8:	bf00      	nop
  }

  if (length > 8U)
 80077ca:	88fb      	ldrh	r3, [r7, #6]
 80077cc:	2b08      	cmp	r3, #8
 80077ce:	d939      	bls.n	8007844 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	3308      	adds	r3, #8
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	3309      	adds	r3, #9
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	b29b      	uxth	r3, r3
 80077e0:	021b      	lsls	r3, r3, #8
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	4313      	orrs	r3, r2
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	330a      	adds	r3, #10
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	330b      	adds	r3, #11
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	021b      	lsls	r3, r3, #8
 80077fe:	b29b      	uxth	r3, r3
 8007800:	4313      	orrs	r3, r2
 8007802:	b29a      	uxth	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	330c      	adds	r3, #12
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	b29a      	uxth	r2, r3
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	330d      	adds	r3, #13
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	b29b      	uxth	r3, r3
 8007818:	021b      	lsls	r3, r3, #8
 800781a:	b29b      	uxth	r3, r3
 800781c:	4313      	orrs	r3, r2
 800781e:	b29a      	uxth	r2, r3
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	7b9a      	ldrb	r2, [r3, #14]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	7bda      	ldrb	r2, [r3, #15]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	7c1a      	ldrb	r2, [r3, #16]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	7c5a      	ldrb	r2, [r3, #17]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	745a      	strb	r2, [r3, #17]
  }
}
 8007844:	bf00      	nop
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b08c      	sub	sp, #48	; 0x30
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	4613      	mov	r3, r2
 800785c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007864:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007866:	2300      	movs	r3, #0
 8007868:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007870:	2300      	movs	r3, #0
 8007872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007876:	2300      	movs	r3, #0
 8007878:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	781a      	ldrb	r2, [r3, #0]
 8007884:	6a3b      	ldr	r3, [r7, #32]
 8007886:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	785a      	ldrb	r2, [r3, #1]
 800788c:	6a3b      	ldr	r3, [r7, #32]
 800788e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	3302      	adds	r3, #2
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	b29a      	uxth	r2, r3
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	3303      	adds	r3, #3
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	b29b      	uxth	r3, r3
 80078a0:	021b      	lsls	r3, r3, #8
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	4313      	orrs	r3, r2
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078ac:	bf28      	it	cs
 80078ae:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	6a3b      	ldr	r3, [r7, #32]
 80078b6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	791a      	ldrb	r2, [r3, #4]
 80078bc:	6a3b      	ldr	r3, [r7, #32]
 80078be:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	795a      	ldrb	r2, [r3, #5]
 80078c4:	6a3b      	ldr	r3, [r7, #32]
 80078c6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	799a      	ldrb	r2, [r3, #6]
 80078cc:	6a3b      	ldr	r3, [r7, #32]
 80078ce:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	79da      	ldrb	r2, [r3, #7]
 80078d4:	6a3b      	ldr	r3, [r7, #32]
 80078d6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	7a1a      	ldrb	r2, [r3, #8]
 80078dc:	6a3b      	ldr	r3, [r7, #32]
 80078de:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80078e0:	6a3b      	ldr	r3, [r7, #32]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	2b09      	cmp	r3, #9
 80078e6:	d002      	beq.n	80078ee <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80078e8:	6a3b      	ldr	r3, [r7, #32]
 80078ea:	2209      	movs	r2, #9
 80078ec:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80078ee:	88fb      	ldrh	r3, [r7, #6]
 80078f0:	2b09      	cmp	r3, #9
 80078f2:	f240 809d 	bls.w	8007a30 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80078f6:	2309      	movs	r3, #9
 80078f8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80078fa:	2300      	movs	r3, #0
 80078fc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80078fe:	e081      	b.n	8007a04 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007900:	f107 0316 	add.w	r3, r7, #22
 8007904:	4619      	mov	r1, r3
 8007906:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007908:	f000 f99f 	bl	8007c4a <USBH_GetNextDesc>
 800790c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800790e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007910:	785b      	ldrb	r3, [r3, #1]
 8007912:	2b04      	cmp	r3, #4
 8007914:	d176      	bne.n	8007a04 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	2b09      	cmp	r3, #9
 800791c:	d002      	beq.n	8007924 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800791e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007920:	2209      	movs	r2, #9
 8007922:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007928:	221a      	movs	r2, #26
 800792a:	fb02 f303 	mul.w	r3, r2, r3
 800792e:	3308      	adds	r3, #8
 8007930:	6a3a      	ldr	r2, [r7, #32]
 8007932:	4413      	add	r3, r2
 8007934:	3302      	adds	r3, #2
 8007936:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007938:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800793a:	69f8      	ldr	r0, [r7, #28]
 800793c:	f000 f87e 	bl	8007a3c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007940:	2300      	movs	r3, #0
 8007942:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007946:	2300      	movs	r3, #0
 8007948:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800794a:	e043      	b.n	80079d4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800794c:	f107 0316 	add.w	r3, r7, #22
 8007950:	4619      	mov	r1, r3
 8007952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007954:	f000 f979 	bl	8007c4a <USBH_GetNextDesc>
 8007958:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800795a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795c:	785b      	ldrb	r3, [r3, #1]
 800795e:	2b05      	cmp	r3, #5
 8007960:	d138      	bne.n	80079d4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	795b      	ldrb	r3, [r3, #5]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d10f      	bne.n	800798a <USBH_ParseCfgDesc+0x13a>
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	799b      	ldrb	r3, [r3, #6]
 800796e:	2b02      	cmp	r3, #2
 8007970:	d10b      	bne.n	800798a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	79db      	ldrb	r3, [r3, #7]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d10f      	bne.n	800799a <USBH_ParseCfgDesc+0x14a>
 800797a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	2b09      	cmp	r3, #9
 8007980:	d00b      	beq.n	800799a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007984:	2209      	movs	r2, #9
 8007986:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007988:	e007      	b.n	800799a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800798a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	2b07      	cmp	r3, #7
 8007990:	d004      	beq.n	800799c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007994:	2207      	movs	r2, #7
 8007996:	701a      	strb	r2, [r3, #0]
 8007998:	e000      	b.n	800799c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800799a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800799c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079a0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80079a4:	3201      	adds	r2, #1
 80079a6:	00d2      	lsls	r2, r2, #3
 80079a8:	211a      	movs	r1, #26
 80079aa:	fb01 f303 	mul.w	r3, r1, r3
 80079ae:	4413      	add	r3, r2
 80079b0:	3308      	adds	r3, #8
 80079b2:	6a3a      	ldr	r2, [r7, #32]
 80079b4:	4413      	add	r3, r2
 80079b6:	3304      	adds	r3, #4
 80079b8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80079ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079bc:	69b9      	ldr	r1, [r7, #24]
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f000 f86b 	bl	8007a9a <USBH_ParseEPDesc>
 80079c4:	4603      	mov	r3, r0
 80079c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80079ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80079ce:	3301      	adds	r3, #1
 80079d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	791b      	ldrb	r3, [r3, #4]
 80079d8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80079dc:	429a      	cmp	r2, r3
 80079de:	d204      	bcs.n	80079ea <USBH_ParseCfgDesc+0x19a>
 80079e0:	6a3b      	ldr	r3, [r7, #32]
 80079e2:	885a      	ldrh	r2, [r3, #2]
 80079e4:	8afb      	ldrh	r3, [r7, #22]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d8b0      	bhi.n	800794c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	791b      	ldrb	r3, [r3, #4]
 80079ee:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d201      	bcs.n	80079fa <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80079f6:	2303      	movs	r3, #3
 80079f8:	e01c      	b.n	8007a34 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80079fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079fe:	3301      	adds	r3, #1
 8007a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d805      	bhi.n	8007a18 <USBH_ParseCfgDesc+0x1c8>
 8007a0c:	6a3b      	ldr	r3, [r7, #32]
 8007a0e:	885a      	ldrh	r2, [r3, #2]
 8007a10:	8afb      	ldrh	r3, [r7, #22]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	f63f af74 	bhi.w	8007900 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007a18:	6a3b      	ldr	r3, [r7, #32]
 8007a1a:	791b      	ldrb	r3, [r3, #4]
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	bf28      	it	cs
 8007a20:	2302      	movcs	r3, #2
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d201      	bcs.n	8007a30 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e001      	b.n	8007a34 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007a30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3730      	adds	r7, #48	; 0x30
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	781a      	ldrb	r2, [r3, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	785a      	ldrb	r2, [r3, #1]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	789a      	ldrb	r2, [r3, #2]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	78da      	ldrb	r2, [r3, #3]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	791a      	ldrb	r2, [r3, #4]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	795a      	ldrb	r2, [r3, #5]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	799a      	ldrb	r2, [r3, #6]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	79da      	ldrb	r2, [r3, #7]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	7a1a      	ldrb	r2, [r3, #8]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	721a      	strb	r2, [r3, #8]
}
 8007a8e:	bf00      	nop
 8007a90:	370c      	adds	r7, #12
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007a9a:	b480      	push	{r7}
 8007a9c:	b087      	sub	sp, #28
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	60f8      	str	r0, [r7, #12]
 8007aa2:	60b9      	str	r1, [r7, #8]
 8007aa4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	781a      	ldrb	r2, [r3, #0]
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	785a      	ldrb	r2, [r3, #1]
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	789a      	ldrb	r2, [r3, #2]
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	78da      	ldrb	r2, [r3, #3]
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	3304      	adds	r3, #4
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	3305      	adds	r3, #5
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	021b      	lsls	r3, r3, #8
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	b29a      	uxth	r2, r3
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	799a      	ldrb	r2, [r3, #6]
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	889b      	ldrh	r3, [r3, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d102      	bne.n	8007afc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007af6:	2303      	movs	r3, #3
 8007af8:	75fb      	strb	r3, [r7, #23]
 8007afa:	e033      	b.n	8007b64 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	889b      	ldrh	r3, [r3, #4]
 8007b00:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007b04:	f023 0307 	bic.w	r3, r3, #7
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	889b      	ldrh	r3, [r3, #4]
 8007b12:	b21a      	sxth	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	3304      	adds	r3, #4
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	b299      	uxth	r1, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	3305      	adds	r3, #5
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	021b      	lsls	r3, r3, #8
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	430b      	orrs	r3, r1
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d110      	bne.n	8007b56 <USBH_ParseEPDesc+0xbc>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	3304      	adds	r3, #4
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	b299      	uxth	r1, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	3305      	adds	r3, #5
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	021b      	lsls	r3, r3, #8
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	430b      	orrs	r3, r1
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	b21b      	sxth	r3, r3
 8007b4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b52:	b21b      	sxth	r3, r3
 8007b54:	e001      	b.n	8007b5a <USBH_ParseEPDesc+0xc0>
 8007b56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	b21b      	sxth	r3, r3
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d116      	bne.n	8007b9c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	78db      	ldrb	r3, [r3, #3]
 8007b72:	f003 0303 	and.w	r3, r3, #3
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d005      	beq.n	8007b86 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	78db      	ldrb	r3, [r3, #3]
 8007b7e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007b82:	2b03      	cmp	r3, #3
 8007b84:	d127      	bne.n	8007bd6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	799b      	ldrb	r3, [r3, #6]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d003      	beq.n	8007b96 <USBH_ParseEPDesc+0xfc>
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	799b      	ldrb	r3, [r3, #6]
 8007b92:	2b10      	cmp	r3, #16
 8007b94:	d91f      	bls.n	8007bd6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007b96:	2303      	movs	r3, #3
 8007b98:	75fb      	strb	r3, [r7, #23]
 8007b9a:	e01c      	b.n	8007bd6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	78db      	ldrb	r3, [r3, #3]
 8007ba0:	f003 0303 	and.w	r3, r3, #3
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d10a      	bne.n	8007bbe <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	799b      	ldrb	r3, [r3, #6]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d003      	beq.n	8007bb8 <USBH_ParseEPDesc+0x11e>
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	799b      	ldrb	r3, [r3, #6]
 8007bb4:	2b10      	cmp	r3, #16
 8007bb6:	d90e      	bls.n	8007bd6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	75fb      	strb	r3, [r7, #23]
 8007bbc:	e00b      	b.n	8007bd6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	78db      	ldrb	r3, [r3, #3]
 8007bc2:	f003 0303 	and.w	r3, r3, #3
 8007bc6:	2b03      	cmp	r3, #3
 8007bc8:	d105      	bne.n	8007bd6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	799b      	ldrb	r3, [r3, #6]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d101      	bne.n	8007bd6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	371c      	adds	r7, #28
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b087      	sub	sp, #28
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	2b03      	cmp	r3, #3
 8007bfa:	d120      	bne.n	8007c3e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	1e9a      	subs	r2, r3, #2
 8007c02:	88fb      	ldrh	r3, [r7, #6]
 8007c04:	4293      	cmp	r3, r2
 8007c06:	bf28      	it	cs
 8007c08:	4613      	movcs	r3, r2
 8007c0a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	3302      	adds	r3, #2
 8007c10:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007c12:	2300      	movs	r3, #0
 8007c14:	82fb      	strh	r3, [r7, #22]
 8007c16:	e00b      	b.n	8007c30 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007c18:	8afb      	ldrh	r3, [r7, #22]
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	781a      	ldrb	r2, [r3, #0]
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	3301      	adds	r3, #1
 8007c28:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007c2a:	8afb      	ldrh	r3, [r7, #22]
 8007c2c:	3302      	adds	r3, #2
 8007c2e:	82fb      	strh	r3, [r7, #22]
 8007c30:	8afa      	ldrh	r2, [r7, #22]
 8007c32:	8abb      	ldrh	r3, [r7, #20]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d3ef      	bcc.n	8007c18 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	701a      	strb	r2, [r3, #0]
  }
}
 8007c3e:	bf00      	nop
 8007c40:	371c      	adds	r7, #28
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr

08007c4a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b085      	sub	sp, #20
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	881a      	ldrh	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	4413      	add	r3, r2
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4413      	add	r3, r2
 8007c70:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c72:	68fb      	ldr	r3, [r7, #12]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b086      	sub	sp, #24
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	789b      	ldrb	r3, [r3, #2]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d002      	beq.n	8007ca0 <USBH_CtlReq+0x20>
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d00f      	beq.n	8007cbe <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007c9e:	e027      	b.n	8007cf0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	68ba      	ldr	r2, [r7, #8]
 8007ca4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	88fa      	ldrh	r2, [r7, #6]
 8007caa:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	75fb      	strb	r3, [r7, #23]
      break;
 8007cbc:	e018      	b.n	8007cf0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007cbe:	68f8      	ldr	r0, [r7, #12]
 8007cc0:	f000 f81c 	bl	8007cfc <USBH_HandleControl>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007cc8:	7dfb      	ldrb	r3, [r7, #23]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d002      	beq.n	8007cd4 <USBH_CtlReq+0x54>
 8007cce:	7dfb      	ldrb	r3, [r7, #23]
 8007cd0:	2b03      	cmp	r3, #3
 8007cd2:	d106      	bne.n	8007ce2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	761a      	strb	r2, [r3, #24]
      break;
 8007ce0:	e005      	b.n	8007cee <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007ce2:	7dfb      	ldrb	r3, [r7, #23]
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	d102      	bne.n	8007cee <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2201      	movs	r2, #1
 8007cec:	709a      	strb	r2, [r3, #2]
      break;
 8007cee:	bf00      	nop
  }
  return status;
 8007cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3718      	adds	r7, #24
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
	...

08007cfc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af02      	add	r7, sp, #8
 8007d02:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d04:	2301      	movs	r3, #1
 8007d06:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	7e1b      	ldrb	r3, [r3, #24]
 8007d10:	3b01      	subs	r3, #1
 8007d12:	2b0a      	cmp	r3, #10
 8007d14:	f200 8156 	bhi.w	8007fc4 <USBH_HandleControl+0x2c8>
 8007d18:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <USBH_HandleControl+0x24>)
 8007d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1e:	bf00      	nop
 8007d20:	08007d4d 	.word	0x08007d4d
 8007d24:	08007d67 	.word	0x08007d67
 8007d28:	08007dd1 	.word	0x08007dd1
 8007d2c:	08007df7 	.word	0x08007df7
 8007d30:	08007e2f 	.word	0x08007e2f
 8007d34:	08007e59 	.word	0x08007e59
 8007d38:	08007eab 	.word	0x08007eab
 8007d3c:	08007ecd 	.word	0x08007ecd
 8007d40:	08007f09 	.word	0x08007f09
 8007d44:	08007f2f 	.word	0x08007f2f
 8007d48:	08007f6d 	.word	0x08007f6d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f103 0110 	add.w	r1, r3, #16
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	795b      	ldrb	r3, [r3, #5]
 8007d56:	461a      	mov	r2, r3
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f943 	bl	8007fe4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2202      	movs	r2, #2
 8007d62:	761a      	strb	r2, [r3, #24]
      break;
 8007d64:	e139      	b.n	8007fda <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	795b      	ldrb	r3, [r3, #5]
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 fcb7 	bl	80086e0 <USBH_LL_GetURBState>
 8007d72:	4603      	mov	r3, r0
 8007d74:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007d76:	7bbb      	ldrb	r3, [r7, #14]
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d11e      	bne.n	8007dba <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	7c1b      	ldrb	r3, [r3, #16]
 8007d80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d84:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	8adb      	ldrh	r3, [r3, #22]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00a      	beq.n	8007da4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007d8e:	7b7b      	ldrb	r3, [r7, #13]
 8007d90:	2b80      	cmp	r3, #128	; 0x80
 8007d92:	d103      	bne.n	8007d9c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2203      	movs	r2, #3
 8007d98:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007d9a:	e115      	b.n	8007fc8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2205      	movs	r2, #5
 8007da0:	761a      	strb	r2, [r3, #24]
      break;
 8007da2:	e111      	b.n	8007fc8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007da4:	7b7b      	ldrb	r3, [r7, #13]
 8007da6:	2b80      	cmp	r3, #128	; 0x80
 8007da8:	d103      	bne.n	8007db2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2209      	movs	r2, #9
 8007dae:	761a      	strb	r2, [r3, #24]
      break;
 8007db0:	e10a      	b.n	8007fc8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2207      	movs	r2, #7
 8007db6:	761a      	strb	r2, [r3, #24]
      break;
 8007db8:	e106      	b.n	8007fc8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007dba:	7bbb      	ldrb	r3, [r7, #14]
 8007dbc:	2b04      	cmp	r3, #4
 8007dbe:	d003      	beq.n	8007dc8 <USBH_HandleControl+0xcc>
 8007dc0:	7bbb      	ldrb	r3, [r7, #14]
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	f040 8100 	bne.w	8007fc8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	220b      	movs	r2, #11
 8007dcc:	761a      	strb	r2, [r3, #24]
      break;
 8007dce:	e0fb      	b.n	8007fc8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6899      	ldr	r1, [r3, #8]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	899a      	ldrh	r2, [r3, #12]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	791b      	ldrb	r3, [r3, #4]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f93a 	bl	8008062 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2204      	movs	r2, #4
 8007df2:	761a      	strb	r2, [r3, #24]
      break;
 8007df4:	e0f1      	b.n	8007fda <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	791b      	ldrb	r3, [r3, #4]
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fc6f 	bl	80086e0 <USBH_LL_GetURBState>
 8007e02:	4603      	mov	r3, r0
 8007e04:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007e06:	7bbb      	ldrb	r3, [r7, #14]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d102      	bne.n	8007e12 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2209      	movs	r2, #9
 8007e10:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007e12:	7bbb      	ldrb	r3, [r7, #14]
 8007e14:	2b05      	cmp	r3, #5
 8007e16:	d102      	bne.n	8007e1e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e1c:	e0d6      	b.n	8007fcc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007e1e:	7bbb      	ldrb	r3, [r7, #14]
 8007e20:	2b04      	cmp	r3, #4
 8007e22:	f040 80d3 	bne.w	8007fcc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	220b      	movs	r2, #11
 8007e2a:	761a      	strb	r2, [r3, #24]
      break;
 8007e2c:	e0ce      	b.n	8007fcc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6899      	ldr	r1, [r3, #8]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	899a      	ldrh	r2, [r3, #12]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	795b      	ldrb	r3, [r3, #5]
 8007e3a:	2001      	movs	r0, #1
 8007e3c:	9000      	str	r0, [sp, #0]
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f8ea 	bl	8008018 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2206      	movs	r2, #6
 8007e54:	761a      	strb	r2, [r3, #24]
      break;
 8007e56:	e0c0      	b.n	8007fda <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	795b      	ldrb	r3, [r3, #5]
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fc3e 	bl	80086e0 <USBH_LL_GetURBState>
 8007e64:	4603      	mov	r3, r0
 8007e66:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007e68:	7bbb      	ldrb	r3, [r7, #14]
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d103      	bne.n	8007e76 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2207      	movs	r2, #7
 8007e72:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e74:	e0ac      	b.n	8007fd0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007e76:	7bbb      	ldrb	r3, [r7, #14]
 8007e78:	2b05      	cmp	r3, #5
 8007e7a:	d105      	bne.n	8007e88 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	220c      	movs	r2, #12
 8007e80:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007e82:	2303      	movs	r3, #3
 8007e84:	73fb      	strb	r3, [r7, #15]
      break;
 8007e86:	e0a3      	b.n	8007fd0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007e88:	7bbb      	ldrb	r3, [r7, #14]
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d103      	bne.n	8007e96 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2205      	movs	r2, #5
 8007e92:	761a      	strb	r2, [r3, #24]
      break;
 8007e94:	e09c      	b.n	8007fd0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007e96:	7bbb      	ldrb	r3, [r7, #14]
 8007e98:	2b04      	cmp	r3, #4
 8007e9a:	f040 8099 	bne.w	8007fd0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	220b      	movs	r2, #11
 8007ea2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007ea4:	2302      	movs	r3, #2
 8007ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ea8:	e092      	b.n	8007fd0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	791b      	ldrb	r3, [r3, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f8d5 	bl	8008062 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2208      	movs	r2, #8
 8007ec8:	761a      	strb	r2, [r3, #24]

      break;
 8007eca:	e086      	b.n	8007fda <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	791b      	ldrb	r3, [r3, #4]
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 fc04 	bl	80086e0 <USBH_LL_GetURBState>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007edc:	7bbb      	ldrb	r3, [r7, #14]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d105      	bne.n	8007eee <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	220d      	movs	r2, #13
 8007ee6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007eec:	e072      	b.n	8007fd4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007eee:	7bbb      	ldrb	r3, [r7, #14]
 8007ef0:	2b04      	cmp	r3, #4
 8007ef2:	d103      	bne.n	8007efc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	220b      	movs	r2, #11
 8007ef8:	761a      	strb	r2, [r3, #24]
      break;
 8007efa:	e06b      	b.n	8007fd4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007efc:	7bbb      	ldrb	r3, [r7, #14]
 8007efe:	2b05      	cmp	r3, #5
 8007f00:	d168      	bne.n	8007fd4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007f02:	2303      	movs	r3, #3
 8007f04:	73fb      	strb	r3, [r7, #15]
      break;
 8007f06:	e065      	b.n	8007fd4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	795b      	ldrb	r3, [r3, #5]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	9200      	str	r2, [sp, #0]
 8007f10:	2200      	movs	r2, #0
 8007f12:	2100      	movs	r1, #0
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 f87f 	bl	8008018 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	220a      	movs	r2, #10
 8007f2a:	761a      	strb	r2, [r3, #24]
      break;
 8007f2c:	e055      	b.n	8007fda <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	795b      	ldrb	r3, [r3, #5]
 8007f32:	4619      	mov	r1, r3
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fbd3 	bl	80086e0 <USBH_LL_GetURBState>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007f3e:	7bbb      	ldrb	r3, [r7, #14]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d105      	bne.n	8007f50 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007f44:	2300      	movs	r3, #0
 8007f46:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	220d      	movs	r2, #13
 8007f4c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f4e:	e043      	b.n	8007fd8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f50:	7bbb      	ldrb	r3, [r7, #14]
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d103      	bne.n	8007f5e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2209      	movs	r2, #9
 8007f5a:	761a      	strb	r2, [r3, #24]
      break;
 8007f5c:	e03c      	b.n	8007fd8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007f5e:	7bbb      	ldrb	r3, [r7, #14]
 8007f60:	2b04      	cmp	r3, #4
 8007f62:	d139      	bne.n	8007fd8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	220b      	movs	r2, #11
 8007f68:	761a      	strb	r2, [r3, #24]
      break;
 8007f6a:	e035      	b.n	8007fd8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	7e5b      	ldrb	r3, [r3, #25]
 8007f70:	3301      	adds	r3, #1
 8007f72:	b2da      	uxtb	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	765a      	strb	r2, [r3, #25]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	7e5b      	ldrb	r3, [r3, #25]
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d806      	bhi.n	8007f8e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007f8c:	e025      	b.n	8007fda <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f94:	2106      	movs	r1, #6
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	795b      	ldrb	r3, [r3, #5]
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f90c 	bl	80081c4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	791b      	ldrb	r3, [r3, #4]
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 f906 	bl	80081c4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007fbe:	2302      	movs	r3, #2
 8007fc0:	73fb      	strb	r3, [r7, #15]
      break;
 8007fc2:	e00a      	b.n	8007fda <USBH_HandleControl+0x2de>

    default:
      break;
 8007fc4:	bf00      	nop
 8007fc6:	e008      	b.n	8007fda <USBH_HandleControl+0x2de>
      break;
 8007fc8:	bf00      	nop
 8007fca:	e006      	b.n	8007fda <USBH_HandleControl+0x2de>
      break;
 8007fcc:	bf00      	nop
 8007fce:	e004      	b.n	8007fda <USBH_HandleControl+0x2de>
      break;
 8007fd0:	bf00      	nop
 8007fd2:	e002      	b.n	8007fda <USBH_HandleControl+0x2de>
      break;
 8007fd4:	bf00      	nop
 8007fd6:	e000      	b.n	8007fda <USBH_HandleControl+0x2de>
      break;
 8007fd8:	bf00      	nop
  }

  return status;
 8007fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b088      	sub	sp, #32
 8007fe8:	af04      	add	r7, sp, #16
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	4613      	mov	r3, r2
 8007ff0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007ff2:	79f9      	ldrb	r1, [r7, #7]
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	9303      	str	r3, [sp, #12]
 8007ff8:	2308      	movs	r3, #8
 8007ffa:	9302      	str	r3, [sp, #8]
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	9301      	str	r3, [sp, #4]
 8008000:	2300      	movs	r3, #0
 8008002:	9300      	str	r3, [sp, #0]
 8008004:	2300      	movs	r3, #0
 8008006:	2200      	movs	r2, #0
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f000 fb38 	bl	800867e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b088      	sub	sp, #32
 800801c:	af04      	add	r7, sp, #16
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	4611      	mov	r1, r2
 8008024:	461a      	mov	r2, r3
 8008026:	460b      	mov	r3, r1
 8008028:	80fb      	strh	r3, [r7, #6]
 800802a:	4613      	mov	r3, r2
 800802c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008034:	2b00      	cmp	r3, #0
 8008036:	d001      	beq.n	800803c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008038:	2300      	movs	r3, #0
 800803a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800803c:	7979      	ldrb	r1, [r7, #5]
 800803e:	7e3b      	ldrb	r3, [r7, #24]
 8008040:	9303      	str	r3, [sp, #12]
 8008042:	88fb      	ldrh	r3, [r7, #6]
 8008044:	9302      	str	r3, [sp, #8]
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	9301      	str	r3, [sp, #4]
 800804a:	2301      	movs	r3, #1
 800804c:	9300      	str	r3, [sp, #0]
 800804e:	2300      	movs	r3, #0
 8008050:	2200      	movs	r2, #0
 8008052:	68f8      	ldr	r0, [r7, #12]
 8008054:	f000 fb13 	bl	800867e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b088      	sub	sp, #32
 8008066:	af04      	add	r7, sp, #16
 8008068:	60f8      	str	r0, [r7, #12]
 800806a:	60b9      	str	r1, [r7, #8]
 800806c:	4611      	mov	r1, r2
 800806e:	461a      	mov	r2, r3
 8008070:	460b      	mov	r3, r1
 8008072:	80fb      	strh	r3, [r7, #6]
 8008074:	4613      	mov	r3, r2
 8008076:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008078:	7979      	ldrb	r1, [r7, #5]
 800807a:	2300      	movs	r3, #0
 800807c:	9303      	str	r3, [sp, #12]
 800807e:	88fb      	ldrh	r3, [r7, #6]
 8008080:	9302      	str	r3, [sp, #8]
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	9301      	str	r3, [sp, #4]
 8008086:	2301      	movs	r3, #1
 8008088:	9300      	str	r3, [sp, #0]
 800808a:	2300      	movs	r3, #0
 800808c:	2201      	movs	r2, #1
 800808e:	68f8      	ldr	r0, [r7, #12]
 8008090:	f000 faf5 	bl	800867e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008094:	2300      	movs	r3, #0

}
 8008096:	4618      	mov	r0, r3
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b088      	sub	sp, #32
 80080a2:	af04      	add	r7, sp, #16
 80080a4:	60f8      	str	r0, [r7, #12]
 80080a6:	60b9      	str	r1, [r7, #8]
 80080a8:	4611      	mov	r1, r2
 80080aa:	461a      	mov	r2, r3
 80080ac:	460b      	mov	r3, r1
 80080ae:	80fb      	strh	r3, [r7, #6]
 80080b0:	4613      	mov	r3, r2
 80080b2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d001      	beq.n	80080c2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80080be:	2300      	movs	r3, #0
 80080c0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080c2:	7979      	ldrb	r1, [r7, #5]
 80080c4:	7e3b      	ldrb	r3, [r7, #24]
 80080c6:	9303      	str	r3, [sp, #12]
 80080c8:	88fb      	ldrh	r3, [r7, #6]
 80080ca:	9302      	str	r3, [sp, #8]
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	9301      	str	r3, [sp, #4]
 80080d0:	2301      	movs	r3, #1
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	2302      	movs	r3, #2
 80080d6:	2200      	movs	r2, #0
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f000 fad0 	bl	800867e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b088      	sub	sp, #32
 80080ec:	af04      	add	r7, sp, #16
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	4611      	mov	r1, r2
 80080f4:	461a      	mov	r2, r3
 80080f6:	460b      	mov	r3, r1
 80080f8:	80fb      	strh	r3, [r7, #6]
 80080fa:	4613      	mov	r3, r2
 80080fc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080fe:	7979      	ldrb	r1, [r7, #5]
 8008100:	2300      	movs	r3, #0
 8008102:	9303      	str	r3, [sp, #12]
 8008104:	88fb      	ldrh	r3, [r7, #6]
 8008106:	9302      	str	r3, [sp, #8]
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	9301      	str	r3, [sp, #4]
 800810c:	2301      	movs	r3, #1
 800810e:	9300      	str	r3, [sp, #0]
 8008110:	2302      	movs	r3, #2
 8008112:	2201      	movs	r2, #1
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f000 fab2 	bl	800867e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	3710      	adds	r7, #16
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b086      	sub	sp, #24
 8008128:	af04      	add	r7, sp, #16
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	4608      	mov	r0, r1
 800812e:	4611      	mov	r1, r2
 8008130:	461a      	mov	r2, r3
 8008132:	4603      	mov	r3, r0
 8008134:	70fb      	strb	r3, [r7, #3]
 8008136:	460b      	mov	r3, r1
 8008138:	70bb      	strb	r3, [r7, #2]
 800813a:	4613      	mov	r3, r2
 800813c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800813e:	7878      	ldrb	r0, [r7, #1]
 8008140:	78ba      	ldrb	r2, [r7, #2]
 8008142:	78f9      	ldrb	r1, [r7, #3]
 8008144:	8b3b      	ldrh	r3, [r7, #24]
 8008146:	9302      	str	r3, [sp, #8]
 8008148:	7d3b      	ldrb	r3, [r7, #20]
 800814a:	9301      	str	r3, [sp, #4]
 800814c:	7c3b      	ldrb	r3, [r7, #16]
 800814e:	9300      	str	r3, [sp, #0]
 8008150:	4603      	mov	r3, r0
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fa45 	bl	80085e2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b082      	sub	sp, #8
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
 800816a:	460b      	mov	r3, r1
 800816c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800816e:	78fb      	ldrb	r3, [r7, #3]
 8008170:	4619      	mov	r1, r3
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 fa64 	bl	8008640 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	3708      	adds	r7, #8
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b084      	sub	sp, #16
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
 800818a:	460b      	mov	r3, r1
 800818c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 f836 	bl	8008200 <USBH_GetFreePipe>
 8008194:	4603      	mov	r3, r0
 8008196:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008198:	89fb      	ldrh	r3, [r7, #14]
 800819a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800819e:	4293      	cmp	r3, r2
 80081a0:	d00a      	beq.n	80081b8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80081a2:	78fa      	ldrb	r2, [r7, #3]
 80081a4:	89fb      	ldrh	r3, [r7, #14]
 80081a6:	f003 030f 	and.w	r3, r3, #15
 80081aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081ae:	6879      	ldr	r1, [r7, #4]
 80081b0:	33e0      	adds	r3, #224	; 0xe0
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	440b      	add	r3, r1
 80081b6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80081b8:	89fb      	ldrh	r3, [r7, #14]
 80081ba:	b2db      	uxtb	r3, r3
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	460b      	mov	r3, r1
 80081ce:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80081d0:	78fb      	ldrb	r3, [r7, #3]
 80081d2:	2b0f      	cmp	r3, #15
 80081d4:	d80d      	bhi.n	80081f2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80081d6:	78fb      	ldrb	r3, [r7, #3]
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	33e0      	adds	r3, #224	; 0xe0
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	4413      	add	r3, r2
 80081e0:	685a      	ldr	r2, [r3, #4]
 80081e2:	78fb      	ldrb	r3, [r7, #3]
 80081e4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80081e8:	6879      	ldr	r1, [r7, #4]
 80081ea:	33e0      	adds	r3, #224	; 0xe0
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	440b      	add	r3, r1
 80081f0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008208:	2300      	movs	r3, #0
 800820a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800820c:	2300      	movs	r3, #0
 800820e:	73fb      	strb	r3, [r7, #15]
 8008210:	e00f      	b.n	8008232 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008212:	7bfb      	ldrb	r3, [r7, #15]
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	33e0      	adds	r3, #224	; 0xe0
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	4413      	add	r3, r2
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008222:	2b00      	cmp	r3, #0
 8008224:	d102      	bne.n	800822c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008226:	7bfb      	ldrb	r3, [r7, #15]
 8008228:	b29b      	uxth	r3, r3
 800822a:	e007      	b.n	800823c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800822c:	7bfb      	ldrb	r3, [r7, #15]
 800822e:	3301      	adds	r3, #1
 8008230:	73fb      	strb	r3, [r7, #15]
 8008232:	7bfb      	ldrb	r3, [r7, #15]
 8008234:	2b0f      	cmp	r3, #15
 8008236:	d9ec      	bls.n	8008212 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008238:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800823c:	4618      	mov	r0, r3
 800823e:	3714      	adds	r7, #20
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800824c:	2201      	movs	r2, #1
 800824e:	490e      	ldr	r1, [pc, #56]	; (8008288 <MX_USB_HOST_Init+0x40>)
 8008250:	480e      	ldr	r0, [pc, #56]	; (800828c <MX_USB_HOST_Init+0x44>)
 8008252:	f7fe fba7 	bl	80069a4 <USBH_Init>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d001      	beq.n	8008260 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800825c:	f7f8 fb84 	bl	8000968 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008260:	490b      	ldr	r1, [pc, #44]	; (8008290 <MX_USB_HOST_Init+0x48>)
 8008262:	480a      	ldr	r0, [pc, #40]	; (800828c <MX_USB_HOST_Init+0x44>)
 8008264:	f7fe fc2c 	bl	8006ac0 <USBH_RegisterClass>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d001      	beq.n	8008272 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800826e:	f7f8 fb7b 	bl	8000968 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008272:	4806      	ldr	r0, [pc, #24]	; (800828c <MX_USB_HOST_Init+0x44>)
 8008274:	f7fe fcb0 	bl	8006bd8 <USBH_Start>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d001      	beq.n	8008282 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800827e:	f7f8 fb73 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008282:	bf00      	nop
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	080082a9 	.word	0x080082a9
 800828c:	200005d4 	.word	0x200005d4
 8008290:	2000000c 	.word	0x2000000c

08008294 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008298:	4802      	ldr	r0, [pc, #8]	; (80082a4 <MX_USB_HOST_Process+0x10>)
 800829a:	f7fe fcad 	bl	8006bf8 <USBH_Process>
}
 800829e:	bf00      	nop
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	200005d4 	.word	0x200005d4

080082a8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	460b      	mov	r3, r1
 80082b2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80082b4:	78fb      	ldrb	r3, [r7, #3]
 80082b6:	3b01      	subs	r3, #1
 80082b8:	2b04      	cmp	r3, #4
 80082ba:	d819      	bhi.n	80082f0 <USBH_UserProcess+0x48>
 80082bc:	a201      	add	r2, pc, #4	; (adr r2, 80082c4 <USBH_UserProcess+0x1c>)
 80082be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c2:	bf00      	nop
 80082c4:	080082f1 	.word	0x080082f1
 80082c8:	080082e1 	.word	0x080082e1
 80082cc:	080082f1 	.word	0x080082f1
 80082d0:	080082e9 	.word	0x080082e9
 80082d4:	080082d9 	.word	0x080082d9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80082d8:	4b09      	ldr	r3, [pc, #36]	; (8008300 <USBH_UserProcess+0x58>)
 80082da:	2203      	movs	r2, #3
 80082dc:	701a      	strb	r2, [r3, #0]
  break;
 80082de:	e008      	b.n	80082f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80082e0:	4b07      	ldr	r3, [pc, #28]	; (8008300 <USBH_UserProcess+0x58>)
 80082e2:	2202      	movs	r2, #2
 80082e4:	701a      	strb	r2, [r3, #0]
  break;
 80082e6:	e004      	b.n	80082f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80082e8:	4b05      	ldr	r3, [pc, #20]	; (8008300 <USBH_UserProcess+0x58>)
 80082ea:	2201      	movs	r2, #1
 80082ec:	701a      	strb	r2, [r3, #0]
  break;
 80082ee:	e000      	b.n	80082f2 <USBH_UserProcess+0x4a>

  default:
  break;
 80082f0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80082f2:	bf00      	nop
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	200009ac 	.word	0x200009ac

08008304 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b08a      	sub	sp, #40	; 0x28
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800830c:	f107 0314 	add.w	r3, r7, #20
 8008310:	2200      	movs	r2, #0
 8008312:	601a      	str	r2, [r3, #0]
 8008314:	605a      	str	r2, [r3, #4]
 8008316:	609a      	str	r2, [r3, #8]
 8008318:	60da      	str	r2, [r3, #12]
 800831a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008324:	d13a      	bne.n	800839c <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008326:	2300      	movs	r3, #0
 8008328:	613b      	str	r3, [r7, #16]
 800832a:	4b1e      	ldr	r3, [pc, #120]	; (80083a4 <HAL_HCD_MspInit+0xa0>)
 800832c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800832e:	4a1d      	ldr	r2, [pc, #116]	; (80083a4 <HAL_HCD_MspInit+0xa0>)
 8008330:	f043 0301 	orr.w	r3, r3, #1
 8008334:	6313      	str	r3, [r2, #48]	; 0x30
 8008336:	4b1b      	ldr	r3, [pc, #108]	; (80083a4 <HAL_HCD_MspInit+0xa0>)
 8008338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800833a:	f003 0301 	and.w	r3, r3, #1
 800833e:	613b      	str	r3, [r7, #16]
 8008340:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008342:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008348:	2302      	movs	r3, #2
 800834a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800834c:	2300      	movs	r3, #0
 800834e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008350:	2303      	movs	r3, #3
 8008352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008354:	230a      	movs	r3, #10
 8008356:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008358:	f107 0314 	add.w	r3, r7, #20
 800835c:	4619      	mov	r1, r3
 800835e:	4812      	ldr	r0, [pc, #72]	; (80083a8 <HAL_HCD_MspInit+0xa4>)
 8008360:	f7f9 fb6a 	bl	8001a38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008364:	4b0f      	ldr	r3, [pc, #60]	; (80083a4 <HAL_HCD_MspInit+0xa0>)
 8008366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008368:	4a0e      	ldr	r2, [pc, #56]	; (80083a4 <HAL_HCD_MspInit+0xa0>)
 800836a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800836e:	6353      	str	r3, [r2, #52]	; 0x34
 8008370:	2300      	movs	r3, #0
 8008372:	60fb      	str	r3, [r7, #12]
 8008374:	4b0b      	ldr	r3, [pc, #44]	; (80083a4 <HAL_HCD_MspInit+0xa0>)
 8008376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008378:	4a0a      	ldr	r2, [pc, #40]	; (80083a4 <HAL_HCD_MspInit+0xa0>)
 800837a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800837e:	6453      	str	r3, [r2, #68]	; 0x44
 8008380:	4b08      	ldr	r3, [pc, #32]	; (80083a4 <HAL_HCD_MspInit+0xa0>)
 8008382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008384:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008388:	60fb      	str	r3, [r7, #12]
 800838a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800838c:	2200      	movs	r2, #0
 800838e:	2100      	movs	r1, #0
 8008390:	2043      	movs	r0, #67	; 0x43
 8008392:	f7f8 ff18 	bl	80011c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008396:	2043      	movs	r0, #67	; 0x43
 8008398:	f7f8 ff31 	bl	80011fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800839c:	bf00      	nop
 800839e:	3728      	adds	r7, #40	; 0x28
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	40023800 	.word	0x40023800
 80083a8:	40020000 	.word	0x40020000

080083ac <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7fe fffb 	bl	80073b6 <USBH_LL_IncTimer>
}
 80083c0:	bf00      	nop
 80083c2:	3708      	adds	r7, #8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7ff f833 	bl	8007442 <USBH_LL_Connect>
}
 80083dc:	bf00      	nop
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7ff f83c 	bl	8007470 <USBH_LL_Disconnect>
}
 80083f8:	bf00      	nop
 80083fa:	3708      	adds	r7, #8
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	460b      	mov	r3, r1
 800840a:	70fb      	strb	r3, [r7, #3]
 800840c:	4613      	mov	r3, r2
 800840e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800842a:	4618      	mov	r0, r3
 800842c:	f7fe ffed 	bl	800740a <USBH_LL_PortEnabled>
}
 8008430:	bf00      	nop
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008446:	4618      	mov	r0, r3
 8008448:	f7fe ffed 	bl	8007426 <USBH_LL_PortDisabled>
}
 800844c:	bf00      	nop
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008462:	2b01      	cmp	r3, #1
 8008464:	d12a      	bne.n	80084bc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008466:	4a18      	ldr	r2, [pc, #96]	; (80084c8 <USBH_LL_Init+0x74>)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a15      	ldr	r2, [pc, #84]	; (80084c8 <USBH_LL_Init+0x74>)
 8008472:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008476:	4b14      	ldr	r3, [pc, #80]	; (80084c8 <USBH_LL_Init+0x74>)
 8008478:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800847c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800847e:	4b12      	ldr	r3, [pc, #72]	; (80084c8 <USBH_LL_Init+0x74>)
 8008480:	2208      	movs	r2, #8
 8008482:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008484:	4b10      	ldr	r3, [pc, #64]	; (80084c8 <USBH_LL_Init+0x74>)
 8008486:	2201      	movs	r2, #1
 8008488:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800848a:	4b0f      	ldr	r3, [pc, #60]	; (80084c8 <USBH_LL_Init+0x74>)
 800848c:	2200      	movs	r2, #0
 800848e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008490:	4b0d      	ldr	r3, [pc, #52]	; (80084c8 <USBH_LL_Init+0x74>)
 8008492:	2202      	movs	r2, #2
 8008494:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008496:	4b0c      	ldr	r3, [pc, #48]	; (80084c8 <USBH_LL_Init+0x74>)
 8008498:	2200      	movs	r2, #0
 800849a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800849c:	480a      	ldr	r0, [pc, #40]	; (80084c8 <USBH_LL_Init+0x74>)
 800849e:	f7f9 fc68 	bl	8001d72 <HAL_HCD_Init>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d001      	beq.n	80084ac <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80084a8:	f7f8 fa5e 	bl	8000968 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80084ac:	4806      	ldr	r0, [pc, #24]	; (80084c8 <USBH_LL_Init+0x74>)
 80084ae:	f7fa f84c 	bl	800254a <HAL_HCD_GetCurrentFrame>
 80084b2:	4603      	mov	r3, r0
 80084b4:	4619      	mov	r1, r3
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7fe ff6e 	bl	8007398 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	200009b0 	.word	0x200009b0

080084cc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084d4:	2300      	movs	r3, #0
 80084d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084d8:	2300      	movs	r3, #0
 80084da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7f9 ffbb 	bl	800245e <HAL_HCD_Start>
 80084e8:	4603      	mov	r3, r0
 80084ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80084ec:	7bfb      	ldrb	r3, [r7, #15]
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 f952 	bl	8008798 <USBH_Get_USB_Status>
 80084f4:	4603      	mov	r3, r0
 80084f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b084      	sub	sp, #16
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800850a:	2300      	movs	r3, #0
 800850c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800850e:	2300      	movs	r3, #0
 8008510:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008518:	4618      	mov	r0, r3
 800851a:	f7f9 ffc3 	bl	80024a4 <HAL_HCD_Stop>
 800851e:	4603      	mov	r3, r0
 8008520:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008522:	7bfb      	ldrb	r3, [r7, #15]
 8008524:	4618      	mov	r0, r3
 8008526:	f000 f937 	bl	8008798 <USBH_Get_USB_Status>
 800852a:	4603      	mov	r3, r0
 800852c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800852e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008530:	4618      	mov	r0, r3
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008540:	2301      	movs	r3, #1
 8008542:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800854a:	4618      	mov	r0, r3
 800854c:	f7fa f80b 	bl	8002566 <HAL_HCD_GetCurrentSpeed>
 8008550:	4603      	mov	r3, r0
 8008552:	2b02      	cmp	r3, #2
 8008554:	d00c      	beq.n	8008570 <USBH_LL_GetSpeed+0x38>
 8008556:	2b02      	cmp	r3, #2
 8008558:	d80d      	bhi.n	8008576 <USBH_LL_GetSpeed+0x3e>
 800855a:	2b00      	cmp	r3, #0
 800855c:	d002      	beq.n	8008564 <USBH_LL_GetSpeed+0x2c>
 800855e:	2b01      	cmp	r3, #1
 8008560:	d003      	beq.n	800856a <USBH_LL_GetSpeed+0x32>
 8008562:	e008      	b.n	8008576 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008564:	2300      	movs	r3, #0
 8008566:	73fb      	strb	r3, [r7, #15]
    break;
 8008568:	e008      	b.n	800857c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800856a:	2301      	movs	r3, #1
 800856c:	73fb      	strb	r3, [r7, #15]
    break;
 800856e:	e005      	b.n	800857c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008570:	2302      	movs	r3, #2
 8008572:	73fb      	strb	r3, [r7, #15]
    break;
 8008574:	e002      	b.n	800857c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008576:	2301      	movs	r3, #1
 8008578:	73fb      	strb	r3, [r7, #15]
    break;
 800857a:	bf00      	nop
  }
  return  speed;
 800857c:	7bfb      	ldrb	r3, [r7, #15]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b084      	sub	sp, #16
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008592:	2300      	movs	r3, #0
 8008594:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800859c:	4618      	mov	r0, r3
 800859e:	f7f9 ff9e 	bl	80024de <HAL_HCD_ResetPort>
 80085a2:	4603      	mov	r3, r0
 80085a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80085a6:	7bfb      	ldrb	r3, [r7, #15]
 80085a8:	4618      	mov	r0, r3
 80085aa:	f000 f8f5 	bl	8008798 <USBH_Get_USB_Status>
 80085ae:	4603      	mov	r3, r0
 80085b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	460b      	mov	r3, r1
 80085c6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085ce:	78fa      	ldrb	r2, [r7, #3]
 80085d0:	4611      	mov	r1, r2
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7f9 ffa5 	bl	8002522 <HAL_HCD_HC_GetXferCount>
 80085d8:	4603      	mov	r3, r0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3708      	adds	r7, #8
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80085e2:	b590      	push	{r4, r7, lr}
 80085e4:	b089      	sub	sp, #36	; 0x24
 80085e6:	af04      	add	r7, sp, #16
 80085e8:	6078      	str	r0, [r7, #4]
 80085ea:	4608      	mov	r0, r1
 80085ec:	4611      	mov	r1, r2
 80085ee:	461a      	mov	r2, r3
 80085f0:	4603      	mov	r3, r0
 80085f2:	70fb      	strb	r3, [r7, #3]
 80085f4:	460b      	mov	r3, r1
 80085f6:	70bb      	strb	r3, [r7, #2]
 80085f8:	4613      	mov	r3, r2
 80085fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085fc:	2300      	movs	r3, #0
 80085fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008600:	2300      	movs	r3, #0
 8008602:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800860a:	787c      	ldrb	r4, [r7, #1]
 800860c:	78ba      	ldrb	r2, [r7, #2]
 800860e:	78f9      	ldrb	r1, [r7, #3]
 8008610:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008612:	9302      	str	r3, [sp, #8]
 8008614:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008618:	9301      	str	r3, [sp, #4]
 800861a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800861e:	9300      	str	r3, [sp, #0]
 8008620:	4623      	mov	r3, r4
 8008622:	f7f9 fc08 	bl	8001e36 <HAL_HCD_HC_Init>
 8008626:	4603      	mov	r3, r0
 8008628:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800862a:	7bfb      	ldrb	r3, [r7, #15]
 800862c:	4618      	mov	r0, r3
 800862e:	f000 f8b3 	bl	8008798 <USBH_Get_USB_Status>
 8008632:	4603      	mov	r3, r0
 8008634:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008636:	7bbb      	ldrb	r3, [r7, #14]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3714      	adds	r7, #20
 800863c:	46bd      	mov	sp, r7
 800863e:	bd90      	pop	{r4, r7, pc}

08008640 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	460b      	mov	r3, r1
 800864a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800864c:	2300      	movs	r3, #0
 800864e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008650:	2300      	movs	r3, #0
 8008652:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800865a:	78fa      	ldrb	r2, [r7, #3]
 800865c:	4611      	mov	r1, r2
 800865e:	4618      	mov	r0, r3
 8008660:	f7f9 fc78 	bl	8001f54 <HAL_HCD_HC_Halt>
 8008664:	4603      	mov	r3, r0
 8008666:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008668:	7bfb      	ldrb	r3, [r7, #15]
 800866a:	4618      	mov	r0, r3
 800866c:	f000 f894 	bl	8008798 <USBH_Get_USB_Status>
 8008670:	4603      	mov	r3, r0
 8008672:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008674:	7bbb      	ldrb	r3, [r7, #14]
}
 8008676:	4618      	mov	r0, r3
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800867e:	b590      	push	{r4, r7, lr}
 8008680:	b089      	sub	sp, #36	; 0x24
 8008682:	af04      	add	r7, sp, #16
 8008684:	6078      	str	r0, [r7, #4]
 8008686:	4608      	mov	r0, r1
 8008688:	4611      	mov	r1, r2
 800868a:	461a      	mov	r2, r3
 800868c:	4603      	mov	r3, r0
 800868e:	70fb      	strb	r3, [r7, #3]
 8008690:	460b      	mov	r3, r1
 8008692:	70bb      	strb	r3, [r7, #2]
 8008694:	4613      	mov	r3, r2
 8008696:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008698:	2300      	movs	r3, #0
 800869a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800869c:	2300      	movs	r3, #0
 800869e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80086a6:	787c      	ldrb	r4, [r7, #1]
 80086a8:	78ba      	ldrb	r2, [r7, #2]
 80086aa:	78f9      	ldrb	r1, [r7, #3]
 80086ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80086b0:	9303      	str	r3, [sp, #12]
 80086b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086b4:	9302      	str	r3, [sp, #8]
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	9301      	str	r3, [sp, #4]
 80086ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	4623      	mov	r3, r4
 80086c2:	f7f9 fc6b 	bl	8001f9c <HAL_HCD_HC_SubmitRequest>
 80086c6:	4603      	mov	r3, r0
 80086c8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80086ca:	7bfb      	ldrb	r3, [r7, #15]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f000 f863 	bl	8008798 <USBH_Get_USB_Status>
 80086d2:	4603      	mov	r3, r0
 80086d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3714      	adds	r7, #20
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd90      	pop	{r4, r7, pc}

080086e0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80086f2:	78fa      	ldrb	r2, [r7, #3]
 80086f4:	4611      	mov	r1, r2
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7f9 feff 	bl	80024fa <HAL_HCD_HC_GetURBState>
 80086fc:	4603      	mov	r3, r0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b082      	sub	sp, #8
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	460b      	mov	r3, r1
 8008710:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 8008712:	20c8      	movs	r0, #200	; 0xc8
 8008714:	f7f8 fc58 	bl	8000fc8 <HAL_Delay>
  return USBH_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008722:	b480      	push	{r7}
 8008724:	b085      	sub	sp, #20
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
 800872a:	460b      	mov	r3, r1
 800872c:	70fb      	strb	r3, [r7, #3]
 800872e:	4613      	mov	r3, r2
 8008730:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008738:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800873a:	78fb      	ldrb	r3, [r7, #3]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	212c      	movs	r1, #44	; 0x2c
 8008740:	fb01 f303 	mul.w	r3, r1, r3
 8008744:	4413      	add	r3, r2
 8008746:	333b      	adds	r3, #59	; 0x3b
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d009      	beq.n	8008762 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800874e:	78fb      	ldrb	r3, [r7, #3]
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	212c      	movs	r1, #44	; 0x2c
 8008754:	fb01 f303 	mul.w	r3, r1, r3
 8008758:	4413      	add	r3, r2
 800875a:	3354      	adds	r3, #84	; 0x54
 800875c:	78ba      	ldrb	r2, [r7, #2]
 800875e:	701a      	strb	r2, [r3, #0]
 8008760:	e008      	b.n	8008774 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008762:	78fb      	ldrb	r3, [r7, #3]
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	212c      	movs	r1, #44	; 0x2c
 8008768:	fb01 f303 	mul.w	r3, r1, r3
 800876c:	4413      	add	r3, r2
 800876e:	3355      	adds	r3, #85	; 0x55
 8008770:	78ba      	ldrb	r2, [r7, #2]
 8008772:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3714      	adds	r7, #20
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr

08008782 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008782:	b580      	push	{r7, lr}
 8008784:	b082      	sub	sp, #8
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f7f8 fc1c 	bl	8000fc8 <HAL_Delay>
}
 8008790:	bf00      	nop
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
 800879e:	4603      	mov	r3, r0
 80087a0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087a2:	2300      	movs	r3, #0
 80087a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80087a6:	79fb      	ldrb	r3, [r7, #7]
 80087a8:	2b03      	cmp	r3, #3
 80087aa:	d817      	bhi.n	80087dc <USBH_Get_USB_Status+0x44>
 80087ac:	a201      	add	r2, pc, #4	; (adr r2, 80087b4 <USBH_Get_USB_Status+0x1c>)
 80087ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b2:	bf00      	nop
 80087b4:	080087c5 	.word	0x080087c5
 80087b8:	080087cb 	.word	0x080087cb
 80087bc:	080087d1 	.word	0x080087d1
 80087c0:	080087d7 	.word	0x080087d7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80087c4:	2300      	movs	r3, #0
 80087c6:	73fb      	strb	r3, [r7, #15]
    break;
 80087c8:	e00b      	b.n	80087e2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80087ca:	2302      	movs	r3, #2
 80087cc:	73fb      	strb	r3, [r7, #15]
    break;
 80087ce:	e008      	b.n	80087e2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80087d0:	2301      	movs	r3, #1
 80087d2:	73fb      	strb	r3, [r7, #15]
    break;
 80087d4:	e005      	b.n	80087e2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80087d6:	2302      	movs	r3, #2
 80087d8:	73fb      	strb	r3, [r7, #15]
    break;
 80087da:	e002      	b.n	80087e2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80087dc:	2302      	movs	r3, #2
 80087de:	73fb      	strb	r3, [r7, #15]
    break;
 80087e0:	bf00      	nop
  }
  return usb_status;
 80087e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3714      	adds	r7, #20
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <__assert_func>:
 80087f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087f2:	4614      	mov	r4, r2
 80087f4:	461a      	mov	r2, r3
 80087f6:	4b09      	ldr	r3, [pc, #36]	; (800881c <__assert_func+0x2c>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4605      	mov	r5, r0
 80087fc:	68d8      	ldr	r0, [r3, #12]
 80087fe:	b14c      	cbz	r4, 8008814 <__assert_func+0x24>
 8008800:	4b07      	ldr	r3, [pc, #28]	; (8008820 <__assert_func+0x30>)
 8008802:	9100      	str	r1, [sp, #0]
 8008804:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008808:	4906      	ldr	r1, [pc, #24]	; (8008824 <__assert_func+0x34>)
 800880a:	462b      	mov	r3, r5
 800880c:	f000 f814 	bl	8008838 <fiprintf>
 8008810:	f000 fd1e 	bl	8009250 <abort>
 8008814:	4b04      	ldr	r3, [pc, #16]	; (8008828 <__assert_func+0x38>)
 8008816:	461c      	mov	r4, r3
 8008818:	e7f3      	b.n	8008802 <__assert_func+0x12>
 800881a:	bf00      	nop
 800881c:	2000002c 	.word	0x2000002c
 8008820:	08009cc0 	.word	0x08009cc0
 8008824:	08009ccd 	.word	0x08009ccd
 8008828:	08009cfb 	.word	0x08009cfb

0800882c <__errno>:
 800882c:	4b01      	ldr	r3, [pc, #4]	; (8008834 <__errno+0x8>)
 800882e:	6818      	ldr	r0, [r3, #0]
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	2000002c 	.word	0x2000002c

08008838 <fiprintf>:
 8008838:	b40e      	push	{r1, r2, r3}
 800883a:	b503      	push	{r0, r1, lr}
 800883c:	4601      	mov	r1, r0
 800883e:	ab03      	add	r3, sp, #12
 8008840:	4805      	ldr	r0, [pc, #20]	; (8008858 <fiprintf+0x20>)
 8008842:	f853 2b04 	ldr.w	r2, [r3], #4
 8008846:	6800      	ldr	r0, [r0, #0]
 8008848:	9301      	str	r3, [sp, #4]
 800884a:	f000 f94d 	bl	8008ae8 <_vfiprintf_r>
 800884e:	b002      	add	sp, #8
 8008850:	f85d eb04 	ldr.w	lr, [sp], #4
 8008854:	b003      	add	sp, #12
 8008856:	4770      	bx	lr
 8008858:	2000002c 	.word	0x2000002c

0800885c <__libc_init_array>:
 800885c:	b570      	push	{r4, r5, r6, lr}
 800885e:	4d0d      	ldr	r5, [pc, #52]	; (8008894 <__libc_init_array+0x38>)
 8008860:	4c0d      	ldr	r4, [pc, #52]	; (8008898 <__libc_init_array+0x3c>)
 8008862:	1b64      	subs	r4, r4, r5
 8008864:	10a4      	asrs	r4, r4, #2
 8008866:	2600      	movs	r6, #0
 8008868:	42a6      	cmp	r6, r4
 800886a:	d109      	bne.n	8008880 <__libc_init_array+0x24>
 800886c:	4d0b      	ldr	r5, [pc, #44]	; (800889c <__libc_init_array+0x40>)
 800886e:	4c0c      	ldr	r4, [pc, #48]	; (80088a0 <__libc_init_array+0x44>)
 8008870:	f001 f9cc 	bl	8009c0c <_init>
 8008874:	1b64      	subs	r4, r4, r5
 8008876:	10a4      	asrs	r4, r4, #2
 8008878:	2600      	movs	r6, #0
 800887a:	42a6      	cmp	r6, r4
 800887c:	d105      	bne.n	800888a <__libc_init_array+0x2e>
 800887e:	bd70      	pop	{r4, r5, r6, pc}
 8008880:	f855 3b04 	ldr.w	r3, [r5], #4
 8008884:	4798      	blx	r3
 8008886:	3601      	adds	r6, #1
 8008888:	e7ee      	b.n	8008868 <__libc_init_array+0xc>
 800888a:	f855 3b04 	ldr.w	r3, [r5], #4
 800888e:	4798      	blx	r3
 8008890:	3601      	adds	r6, #1
 8008892:	e7f2      	b.n	800887a <__libc_init_array+0x1e>
 8008894:	08009d9c 	.word	0x08009d9c
 8008898:	08009d9c 	.word	0x08009d9c
 800889c:	08009d9c 	.word	0x08009d9c
 80088a0:	08009da0 	.word	0x08009da0

080088a4 <malloc>:
 80088a4:	4b02      	ldr	r3, [pc, #8]	; (80088b0 <malloc+0xc>)
 80088a6:	4601      	mov	r1, r0
 80088a8:	6818      	ldr	r0, [r3, #0]
 80088aa:	f000 b87f 	b.w	80089ac <_malloc_r>
 80088ae:	bf00      	nop
 80088b0:	2000002c 	.word	0x2000002c

080088b4 <free>:
 80088b4:	4b02      	ldr	r3, [pc, #8]	; (80088c0 <free+0xc>)
 80088b6:	4601      	mov	r1, r0
 80088b8:	6818      	ldr	r0, [r3, #0]
 80088ba:	f000 b80b 	b.w	80088d4 <_free_r>
 80088be:	bf00      	nop
 80088c0:	2000002c 	.word	0x2000002c

080088c4 <memset>:
 80088c4:	4402      	add	r2, r0
 80088c6:	4603      	mov	r3, r0
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d100      	bne.n	80088ce <memset+0xa>
 80088cc:	4770      	bx	lr
 80088ce:	f803 1b01 	strb.w	r1, [r3], #1
 80088d2:	e7f9      	b.n	80088c8 <memset+0x4>

080088d4 <_free_r>:
 80088d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088d6:	2900      	cmp	r1, #0
 80088d8:	d044      	beq.n	8008964 <_free_r+0x90>
 80088da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088de:	9001      	str	r0, [sp, #4]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f1a1 0404 	sub.w	r4, r1, #4
 80088e6:	bfb8      	it	lt
 80088e8:	18e4      	addlt	r4, r4, r3
 80088ea:	f000 ff01 	bl	80096f0 <__malloc_lock>
 80088ee:	4a1e      	ldr	r2, [pc, #120]	; (8008968 <_free_r+0x94>)
 80088f0:	9801      	ldr	r0, [sp, #4]
 80088f2:	6813      	ldr	r3, [r2, #0]
 80088f4:	b933      	cbnz	r3, 8008904 <_free_r+0x30>
 80088f6:	6063      	str	r3, [r4, #4]
 80088f8:	6014      	str	r4, [r2, #0]
 80088fa:	b003      	add	sp, #12
 80088fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008900:	f000 befc 	b.w	80096fc <__malloc_unlock>
 8008904:	42a3      	cmp	r3, r4
 8008906:	d908      	bls.n	800891a <_free_r+0x46>
 8008908:	6825      	ldr	r5, [r4, #0]
 800890a:	1961      	adds	r1, r4, r5
 800890c:	428b      	cmp	r3, r1
 800890e:	bf01      	itttt	eq
 8008910:	6819      	ldreq	r1, [r3, #0]
 8008912:	685b      	ldreq	r3, [r3, #4]
 8008914:	1949      	addeq	r1, r1, r5
 8008916:	6021      	streq	r1, [r4, #0]
 8008918:	e7ed      	b.n	80088f6 <_free_r+0x22>
 800891a:	461a      	mov	r2, r3
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	b10b      	cbz	r3, 8008924 <_free_r+0x50>
 8008920:	42a3      	cmp	r3, r4
 8008922:	d9fa      	bls.n	800891a <_free_r+0x46>
 8008924:	6811      	ldr	r1, [r2, #0]
 8008926:	1855      	adds	r5, r2, r1
 8008928:	42a5      	cmp	r5, r4
 800892a:	d10b      	bne.n	8008944 <_free_r+0x70>
 800892c:	6824      	ldr	r4, [r4, #0]
 800892e:	4421      	add	r1, r4
 8008930:	1854      	adds	r4, r2, r1
 8008932:	42a3      	cmp	r3, r4
 8008934:	6011      	str	r1, [r2, #0]
 8008936:	d1e0      	bne.n	80088fa <_free_r+0x26>
 8008938:	681c      	ldr	r4, [r3, #0]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	6053      	str	r3, [r2, #4]
 800893e:	4421      	add	r1, r4
 8008940:	6011      	str	r1, [r2, #0]
 8008942:	e7da      	b.n	80088fa <_free_r+0x26>
 8008944:	d902      	bls.n	800894c <_free_r+0x78>
 8008946:	230c      	movs	r3, #12
 8008948:	6003      	str	r3, [r0, #0]
 800894a:	e7d6      	b.n	80088fa <_free_r+0x26>
 800894c:	6825      	ldr	r5, [r4, #0]
 800894e:	1961      	adds	r1, r4, r5
 8008950:	428b      	cmp	r3, r1
 8008952:	bf04      	itt	eq
 8008954:	6819      	ldreq	r1, [r3, #0]
 8008956:	685b      	ldreq	r3, [r3, #4]
 8008958:	6063      	str	r3, [r4, #4]
 800895a:	bf04      	itt	eq
 800895c:	1949      	addeq	r1, r1, r5
 800895e:	6021      	streq	r1, [r4, #0]
 8008960:	6054      	str	r4, [r2, #4]
 8008962:	e7ca      	b.n	80088fa <_free_r+0x26>
 8008964:	b003      	add	sp, #12
 8008966:	bd30      	pop	{r4, r5, pc}
 8008968:	20000cb4 	.word	0x20000cb4

0800896c <sbrk_aligned>:
 800896c:	b570      	push	{r4, r5, r6, lr}
 800896e:	4e0e      	ldr	r6, [pc, #56]	; (80089a8 <sbrk_aligned+0x3c>)
 8008970:	460c      	mov	r4, r1
 8008972:	6831      	ldr	r1, [r6, #0]
 8008974:	4605      	mov	r5, r0
 8008976:	b911      	cbnz	r1, 800897e <sbrk_aligned+0x12>
 8008978:	f000 fb7a 	bl	8009070 <_sbrk_r>
 800897c:	6030      	str	r0, [r6, #0]
 800897e:	4621      	mov	r1, r4
 8008980:	4628      	mov	r0, r5
 8008982:	f000 fb75 	bl	8009070 <_sbrk_r>
 8008986:	1c43      	adds	r3, r0, #1
 8008988:	d00a      	beq.n	80089a0 <sbrk_aligned+0x34>
 800898a:	1cc4      	adds	r4, r0, #3
 800898c:	f024 0403 	bic.w	r4, r4, #3
 8008990:	42a0      	cmp	r0, r4
 8008992:	d007      	beq.n	80089a4 <sbrk_aligned+0x38>
 8008994:	1a21      	subs	r1, r4, r0
 8008996:	4628      	mov	r0, r5
 8008998:	f000 fb6a 	bl	8009070 <_sbrk_r>
 800899c:	3001      	adds	r0, #1
 800899e:	d101      	bne.n	80089a4 <sbrk_aligned+0x38>
 80089a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80089a4:	4620      	mov	r0, r4
 80089a6:	bd70      	pop	{r4, r5, r6, pc}
 80089a8:	20000cb8 	.word	0x20000cb8

080089ac <_malloc_r>:
 80089ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089b0:	1ccd      	adds	r5, r1, #3
 80089b2:	f025 0503 	bic.w	r5, r5, #3
 80089b6:	3508      	adds	r5, #8
 80089b8:	2d0c      	cmp	r5, #12
 80089ba:	bf38      	it	cc
 80089bc:	250c      	movcc	r5, #12
 80089be:	2d00      	cmp	r5, #0
 80089c0:	4607      	mov	r7, r0
 80089c2:	db01      	blt.n	80089c8 <_malloc_r+0x1c>
 80089c4:	42a9      	cmp	r1, r5
 80089c6:	d905      	bls.n	80089d4 <_malloc_r+0x28>
 80089c8:	230c      	movs	r3, #12
 80089ca:	603b      	str	r3, [r7, #0]
 80089cc:	2600      	movs	r6, #0
 80089ce:	4630      	mov	r0, r6
 80089d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089d4:	4e2e      	ldr	r6, [pc, #184]	; (8008a90 <_malloc_r+0xe4>)
 80089d6:	f000 fe8b 	bl	80096f0 <__malloc_lock>
 80089da:	6833      	ldr	r3, [r6, #0]
 80089dc:	461c      	mov	r4, r3
 80089de:	bb34      	cbnz	r4, 8008a2e <_malloc_r+0x82>
 80089e0:	4629      	mov	r1, r5
 80089e2:	4638      	mov	r0, r7
 80089e4:	f7ff ffc2 	bl	800896c <sbrk_aligned>
 80089e8:	1c43      	adds	r3, r0, #1
 80089ea:	4604      	mov	r4, r0
 80089ec:	d14d      	bne.n	8008a8a <_malloc_r+0xde>
 80089ee:	6834      	ldr	r4, [r6, #0]
 80089f0:	4626      	mov	r6, r4
 80089f2:	2e00      	cmp	r6, #0
 80089f4:	d140      	bne.n	8008a78 <_malloc_r+0xcc>
 80089f6:	6823      	ldr	r3, [r4, #0]
 80089f8:	4631      	mov	r1, r6
 80089fa:	4638      	mov	r0, r7
 80089fc:	eb04 0803 	add.w	r8, r4, r3
 8008a00:	f000 fb36 	bl	8009070 <_sbrk_r>
 8008a04:	4580      	cmp	r8, r0
 8008a06:	d13a      	bne.n	8008a7e <_malloc_r+0xd2>
 8008a08:	6821      	ldr	r1, [r4, #0]
 8008a0a:	3503      	adds	r5, #3
 8008a0c:	1a6d      	subs	r5, r5, r1
 8008a0e:	f025 0503 	bic.w	r5, r5, #3
 8008a12:	3508      	adds	r5, #8
 8008a14:	2d0c      	cmp	r5, #12
 8008a16:	bf38      	it	cc
 8008a18:	250c      	movcc	r5, #12
 8008a1a:	4629      	mov	r1, r5
 8008a1c:	4638      	mov	r0, r7
 8008a1e:	f7ff ffa5 	bl	800896c <sbrk_aligned>
 8008a22:	3001      	adds	r0, #1
 8008a24:	d02b      	beq.n	8008a7e <_malloc_r+0xd2>
 8008a26:	6823      	ldr	r3, [r4, #0]
 8008a28:	442b      	add	r3, r5
 8008a2a:	6023      	str	r3, [r4, #0]
 8008a2c:	e00e      	b.n	8008a4c <_malloc_r+0xa0>
 8008a2e:	6822      	ldr	r2, [r4, #0]
 8008a30:	1b52      	subs	r2, r2, r5
 8008a32:	d41e      	bmi.n	8008a72 <_malloc_r+0xc6>
 8008a34:	2a0b      	cmp	r2, #11
 8008a36:	d916      	bls.n	8008a66 <_malloc_r+0xba>
 8008a38:	1961      	adds	r1, r4, r5
 8008a3a:	42a3      	cmp	r3, r4
 8008a3c:	6025      	str	r5, [r4, #0]
 8008a3e:	bf18      	it	ne
 8008a40:	6059      	strne	r1, [r3, #4]
 8008a42:	6863      	ldr	r3, [r4, #4]
 8008a44:	bf08      	it	eq
 8008a46:	6031      	streq	r1, [r6, #0]
 8008a48:	5162      	str	r2, [r4, r5]
 8008a4a:	604b      	str	r3, [r1, #4]
 8008a4c:	4638      	mov	r0, r7
 8008a4e:	f104 060b 	add.w	r6, r4, #11
 8008a52:	f000 fe53 	bl	80096fc <__malloc_unlock>
 8008a56:	f026 0607 	bic.w	r6, r6, #7
 8008a5a:	1d23      	adds	r3, r4, #4
 8008a5c:	1af2      	subs	r2, r6, r3
 8008a5e:	d0b6      	beq.n	80089ce <_malloc_r+0x22>
 8008a60:	1b9b      	subs	r3, r3, r6
 8008a62:	50a3      	str	r3, [r4, r2]
 8008a64:	e7b3      	b.n	80089ce <_malloc_r+0x22>
 8008a66:	6862      	ldr	r2, [r4, #4]
 8008a68:	42a3      	cmp	r3, r4
 8008a6a:	bf0c      	ite	eq
 8008a6c:	6032      	streq	r2, [r6, #0]
 8008a6e:	605a      	strne	r2, [r3, #4]
 8008a70:	e7ec      	b.n	8008a4c <_malloc_r+0xa0>
 8008a72:	4623      	mov	r3, r4
 8008a74:	6864      	ldr	r4, [r4, #4]
 8008a76:	e7b2      	b.n	80089de <_malloc_r+0x32>
 8008a78:	4634      	mov	r4, r6
 8008a7a:	6876      	ldr	r6, [r6, #4]
 8008a7c:	e7b9      	b.n	80089f2 <_malloc_r+0x46>
 8008a7e:	230c      	movs	r3, #12
 8008a80:	603b      	str	r3, [r7, #0]
 8008a82:	4638      	mov	r0, r7
 8008a84:	f000 fe3a 	bl	80096fc <__malloc_unlock>
 8008a88:	e7a1      	b.n	80089ce <_malloc_r+0x22>
 8008a8a:	6025      	str	r5, [r4, #0]
 8008a8c:	e7de      	b.n	8008a4c <_malloc_r+0xa0>
 8008a8e:	bf00      	nop
 8008a90:	20000cb4 	.word	0x20000cb4

08008a94 <__sfputc_r>:
 8008a94:	6893      	ldr	r3, [r2, #8]
 8008a96:	3b01      	subs	r3, #1
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	b410      	push	{r4}
 8008a9c:	6093      	str	r3, [r2, #8]
 8008a9e:	da08      	bge.n	8008ab2 <__sfputc_r+0x1e>
 8008aa0:	6994      	ldr	r4, [r2, #24]
 8008aa2:	42a3      	cmp	r3, r4
 8008aa4:	db01      	blt.n	8008aaa <__sfputc_r+0x16>
 8008aa6:	290a      	cmp	r1, #10
 8008aa8:	d103      	bne.n	8008ab2 <__sfputc_r+0x1e>
 8008aaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008aae:	f000 bb0f 	b.w	80090d0 <__swbuf_r>
 8008ab2:	6813      	ldr	r3, [r2, #0]
 8008ab4:	1c58      	adds	r0, r3, #1
 8008ab6:	6010      	str	r0, [r2, #0]
 8008ab8:	7019      	strb	r1, [r3, #0]
 8008aba:	4608      	mov	r0, r1
 8008abc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ac0:	4770      	bx	lr

08008ac2 <__sfputs_r>:
 8008ac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac4:	4606      	mov	r6, r0
 8008ac6:	460f      	mov	r7, r1
 8008ac8:	4614      	mov	r4, r2
 8008aca:	18d5      	adds	r5, r2, r3
 8008acc:	42ac      	cmp	r4, r5
 8008ace:	d101      	bne.n	8008ad4 <__sfputs_r+0x12>
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	e007      	b.n	8008ae4 <__sfputs_r+0x22>
 8008ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ad8:	463a      	mov	r2, r7
 8008ada:	4630      	mov	r0, r6
 8008adc:	f7ff ffda 	bl	8008a94 <__sfputc_r>
 8008ae0:	1c43      	adds	r3, r0, #1
 8008ae2:	d1f3      	bne.n	8008acc <__sfputs_r+0xa>
 8008ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ae8 <_vfiprintf_r>:
 8008ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aec:	460d      	mov	r5, r1
 8008aee:	b09d      	sub	sp, #116	; 0x74
 8008af0:	4614      	mov	r4, r2
 8008af2:	4698      	mov	r8, r3
 8008af4:	4606      	mov	r6, r0
 8008af6:	b118      	cbz	r0, 8008b00 <_vfiprintf_r+0x18>
 8008af8:	6983      	ldr	r3, [r0, #24]
 8008afa:	b90b      	cbnz	r3, 8008b00 <_vfiprintf_r+0x18>
 8008afc:	f000 fcca 	bl	8009494 <__sinit>
 8008b00:	4b89      	ldr	r3, [pc, #548]	; (8008d28 <_vfiprintf_r+0x240>)
 8008b02:	429d      	cmp	r5, r3
 8008b04:	d11b      	bne.n	8008b3e <_vfiprintf_r+0x56>
 8008b06:	6875      	ldr	r5, [r6, #4]
 8008b08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b0a:	07d9      	lsls	r1, r3, #31
 8008b0c:	d405      	bmi.n	8008b1a <_vfiprintf_r+0x32>
 8008b0e:	89ab      	ldrh	r3, [r5, #12]
 8008b10:	059a      	lsls	r2, r3, #22
 8008b12:	d402      	bmi.n	8008b1a <_vfiprintf_r+0x32>
 8008b14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b16:	f000 fd5b 	bl	80095d0 <__retarget_lock_acquire_recursive>
 8008b1a:	89ab      	ldrh	r3, [r5, #12]
 8008b1c:	071b      	lsls	r3, r3, #28
 8008b1e:	d501      	bpl.n	8008b24 <_vfiprintf_r+0x3c>
 8008b20:	692b      	ldr	r3, [r5, #16]
 8008b22:	b9eb      	cbnz	r3, 8008b60 <_vfiprintf_r+0x78>
 8008b24:	4629      	mov	r1, r5
 8008b26:	4630      	mov	r0, r6
 8008b28:	f000 fb24 	bl	8009174 <__swsetup_r>
 8008b2c:	b1c0      	cbz	r0, 8008b60 <_vfiprintf_r+0x78>
 8008b2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b30:	07dc      	lsls	r4, r3, #31
 8008b32:	d50e      	bpl.n	8008b52 <_vfiprintf_r+0x6a>
 8008b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b38:	b01d      	add	sp, #116	; 0x74
 8008b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b3e:	4b7b      	ldr	r3, [pc, #492]	; (8008d2c <_vfiprintf_r+0x244>)
 8008b40:	429d      	cmp	r5, r3
 8008b42:	d101      	bne.n	8008b48 <_vfiprintf_r+0x60>
 8008b44:	68b5      	ldr	r5, [r6, #8]
 8008b46:	e7df      	b.n	8008b08 <_vfiprintf_r+0x20>
 8008b48:	4b79      	ldr	r3, [pc, #484]	; (8008d30 <_vfiprintf_r+0x248>)
 8008b4a:	429d      	cmp	r5, r3
 8008b4c:	bf08      	it	eq
 8008b4e:	68f5      	ldreq	r5, [r6, #12]
 8008b50:	e7da      	b.n	8008b08 <_vfiprintf_r+0x20>
 8008b52:	89ab      	ldrh	r3, [r5, #12]
 8008b54:	0598      	lsls	r0, r3, #22
 8008b56:	d4ed      	bmi.n	8008b34 <_vfiprintf_r+0x4c>
 8008b58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b5a:	f000 fd3a 	bl	80095d2 <__retarget_lock_release_recursive>
 8008b5e:	e7e9      	b.n	8008b34 <_vfiprintf_r+0x4c>
 8008b60:	2300      	movs	r3, #0
 8008b62:	9309      	str	r3, [sp, #36]	; 0x24
 8008b64:	2320      	movs	r3, #32
 8008b66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b6e:	2330      	movs	r3, #48	; 0x30
 8008b70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008d34 <_vfiprintf_r+0x24c>
 8008b74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b78:	f04f 0901 	mov.w	r9, #1
 8008b7c:	4623      	mov	r3, r4
 8008b7e:	469a      	mov	sl, r3
 8008b80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b84:	b10a      	cbz	r2, 8008b8a <_vfiprintf_r+0xa2>
 8008b86:	2a25      	cmp	r2, #37	; 0x25
 8008b88:	d1f9      	bne.n	8008b7e <_vfiprintf_r+0x96>
 8008b8a:	ebba 0b04 	subs.w	fp, sl, r4
 8008b8e:	d00b      	beq.n	8008ba8 <_vfiprintf_r+0xc0>
 8008b90:	465b      	mov	r3, fp
 8008b92:	4622      	mov	r2, r4
 8008b94:	4629      	mov	r1, r5
 8008b96:	4630      	mov	r0, r6
 8008b98:	f7ff ff93 	bl	8008ac2 <__sfputs_r>
 8008b9c:	3001      	adds	r0, #1
 8008b9e:	f000 80aa 	beq.w	8008cf6 <_vfiprintf_r+0x20e>
 8008ba2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ba4:	445a      	add	r2, fp
 8008ba6:	9209      	str	r2, [sp, #36]	; 0x24
 8008ba8:	f89a 3000 	ldrb.w	r3, [sl]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	f000 80a2 	beq.w	8008cf6 <_vfiprintf_r+0x20e>
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bbc:	f10a 0a01 	add.w	sl, sl, #1
 8008bc0:	9304      	str	r3, [sp, #16]
 8008bc2:	9307      	str	r3, [sp, #28]
 8008bc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bc8:	931a      	str	r3, [sp, #104]	; 0x68
 8008bca:	4654      	mov	r4, sl
 8008bcc:	2205      	movs	r2, #5
 8008bce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bd2:	4858      	ldr	r0, [pc, #352]	; (8008d34 <_vfiprintf_r+0x24c>)
 8008bd4:	f7f7 fb04 	bl	80001e0 <memchr>
 8008bd8:	9a04      	ldr	r2, [sp, #16]
 8008bda:	b9d8      	cbnz	r0, 8008c14 <_vfiprintf_r+0x12c>
 8008bdc:	06d1      	lsls	r1, r2, #27
 8008bde:	bf44      	itt	mi
 8008be0:	2320      	movmi	r3, #32
 8008be2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008be6:	0713      	lsls	r3, r2, #28
 8008be8:	bf44      	itt	mi
 8008bea:	232b      	movmi	r3, #43	; 0x2b
 8008bec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bf0:	f89a 3000 	ldrb.w	r3, [sl]
 8008bf4:	2b2a      	cmp	r3, #42	; 0x2a
 8008bf6:	d015      	beq.n	8008c24 <_vfiprintf_r+0x13c>
 8008bf8:	9a07      	ldr	r2, [sp, #28]
 8008bfa:	4654      	mov	r4, sl
 8008bfc:	2000      	movs	r0, #0
 8008bfe:	f04f 0c0a 	mov.w	ip, #10
 8008c02:	4621      	mov	r1, r4
 8008c04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c08:	3b30      	subs	r3, #48	; 0x30
 8008c0a:	2b09      	cmp	r3, #9
 8008c0c:	d94e      	bls.n	8008cac <_vfiprintf_r+0x1c4>
 8008c0e:	b1b0      	cbz	r0, 8008c3e <_vfiprintf_r+0x156>
 8008c10:	9207      	str	r2, [sp, #28]
 8008c12:	e014      	b.n	8008c3e <_vfiprintf_r+0x156>
 8008c14:	eba0 0308 	sub.w	r3, r0, r8
 8008c18:	fa09 f303 	lsl.w	r3, r9, r3
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	9304      	str	r3, [sp, #16]
 8008c20:	46a2      	mov	sl, r4
 8008c22:	e7d2      	b.n	8008bca <_vfiprintf_r+0xe2>
 8008c24:	9b03      	ldr	r3, [sp, #12]
 8008c26:	1d19      	adds	r1, r3, #4
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	9103      	str	r1, [sp, #12]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	bfbb      	ittet	lt
 8008c30:	425b      	neglt	r3, r3
 8008c32:	f042 0202 	orrlt.w	r2, r2, #2
 8008c36:	9307      	strge	r3, [sp, #28]
 8008c38:	9307      	strlt	r3, [sp, #28]
 8008c3a:	bfb8      	it	lt
 8008c3c:	9204      	strlt	r2, [sp, #16]
 8008c3e:	7823      	ldrb	r3, [r4, #0]
 8008c40:	2b2e      	cmp	r3, #46	; 0x2e
 8008c42:	d10c      	bne.n	8008c5e <_vfiprintf_r+0x176>
 8008c44:	7863      	ldrb	r3, [r4, #1]
 8008c46:	2b2a      	cmp	r3, #42	; 0x2a
 8008c48:	d135      	bne.n	8008cb6 <_vfiprintf_r+0x1ce>
 8008c4a:	9b03      	ldr	r3, [sp, #12]
 8008c4c:	1d1a      	adds	r2, r3, #4
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	9203      	str	r2, [sp, #12]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	bfb8      	it	lt
 8008c56:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008c5a:	3402      	adds	r4, #2
 8008c5c:	9305      	str	r3, [sp, #20]
 8008c5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008d44 <_vfiprintf_r+0x25c>
 8008c62:	7821      	ldrb	r1, [r4, #0]
 8008c64:	2203      	movs	r2, #3
 8008c66:	4650      	mov	r0, sl
 8008c68:	f7f7 faba 	bl	80001e0 <memchr>
 8008c6c:	b140      	cbz	r0, 8008c80 <_vfiprintf_r+0x198>
 8008c6e:	2340      	movs	r3, #64	; 0x40
 8008c70:	eba0 000a 	sub.w	r0, r0, sl
 8008c74:	fa03 f000 	lsl.w	r0, r3, r0
 8008c78:	9b04      	ldr	r3, [sp, #16]
 8008c7a:	4303      	orrs	r3, r0
 8008c7c:	3401      	adds	r4, #1
 8008c7e:	9304      	str	r3, [sp, #16]
 8008c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c84:	482c      	ldr	r0, [pc, #176]	; (8008d38 <_vfiprintf_r+0x250>)
 8008c86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c8a:	2206      	movs	r2, #6
 8008c8c:	f7f7 faa8 	bl	80001e0 <memchr>
 8008c90:	2800      	cmp	r0, #0
 8008c92:	d03f      	beq.n	8008d14 <_vfiprintf_r+0x22c>
 8008c94:	4b29      	ldr	r3, [pc, #164]	; (8008d3c <_vfiprintf_r+0x254>)
 8008c96:	bb1b      	cbnz	r3, 8008ce0 <_vfiprintf_r+0x1f8>
 8008c98:	9b03      	ldr	r3, [sp, #12]
 8008c9a:	3307      	adds	r3, #7
 8008c9c:	f023 0307 	bic.w	r3, r3, #7
 8008ca0:	3308      	adds	r3, #8
 8008ca2:	9303      	str	r3, [sp, #12]
 8008ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ca6:	443b      	add	r3, r7
 8008ca8:	9309      	str	r3, [sp, #36]	; 0x24
 8008caa:	e767      	b.n	8008b7c <_vfiprintf_r+0x94>
 8008cac:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cb0:	460c      	mov	r4, r1
 8008cb2:	2001      	movs	r0, #1
 8008cb4:	e7a5      	b.n	8008c02 <_vfiprintf_r+0x11a>
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	3401      	adds	r4, #1
 8008cba:	9305      	str	r3, [sp, #20]
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	f04f 0c0a 	mov.w	ip, #10
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cc8:	3a30      	subs	r2, #48	; 0x30
 8008cca:	2a09      	cmp	r2, #9
 8008ccc:	d903      	bls.n	8008cd6 <_vfiprintf_r+0x1ee>
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d0c5      	beq.n	8008c5e <_vfiprintf_r+0x176>
 8008cd2:	9105      	str	r1, [sp, #20]
 8008cd4:	e7c3      	b.n	8008c5e <_vfiprintf_r+0x176>
 8008cd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cda:	4604      	mov	r4, r0
 8008cdc:	2301      	movs	r3, #1
 8008cde:	e7f0      	b.n	8008cc2 <_vfiprintf_r+0x1da>
 8008ce0:	ab03      	add	r3, sp, #12
 8008ce2:	9300      	str	r3, [sp, #0]
 8008ce4:	462a      	mov	r2, r5
 8008ce6:	4b16      	ldr	r3, [pc, #88]	; (8008d40 <_vfiprintf_r+0x258>)
 8008ce8:	a904      	add	r1, sp, #16
 8008cea:	4630      	mov	r0, r6
 8008cec:	f3af 8000 	nop.w
 8008cf0:	4607      	mov	r7, r0
 8008cf2:	1c78      	adds	r0, r7, #1
 8008cf4:	d1d6      	bne.n	8008ca4 <_vfiprintf_r+0x1bc>
 8008cf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cf8:	07d9      	lsls	r1, r3, #31
 8008cfa:	d405      	bmi.n	8008d08 <_vfiprintf_r+0x220>
 8008cfc:	89ab      	ldrh	r3, [r5, #12]
 8008cfe:	059a      	lsls	r2, r3, #22
 8008d00:	d402      	bmi.n	8008d08 <_vfiprintf_r+0x220>
 8008d02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d04:	f000 fc65 	bl	80095d2 <__retarget_lock_release_recursive>
 8008d08:	89ab      	ldrh	r3, [r5, #12]
 8008d0a:	065b      	lsls	r3, r3, #25
 8008d0c:	f53f af12 	bmi.w	8008b34 <_vfiprintf_r+0x4c>
 8008d10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d12:	e711      	b.n	8008b38 <_vfiprintf_r+0x50>
 8008d14:	ab03      	add	r3, sp, #12
 8008d16:	9300      	str	r3, [sp, #0]
 8008d18:	462a      	mov	r2, r5
 8008d1a:	4b09      	ldr	r3, [pc, #36]	; (8008d40 <_vfiprintf_r+0x258>)
 8008d1c:	a904      	add	r1, sp, #16
 8008d1e:	4630      	mov	r0, r6
 8008d20:	f000 f880 	bl	8008e24 <_printf_i>
 8008d24:	e7e4      	b.n	8008cf0 <_vfiprintf_r+0x208>
 8008d26:	bf00      	nop
 8008d28:	08009d54 	.word	0x08009d54
 8008d2c:	08009d74 	.word	0x08009d74
 8008d30:	08009d34 	.word	0x08009d34
 8008d34:	08009d00 	.word	0x08009d00
 8008d38:	08009d0a 	.word	0x08009d0a
 8008d3c:	00000000 	.word	0x00000000
 8008d40:	08008ac3 	.word	0x08008ac3
 8008d44:	08009d06 	.word	0x08009d06

08008d48 <_printf_common>:
 8008d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d4c:	4616      	mov	r6, r2
 8008d4e:	4699      	mov	r9, r3
 8008d50:	688a      	ldr	r2, [r1, #8]
 8008d52:	690b      	ldr	r3, [r1, #16]
 8008d54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	bfb8      	it	lt
 8008d5c:	4613      	movlt	r3, r2
 8008d5e:	6033      	str	r3, [r6, #0]
 8008d60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d64:	4607      	mov	r7, r0
 8008d66:	460c      	mov	r4, r1
 8008d68:	b10a      	cbz	r2, 8008d6e <_printf_common+0x26>
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	6033      	str	r3, [r6, #0]
 8008d6e:	6823      	ldr	r3, [r4, #0]
 8008d70:	0699      	lsls	r1, r3, #26
 8008d72:	bf42      	ittt	mi
 8008d74:	6833      	ldrmi	r3, [r6, #0]
 8008d76:	3302      	addmi	r3, #2
 8008d78:	6033      	strmi	r3, [r6, #0]
 8008d7a:	6825      	ldr	r5, [r4, #0]
 8008d7c:	f015 0506 	ands.w	r5, r5, #6
 8008d80:	d106      	bne.n	8008d90 <_printf_common+0x48>
 8008d82:	f104 0a19 	add.w	sl, r4, #25
 8008d86:	68e3      	ldr	r3, [r4, #12]
 8008d88:	6832      	ldr	r2, [r6, #0]
 8008d8a:	1a9b      	subs	r3, r3, r2
 8008d8c:	42ab      	cmp	r3, r5
 8008d8e:	dc26      	bgt.n	8008dde <_printf_common+0x96>
 8008d90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d94:	1e13      	subs	r3, r2, #0
 8008d96:	6822      	ldr	r2, [r4, #0]
 8008d98:	bf18      	it	ne
 8008d9a:	2301      	movne	r3, #1
 8008d9c:	0692      	lsls	r2, r2, #26
 8008d9e:	d42b      	bmi.n	8008df8 <_printf_common+0xb0>
 8008da0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008da4:	4649      	mov	r1, r9
 8008da6:	4638      	mov	r0, r7
 8008da8:	47c0      	blx	r8
 8008daa:	3001      	adds	r0, #1
 8008dac:	d01e      	beq.n	8008dec <_printf_common+0xa4>
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	68e5      	ldr	r5, [r4, #12]
 8008db2:	6832      	ldr	r2, [r6, #0]
 8008db4:	f003 0306 	and.w	r3, r3, #6
 8008db8:	2b04      	cmp	r3, #4
 8008dba:	bf08      	it	eq
 8008dbc:	1aad      	subeq	r5, r5, r2
 8008dbe:	68a3      	ldr	r3, [r4, #8]
 8008dc0:	6922      	ldr	r2, [r4, #16]
 8008dc2:	bf0c      	ite	eq
 8008dc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008dc8:	2500      	movne	r5, #0
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	bfc4      	itt	gt
 8008dce:	1a9b      	subgt	r3, r3, r2
 8008dd0:	18ed      	addgt	r5, r5, r3
 8008dd2:	2600      	movs	r6, #0
 8008dd4:	341a      	adds	r4, #26
 8008dd6:	42b5      	cmp	r5, r6
 8008dd8:	d11a      	bne.n	8008e10 <_printf_common+0xc8>
 8008dda:	2000      	movs	r0, #0
 8008ddc:	e008      	b.n	8008df0 <_printf_common+0xa8>
 8008dde:	2301      	movs	r3, #1
 8008de0:	4652      	mov	r2, sl
 8008de2:	4649      	mov	r1, r9
 8008de4:	4638      	mov	r0, r7
 8008de6:	47c0      	blx	r8
 8008de8:	3001      	adds	r0, #1
 8008dea:	d103      	bne.n	8008df4 <_printf_common+0xac>
 8008dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008df4:	3501      	adds	r5, #1
 8008df6:	e7c6      	b.n	8008d86 <_printf_common+0x3e>
 8008df8:	18e1      	adds	r1, r4, r3
 8008dfa:	1c5a      	adds	r2, r3, #1
 8008dfc:	2030      	movs	r0, #48	; 0x30
 8008dfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e02:	4422      	add	r2, r4
 8008e04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e0c:	3302      	adds	r3, #2
 8008e0e:	e7c7      	b.n	8008da0 <_printf_common+0x58>
 8008e10:	2301      	movs	r3, #1
 8008e12:	4622      	mov	r2, r4
 8008e14:	4649      	mov	r1, r9
 8008e16:	4638      	mov	r0, r7
 8008e18:	47c0      	blx	r8
 8008e1a:	3001      	adds	r0, #1
 8008e1c:	d0e6      	beq.n	8008dec <_printf_common+0xa4>
 8008e1e:	3601      	adds	r6, #1
 8008e20:	e7d9      	b.n	8008dd6 <_printf_common+0x8e>
	...

08008e24 <_printf_i>:
 8008e24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e28:	7e0f      	ldrb	r7, [r1, #24]
 8008e2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e2c:	2f78      	cmp	r7, #120	; 0x78
 8008e2e:	4691      	mov	r9, r2
 8008e30:	4680      	mov	r8, r0
 8008e32:	460c      	mov	r4, r1
 8008e34:	469a      	mov	sl, r3
 8008e36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e3a:	d807      	bhi.n	8008e4c <_printf_i+0x28>
 8008e3c:	2f62      	cmp	r7, #98	; 0x62
 8008e3e:	d80a      	bhi.n	8008e56 <_printf_i+0x32>
 8008e40:	2f00      	cmp	r7, #0
 8008e42:	f000 80d8 	beq.w	8008ff6 <_printf_i+0x1d2>
 8008e46:	2f58      	cmp	r7, #88	; 0x58
 8008e48:	f000 80a3 	beq.w	8008f92 <_printf_i+0x16e>
 8008e4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e54:	e03a      	b.n	8008ecc <_printf_i+0xa8>
 8008e56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e5a:	2b15      	cmp	r3, #21
 8008e5c:	d8f6      	bhi.n	8008e4c <_printf_i+0x28>
 8008e5e:	a101      	add	r1, pc, #4	; (adr r1, 8008e64 <_printf_i+0x40>)
 8008e60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e64:	08008ebd 	.word	0x08008ebd
 8008e68:	08008ed1 	.word	0x08008ed1
 8008e6c:	08008e4d 	.word	0x08008e4d
 8008e70:	08008e4d 	.word	0x08008e4d
 8008e74:	08008e4d 	.word	0x08008e4d
 8008e78:	08008e4d 	.word	0x08008e4d
 8008e7c:	08008ed1 	.word	0x08008ed1
 8008e80:	08008e4d 	.word	0x08008e4d
 8008e84:	08008e4d 	.word	0x08008e4d
 8008e88:	08008e4d 	.word	0x08008e4d
 8008e8c:	08008e4d 	.word	0x08008e4d
 8008e90:	08008fdd 	.word	0x08008fdd
 8008e94:	08008f01 	.word	0x08008f01
 8008e98:	08008fbf 	.word	0x08008fbf
 8008e9c:	08008e4d 	.word	0x08008e4d
 8008ea0:	08008e4d 	.word	0x08008e4d
 8008ea4:	08008fff 	.word	0x08008fff
 8008ea8:	08008e4d 	.word	0x08008e4d
 8008eac:	08008f01 	.word	0x08008f01
 8008eb0:	08008e4d 	.word	0x08008e4d
 8008eb4:	08008e4d 	.word	0x08008e4d
 8008eb8:	08008fc7 	.word	0x08008fc7
 8008ebc:	682b      	ldr	r3, [r5, #0]
 8008ebe:	1d1a      	adds	r2, r3, #4
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	602a      	str	r2, [r5, #0]
 8008ec4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ec8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e0a3      	b.n	8009018 <_printf_i+0x1f4>
 8008ed0:	6820      	ldr	r0, [r4, #0]
 8008ed2:	6829      	ldr	r1, [r5, #0]
 8008ed4:	0606      	lsls	r6, r0, #24
 8008ed6:	f101 0304 	add.w	r3, r1, #4
 8008eda:	d50a      	bpl.n	8008ef2 <_printf_i+0xce>
 8008edc:	680e      	ldr	r6, [r1, #0]
 8008ede:	602b      	str	r3, [r5, #0]
 8008ee0:	2e00      	cmp	r6, #0
 8008ee2:	da03      	bge.n	8008eec <_printf_i+0xc8>
 8008ee4:	232d      	movs	r3, #45	; 0x2d
 8008ee6:	4276      	negs	r6, r6
 8008ee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008eec:	485e      	ldr	r0, [pc, #376]	; (8009068 <_printf_i+0x244>)
 8008eee:	230a      	movs	r3, #10
 8008ef0:	e019      	b.n	8008f26 <_printf_i+0x102>
 8008ef2:	680e      	ldr	r6, [r1, #0]
 8008ef4:	602b      	str	r3, [r5, #0]
 8008ef6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008efa:	bf18      	it	ne
 8008efc:	b236      	sxthne	r6, r6
 8008efe:	e7ef      	b.n	8008ee0 <_printf_i+0xbc>
 8008f00:	682b      	ldr	r3, [r5, #0]
 8008f02:	6820      	ldr	r0, [r4, #0]
 8008f04:	1d19      	adds	r1, r3, #4
 8008f06:	6029      	str	r1, [r5, #0]
 8008f08:	0601      	lsls	r1, r0, #24
 8008f0a:	d501      	bpl.n	8008f10 <_printf_i+0xec>
 8008f0c:	681e      	ldr	r6, [r3, #0]
 8008f0e:	e002      	b.n	8008f16 <_printf_i+0xf2>
 8008f10:	0646      	lsls	r6, r0, #25
 8008f12:	d5fb      	bpl.n	8008f0c <_printf_i+0xe8>
 8008f14:	881e      	ldrh	r6, [r3, #0]
 8008f16:	4854      	ldr	r0, [pc, #336]	; (8009068 <_printf_i+0x244>)
 8008f18:	2f6f      	cmp	r7, #111	; 0x6f
 8008f1a:	bf0c      	ite	eq
 8008f1c:	2308      	moveq	r3, #8
 8008f1e:	230a      	movne	r3, #10
 8008f20:	2100      	movs	r1, #0
 8008f22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f26:	6865      	ldr	r5, [r4, #4]
 8008f28:	60a5      	str	r5, [r4, #8]
 8008f2a:	2d00      	cmp	r5, #0
 8008f2c:	bfa2      	ittt	ge
 8008f2e:	6821      	ldrge	r1, [r4, #0]
 8008f30:	f021 0104 	bicge.w	r1, r1, #4
 8008f34:	6021      	strge	r1, [r4, #0]
 8008f36:	b90e      	cbnz	r6, 8008f3c <_printf_i+0x118>
 8008f38:	2d00      	cmp	r5, #0
 8008f3a:	d04d      	beq.n	8008fd8 <_printf_i+0x1b4>
 8008f3c:	4615      	mov	r5, r2
 8008f3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f42:	fb03 6711 	mls	r7, r3, r1, r6
 8008f46:	5dc7      	ldrb	r7, [r0, r7]
 8008f48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f4c:	4637      	mov	r7, r6
 8008f4e:	42bb      	cmp	r3, r7
 8008f50:	460e      	mov	r6, r1
 8008f52:	d9f4      	bls.n	8008f3e <_printf_i+0x11a>
 8008f54:	2b08      	cmp	r3, #8
 8008f56:	d10b      	bne.n	8008f70 <_printf_i+0x14c>
 8008f58:	6823      	ldr	r3, [r4, #0]
 8008f5a:	07de      	lsls	r6, r3, #31
 8008f5c:	d508      	bpl.n	8008f70 <_printf_i+0x14c>
 8008f5e:	6923      	ldr	r3, [r4, #16]
 8008f60:	6861      	ldr	r1, [r4, #4]
 8008f62:	4299      	cmp	r1, r3
 8008f64:	bfde      	ittt	le
 8008f66:	2330      	movle	r3, #48	; 0x30
 8008f68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f6c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008f70:	1b52      	subs	r2, r2, r5
 8008f72:	6122      	str	r2, [r4, #16]
 8008f74:	f8cd a000 	str.w	sl, [sp]
 8008f78:	464b      	mov	r3, r9
 8008f7a:	aa03      	add	r2, sp, #12
 8008f7c:	4621      	mov	r1, r4
 8008f7e:	4640      	mov	r0, r8
 8008f80:	f7ff fee2 	bl	8008d48 <_printf_common>
 8008f84:	3001      	adds	r0, #1
 8008f86:	d14c      	bne.n	8009022 <_printf_i+0x1fe>
 8008f88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f8c:	b004      	add	sp, #16
 8008f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f92:	4835      	ldr	r0, [pc, #212]	; (8009068 <_printf_i+0x244>)
 8008f94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008f98:	6829      	ldr	r1, [r5, #0]
 8008f9a:	6823      	ldr	r3, [r4, #0]
 8008f9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008fa0:	6029      	str	r1, [r5, #0]
 8008fa2:	061d      	lsls	r5, r3, #24
 8008fa4:	d514      	bpl.n	8008fd0 <_printf_i+0x1ac>
 8008fa6:	07df      	lsls	r7, r3, #31
 8008fa8:	bf44      	itt	mi
 8008faa:	f043 0320 	orrmi.w	r3, r3, #32
 8008fae:	6023      	strmi	r3, [r4, #0]
 8008fb0:	b91e      	cbnz	r6, 8008fba <_printf_i+0x196>
 8008fb2:	6823      	ldr	r3, [r4, #0]
 8008fb4:	f023 0320 	bic.w	r3, r3, #32
 8008fb8:	6023      	str	r3, [r4, #0]
 8008fba:	2310      	movs	r3, #16
 8008fbc:	e7b0      	b.n	8008f20 <_printf_i+0xfc>
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	f043 0320 	orr.w	r3, r3, #32
 8008fc4:	6023      	str	r3, [r4, #0]
 8008fc6:	2378      	movs	r3, #120	; 0x78
 8008fc8:	4828      	ldr	r0, [pc, #160]	; (800906c <_printf_i+0x248>)
 8008fca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008fce:	e7e3      	b.n	8008f98 <_printf_i+0x174>
 8008fd0:	0659      	lsls	r1, r3, #25
 8008fd2:	bf48      	it	mi
 8008fd4:	b2b6      	uxthmi	r6, r6
 8008fd6:	e7e6      	b.n	8008fa6 <_printf_i+0x182>
 8008fd8:	4615      	mov	r5, r2
 8008fda:	e7bb      	b.n	8008f54 <_printf_i+0x130>
 8008fdc:	682b      	ldr	r3, [r5, #0]
 8008fde:	6826      	ldr	r6, [r4, #0]
 8008fe0:	6961      	ldr	r1, [r4, #20]
 8008fe2:	1d18      	adds	r0, r3, #4
 8008fe4:	6028      	str	r0, [r5, #0]
 8008fe6:	0635      	lsls	r5, r6, #24
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	d501      	bpl.n	8008ff0 <_printf_i+0x1cc>
 8008fec:	6019      	str	r1, [r3, #0]
 8008fee:	e002      	b.n	8008ff6 <_printf_i+0x1d2>
 8008ff0:	0670      	lsls	r0, r6, #25
 8008ff2:	d5fb      	bpl.n	8008fec <_printf_i+0x1c8>
 8008ff4:	8019      	strh	r1, [r3, #0]
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	6123      	str	r3, [r4, #16]
 8008ffa:	4615      	mov	r5, r2
 8008ffc:	e7ba      	b.n	8008f74 <_printf_i+0x150>
 8008ffe:	682b      	ldr	r3, [r5, #0]
 8009000:	1d1a      	adds	r2, r3, #4
 8009002:	602a      	str	r2, [r5, #0]
 8009004:	681d      	ldr	r5, [r3, #0]
 8009006:	6862      	ldr	r2, [r4, #4]
 8009008:	2100      	movs	r1, #0
 800900a:	4628      	mov	r0, r5
 800900c:	f7f7 f8e8 	bl	80001e0 <memchr>
 8009010:	b108      	cbz	r0, 8009016 <_printf_i+0x1f2>
 8009012:	1b40      	subs	r0, r0, r5
 8009014:	6060      	str	r0, [r4, #4]
 8009016:	6863      	ldr	r3, [r4, #4]
 8009018:	6123      	str	r3, [r4, #16]
 800901a:	2300      	movs	r3, #0
 800901c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009020:	e7a8      	b.n	8008f74 <_printf_i+0x150>
 8009022:	6923      	ldr	r3, [r4, #16]
 8009024:	462a      	mov	r2, r5
 8009026:	4649      	mov	r1, r9
 8009028:	4640      	mov	r0, r8
 800902a:	47d0      	blx	sl
 800902c:	3001      	adds	r0, #1
 800902e:	d0ab      	beq.n	8008f88 <_printf_i+0x164>
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	079b      	lsls	r3, r3, #30
 8009034:	d413      	bmi.n	800905e <_printf_i+0x23a>
 8009036:	68e0      	ldr	r0, [r4, #12]
 8009038:	9b03      	ldr	r3, [sp, #12]
 800903a:	4298      	cmp	r0, r3
 800903c:	bfb8      	it	lt
 800903e:	4618      	movlt	r0, r3
 8009040:	e7a4      	b.n	8008f8c <_printf_i+0x168>
 8009042:	2301      	movs	r3, #1
 8009044:	4632      	mov	r2, r6
 8009046:	4649      	mov	r1, r9
 8009048:	4640      	mov	r0, r8
 800904a:	47d0      	blx	sl
 800904c:	3001      	adds	r0, #1
 800904e:	d09b      	beq.n	8008f88 <_printf_i+0x164>
 8009050:	3501      	adds	r5, #1
 8009052:	68e3      	ldr	r3, [r4, #12]
 8009054:	9903      	ldr	r1, [sp, #12]
 8009056:	1a5b      	subs	r3, r3, r1
 8009058:	42ab      	cmp	r3, r5
 800905a:	dcf2      	bgt.n	8009042 <_printf_i+0x21e>
 800905c:	e7eb      	b.n	8009036 <_printf_i+0x212>
 800905e:	2500      	movs	r5, #0
 8009060:	f104 0619 	add.w	r6, r4, #25
 8009064:	e7f5      	b.n	8009052 <_printf_i+0x22e>
 8009066:	bf00      	nop
 8009068:	08009d11 	.word	0x08009d11
 800906c:	08009d22 	.word	0x08009d22

08009070 <_sbrk_r>:
 8009070:	b538      	push	{r3, r4, r5, lr}
 8009072:	4d06      	ldr	r5, [pc, #24]	; (800908c <_sbrk_r+0x1c>)
 8009074:	2300      	movs	r3, #0
 8009076:	4604      	mov	r4, r0
 8009078:	4608      	mov	r0, r1
 800907a:	602b      	str	r3, [r5, #0]
 800907c:	f7f7 fec0 	bl	8000e00 <_sbrk>
 8009080:	1c43      	adds	r3, r0, #1
 8009082:	d102      	bne.n	800908a <_sbrk_r+0x1a>
 8009084:	682b      	ldr	r3, [r5, #0]
 8009086:	b103      	cbz	r3, 800908a <_sbrk_r+0x1a>
 8009088:	6023      	str	r3, [r4, #0]
 800908a:	bd38      	pop	{r3, r4, r5, pc}
 800908c:	20000cc0 	.word	0x20000cc0

08009090 <siprintf>:
 8009090:	b40e      	push	{r1, r2, r3}
 8009092:	b500      	push	{lr}
 8009094:	b09c      	sub	sp, #112	; 0x70
 8009096:	ab1d      	add	r3, sp, #116	; 0x74
 8009098:	9002      	str	r0, [sp, #8]
 800909a:	9006      	str	r0, [sp, #24]
 800909c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80090a0:	4809      	ldr	r0, [pc, #36]	; (80090c8 <siprintf+0x38>)
 80090a2:	9107      	str	r1, [sp, #28]
 80090a4:	9104      	str	r1, [sp, #16]
 80090a6:	4909      	ldr	r1, [pc, #36]	; (80090cc <siprintf+0x3c>)
 80090a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80090ac:	9105      	str	r1, [sp, #20]
 80090ae:	6800      	ldr	r0, [r0, #0]
 80090b0:	9301      	str	r3, [sp, #4]
 80090b2:	a902      	add	r1, sp, #8
 80090b4:	f000 fbb2 	bl	800981c <_svfiprintf_r>
 80090b8:	9b02      	ldr	r3, [sp, #8]
 80090ba:	2200      	movs	r2, #0
 80090bc:	701a      	strb	r2, [r3, #0]
 80090be:	b01c      	add	sp, #112	; 0x70
 80090c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80090c4:	b003      	add	sp, #12
 80090c6:	4770      	bx	lr
 80090c8:	2000002c 	.word	0x2000002c
 80090cc:	ffff0208 	.word	0xffff0208

080090d0 <__swbuf_r>:
 80090d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d2:	460e      	mov	r6, r1
 80090d4:	4614      	mov	r4, r2
 80090d6:	4605      	mov	r5, r0
 80090d8:	b118      	cbz	r0, 80090e2 <__swbuf_r+0x12>
 80090da:	6983      	ldr	r3, [r0, #24]
 80090dc:	b90b      	cbnz	r3, 80090e2 <__swbuf_r+0x12>
 80090de:	f000 f9d9 	bl	8009494 <__sinit>
 80090e2:	4b21      	ldr	r3, [pc, #132]	; (8009168 <__swbuf_r+0x98>)
 80090e4:	429c      	cmp	r4, r3
 80090e6:	d12b      	bne.n	8009140 <__swbuf_r+0x70>
 80090e8:	686c      	ldr	r4, [r5, #4]
 80090ea:	69a3      	ldr	r3, [r4, #24]
 80090ec:	60a3      	str	r3, [r4, #8]
 80090ee:	89a3      	ldrh	r3, [r4, #12]
 80090f0:	071a      	lsls	r2, r3, #28
 80090f2:	d52f      	bpl.n	8009154 <__swbuf_r+0x84>
 80090f4:	6923      	ldr	r3, [r4, #16]
 80090f6:	b36b      	cbz	r3, 8009154 <__swbuf_r+0x84>
 80090f8:	6923      	ldr	r3, [r4, #16]
 80090fa:	6820      	ldr	r0, [r4, #0]
 80090fc:	1ac0      	subs	r0, r0, r3
 80090fe:	6963      	ldr	r3, [r4, #20]
 8009100:	b2f6      	uxtb	r6, r6
 8009102:	4283      	cmp	r3, r0
 8009104:	4637      	mov	r7, r6
 8009106:	dc04      	bgt.n	8009112 <__swbuf_r+0x42>
 8009108:	4621      	mov	r1, r4
 800910a:	4628      	mov	r0, r5
 800910c:	f000 f92e 	bl	800936c <_fflush_r>
 8009110:	bb30      	cbnz	r0, 8009160 <__swbuf_r+0x90>
 8009112:	68a3      	ldr	r3, [r4, #8]
 8009114:	3b01      	subs	r3, #1
 8009116:	60a3      	str	r3, [r4, #8]
 8009118:	6823      	ldr	r3, [r4, #0]
 800911a:	1c5a      	adds	r2, r3, #1
 800911c:	6022      	str	r2, [r4, #0]
 800911e:	701e      	strb	r6, [r3, #0]
 8009120:	6963      	ldr	r3, [r4, #20]
 8009122:	3001      	adds	r0, #1
 8009124:	4283      	cmp	r3, r0
 8009126:	d004      	beq.n	8009132 <__swbuf_r+0x62>
 8009128:	89a3      	ldrh	r3, [r4, #12]
 800912a:	07db      	lsls	r3, r3, #31
 800912c:	d506      	bpl.n	800913c <__swbuf_r+0x6c>
 800912e:	2e0a      	cmp	r6, #10
 8009130:	d104      	bne.n	800913c <__swbuf_r+0x6c>
 8009132:	4621      	mov	r1, r4
 8009134:	4628      	mov	r0, r5
 8009136:	f000 f919 	bl	800936c <_fflush_r>
 800913a:	b988      	cbnz	r0, 8009160 <__swbuf_r+0x90>
 800913c:	4638      	mov	r0, r7
 800913e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009140:	4b0a      	ldr	r3, [pc, #40]	; (800916c <__swbuf_r+0x9c>)
 8009142:	429c      	cmp	r4, r3
 8009144:	d101      	bne.n	800914a <__swbuf_r+0x7a>
 8009146:	68ac      	ldr	r4, [r5, #8]
 8009148:	e7cf      	b.n	80090ea <__swbuf_r+0x1a>
 800914a:	4b09      	ldr	r3, [pc, #36]	; (8009170 <__swbuf_r+0xa0>)
 800914c:	429c      	cmp	r4, r3
 800914e:	bf08      	it	eq
 8009150:	68ec      	ldreq	r4, [r5, #12]
 8009152:	e7ca      	b.n	80090ea <__swbuf_r+0x1a>
 8009154:	4621      	mov	r1, r4
 8009156:	4628      	mov	r0, r5
 8009158:	f000 f80c 	bl	8009174 <__swsetup_r>
 800915c:	2800      	cmp	r0, #0
 800915e:	d0cb      	beq.n	80090f8 <__swbuf_r+0x28>
 8009160:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009164:	e7ea      	b.n	800913c <__swbuf_r+0x6c>
 8009166:	bf00      	nop
 8009168:	08009d54 	.word	0x08009d54
 800916c:	08009d74 	.word	0x08009d74
 8009170:	08009d34 	.word	0x08009d34

08009174 <__swsetup_r>:
 8009174:	4b32      	ldr	r3, [pc, #200]	; (8009240 <__swsetup_r+0xcc>)
 8009176:	b570      	push	{r4, r5, r6, lr}
 8009178:	681d      	ldr	r5, [r3, #0]
 800917a:	4606      	mov	r6, r0
 800917c:	460c      	mov	r4, r1
 800917e:	b125      	cbz	r5, 800918a <__swsetup_r+0x16>
 8009180:	69ab      	ldr	r3, [r5, #24]
 8009182:	b913      	cbnz	r3, 800918a <__swsetup_r+0x16>
 8009184:	4628      	mov	r0, r5
 8009186:	f000 f985 	bl	8009494 <__sinit>
 800918a:	4b2e      	ldr	r3, [pc, #184]	; (8009244 <__swsetup_r+0xd0>)
 800918c:	429c      	cmp	r4, r3
 800918e:	d10f      	bne.n	80091b0 <__swsetup_r+0x3c>
 8009190:	686c      	ldr	r4, [r5, #4]
 8009192:	89a3      	ldrh	r3, [r4, #12]
 8009194:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009198:	0719      	lsls	r1, r3, #28
 800919a:	d42c      	bmi.n	80091f6 <__swsetup_r+0x82>
 800919c:	06dd      	lsls	r5, r3, #27
 800919e:	d411      	bmi.n	80091c4 <__swsetup_r+0x50>
 80091a0:	2309      	movs	r3, #9
 80091a2:	6033      	str	r3, [r6, #0]
 80091a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80091a8:	81a3      	strh	r3, [r4, #12]
 80091aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091ae:	e03e      	b.n	800922e <__swsetup_r+0xba>
 80091b0:	4b25      	ldr	r3, [pc, #148]	; (8009248 <__swsetup_r+0xd4>)
 80091b2:	429c      	cmp	r4, r3
 80091b4:	d101      	bne.n	80091ba <__swsetup_r+0x46>
 80091b6:	68ac      	ldr	r4, [r5, #8]
 80091b8:	e7eb      	b.n	8009192 <__swsetup_r+0x1e>
 80091ba:	4b24      	ldr	r3, [pc, #144]	; (800924c <__swsetup_r+0xd8>)
 80091bc:	429c      	cmp	r4, r3
 80091be:	bf08      	it	eq
 80091c0:	68ec      	ldreq	r4, [r5, #12]
 80091c2:	e7e6      	b.n	8009192 <__swsetup_r+0x1e>
 80091c4:	0758      	lsls	r0, r3, #29
 80091c6:	d512      	bpl.n	80091ee <__swsetup_r+0x7a>
 80091c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091ca:	b141      	cbz	r1, 80091de <__swsetup_r+0x6a>
 80091cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091d0:	4299      	cmp	r1, r3
 80091d2:	d002      	beq.n	80091da <__swsetup_r+0x66>
 80091d4:	4630      	mov	r0, r6
 80091d6:	f7ff fb7d 	bl	80088d4 <_free_r>
 80091da:	2300      	movs	r3, #0
 80091dc:	6363      	str	r3, [r4, #52]	; 0x34
 80091de:	89a3      	ldrh	r3, [r4, #12]
 80091e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091e4:	81a3      	strh	r3, [r4, #12]
 80091e6:	2300      	movs	r3, #0
 80091e8:	6063      	str	r3, [r4, #4]
 80091ea:	6923      	ldr	r3, [r4, #16]
 80091ec:	6023      	str	r3, [r4, #0]
 80091ee:	89a3      	ldrh	r3, [r4, #12]
 80091f0:	f043 0308 	orr.w	r3, r3, #8
 80091f4:	81a3      	strh	r3, [r4, #12]
 80091f6:	6923      	ldr	r3, [r4, #16]
 80091f8:	b94b      	cbnz	r3, 800920e <__swsetup_r+0x9a>
 80091fa:	89a3      	ldrh	r3, [r4, #12]
 80091fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009204:	d003      	beq.n	800920e <__swsetup_r+0x9a>
 8009206:	4621      	mov	r1, r4
 8009208:	4630      	mov	r0, r6
 800920a:	f000 fa09 	bl	8009620 <__smakebuf_r>
 800920e:	89a0      	ldrh	r0, [r4, #12]
 8009210:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009214:	f010 0301 	ands.w	r3, r0, #1
 8009218:	d00a      	beq.n	8009230 <__swsetup_r+0xbc>
 800921a:	2300      	movs	r3, #0
 800921c:	60a3      	str	r3, [r4, #8]
 800921e:	6963      	ldr	r3, [r4, #20]
 8009220:	425b      	negs	r3, r3
 8009222:	61a3      	str	r3, [r4, #24]
 8009224:	6923      	ldr	r3, [r4, #16]
 8009226:	b943      	cbnz	r3, 800923a <__swsetup_r+0xc6>
 8009228:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800922c:	d1ba      	bne.n	80091a4 <__swsetup_r+0x30>
 800922e:	bd70      	pop	{r4, r5, r6, pc}
 8009230:	0781      	lsls	r1, r0, #30
 8009232:	bf58      	it	pl
 8009234:	6963      	ldrpl	r3, [r4, #20]
 8009236:	60a3      	str	r3, [r4, #8]
 8009238:	e7f4      	b.n	8009224 <__swsetup_r+0xb0>
 800923a:	2000      	movs	r0, #0
 800923c:	e7f7      	b.n	800922e <__swsetup_r+0xba>
 800923e:	bf00      	nop
 8009240:	2000002c 	.word	0x2000002c
 8009244:	08009d54 	.word	0x08009d54
 8009248:	08009d74 	.word	0x08009d74
 800924c:	08009d34 	.word	0x08009d34

08009250 <abort>:
 8009250:	b508      	push	{r3, lr}
 8009252:	2006      	movs	r0, #6
 8009254:	f000 fc0a 	bl	8009a6c <raise>
 8009258:	2001      	movs	r0, #1
 800925a:	f7f7 fd59 	bl	8000d10 <_exit>
	...

08009260 <__sflush_r>:
 8009260:	898a      	ldrh	r2, [r1, #12]
 8009262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009266:	4605      	mov	r5, r0
 8009268:	0710      	lsls	r0, r2, #28
 800926a:	460c      	mov	r4, r1
 800926c:	d458      	bmi.n	8009320 <__sflush_r+0xc0>
 800926e:	684b      	ldr	r3, [r1, #4]
 8009270:	2b00      	cmp	r3, #0
 8009272:	dc05      	bgt.n	8009280 <__sflush_r+0x20>
 8009274:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009276:	2b00      	cmp	r3, #0
 8009278:	dc02      	bgt.n	8009280 <__sflush_r+0x20>
 800927a:	2000      	movs	r0, #0
 800927c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009280:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009282:	2e00      	cmp	r6, #0
 8009284:	d0f9      	beq.n	800927a <__sflush_r+0x1a>
 8009286:	2300      	movs	r3, #0
 8009288:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800928c:	682f      	ldr	r7, [r5, #0]
 800928e:	602b      	str	r3, [r5, #0]
 8009290:	d032      	beq.n	80092f8 <__sflush_r+0x98>
 8009292:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009294:	89a3      	ldrh	r3, [r4, #12]
 8009296:	075a      	lsls	r2, r3, #29
 8009298:	d505      	bpl.n	80092a6 <__sflush_r+0x46>
 800929a:	6863      	ldr	r3, [r4, #4]
 800929c:	1ac0      	subs	r0, r0, r3
 800929e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092a0:	b10b      	cbz	r3, 80092a6 <__sflush_r+0x46>
 80092a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092a4:	1ac0      	subs	r0, r0, r3
 80092a6:	2300      	movs	r3, #0
 80092a8:	4602      	mov	r2, r0
 80092aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092ac:	6a21      	ldr	r1, [r4, #32]
 80092ae:	4628      	mov	r0, r5
 80092b0:	47b0      	blx	r6
 80092b2:	1c43      	adds	r3, r0, #1
 80092b4:	89a3      	ldrh	r3, [r4, #12]
 80092b6:	d106      	bne.n	80092c6 <__sflush_r+0x66>
 80092b8:	6829      	ldr	r1, [r5, #0]
 80092ba:	291d      	cmp	r1, #29
 80092bc:	d82c      	bhi.n	8009318 <__sflush_r+0xb8>
 80092be:	4a2a      	ldr	r2, [pc, #168]	; (8009368 <__sflush_r+0x108>)
 80092c0:	40ca      	lsrs	r2, r1
 80092c2:	07d6      	lsls	r6, r2, #31
 80092c4:	d528      	bpl.n	8009318 <__sflush_r+0xb8>
 80092c6:	2200      	movs	r2, #0
 80092c8:	6062      	str	r2, [r4, #4]
 80092ca:	04d9      	lsls	r1, r3, #19
 80092cc:	6922      	ldr	r2, [r4, #16]
 80092ce:	6022      	str	r2, [r4, #0]
 80092d0:	d504      	bpl.n	80092dc <__sflush_r+0x7c>
 80092d2:	1c42      	adds	r2, r0, #1
 80092d4:	d101      	bne.n	80092da <__sflush_r+0x7a>
 80092d6:	682b      	ldr	r3, [r5, #0]
 80092d8:	b903      	cbnz	r3, 80092dc <__sflush_r+0x7c>
 80092da:	6560      	str	r0, [r4, #84]	; 0x54
 80092dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092de:	602f      	str	r7, [r5, #0]
 80092e0:	2900      	cmp	r1, #0
 80092e2:	d0ca      	beq.n	800927a <__sflush_r+0x1a>
 80092e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092e8:	4299      	cmp	r1, r3
 80092ea:	d002      	beq.n	80092f2 <__sflush_r+0x92>
 80092ec:	4628      	mov	r0, r5
 80092ee:	f7ff faf1 	bl	80088d4 <_free_r>
 80092f2:	2000      	movs	r0, #0
 80092f4:	6360      	str	r0, [r4, #52]	; 0x34
 80092f6:	e7c1      	b.n	800927c <__sflush_r+0x1c>
 80092f8:	6a21      	ldr	r1, [r4, #32]
 80092fa:	2301      	movs	r3, #1
 80092fc:	4628      	mov	r0, r5
 80092fe:	47b0      	blx	r6
 8009300:	1c41      	adds	r1, r0, #1
 8009302:	d1c7      	bne.n	8009294 <__sflush_r+0x34>
 8009304:	682b      	ldr	r3, [r5, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d0c4      	beq.n	8009294 <__sflush_r+0x34>
 800930a:	2b1d      	cmp	r3, #29
 800930c:	d001      	beq.n	8009312 <__sflush_r+0xb2>
 800930e:	2b16      	cmp	r3, #22
 8009310:	d101      	bne.n	8009316 <__sflush_r+0xb6>
 8009312:	602f      	str	r7, [r5, #0]
 8009314:	e7b1      	b.n	800927a <__sflush_r+0x1a>
 8009316:	89a3      	ldrh	r3, [r4, #12]
 8009318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800931c:	81a3      	strh	r3, [r4, #12]
 800931e:	e7ad      	b.n	800927c <__sflush_r+0x1c>
 8009320:	690f      	ldr	r7, [r1, #16]
 8009322:	2f00      	cmp	r7, #0
 8009324:	d0a9      	beq.n	800927a <__sflush_r+0x1a>
 8009326:	0793      	lsls	r3, r2, #30
 8009328:	680e      	ldr	r6, [r1, #0]
 800932a:	bf08      	it	eq
 800932c:	694b      	ldreq	r3, [r1, #20]
 800932e:	600f      	str	r7, [r1, #0]
 8009330:	bf18      	it	ne
 8009332:	2300      	movne	r3, #0
 8009334:	eba6 0807 	sub.w	r8, r6, r7
 8009338:	608b      	str	r3, [r1, #8]
 800933a:	f1b8 0f00 	cmp.w	r8, #0
 800933e:	dd9c      	ble.n	800927a <__sflush_r+0x1a>
 8009340:	6a21      	ldr	r1, [r4, #32]
 8009342:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009344:	4643      	mov	r3, r8
 8009346:	463a      	mov	r2, r7
 8009348:	4628      	mov	r0, r5
 800934a:	47b0      	blx	r6
 800934c:	2800      	cmp	r0, #0
 800934e:	dc06      	bgt.n	800935e <__sflush_r+0xfe>
 8009350:	89a3      	ldrh	r3, [r4, #12]
 8009352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009356:	81a3      	strh	r3, [r4, #12]
 8009358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800935c:	e78e      	b.n	800927c <__sflush_r+0x1c>
 800935e:	4407      	add	r7, r0
 8009360:	eba8 0800 	sub.w	r8, r8, r0
 8009364:	e7e9      	b.n	800933a <__sflush_r+0xda>
 8009366:	bf00      	nop
 8009368:	20400001 	.word	0x20400001

0800936c <_fflush_r>:
 800936c:	b538      	push	{r3, r4, r5, lr}
 800936e:	690b      	ldr	r3, [r1, #16]
 8009370:	4605      	mov	r5, r0
 8009372:	460c      	mov	r4, r1
 8009374:	b913      	cbnz	r3, 800937c <_fflush_r+0x10>
 8009376:	2500      	movs	r5, #0
 8009378:	4628      	mov	r0, r5
 800937a:	bd38      	pop	{r3, r4, r5, pc}
 800937c:	b118      	cbz	r0, 8009386 <_fflush_r+0x1a>
 800937e:	6983      	ldr	r3, [r0, #24]
 8009380:	b90b      	cbnz	r3, 8009386 <_fflush_r+0x1a>
 8009382:	f000 f887 	bl	8009494 <__sinit>
 8009386:	4b14      	ldr	r3, [pc, #80]	; (80093d8 <_fflush_r+0x6c>)
 8009388:	429c      	cmp	r4, r3
 800938a:	d11b      	bne.n	80093c4 <_fflush_r+0x58>
 800938c:	686c      	ldr	r4, [r5, #4]
 800938e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d0ef      	beq.n	8009376 <_fflush_r+0xa>
 8009396:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009398:	07d0      	lsls	r0, r2, #31
 800939a:	d404      	bmi.n	80093a6 <_fflush_r+0x3a>
 800939c:	0599      	lsls	r1, r3, #22
 800939e:	d402      	bmi.n	80093a6 <_fflush_r+0x3a>
 80093a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093a2:	f000 f915 	bl	80095d0 <__retarget_lock_acquire_recursive>
 80093a6:	4628      	mov	r0, r5
 80093a8:	4621      	mov	r1, r4
 80093aa:	f7ff ff59 	bl	8009260 <__sflush_r>
 80093ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093b0:	07da      	lsls	r2, r3, #31
 80093b2:	4605      	mov	r5, r0
 80093b4:	d4e0      	bmi.n	8009378 <_fflush_r+0xc>
 80093b6:	89a3      	ldrh	r3, [r4, #12]
 80093b8:	059b      	lsls	r3, r3, #22
 80093ba:	d4dd      	bmi.n	8009378 <_fflush_r+0xc>
 80093bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093be:	f000 f908 	bl	80095d2 <__retarget_lock_release_recursive>
 80093c2:	e7d9      	b.n	8009378 <_fflush_r+0xc>
 80093c4:	4b05      	ldr	r3, [pc, #20]	; (80093dc <_fflush_r+0x70>)
 80093c6:	429c      	cmp	r4, r3
 80093c8:	d101      	bne.n	80093ce <_fflush_r+0x62>
 80093ca:	68ac      	ldr	r4, [r5, #8]
 80093cc:	e7df      	b.n	800938e <_fflush_r+0x22>
 80093ce:	4b04      	ldr	r3, [pc, #16]	; (80093e0 <_fflush_r+0x74>)
 80093d0:	429c      	cmp	r4, r3
 80093d2:	bf08      	it	eq
 80093d4:	68ec      	ldreq	r4, [r5, #12]
 80093d6:	e7da      	b.n	800938e <_fflush_r+0x22>
 80093d8:	08009d54 	.word	0x08009d54
 80093dc:	08009d74 	.word	0x08009d74
 80093e0:	08009d34 	.word	0x08009d34

080093e4 <std>:
 80093e4:	2300      	movs	r3, #0
 80093e6:	b510      	push	{r4, lr}
 80093e8:	4604      	mov	r4, r0
 80093ea:	e9c0 3300 	strd	r3, r3, [r0]
 80093ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093f2:	6083      	str	r3, [r0, #8]
 80093f4:	8181      	strh	r1, [r0, #12]
 80093f6:	6643      	str	r3, [r0, #100]	; 0x64
 80093f8:	81c2      	strh	r2, [r0, #14]
 80093fa:	6183      	str	r3, [r0, #24]
 80093fc:	4619      	mov	r1, r3
 80093fe:	2208      	movs	r2, #8
 8009400:	305c      	adds	r0, #92	; 0x5c
 8009402:	f7ff fa5f 	bl	80088c4 <memset>
 8009406:	4b05      	ldr	r3, [pc, #20]	; (800941c <std+0x38>)
 8009408:	6263      	str	r3, [r4, #36]	; 0x24
 800940a:	4b05      	ldr	r3, [pc, #20]	; (8009420 <std+0x3c>)
 800940c:	62a3      	str	r3, [r4, #40]	; 0x28
 800940e:	4b05      	ldr	r3, [pc, #20]	; (8009424 <std+0x40>)
 8009410:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009412:	4b05      	ldr	r3, [pc, #20]	; (8009428 <std+0x44>)
 8009414:	6224      	str	r4, [r4, #32]
 8009416:	6323      	str	r3, [r4, #48]	; 0x30
 8009418:	bd10      	pop	{r4, pc}
 800941a:	bf00      	nop
 800941c:	08009aa5 	.word	0x08009aa5
 8009420:	08009ac7 	.word	0x08009ac7
 8009424:	08009aff 	.word	0x08009aff
 8009428:	08009b23 	.word	0x08009b23

0800942c <_cleanup_r>:
 800942c:	4901      	ldr	r1, [pc, #4]	; (8009434 <_cleanup_r+0x8>)
 800942e:	f000 b8af 	b.w	8009590 <_fwalk_reent>
 8009432:	bf00      	nop
 8009434:	0800936d 	.word	0x0800936d

08009438 <__sfmoreglue>:
 8009438:	b570      	push	{r4, r5, r6, lr}
 800943a:	2268      	movs	r2, #104	; 0x68
 800943c:	1e4d      	subs	r5, r1, #1
 800943e:	4355      	muls	r5, r2
 8009440:	460e      	mov	r6, r1
 8009442:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009446:	f7ff fab1 	bl	80089ac <_malloc_r>
 800944a:	4604      	mov	r4, r0
 800944c:	b140      	cbz	r0, 8009460 <__sfmoreglue+0x28>
 800944e:	2100      	movs	r1, #0
 8009450:	e9c0 1600 	strd	r1, r6, [r0]
 8009454:	300c      	adds	r0, #12
 8009456:	60a0      	str	r0, [r4, #8]
 8009458:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800945c:	f7ff fa32 	bl	80088c4 <memset>
 8009460:	4620      	mov	r0, r4
 8009462:	bd70      	pop	{r4, r5, r6, pc}

08009464 <__sfp_lock_acquire>:
 8009464:	4801      	ldr	r0, [pc, #4]	; (800946c <__sfp_lock_acquire+0x8>)
 8009466:	f000 b8b3 	b.w	80095d0 <__retarget_lock_acquire_recursive>
 800946a:	bf00      	nop
 800946c:	20000cbd 	.word	0x20000cbd

08009470 <__sfp_lock_release>:
 8009470:	4801      	ldr	r0, [pc, #4]	; (8009478 <__sfp_lock_release+0x8>)
 8009472:	f000 b8ae 	b.w	80095d2 <__retarget_lock_release_recursive>
 8009476:	bf00      	nop
 8009478:	20000cbd 	.word	0x20000cbd

0800947c <__sinit_lock_acquire>:
 800947c:	4801      	ldr	r0, [pc, #4]	; (8009484 <__sinit_lock_acquire+0x8>)
 800947e:	f000 b8a7 	b.w	80095d0 <__retarget_lock_acquire_recursive>
 8009482:	bf00      	nop
 8009484:	20000cbe 	.word	0x20000cbe

08009488 <__sinit_lock_release>:
 8009488:	4801      	ldr	r0, [pc, #4]	; (8009490 <__sinit_lock_release+0x8>)
 800948a:	f000 b8a2 	b.w	80095d2 <__retarget_lock_release_recursive>
 800948e:	bf00      	nop
 8009490:	20000cbe 	.word	0x20000cbe

08009494 <__sinit>:
 8009494:	b510      	push	{r4, lr}
 8009496:	4604      	mov	r4, r0
 8009498:	f7ff fff0 	bl	800947c <__sinit_lock_acquire>
 800949c:	69a3      	ldr	r3, [r4, #24]
 800949e:	b11b      	cbz	r3, 80094a8 <__sinit+0x14>
 80094a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094a4:	f7ff bff0 	b.w	8009488 <__sinit_lock_release>
 80094a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80094ac:	6523      	str	r3, [r4, #80]	; 0x50
 80094ae:	4b13      	ldr	r3, [pc, #76]	; (80094fc <__sinit+0x68>)
 80094b0:	4a13      	ldr	r2, [pc, #76]	; (8009500 <__sinit+0x6c>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80094b6:	42a3      	cmp	r3, r4
 80094b8:	bf04      	itt	eq
 80094ba:	2301      	moveq	r3, #1
 80094bc:	61a3      	streq	r3, [r4, #24]
 80094be:	4620      	mov	r0, r4
 80094c0:	f000 f820 	bl	8009504 <__sfp>
 80094c4:	6060      	str	r0, [r4, #4]
 80094c6:	4620      	mov	r0, r4
 80094c8:	f000 f81c 	bl	8009504 <__sfp>
 80094cc:	60a0      	str	r0, [r4, #8]
 80094ce:	4620      	mov	r0, r4
 80094d0:	f000 f818 	bl	8009504 <__sfp>
 80094d4:	2200      	movs	r2, #0
 80094d6:	60e0      	str	r0, [r4, #12]
 80094d8:	2104      	movs	r1, #4
 80094da:	6860      	ldr	r0, [r4, #4]
 80094dc:	f7ff ff82 	bl	80093e4 <std>
 80094e0:	68a0      	ldr	r0, [r4, #8]
 80094e2:	2201      	movs	r2, #1
 80094e4:	2109      	movs	r1, #9
 80094e6:	f7ff ff7d 	bl	80093e4 <std>
 80094ea:	68e0      	ldr	r0, [r4, #12]
 80094ec:	2202      	movs	r2, #2
 80094ee:	2112      	movs	r1, #18
 80094f0:	f7ff ff78 	bl	80093e4 <std>
 80094f4:	2301      	movs	r3, #1
 80094f6:	61a3      	str	r3, [r4, #24]
 80094f8:	e7d2      	b.n	80094a0 <__sinit+0xc>
 80094fa:	bf00      	nop
 80094fc:	08009cfc 	.word	0x08009cfc
 8009500:	0800942d 	.word	0x0800942d

08009504 <__sfp>:
 8009504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009506:	4607      	mov	r7, r0
 8009508:	f7ff ffac 	bl	8009464 <__sfp_lock_acquire>
 800950c:	4b1e      	ldr	r3, [pc, #120]	; (8009588 <__sfp+0x84>)
 800950e:	681e      	ldr	r6, [r3, #0]
 8009510:	69b3      	ldr	r3, [r6, #24]
 8009512:	b913      	cbnz	r3, 800951a <__sfp+0x16>
 8009514:	4630      	mov	r0, r6
 8009516:	f7ff ffbd 	bl	8009494 <__sinit>
 800951a:	3648      	adds	r6, #72	; 0x48
 800951c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009520:	3b01      	subs	r3, #1
 8009522:	d503      	bpl.n	800952c <__sfp+0x28>
 8009524:	6833      	ldr	r3, [r6, #0]
 8009526:	b30b      	cbz	r3, 800956c <__sfp+0x68>
 8009528:	6836      	ldr	r6, [r6, #0]
 800952a:	e7f7      	b.n	800951c <__sfp+0x18>
 800952c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009530:	b9d5      	cbnz	r5, 8009568 <__sfp+0x64>
 8009532:	4b16      	ldr	r3, [pc, #88]	; (800958c <__sfp+0x88>)
 8009534:	60e3      	str	r3, [r4, #12]
 8009536:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800953a:	6665      	str	r5, [r4, #100]	; 0x64
 800953c:	f000 f847 	bl	80095ce <__retarget_lock_init_recursive>
 8009540:	f7ff ff96 	bl	8009470 <__sfp_lock_release>
 8009544:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009548:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800954c:	6025      	str	r5, [r4, #0]
 800954e:	61a5      	str	r5, [r4, #24]
 8009550:	2208      	movs	r2, #8
 8009552:	4629      	mov	r1, r5
 8009554:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009558:	f7ff f9b4 	bl	80088c4 <memset>
 800955c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009560:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009564:	4620      	mov	r0, r4
 8009566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009568:	3468      	adds	r4, #104	; 0x68
 800956a:	e7d9      	b.n	8009520 <__sfp+0x1c>
 800956c:	2104      	movs	r1, #4
 800956e:	4638      	mov	r0, r7
 8009570:	f7ff ff62 	bl	8009438 <__sfmoreglue>
 8009574:	4604      	mov	r4, r0
 8009576:	6030      	str	r0, [r6, #0]
 8009578:	2800      	cmp	r0, #0
 800957a:	d1d5      	bne.n	8009528 <__sfp+0x24>
 800957c:	f7ff ff78 	bl	8009470 <__sfp_lock_release>
 8009580:	230c      	movs	r3, #12
 8009582:	603b      	str	r3, [r7, #0]
 8009584:	e7ee      	b.n	8009564 <__sfp+0x60>
 8009586:	bf00      	nop
 8009588:	08009cfc 	.word	0x08009cfc
 800958c:	ffff0001 	.word	0xffff0001

08009590 <_fwalk_reent>:
 8009590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009594:	4606      	mov	r6, r0
 8009596:	4688      	mov	r8, r1
 8009598:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800959c:	2700      	movs	r7, #0
 800959e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80095a2:	f1b9 0901 	subs.w	r9, r9, #1
 80095a6:	d505      	bpl.n	80095b4 <_fwalk_reent+0x24>
 80095a8:	6824      	ldr	r4, [r4, #0]
 80095aa:	2c00      	cmp	r4, #0
 80095ac:	d1f7      	bne.n	800959e <_fwalk_reent+0xe>
 80095ae:	4638      	mov	r0, r7
 80095b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095b4:	89ab      	ldrh	r3, [r5, #12]
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d907      	bls.n	80095ca <_fwalk_reent+0x3a>
 80095ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095be:	3301      	adds	r3, #1
 80095c0:	d003      	beq.n	80095ca <_fwalk_reent+0x3a>
 80095c2:	4629      	mov	r1, r5
 80095c4:	4630      	mov	r0, r6
 80095c6:	47c0      	blx	r8
 80095c8:	4307      	orrs	r7, r0
 80095ca:	3568      	adds	r5, #104	; 0x68
 80095cc:	e7e9      	b.n	80095a2 <_fwalk_reent+0x12>

080095ce <__retarget_lock_init_recursive>:
 80095ce:	4770      	bx	lr

080095d0 <__retarget_lock_acquire_recursive>:
 80095d0:	4770      	bx	lr

080095d2 <__retarget_lock_release_recursive>:
 80095d2:	4770      	bx	lr

080095d4 <__swhatbuf_r>:
 80095d4:	b570      	push	{r4, r5, r6, lr}
 80095d6:	460e      	mov	r6, r1
 80095d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095dc:	2900      	cmp	r1, #0
 80095de:	b096      	sub	sp, #88	; 0x58
 80095e0:	4614      	mov	r4, r2
 80095e2:	461d      	mov	r5, r3
 80095e4:	da08      	bge.n	80095f8 <__swhatbuf_r+0x24>
 80095e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80095ea:	2200      	movs	r2, #0
 80095ec:	602a      	str	r2, [r5, #0]
 80095ee:	061a      	lsls	r2, r3, #24
 80095f0:	d410      	bmi.n	8009614 <__swhatbuf_r+0x40>
 80095f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095f6:	e00e      	b.n	8009616 <__swhatbuf_r+0x42>
 80095f8:	466a      	mov	r2, sp
 80095fa:	f000 fab9 	bl	8009b70 <_fstat_r>
 80095fe:	2800      	cmp	r0, #0
 8009600:	dbf1      	blt.n	80095e6 <__swhatbuf_r+0x12>
 8009602:	9a01      	ldr	r2, [sp, #4]
 8009604:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009608:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800960c:	425a      	negs	r2, r3
 800960e:	415a      	adcs	r2, r3
 8009610:	602a      	str	r2, [r5, #0]
 8009612:	e7ee      	b.n	80095f2 <__swhatbuf_r+0x1e>
 8009614:	2340      	movs	r3, #64	; 0x40
 8009616:	2000      	movs	r0, #0
 8009618:	6023      	str	r3, [r4, #0]
 800961a:	b016      	add	sp, #88	; 0x58
 800961c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009620 <__smakebuf_r>:
 8009620:	898b      	ldrh	r3, [r1, #12]
 8009622:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009624:	079d      	lsls	r5, r3, #30
 8009626:	4606      	mov	r6, r0
 8009628:	460c      	mov	r4, r1
 800962a:	d507      	bpl.n	800963c <__smakebuf_r+0x1c>
 800962c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009630:	6023      	str	r3, [r4, #0]
 8009632:	6123      	str	r3, [r4, #16]
 8009634:	2301      	movs	r3, #1
 8009636:	6163      	str	r3, [r4, #20]
 8009638:	b002      	add	sp, #8
 800963a:	bd70      	pop	{r4, r5, r6, pc}
 800963c:	ab01      	add	r3, sp, #4
 800963e:	466a      	mov	r2, sp
 8009640:	f7ff ffc8 	bl	80095d4 <__swhatbuf_r>
 8009644:	9900      	ldr	r1, [sp, #0]
 8009646:	4605      	mov	r5, r0
 8009648:	4630      	mov	r0, r6
 800964a:	f7ff f9af 	bl	80089ac <_malloc_r>
 800964e:	b948      	cbnz	r0, 8009664 <__smakebuf_r+0x44>
 8009650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009654:	059a      	lsls	r2, r3, #22
 8009656:	d4ef      	bmi.n	8009638 <__smakebuf_r+0x18>
 8009658:	f023 0303 	bic.w	r3, r3, #3
 800965c:	f043 0302 	orr.w	r3, r3, #2
 8009660:	81a3      	strh	r3, [r4, #12]
 8009662:	e7e3      	b.n	800962c <__smakebuf_r+0xc>
 8009664:	4b0d      	ldr	r3, [pc, #52]	; (800969c <__smakebuf_r+0x7c>)
 8009666:	62b3      	str	r3, [r6, #40]	; 0x28
 8009668:	89a3      	ldrh	r3, [r4, #12]
 800966a:	6020      	str	r0, [r4, #0]
 800966c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009670:	81a3      	strh	r3, [r4, #12]
 8009672:	9b00      	ldr	r3, [sp, #0]
 8009674:	6163      	str	r3, [r4, #20]
 8009676:	9b01      	ldr	r3, [sp, #4]
 8009678:	6120      	str	r0, [r4, #16]
 800967a:	b15b      	cbz	r3, 8009694 <__smakebuf_r+0x74>
 800967c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009680:	4630      	mov	r0, r6
 8009682:	f000 fa87 	bl	8009b94 <_isatty_r>
 8009686:	b128      	cbz	r0, 8009694 <__smakebuf_r+0x74>
 8009688:	89a3      	ldrh	r3, [r4, #12]
 800968a:	f023 0303 	bic.w	r3, r3, #3
 800968e:	f043 0301 	orr.w	r3, r3, #1
 8009692:	81a3      	strh	r3, [r4, #12]
 8009694:	89a0      	ldrh	r0, [r4, #12]
 8009696:	4305      	orrs	r5, r0
 8009698:	81a5      	strh	r5, [r4, #12]
 800969a:	e7cd      	b.n	8009638 <__smakebuf_r+0x18>
 800969c:	0800942d 	.word	0x0800942d

080096a0 <memcpy>:
 80096a0:	440a      	add	r2, r1
 80096a2:	4291      	cmp	r1, r2
 80096a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80096a8:	d100      	bne.n	80096ac <memcpy+0xc>
 80096aa:	4770      	bx	lr
 80096ac:	b510      	push	{r4, lr}
 80096ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096b6:	4291      	cmp	r1, r2
 80096b8:	d1f9      	bne.n	80096ae <memcpy+0xe>
 80096ba:	bd10      	pop	{r4, pc}

080096bc <memmove>:
 80096bc:	4288      	cmp	r0, r1
 80096be:	b510      	push	{r4, lr}
 80096c0:	eb01 0402 	add.w	r4, r1, r2
 80096c4:	d902      	bls.n	80096cc <memmove+0x10>
 80096c6:	4284      	cmp	r4, r0
 80096c8:	4623      	mov	r3, r4
 80096ca:	d807      	bhi.n	80096dc <memmove+0x20>
 80096cc:	1e43      	subs	r3, r0, #1
 80096ce:	42a1      	cmp	r1, r4
 80096d0:	d008      	beq.n	80096e4 <memmove+0x28>
 80096d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096da:	e7f8      	b.n	80096ce <memmove+0x12>
 80096dc:	4402      	add	r2, r0
 80096de:	4601      	mov	r1, r0
 80096e0:	428a      	cmp	r2, r1
 80096e2:	d100      	bne.n	80096e6 <memmove+0x2a>
 80096e4:	bd10      	pop	{r4, pc}
 80096e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80096ee:	e7f7      	b.n	80096e0 <memmove+0x24>

080096f0 <__malloc_lock>:
 80096f0:	4801      	ldr	r0, [pc, #4]	; (80096f8 <__malloc_lock+0x8>)
 80096f2:	f7ff bf6d 	b.w	80095d0 <__retarget_lock_acquire_recursive>
 80096f6:	bf00      	nop
 80096f8:	20000cbc 	.word	0x20000cbc

080096fc <__malloc_unlock>:
 80096fc:	4801      	ldr	r0, [pc, #4]	; (8009704 <__malloc_unlock+0x8>)
 80096fe:	f7ff bf68 	b.w	80095d2 <__retarget_lock_release_recursive>
 8009702:	bf00      	nop
 8009704:	20000cbc 	.word	0x20000cbc

08009708 <_realloc_r>:
 8009708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800970c:	4680      	mov	r8, r0
 800970e:	4614      	mov	r4, r2
 8009710:	460e      	mov	r6, r1
 8009712:	b921      	cbnz	r1, 800971e <_realloc_r+0x16>
 8009714:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009718:	4611      	mov	r1, r2
 800971a:	f7ff b947 	b.w	80089ac <_malloc_r>
 800971e:	b92a      	cbnz	r2, 800972c <_realloc_r+0x24>
 8009720:	f7ff f8d8 	bl	80088d4 <_free_r>
 8009724:	4625      	mov	r5, r4
 8009726:	4628      	mov	r0, r5
 8009728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800972c:	f000 fa54 	bl	8009bd8 <_malloc_usable_size_r>
 8009730:	4284      	cmp	r4, r0
 8009732:	4607      	mov	r7, r0
 8009734:	d802      	bhi.n	800973c <_realloc_r+0x34>
 8009736:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800973a:	d812      	bhi.n	8009762 <_realloc_r+0x5a>
 800973c:	4621      	mov	r1, r4
 800973e:	4640      	mov	r0, r8
 8009740:	f7ff f934 	bl	80089ac <_malloc_r>
 8009744:	4605      	mov	r5, r0
 8009746:	2800      	cmp	r0, #0
 8009748:	d0ed      	beq.n	8009726 <_realloc_r+0x1e>
 800974a:	42bc      	cmp	r4, r7
 800974c:	4622      	mov	r2, r4
 800974e:	4631      	mov	r1, r6
 8009750:	bf28      	it	cs
 8009752:	463a      	movcs	r2, r7
 8009754:	f7ff ffa4 	bl	80096a0 <memcpy>
 8009758:	4631      	mov	r1, r6
 800975a:	4640      	mov	r0, r8
 800975c:	f7ff f8ba 	bl	80088d4 <_free_r>
 8009760:	e7e1      	b.n	8009726 <_realloc_r+0x1e>
 8009762:	4635      	mov	r5, r6
 8009764:	e7df      	b.n	8009726 <_realloc_r+0x1e>

08009766 <__ssputs_r>:
 8009766:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800976a:	688e      	ldr	r6, [r1, #8]
 800976c:	429e      	cmp	r6, r3
 800976e:	4682      	mov	sl, r0
 8009770:	460c      	mov	r4, r1
 8009772:	4690      	mov	r8, r2
 8009774:	461f      	mov	r7, r3
 8009776:	d838      	bhi.n	80097ea <__ssputs_r+0x84>
 8009778:	898a      	ldrh	r2, [r1, #12]
 800977a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800977e:	d032      	beq.n	80097e6 <__ssputs_r+0x80>
 8009780:	6825      	ldr	r5, [r4, #0]
 8009782:	6909      	ldr	r1, [r1, #16]
 8009784:	eba5 0901 	sub.w	r9, r5, r1
 8009788:	6965      	ldr	r5, [r4, #20]
 800978a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800978e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009792:	3301      	adds	r3, #1
 8009794:	444b      	add	r3, r9
 8009796:	106d      	asrs	r5, r5, #1
 8009798:	429d      	cmp	r5, r3
 800979a:	bf38      	it	cc
 800979c:	461d      	movcc	r5, r3
 800979e:	0553      	lsls	r3, r2, #21
 80097a0:	d531      	bpl.n	8009806 <__ssputs_r+0xa0>
 80097a2:	4629      	mov	r1, r5
 80097a4:	f7ff f902 	bl	80089ac <_malloc_r>
 80097a8:	4606      	mov	r6, r0
 80097aa:	b950      	cbnz	r0, 80097c2 <__ssputs_r+0x5c>
 80097ac:	230c      	movs	r3, #12
 80097ae:	f8ca 3000 	str.w	r3, [sl]
 80097b2:	89a3      	ldrh	r3, [r4, #12]
 80097b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097b8:	81a3      	strh	r3, [r4, #12]
 80097ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097c2:	6921      	ldr	r1, [r4, #16]
 80097c4:	464a      	mov	r2, r9
 80097c6:	f7ff ff6b 	bl	80096a0 <memcpy>
 80097ca:	89a3      	ldrh	r3, [r4, #12]
 80097cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097d4:	81a3      	strh	r3, [r4, #12]
 80097d6:	6126      	str	r6, [r4, #16]
 80097d8:	6165      	str	r5, [r4, #20]
 80097da:	444e      	add	r6, r9
 80097dc:	eba5 0509 	sub.w	r5, r5, r9
 80097e0:	6026      	str	r6, [r4, #0]
 80097e2:	60a5      	str	r5, [r4, #8]
 80097e4:	463e      	mov	r6, r7
 80097e6:	42be      	cmp	r6, r7
 80097e8:	d900      	bls.n	80097ec <__ssputs_r+0x86>
 80097ea:	463e      	mov	r6, r7
 80097ec:	6820      	ldr	r0, [r4, #0]
 80097ee:	4632      	mov	r2, r6
 80097f0:	4641      	mov	r1, r8
 80097f2:	f7ff ff63 	bl	80096bc <memmove>
 80097f6:	68a3      	ldr	r3, [r4, #8]
 80097f8:	1b9b      	subs	r3, r3, r6
 80097fa:	60a3      	str	r3, [r4, #8]
 80097fc:	6823      	ldr	r3, [r4, #0]
 80097fe:	4433      	add	r3, r6
 8009800:	6023      	str	r3, [r4, #0]
 8009802:	2000      	movs	r0, #0
 8009804:	e7db      	b.n	80097be <__ssputs_r+0x58>
 8009806:	462a      	mov	r2, r5
 8009808:	f7ff ff7e 	bl	8009708 <_realloc_r>
 800980c:	4606      	mov	r6, r0
 800980e:	2800      	cmp	r0, #0
 8009810:	d1e1      	bne.n	80097d6 <__ssputs_r+0x70>
 8009812:	6921      	ldr	r1, [r4, #16]
 8009814:	4650      	mov	r0, sl
 8009816:	f7ff f85d 	bl	80088d4 <_free_r>
 800981a:	e7c7      	b.n	80097ac <__ssputs_r+0x46>

0800981c <_svfiprintf_r>:
 800981c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009820:	4698      	mov	r8, r3
 8009822:	898b      	ldrh	r3, [r1, #12]
 8009824:	061b      	lsls	r3, r3, #24
 8009826:	b09d      	sub	sp, #116	; 0x74
 8009828:	4607      	mov	r7, r0
 800982a:	460d      	mov	r5, r1
 800982c:	4614      	mov	r4, r2
 800982e:	d50e      	bpl.n	800984e <_svfiprintf_r+0x32>
 8009830:	690b      	ldr	r3, [r1, #16]
 8009832:	b963      	cbnz	r3, 800984e <_svfiprintf_r+0x32>
 8009834:	2140      	movs	r1, #64	; 0x40
 8009836:	f7ff f8b9 	bl	80089ac <_malloc_r>
 800983a:	6028      	str	r0, [r5, #0]
 800983c:	6128      	str	r0, [r5, #16]
 800983e:	b920      	cbnz	r0, 800984a <_svfiprintf_r+0x2e>
 8009840:	230c      	movs	r3, #12
 8009842:	603b      	str	r3, [r7, #0]
 8009844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009848:	e0d1      	b.n	80099ee <_svfiprintf_r+0x1d2>
 800984a:	2340      	movs	r3, #64	; 0x40
 800984c:	616b      	str	r3, [r5, #20]
 800984e:	2300      	movs	r3, #0
 8009850:	9309      	str	r3, [sp, #36]	; 0x24
 8009852:	2320      	movs	r3, #32
 8009854:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009858:	f8cd 800c 	str.w	r8, [sp, #12]
 800985c:	2330      	movs	r3, #48	; 0x30
 800985e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009a08 <_svfiprintf_r+0x1ec>
 8009862:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009866:	f04f 0901 	mov.w	r9, #1
 800986a:	4623      	mov	r3, r4
 800986c:	469a      	mov	sl, r3
 800986e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009872:	b10a      	cbz	r2, 8009878 <_svfiprintf_r+0x5c>
 8009874:	2a25      	cmp	r2, #37	; 0x25
 8009876:	d1f9      	bne.n	800986c <_svfiprintf_r+0x50>
 8009878:	ebba 0b04 	subs.w	fp, sl, r4
 800987c:	d00b      	beq.n	8009896 <_svfiprintf_r+0x7a>
 800987e:	465b      	mov	r3, fp
 8009880:	4622      	mov	r2, r4
 8009882:	4629      	mov	r1, r5
 8009884:	4638      	mov	r0, r7
 8009886:	f7ff ff6e 	bl	8009766 <__ssputs_r>
 800988a:	3001      	adds	r0, #1
 800988c:	f000 80aa 	beq.w	80099e4 <_svfiprintf_r+0x1c8>
 8009890:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009892:	445a      	add	r2, fp
 8009894:	9209      	str	r2, [sp, #36]	; 0x24
 8009896:	f89a 3000 	ldrb.w	r3, [sl]
 800989a:	2b00      	cmp	r3, #0
 800989c:	f000 80a2 	beq.w	80099e4 <_svfiprintf_r+0x1c8>
 80098a0:	2300      	movs	r3, #0
 80098a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098aa:	f10a 0a01 	add.w	sl, sl, #1
 80098ae:	9304      	str	r3, [sp, #16]
 80098b0:	9307      	str	r3, [sp, #28]
 80098b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098b6:	931a      	str	r3, [sp, #104]	; 0x68
 80098b8:	4654      	mov	r4, sl
 80098ba:	2205      	movs	r2, #5
 80098bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098c0:	4851      	ldr	r0, [pc, #324]	; (8009a08 <_svfiprintf_r+0x1ec>)
 80098c2:	f7f6 fc8d 	bl	80001e0 <memchr>
 80098c6:	9a04      	ldr	r2, [sp, #16]
 80098c8:	b9d8      	cbnz	r0, 8009902 <_svfiprintf_r+0xe6>
 80098ca:	06d0      	lsls	r0, r2, #27
 80098cc:	bf44      	itt	mi
 80098ce:	2320      	movmi	r3, #32
 80098d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098d4:	0711      	lsls	r1, r2, #28
 80098d6:	bf44      	itt	mi
 80098d8:	232b      	movmi	r3, #43	; 0x2b
 80098da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098de:	f89a 3000 	ldrb.w	r3, [sl]
 80098e2:	2b2a      	cmp	r3, #42	; 0x2a
 80098e4:	d015      	beq.n	8009912 <_svfiprintf_r+0xf6>
 80098e6:	9a07      	ldr	r2, [sp, #28]
 80098e8:	4654      	mov	r4, sl
 80098ea:	2000      	movs	r0, #0
 80098ec:	f04f 0c0a 	mov.w	ip, #10
 80098f0:	4621      	mov	r1, r4
 80098f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098f6:	3b30      	subs	r3, #48	; 0x30
 80098f8:	2b09      	cmp	r3, #9
 80098fa:	d94e      	bls.n	800999a <_svfiprintf_r+0x17e>
 80098fc:	b1b0      	cbz	r0, 800992c <_svfiprintf_r+0x110>
 80098fe:	9207      	str	r2, [sp, #28]
 8009900:	e014      	b.n	800992c <_svfiprintf_r+0x110>
 8009902:	eba0 0308 	sub.w	r3, r0, r8
 8009906:	fa09 f303 	lsl.w	r3, r9, r3
 800990a:	4313      	orrs	r3, r2
 800990c:	9304      	str	r3, [sp, #16]
 800990e:	46a2      	mov	sl, r4
 8009910:	e7d2      	b.n	80098b8 <_svfiprintf_r+0x9c>
 8009912:	9b03      	ldr	r3, [sp, #12]
 8009914:	1d19      	adds	r1, r3, #4
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	9103      	str	r1, [sp, #12]
 800991a:	2b00      	cmp	r3, #0
 800991c:	bfbb      	ittet	lt
 800991e:	425b      	neglt	r3, r3
 8009920:	f042 0202 	orrlt.w	r2, r2, #2
 8009924:	9307      	strge	r3, [sp, #28]
 8009926:	9307      	strlt	r3, [sp, #28]
 8009928:	bfb8      	it	lt
 800992a:	9204      	strlt	r2, [sp, #16]
 800992c:	7823      	ldrb	r3, [r4, #0]
 800992e:	2b2e      	cmp	r3, #46	; 0x2e
 8009930:	d10c      	bne.n	800994c <_svfiprintf_r+0x130>
 8009932:	7863      	ldrb	r3, [r4, #1]
 8009934:	2b2a      	cmp	r3, #42	; 0x2a
 8009936:	d135      	bne.n	80099a4 <_svfiprintf_r+0x188>
 8009938:	9b03      	ldr	r3, [sp, #12]
 800993a:	1d1a      	adds	r2, r3, #4
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	9203      	str	r2, [sp, #12]
 8009940:	2b00      	cmp	r3, #0
 8009942:	bfb8      	it	lt
 8009944:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009948:	3402      	adds	r4, #2
 800994a:	9305      	str	r3, [sp, #20]
 800994c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009a18 <_svfiprintf_r+0x1fc>
 8009950:	7821      	ldrb	r1, [r4, #0]
 8009952:	2203      	movs	r2, #3
 8009954:	4650      	mov	r0, sl
 8009956:	f7f6 fc43 	bl	80001e0 <memchr>
 800995a:	b140      	cbz	r0, 800996e <_svfiprintf_r+0x152>
 800995c:	2340      	movs	r3, #64	; 0x40
 800995e:	eba0 000a 	sub.w	r0, r0, sl
 8009962:	fa03 f000 	lsl.w	r0, r3, r0
 8009966:	9b04      	ldr	r3, [sp, #16]
 8009968:	4303      	orrs	r3, r0
 800996a:	3401      	adds	r4, #1
 800996c:	9304      	str	r3, [sp, #16]
 800996e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009972:	4826      	ldr	r0, [pc, #152]	; (8009a0c <_svfiprintf_r+0x1f0>)
 8009974:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009978:	2206      	movs	r2, #6
 800997a:	f7f6 fc31 	bl	80001e0 <memchr>
 800997e:	2800      	cmp	r0, #0
 8009980:	d038      	beq.n	80099f4 <_svfiprintf_r+0x1d8>
 8009982:	4b23      	ldr	r3, [pc, #140]	; (8009a10 <_svfiprintf_r+0x1f4>)
 8009984:	bb1b      	cbnz	r3, 80099ce <_svfiprintf_r+0x1b2>
 8009986:	9b03      	ldr	r3, [sp, #12]
 8009988:	3307      	adds	r3, #7
 800998a:	f023 0307 	bic.w	r3, r3, #7
 800998e:	3308      	adds	r3, #8
 8009990:	9303      	str	r3, [sp, #12]
 8009992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009994:	4433      	add	r3, r6
 8009996:	9309      	str	r3, [sp, #36]	; 0x24
 8009998:	e767      	b.n	800986a <_svfiprintf_r+0x4e>
 800999a:	fb0c 3202 	mla	r2, ip, r2, r3
 800999e:	460c      	mov	r4, r1
 80099a0:	2001      	movs	r0, #1
 80099a2:	e7a5      	b.n	80098f0 <_svfiprintf_r+0xd4>
 80099a4:	2300      	movs	r3, #0
 80099a6:	3401      	adds	r4, #1
 80099a8:	9305      	str	r3, [sp, #20]
 80099aa:	4619      	mov	r1, r3
 80099ac:	f04f 0c0a 	mov.w	ip, #10
 80099b0:	4620      	mov	r0, r4
 80099b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099b6:	3a30      	subs	r2, #48	; 0x30
 80099b8:	2a09      	cmp	r2, #9
 80099ba:	d903      	bls.n	80099c4 <_svfiprintf_r+0x1a8>
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d0c5      	beq.n	800994c <_svfiprintf_r+0x130>
 80099c0:	9105      	str	r1, [sp, #20]
 80099c2:	e7c3      	b.n	800994c <_svfiprintf_r+0x130>
 80099c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80099c8:	4604      	mov	r4, r0
 80099ca:	2301      	movs	r3, #1
 80099cc:	e7f0      	b.n	80099b0 <_svfiprintf_r+0x194>
 80099ce:	ab03      	add	r3, sp, #12
 80099d0:	9300      	str	r3, [sp, #0]
 80099d2:	462a      	mov	r2, r5
 80099d4:	4b0f      	ldr	r3, [pc, #60]	; (8009a14 <_svfiprintf_r+0x1f8>)
 80099d6:	a904      	add	r1, sp, #16
 80099d8:	4638      	mov	r0, r7
 80099da:	f3af 8000 	nop.w
 80099de:	1c42      	adds	r2, r0, #1
 80099e0:	4606      	mov	r6, r0
 80099e2:	d1d6      	bne.n	8009992 <_svfiprintf_r+0x176>
 80099e4:	89ab      	ldrh	r3, [r5, #12]
 80099e6:	065b      	lsls	r3, r3, #25
 80099e8:	f53f af2c 	bmi.w	8009844 <_svfiprintf_r+0x28>
 80099ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099ee:	b01d      	add	sp, #116	; 0x74
 80099f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099f4:	ab03      	add	r3, sp, #12
 80099f6:	9300      	str	r3, [sp, #0]
 80099f8:	462a      	mov	r2, r5
 80099fa:	4b06      	ldr	r3, [pc, #24]	; (8009a14 <_svfiprintf_r+0x1f8>)
 80099fc:	a904      	add	r1, sp, #16
 80099fe:	4638      	mov	r0, r7
 8009a00:	f7ff fa10 	bl	8008e24 <_printf_i>
 8009a04:	e7eb      	b.n	80099de <_svfiprintf_r+0x1c2>
 8009a06:	bf00      	nop
 8009a08:	08009d00 	.word	0x08009d00
 8009a0c:	08009d0a 	.word	0x08009d0a
 8009a10:	00000000 	.word	0x00000000
 8009a14:	08009767 	.word	0x08009767
 8009a18:	08009d06 	.word	0x08009d06

08009a1c <_raise_r>:
 8009a1c:	291f      	cmp	r1, #31
 8009a1e:	b538      	push	{r3, r4, r5, lr}
 8009a20:	4604      	mov	r4, r0
 8009a22:	460d      	mov	r5, r1
 8009a24:	d904      	bls.n	8009a30 <_raise_r+0x14>
 8009a26:	2316      	movs	r3, #22
 8009a28:	6003      	str	r3, [r0, #0]
 8009a2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a2e:	bd38      	pop	{r3, r4, r5, pc}
 8009a30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009a32:	b112      	cbz	r2, 8009a3a <_raise_r+0x1e>
 8009a34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a38:	b94b      	cbnz	r3, 8009a4e <_raise_r+0x32>
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	f000 f830 	bl	8009aa0 <_getpid_r>
 8009a40:	462a      	mov	r2, r5
 8009a42:	4601      	mov	r1, r0
 8009a44:	4620      	mov	r0, r4
 8009a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a4a:	f000 b817 	b.w	8009a7c <_kill_r>
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d00a      	beq.n	8009a68 <_raise_r+0x4c>
 8009a52:	1c59      	adds	r1, r3, #1
 8009a54:	d103      	bne.n	8009a5e <_raise_r+0x42>
 8009a56:	2316      	movs	r3, #22
 8009a58:	6003      	str	r3, [r0, #0]
 8009a5a:	2001      	movs	r0, #1
 8009a5c:	e7e7      	b.n	8009a2e <_raise_r+0x12>
 8009a5e:	2400      	movs	r4, #0
 8009a60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009a64:	4628      	mov	r0, r5
 8009a66:	4798      	blx	r3
 8009a68:	2000      	movs	r0, #0
 8009a6a:	e7e0      	b.n	8009a2e <_raise_r+0x12>

08009a6c <raise>:
 8009a6c:	4b02      	ldr	r3, [pc, #8]	; (8009a78 <raise+0xc>)
 8009a6e:	4601      	mov	r1, r0
 8009a70:	6818      	ldr	r0, [r3, #0]
 8009a72:	f7ff bfd3 	b.w	8009a1c <_raise_r>
 8009a76:	bf00      	nop
 8009a78:	2000002c 	.word	0x2000002c

08009a7c <_kill_r>:
 8009a7c:	b538      	push	{r3, r4, r5, lr}
 8009a7e:	4d07      	ldr	r5, [pc, #28]	; (8009a9c <_kill_r+0x20>)
 8009a80:	2300      	movs	r3, #0
 8009a82:	4604      	mov	r4, r0
 8009a84:	4608      	mov	r0, r1
 8009a86:	4611      	mov	r1, r2
 8009a88:	602b      	str	r3, [r5, #0]
 8009a8a:	f7f7 f931 	bl	8000cf0 <_kill>
 8009a8e:	1c43      	adds	r3, r0, #1
 8009a90:	d102      	bne.n	8009a98 <_kill_r+0x1c>
 8009a92:	682b      	ldr	r3, [r5, #0]
 8009a94:	b103      	cbz	r3, 8009a98 <_kill_r+0x1c>
 8009a96:	6023      	str	r3, [r4, #0]
 8009a98:	bd38      	pop	{r3, r4, r5, pc}
 8009a9a:	bf00      	nop
 8009a9c:	20000cc0 	.word	0x20000cc0

08009aa0 <_getpid_r>:
 8009aa0:	f7f7 b91e 	b.w	8000ce0 <_getpid>

08009aa4 <__sread>:
 8009aa4:	b510      	push	{r4, lr}
 8009aa6:	460c      	mov	r4, r1
 8009aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aac:	f000 f89c 	bl	8009be8 <_read_r>
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	bfab      	itete	ge
 8009ab4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ab6:	89a3      	ldrhlt	r3, [r4, #12]
 8009ab8:	181b      	addge	r3, r3, r0
 8009aba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009abe:	bfac      	ite	ge
 8009ac0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009ac2:	81a3      	strhlt	r3, [r4, #12]
 8009ac4:	bd10      	pop	{r4, pc}

08009ac6 <__swrite>:
 8009ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aca:	461f      	mov	r7, r3
 8009acc:	898b      	ldrh	r3, [r1, #12]
 8009ace:	05db      	lsls	r3, r3, #23
 8009ad0:	4605      	mov	r5, r0
 8009ad2:	460c      	mov	r4, r1
 8009ad4:	4616      	mov	r6, r2
 8009ad6:	d505      	bpl.n	8009ae4 <__swrite+0x1e>
 8009ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009adc:	2302      	movs	r3, #2
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f000 f868 	bl	8009bb4 <_lseek_r>
 8009ae4:	89a3      	ldrh	r3, [r4, #12]
 8009ae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009aea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009aee:	81a3      	strh	r3, [r4, #12]
 8009af0:	4632      	mov	r2, r6
 8009af2:	463b      	mov	r3, r7
 8009af4:	4628      	mov	r0, r5
 8009af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009afa:	f000 b817 	b.w	8009b2c <_write_r>

08009afe <__sseek>:
 8009afe:	b510      	push	{r4, lr}
 8009b00:	460c      	mov	r4, r1
 8009b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b06:	f000 f855 	bl	8009bb4 <_lseek_r>
 8009b0a:	1c43      	adds	r3, r0, #1
 8009b0c:	89a3      	ldrh	r3, [r4, #12]
 8009b0e:	bf15      	itete	ne
 8009b10:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b1a:	81a3      	strheq	r3, [r4, #12]
 8009b1c:	bf18      	it	ne
 8009b1e:	81a3      	strhne	r3, [r4, #12]
 8009b20:	bd10      	pop	{r4, pc}

08009b22 <__sclose>:
 8009b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b26:	f000 b813 	b.w	8009b50 <_close_r>
	...

08009b2c <_write_r>:
 8009b2c:	b538      	push	{r3, r4, r5, lr}
 8009b2e:	4d07      	ldr	r5, [pc, #28]	; (8009b4c <_write_r+0x20>)
 8009b30:	4604      	mov	r4, r0
 8009b32:	4608      	mov	r0, r1
 8009b34:	4611      	mov	r1, r2
 8009b36:	2200      	movs	r2, #0
 8009b38:	602a      	str	r2, [r5, #0]
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	f7f7 f90f 	bl	8000d5e <_write>
 8009b40:	1c43      	adds	r3, r0, #1
 8009b42:	d102      	bne.n	8009b4a <_write_r+0x1e>
 8009b44:	682b      	ldr	r3, [r5, #0]
 8009b46:	b103      	cbz	r3, 8009b4a <_write_r+0x1e>
 8009b48:	6023      	str	r3, [r4, #0]
 8009b4a:	bd38      	pop	{r3, r4, r5, pc}
 8009b4c:	20000cc0 	.word	0x20000cc0

08009b50 <_close_r>:
 8009b50:	b538      	push	{r3, r4, r5, lr}
 8009b52:	4d06      	ldr	r5, [pc, #24]	; (8009b6c <_close_r+0x1c>)
 8009b54:	2300      	movs	r3, #0
 8009b56:	4604      	mov	r4, r0
 8009b58:	4608      	mov	r0, r1
 8009b5a:	602b      	str	r3, [r5, #0]
 8009b5c:	f7f7 f91b 	bl	8000d96 <_close>
 8009b60:	1c43      	adds	r3, r0, #1
 8009b62:	d102      	bne.n	8009b6a <_close_r+0x1a>
 8009b64:	682b      	ldr	r3, [r5, #0]
 8009b66:	b103      	cbz	r3, 8009b6a <_close_r+0x1a>
 8009b68:	6023      	str	r3, [r4, #0]
 8009b6a:	bd38      	pop	{r3, r4, r5, pc}
 8009b6c:	20000cc0 	.word	0x20000cc0

08009b70 <_fstat_r>:
 8009b70:	b538      	push	{r3, r4, r5, lr}
 8009b72:	4d07      	ldr	r5, [pc, #28]	; (8009b90 <_fstat_r+0x20>)
 8009b74:	2300      	movs	r3, #0
 8009b76:	4604      	mov	r4, r0
 8009b78:	4608      	mov	r0, r1
 8009b7a:	4611      	mov	r1, r2
 8009b7c:	602b      	str	r3, [r5, #0]
 8009b7e:	f7f7 f916 	bl	8000dae <_fstat>
 8009b82:	1c43      	adds	r3, r0, #1
 8009b84:	d102      	bne.n	8009b8c <_fstat_r+0x1c>
 8009b86:	682b      	ldr	r3, [r5, #0]
 8009b88:	b103      	cbz	r3, 8009b8c <_fstat_r+0x1c>
 8009b8a:	6023      	str	r3, [r4, #0]
 8009b8c:	bd38      	pop	{r3, r4, r5, pc}
 8009b8e:	bf00      	nop
 8009b90:	20000cc0 	.word	0x20000cc0

08009b94 <_isatty_r>:
 8009b94:	b538      	push	{r3, r4, r5, lr}
 8009b96:	4d06      	ldr	r5, [pc, #24]	; (8009bb0 <_isatty_r+0x1c>)
 8009b98:	2300      	movs	r3, #0
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	4608      	mov	r0, r1
 8009b9e:	602b      	str	r3, [r5, #0]
 8009ba0:	f7f7 f915 	bl	8000dce <_isatty>
 8009ba4:	1c43      	adds	r3, r0, #1
 8009ba6:	d102      	bne.n	8009bae <_isatty_r+0x1a>
 8009ba8:	682b      	ldr	r3, [r5, #0]
 8009baa:	b103      	cbz	r3, 8009bae <_isatty_r+0x1a>
 8009bac:	6023      	str	r3, [r4, #0]
 8009bae:	bd38      	pop	{r3, r4, r5, pc}
 8009bb0:	20000cc0 	.word	0x20000cc0

08009bb4 <_lseek_r>:
 8009bb4:	b538      	push	{r3, r4, r5, lr}
 8009bb6:	4d07      	ldr	r5, [pc, #28]	; (8009bd4 <_lseek_r+0x20>)
 8009bb8:	4604      	mov	r4, r0
 8009bba:	4608      	mov	r0, r1
 8009bbc:	4611      	mov	r1, r2
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	602a      	str	r2, [r5, #0]
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	f7f7 f90e 	bl	8000de4 <_lseek>
 8009bc8:	1c43      	adds	r3, r0, #1
 8009bca:	d102      	bne.n	8009bd2 <_lseek_r+0x1e>
 8009bcc:	682b      	ldr	r3, [r5, #0]
 8009bce:	b103      	cbz	r3, 8009bd2 <_lseek_r+0x1e>
 8009bd0:	6023      	str	r3, [r4, #0]
 8009bd2:	bd38      	pop	{r3, r4, r5, pc}
 8009bd4:	20000cc0 	.word	0x20000cc0

08009bd8 <_malloc_usable_size_r>:
 8009bd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bdc:	1f18      	subs	r0, r3, #4
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	bfbc      	itt	lt
 8009be2:	580b      	ldrlt	r3, [r1, r0]
 8009be4:	18c0      	addlt	r0, r0, r3
 8009be6:	4770      	bx	lr

08009be8 <_read_r>:
 8009be8:	b538      	push	{r3, r4, r5, lr}
 8009bea:	4d07      	ldr	r5, [pc, #28]	; (8009c08 <_read_r+0x20>)
 8009bec:	4604      	mov	r4, r0
 8009bee:	4608      	mov	r0, r1
 8009bf0:	4611      	mov	r1, r2
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	602a      	str	r2, [r5, #0]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	f7f7 f894 	bl	8000d24 <_read>
 8009bfc:	1c43      	adds	r3, r0, #1
 8009bfe:	d102      	bne.n	8009c06 <_read_r+0x1e>
 8009c00:	682b      	ldr	r3, [r5, #0]
 8009c02:	b103      	cbz	r3, 8009c06 <_read_r+0x1e>
 8009c04:	6023      	str	r3, [r4, #0]
 8009c06:	bd38      	pop	{r3, r4, r5, pc}
 8009c08:	20000cc0 	.word	0x20000cc0

08009c0c <_init>:
 8009c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c0e:	bf00      	nop
 8009c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c12:	bc08      	pop	{r3}
 8009c14:	469e      	mov	lr, r3
 8009c16:	4770      	bx	lr

08009c18 <_fini>:
 8009c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c1a:	bf00      	nop
 8009c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c1e:	bc08      	pop	{r3}
 8009c20:	469e      	mov	lr, r3
 8009c22:	4770      	bx	lr
